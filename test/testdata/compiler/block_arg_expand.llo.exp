; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %union.pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.3, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %union.pthread_mutex_t, i64, i64, i64, i64, i64, i32, %struct.st_table*, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.rb_builtin_function*, i32, %struct.anon.4, [29 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %union.pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32 }
%union.pthread_cond_t = type { %struct.anon.2 }
%struct.anon.2 = type { i32, i32, i64, i64, i64, i8*, i32, i32 }
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, i64, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %union.pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.8, i32, i64, %struct.rb_fiber_struct*, [5 x i8*], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.5 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.12 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_data*, %struct.anon.11, i32, i32, i32, i32, i32, i8, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*)*, i64, %struct.rb_mjit_unit*, i64 }
%struct.anon = type { %struct.anon.0, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.0 = type { i16, [2 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.iseq_insn_info_entry*, i32*, i32, %struct.succ_index_table* }
%struct.iseq_insn_info_entry = type opaque
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, i64 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.rb_scope_visi_struct }
%struct.rb_scope_visi_struct = type { i8, [3 x i8] }
%struct.rb_call_data = type { %struct.rb_call_cache, %struct.rb_call_info }
%struct.rb_call_cache = type { i64, [3 x i64], %struct.rb_callable_method_entry_struct*, i64, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_data*)*, %union.anon.15 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon, i64, i64 }
%union.anon = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64, i32, i64*, i64 (...)*)*, i32 }
%union.anon.15 = type { i32 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.anon.11 = type { i64, i64, i64, i64* }
%struct.rb_mjit_unit = type opaque
%union.anon.12 = type { %struct.anon.13 }
%struct.anon.13 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [5 x i8*], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (i64)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.5 = type { i64*, i64*, i64, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.rb_calling_info = type { i64, i64, i32, i32 }
%struct.native_thread_data_struct = type { %struct.list_head, %union.anon.7 }
%union.anon.7 = type { %union.pthread_cond_t }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i64, i64, i32 }
%struct.rb_fiber_struct = type opaque
%struct.anon.3 = type { [65 x i64] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (i64, i64)*, i64 (i64)* }
%struct.st_table_entry = type opaque
%struct.rb_builtin_function = type opaque
%struct.anon.4 = type { i64, i64, i64, i64 }
%struct.FunctionInlineCache = type { %struct.rb_kwarg_call_data }
%struct.rb_kwarg_call_data = type { %struct.rb_call_cache, %struct.rb_call_info_with_kwarg }
%struct.rb_call_info_with_kwarg = type { %struct.rb_call_info, %struct.rb_call_info_kw_arg* }
%struct.rb_call_info_kw_arg = type { i32, [1 x i64] }
%struct.RBasic = type { i64, i64 }
%struct.RArray = type { %struct.RBasic, %union.anon.23 }
%union.anon.23 = type { %struct.anon.24 }
%struct.anon.24 = type { i64, %union.anon.25, i64* }
%union.anon.25 = type { i64 }

@ruby_current_vm_ptr = external local_unnamed_addr global %struct.rb_vm_struct*, align 8
@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.7 = private unnamed_addr constant [95 x i8] c"sorbet_getBuildSCMRevision: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@.str.8 = private unnamed_addr constant [93 x i8] c"sorbet_getIsReleaseBuild: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@"stackFramePrecomputed_func_<root>.<static-init>$152" = internal unnamed_addr global i8* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"rubyStrFrozen_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb" = internal unnamed_addr global i64 0, align 8
@"str_test/testdata/compiler/block_arg_expand.rb" = private unnamed_addr constant [43 x i8] c"test/testdata/compiler/block_arg_expand.rb\00", align 1
@"<static-init-locals-storage>" = internal global [1 x i64] zeroinitializer
@"rubyIdPrecomputed_<self>" = internal unnamed_addr global i64 0, align 8
@"str_<self>" = private unnamed_addr constant [7 x i8] c"<self>\00", align 1
@"stackFramePrecomputed_func_<root>.<static-init>$152$block_1" = internal unnamed_addr global i8* null, align 8
@"rubyIdPrecomputed_block for" = internal unnamed_addr global i64 0, align 8
@"str_block for" = private unnamed_addr constant [10 x i8] c"block for\00", align 1
@"str_<build-array>" = private unnamed_addr constant [14 x i8] c"<build-array>\00", align 1
@ic_each = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_each = internal unnamed_addr global i64 0, align 8
@str_each = private unnamed_addr constant [5 x i8] c"each\00", align 1
@str_let = private unnamed_addr constant [4 x i8] c"let\00", align 1
@str_Integer = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@"rubyIdPrecomputed_+" = internal unnamed_addr global i64 0, align 8
@"str_+" = private unnamed_addr constant [2 x i8] c"+\00", align 1
@"ic_+" = internal global %struct.FunctionInlineCache zeroinitializer

; Function Attrs: cold noreturn
declare void @sorbet_cast_failure(i64, i8*, i8*) local_unnamed_addr #0

declare i8* @sorbet_allocateRubyStackFrame(i64, i64, i64, i64, i8*, i32, i32, i32, i64*, i32, i32) local_unnamed_addr #1

declare i64 @sorbet_readRealpath() local_unnamed_addr #1

declare void @sorbet_vm_env_write_slowpath(i64*, i32, i64) local_unnamed_addr #1

declare void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache*, i64, i32, i32, i32, i64*) local_unnamed_addr #1

declare i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache*, i64) local_unnamed_addr #1

declare void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_iseq_struct*) local_unnamed_addr #1

declare i64 @sorbet_rb_int_plus_slowpath(i64, i64) local_unnamed_addr #1

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #1

declare void @rb_ary_detransient(i64) local_unnamed_addr #1

declare i64 @rb_ary_new_from_values(i64, i64*) local_unnamed_addr #1

declare void @rb_gc_register_mark_object(i64) local_unnamed_addr #1

declare i64 @rb_fstring_new(i8*, i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #3

declare i64 @rb_int2big(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i64 @sorbet_iterMethod(i64) #4 {
  %2 = inttoptr i64 %0 to %struct.FunctionInlineCache*
  %3 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !4
  %4 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %3, i64 0, i32 17
  %5 = load i64, i64* %4, align 8, !tbaa !8
  store i64 0, i64* %4, align 8, !tbaa !8
  %6 = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* %2, i64 %5) #9
  ret i64 %6
}

declare i64 @rb_iterate(i64 (i64)*, i64, i64 (i64, i64, i32, i64*, i64)*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define weak i32 @sorbet_getIsReleaseBuild() local_unnamed_addr #4 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !13
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.8, i64 0, i64 0)) #10
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @sorbet_getBuildSCMRevision() local_unnamed_addr #4 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !13
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.7, i64 0, i64 0)) #10
  unreachable
}

; Function Attrs: ssp
define internal i64 @"func_<root>.<static-init>$152$block_1"(i64 %firstYieldArgRaw, i64 %localsOffset, i32 %argc, i64* nocapture readonly %argArray, i64 %blockArg) #5 !dbg !14 {
functionEntryInitializers:
  %"stackFrame_func_<root>.<static-init>$152$block_155" = load i64, i64* bitcast (i8** @"stackFramePrecomputed_func_<root>.<static-init>$152$block_1" to i64*), align 8
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !4
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !19
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 2
  %4 = bitcast %struct.rb_iseq_struct** %3 to i64*
  store i64 %"stackFrame_func_<root>.<static-init>$152$block_155", i64* %4, align 8, !tbaa !20
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 4
  %6 = load i64*, i64** %5, align 8, !tbaa !22
  %7 = load i64, i64* %6, align 8, !tbaa !13
  %8 = and i64 %7, -129
  store i64 %8, i64* %6, align 8, !tbaa !13
  %9 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 0
  %10 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %3, align 8, !tbaa !20
  %11 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %10, i64 0, i32 2
  %12 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %11, align 8, !tbaa !23
  %13 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %12, i64 0, i32 2
  %14 = load i64*, i64** %13, align 8, !tbaa !25
  %15 = getelementptr inbounds i64, i64* %14, i64 5
  store i64* %15, i64** %9, align 8, !tbaa !4
  %arrayExpansionSizeGuard = icmp eq i32 %argc, 1, !dbg !34
  br i1 %arrayExpansionSizeGuard, label %argArrayExpandArrayTest, label %fillRequiredArgs, !dbg !34

argArrayExpandArrayTest:                          ; preds = %functionEntryInitializers
  %arg1_maybeExpandToFullArgs = load i64, i64* %argArray, align 8, !dbg !34
  %16 = and i64 %arg1_maybeExpandToFullArgs, 7, !dbg !34
  %17 = icmp ne i64 %16, 0, !dbg !34
  %18 = and i64 %arg1_maybeExpandToFullArgs, -9, !dbg !34
  %19 = icmp eq i64 %18, 0, !dbg !34
  %20 = or i1 %17, %19, !dbg !34
  br i1 %20, label %fillFromDefaultBlockDone2, label %sorbet_isa_Array.exit, !dbg !34

sorbet_isa_Array.exit:                            ; preds = %argArrayExpandArrayTest
  %21 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.RBasic*, !dbg !34
  %22 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %21, i64 0, i32 0, !dbg !34
  %23 = load i64, i64* %22, align 8, !dbg !34, !tbaa !35
  %24 = and i64 %23, 31, !dbg !34
  %25 = icmp eq i64 %24, 7, !dbg !34
  br i1 %25, label %argArrayExpand, label %fillFromDefaultBlockDone2, !dbg !34

argArrayExpand:                                   ; preds = %sorbet_isa_Array.exit
  %26 = and i64 %23, 33554432, !dbg !34
  %27 = icmp eq i64 %26, 0, !dbg !34
  br i1 %27, label %29, label %28, !dbg !34

28:                                               ; preds = %argArrayExpand
  tail call void @rb_ary_detransient(i64 %arg1_maybeExpandToFullArgs) #9, !dbg !34
  br label %29, !dbg !34

29:                                               ; preds = %28, %argArrayExpand
  %30 = load i64, i64* %22, align 8, !dbg !34, !tbaa !35
  %31 = and i64 %30, 8192, !dbg !34
  %32 = icmp eq i64 %31, 0, !dbg !34
  %33 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.RArray*, !dbg !34
  br i1 %32, label %38, label %34, !dbg !34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.RArray, %struct.RArray* %33, i64 0, i32 1, i32 0, i32 0, !dbg !34
  %36 = lshr i64 %30, 15, !dbg !34
  %37 = and i64 %36, 3, !dbg !34
  br label %rb_array_len.exit, !dbg !34

38:                                               ; preds = %29
  %39 = getelementptr inbounds %struct.RArray, %struct.RArray* %33, i64 0, i32 1, i32 0, i32 2, !dbg !34
  %40 = load i64*, i64** %39, align 8, !dbg !34, !tbaa !37
  %41 = getelementptr inbounds %struct.RArray, %struct.RArray* %33, i64 0, i32 1, i32 0, i32 0, !dbg !34
  %42 = load i64, i64* %41, align 8, !dbg !34, !tbaa !37
  br label %rb_array_len.exit, !dbg !34

rb_array_len.exit:                                ; preds = %34, %38
  %43 = phi i64* [ %35, %34 ], [ %40, %38 ]
  %44 = phi i64 [ %37, %34 ], [ %42, %38 ], !dbg !34
  %45 = trunc i64 %44 to i32, !dbg !34
  br label %fillRequiredArgs, !dbg !34

fillFromArgBlock0:                                ; preds = %fillRequiredArgs
  %rawArg_el1 = load i64, i64* %argArrayPhi, align 8, !dbg !34
  %default1 = icmp eq i32 %argcPhi, 1, !dbg !34
  br i1 %default1, label %fillFromDefaultBlockDone2, label %fillFromArgBlock1, !dbg !34, !prof !38

fillFromArgBlock1:                                ; preds = %fillFromArgBlock0
  %46 = getelementptr i64, i64* %argArrayPhi, i64 1, !dbg !34
  %rawArg_el2 = load i64, i64* %46, align 8, !dbg !34
  br label %fillFromDefaultBlockDone2, !dbg !34

fillFromDefaultBlockDone2:                        ; preds = %sorbet_isa_Array.exit, %argArrayExpandArrayTest, %fillFromArgBlock0, %fillFromArgBlock1
  %el2.sroa.0.0 = phi i64 [ %rawArg_el2, %fillFromArgBlock1 ], [ 8, %fillFromArgBlock0 ], [ 8, %argArrayExpandArrayTest ], [ 8, %sorbet_isa_Array.exit ], !dbg !34
  %el1.sroa.0.1 = phi i64 [ %rawArg_el1, %fillFromArgBlock1 ], [ %rawArg_el1, %fillFromArgBlock0 ], [ %arg1_maybeExpandToFullArgs, %argArrayExpandArrayTest ], [ %arg1_maybeExpandToFullArgs, %sorbet_isa_Array.exit ], !dbg !34
  %47 = getelementptr inbounds i64, i64* %14, i64 7, !dbg !39
  store i64* %47, i64** %9, align 8, !dbg !39, !tbaa !4
  %48 = and i64 %el1.sroa.0.1, 1, !dbg !40
  %49 = icmp eq i64 %48, 0, !dbg !40
  br i1 %49, label %codeRepl, label %typeTestSuccess, !dbg !40, !prof !38

fillRequiredArgs:                                 ; preds = %functionEntryInitializers, %rb_array_len.exit
  %argcPhi = phi i32 [ %argc, %functionEntryInitializers ], [ %45, %rb_array_len.exit ], !dbg !34
  %argArrayPhi = phi i64* [ %argArray, %functionEntryInitializers ], [ %43, %rb_array_len.exit ], !dbg !34
  %default0 = icmp eq i32 %argcPhi, 0, !dbg !34
  br i1 %default0, label %fillFromDefaultBlockDone2.thread, label %fillFromArgBlock0, !dbg !34, !prof !38

fillFromDefaultBlockDone2.thread:                 ; preds = %fillRequiredArgs
  %50 = getelementptr inbounds i64, i64* %14, i64 7, !dbg !39
  store i64* %50, i64** %9, align 8, !dbg !39, !tbaa !4
  br label %codeRepl, !dbg !40

typeTestSuccess:                                  ; preds = %fillFromDefaultBlockDone2
  %51 = and i64 %el2.sroa.0.0, 1, !dbg !41
  %52 = icmp eq i64 %51, 0, !dbg !41
  br i1 %52, label %codeRepl68, label %"fastSymCallIntrinsic_Integer_+", !dbg !41, !prof !38

codeRepl:                                         ; preds = %fillFromDefaultBlockDone2.thread, %fillFromDefaultBlockDone2
  %el1.sroa.0.158 = phi i64 [ 8, %fillFromDefaultBlockDone2.thread ], [ %el1.sroa.0.1, %fillFromDefaultBlockDone2 ]
  tail call fastcc void @"func_<root>.<static-init>$152$block_1.cold.1"(i64 %el1.sroa.0.158) #11, !dbg !40
  unreachable

codeRepl68:                                       ; preds = %typeTestSuccess
  tail call void @sorbet_cast_failure(i64 %el2.sroa.0.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_let, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_Integer, i64 0, i64 0)), !dbg !42
  unreachable, !dbg !42

"fastSymCallIntrinsic_Integer_+":                 ; preds = %typeTestSuccess
  %53 = and i64 %48, %el2.sroa.0.0, !dbg !40
  %54 = icmp eq i64 %53, 0, !dbg !40
  br i1 %54, label %64, label %55, !dbg !40, !prof !44

55:                                               ; preds = %"fastSymCallIntrinsic_Integer_+"
  %56 = add nsw i64 %el2.sroa.0.0, -1, !dbg !40
  %57 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %el1.sroa.0.1, i64 %56) #9, !dbg !40
  %58 = extractvalue { i64, i1 } %57, 1, !dbg !40
  %59 = extractvalue { i64, i1 } %57, 0, !dbg !40
  br i1 %58, label %60, label %sorbet_rb_int_plus.exit, !dbg !40

60:                                               ; preds = %55
  %61 = ashr i64 %59, 1, !dbg !40
  %62 = xor i64 %61, -9223372036854775808, !dbg !40
  %63 = tail call i64 @rb_int2big(i64 %62) #9, !dbg !40
  br label %sorbet_rb_int_plus.exit, !dbg !40

64:                                               ; preds = %"fastSymCallIntrinsic_Integer_+"
  %65 = tail call i64 @sorbet_rb_int_plus_slowpath(i64 %el1.sroa.0.1, i64 %el2.sroa.0.0) #9, !dbg !40, !noalias !45
  br label %sorbet_rb_int_plus.exit, !dbg !40

sorbet_rb_int_plus.exit:                          ; preds = %60, %55, %64
  %66 = phi i64 [ %65, %64 ], [ %63, %60 ], [ %59, %55 ], !dbg !40
  store i64* %15, i64** %9, align 8, !dbg !40, !tbaa !4
  ret i64 %66, !dbg !34
}

; Function Attrs: sspreq
define void @Init_block_arg_expand() local_unnamed_addr #6 {
entry:
  %callArgs.i = alloca [3 x i64], align 16
  %realpath = tail call i64 @sorbet_readRealpath()
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #9
  store i64 %0, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %1 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"str_<self>", i64 0, i64 0), i64 6) #9
  store i64 %1, i64* @"rubyIdPrecomputed_<self>", align 8
  %2 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str_block for", i64 0, i64 0), i64 9) #9
  store i64 %2, i64* @"rubyIdPrecomputed_block for", align 8
  %3 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"str_<build-array>", i64 0, i64 0), i64 13) #9
  %4 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_each, i64 0, i64 0), i64 4) #9
  store i64 %4, i64* @rubyIdPrecomputed_each, align 8
  %5 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_+", i64 0, i64 0), i64 1) #9
  store i64 %5, i64* @"rubyIdPrecomputed_+", align 8
  %"rubyId_<self>.i" = load i64, i64* @"rubyIdPrecomputed_<self>", align 8
  store i64 %"rubyId_<self>.i", i64* getelementptr inbounds ([1 x i64], [1 x i64]* @"<static-init-locals-storage>", i64 0, i64 0), align 8
  %6 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #9
  tail call void @rb_gc_register_mark_object(i64 %6) #9
  store i64 %6, i64* @"rubyStrFrozen_<top (required)>", align 8
  %7 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @"str_test/testdata/compiler/block_arg_expand.rb", i64 0, i64 0), i64 42) #9
  tail call void @rb_gc_register_mark_object(i64 %7) #9
  store i64 %7, i64* @"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb", align 8
  %"rubyId_<top (required)>.i.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %8 = tail call i8* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i.i", i64 %"rubyId_<top (required)>.i.i", i64 %7, i64 %realpath, i8* null, i32 1, i32 1, i32 8, i64* getelementptr inbounds ([1 x i64], [1 x i64]* @"<static-init-locals-storage>", i64 0, i64 0), i32 1, i32 3)
  store i8* %8, i8** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %9 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str_block for", i64 0, i64 0), i64 9) #9
  tail call void @rb_gc_register_mark_object(i64 %9) #9
  %"stackFrame_func_<root>.<static-init>$152.i.i" = load i8*, i8** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %"rubyId_block for.i.i" = load i64, i64* @"rubyIdPrecomputed_block for", align 8
  %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i2.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb", align 8
  %10 = tail call i8* @sorbet_allocateRubyStackFrame(i64 %9, i64 %"rubyId_block for.i.i", i64 %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i2.i", i64 %realpath, i8* %"stackFrame_func_<root>.<static-init>$152.i.i", i32 2, i32 1, i32 8, i64* null, i32 0, i32 3)
  store i8* %10, i8** @"stackFramePrecomputed_func_<root>.<static-init>$152$block_1", align 8
  %rubyId_each.i = load i64, i64* @rubyIdPrecomputed_each, align 8, !dbg !48
  tail call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @ic_each, i64 %rubyId_each.i, i32 16, i32 0, i32 0, i64* null), !dbg !48
  %"rubyId_+.i" = load i64, i64* @"rubyIdPrecomputed_+", align 8, !dbg !40
  tail call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @"ic_+", i64 %"rubyId_+.i", i32 16, i32 1, i32 0, i64* null), !dbg !40
  %11 = load %struct.rb_vm_struct*, %struct.rb_vm_struct** @ruby_current_vm_ptr, align 8, !tbaa !4
  %12 = getelementptr inbounds %struct.rb_vm_struct, %struct.rb_vm_struct* %11, i64 0, i32 18
  %13 = load i64, i64* %12, align 8, !tbaa !49
  %14 = bitcast [3 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14)
  %"stackFrame_func_<root>.<static-init>$152.i" = load i8*, i8** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %15 = bitcast i8* %"stackFrame_func_<root>.<static-init>$152.i" to %struct.rb_iseq_struct*
  %16 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !4
  %17 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %16, i64 0, i32 2
  %18 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %17, align 8, !tbaa !19
  %19 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %18, i64 0, i32 2
  %20 = bitcast %struct.rb_iseq_struct** %19 to i8**
  store i8* %"stackFrame_func_<root>.<static-init>$152.i", i8** %20, align 8, !tbaa !20
  %21 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %18, i64 0, i32 4
  %22 = load i64*, i64** %21, align 8, !tbaa !22
  %23 = load i64, i64* %22, align 8, !tbaa !13
  %24 = and i64 %23, -129
  store i64 %24, i64* %22, align 8, !tbaa !13
  tail call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %16, %struct.rb_control_frame_struct* nonnull %18, %struct.rb_iseq_struct* %15) #9
  %25 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %18, i64 0, i32 0
  %26 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %19, align 8, !tbaa !20
  %27 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %26, i64 0, i32 2
  %28 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %27, align 8, !tbaa !23
  %29 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %28, i64 0, i32 2
  %30 = load i64*, i64** %29, align 8, !tbaa !25
  %31 = getelementptr inbounds i64, i64* %30, i64 5
  store i64* %31, i64** %25, align 8, !tbaa !4
  %32 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !48, !tbaa !4
  %33 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %32, i64 0, i32 2, !dbg !48
  %34 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %33, align 8, !dbg !48, !tbaa !19
  %35 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %34, i64 0, i32 4, !dbg !48
  %36 = load i64*, i64** %35, align 8, !dbg !48, !tbaa !22
  %37 = load i64, i64* %36, align 8, !dbg !48, !tbaa !13
  %38 = and i64 %37, 8, !dbg !48
  %39 = icmp eq i64 %38, 0, !dbg !48
  br i1 %39, label %40, label %42, !dbg !48, !prof !58

40:                                               ; preds = %entry
  %41 = getelementptr inbounds i64, i64* %36, i64 -3, !dbg !48
  store i64 %13, i64* %41, align 8, !dbg !48, !tbaa !13
  br label %sorbet_writeLocal.exit.i, !dbg !48

42:                                               ; preds = %entry
  tail call void @sorbet_vm_env_write_slowpath(i64* nonnull %36, i32 -3, i64 %13) #9, !dbg !48
  br label %sorbet_writeLocal.exit.i, !dbg !48

sorbet_writeLocal.exit.i:                         ; preds = %42, %40
  %43 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !59, !tbaa !4
  %44 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %43, i64 0, i32 2, !dbg !59
  %45 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %44, align 8, !dbg !59, !tbaa !19
  %46 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %45, i64 0, i32 4, !dbg !59
  %47 = load i64*, i64** %46, align 8, !dbg !59, !tbaa !22
  %48 = load i64, i64* %47, align 8, !dbg !59, !tbaa !13
  %49 = and i64 %48, 8, !dbg !59
  %50 = icmp eq i64 %49, 0, !dbg !59
  br i1 %50, label %"func_<root>.<static-init>$152.exit", label %51, !dbg !59, !prof !58

51:                                               ; preds = %sorbet_writeLocal.exit.i
  %52 = getelementptr inbounds i64, i64* %47, i64 -3, !dbg !59
  %53 = load i64, i64* %52, align 8, !dbg !59, !tbaa !13
  tail call void @sorbet_vm_env_write_slowpath(i64* nonnull %47, i32 -3, i64 %53) #9, !dbg !59
  br label %"func_<root>.<static-init>$152.exit", !dbg !59

"func_<root>.<static-init>$152.exit":             ; preds = %sorbet_writeLocal.exit.i, %51
  store i64* %31, i64** %25, align 8, !dbg !59, !tbaa !4
  %callArgs0Addr.i = getelementptr inbounds [3 x i64], [3 x i64]* %callArgs.i, i64 0, i64 0, !dbg !60
  %54 = bitcast [3 x i64]* %callArgs.i to <2 x i64>*, !dbg !60
  store <2 x i64> <i64 3, i64 5>, <2 x i64>* %54, align 16, !dbg !60
  %55 = call i64 @rb_ary_new_from_values(i64 2, i64* nonnull %callArgs0Addr.i) #9, !dbg !60
  store i64 %55, i64* %callArgs0Addr.i, align 16, !dbg !48
  %56 = call i64 @rb_ary_new_from_values(i64 1, i64* nonnull %callArgs0Addr.i) #9, !dbg !48
  %57 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !48, !tbaa !4
  %58 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %57, i64 0, i32 2, !dbg !48
  %59 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %58, align 8, !dbg !48, !tbaa !19
  %60 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %59, i64 0, i32 1, !dbg !48
  %61 = load i64*, i64** %60, align 8, !dbg !48, !tbaa !61
  %62 = getelementptr inbounds i64, i64* %61, i64 1, !dbg !48
  store i64* %62, i64** %60, align 8, !dbg !48, !tbaa !61
  store i64 %56, i64* %61, align 8, !dbg !48, !tbaa !13
  %63 = call i64 @rb_iterate(i64 (i64)* nonnull @sorbet_iterMethod, i64 ptrtoint (%struct.FunctionInlineCache* @ic_each to i64), i64 (i64, i64, i32, i64*, i64)* nonnull @"func_<root>.<static-init>$152$block_1", i64 0) #9, !dbg !48
  store i64* %31, i64** %25, align 8, !tbaa !4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #7

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #7

; Function Attrs: cold minsize noreturn ssp
define internal fastcc void @"func_<root>.<static-init>$152$block_1.cold.1"(i64 %el1.sroa.0.158) unnamed_addr #8 {
newFuncRoot:
  tail call void @sorbet_cast_failure(i64 %el1.sroa.0.158, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_let, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_Integer, i64 0, i64 0)), !dbg !40
  unreachable, !dbg !40
}

attributes #0 = { cold noreturn }
attributes #1 = { "addedToSilenceEmptyAttrsError" }
attributes #2 = { noreturn }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind ssp uwtable }
attributes #5 = { ssp }
attributes #6 = { sspreq }
attributes #7 = { argmemonly nounwind }
attributes #8 = { cold minsize noreturn ssp }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { noinline }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "Sorbet LLVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "test/testdata/compiler/block_arg_expand.rb", directory: ".")
!3 = !{}
!4 = !{!5, !5, i64 0}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9, !10, i64 128}
!9 = !{!"rb_execution_context_struct", !5, i64 0, !10, i64 8, !5, i64 16, !5, i64 24, !5, i64 32, !11, i64 40, !11, i64 44, !5, i64 48, !5, i64 56, !5, i64 64, !10, i64 72, !10, i64 80, !5, i64 88, !10, i64 96, !5, i64 104, !5, i64 112, !10, i64 120, !10, i64 128, !6, i64 136, !6, i64 137, !10, i64 144, !12, i64 152}
!10 = !{!"long", !6, i64 0}
!11 = !{!"int", !6, i64 0}
!12 = !{!"", !5, i64 0, !5, i64 8, !10, i64 16, !6, i64 24}
!13 = !{!10, !10, i64 0}
!14 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.<static-init>$152$block_1", scope: !15, file: !2, line: 5, type: !16, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!15 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.<static-init>$152", scope: null, file: !2, line: 5, type: !16, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!16 = !DISubroutineType(types: !17)
!17 = !{!18}
!18 = !DIBasicType(name: "VALUE", size: 64, encoding: DW_ATE_signed)
!19 = !{!9, !5, i64 16}
!20 = !{!21, !5, i64 16}
!21 = !{!"rb_control_frame_struct", !5, i64 0, !5, i64 8, !5, i64 16, !10, i64 24, !5, i64 32, !5, i64 40, !5, i64 48}
!22 = !{!21, !5, i64 32}
!23 = !{!24, !5, i64 16}
!24 = !{!"rb_iseq_struct", !10, i64 0, !10, i64 8, !5, i64 16, !6, i64 24}
!25 = !{!26, !5, i64 8}
!26 = !{!"rb_iseq_constant_body", !6, i64 0, !11, i64 4, !5, i64 8, !27, i64 16, !29, i64 64, !32, i64 120, !5, i64 152, !5, i64 160, !5, i64 168, !5, i64 176, !5, i64 184, !5, i64 192, !33, i64 200, !11, i64 232, !11, i64 236, !11, i64 240, !11, i64 244, !11, i64 248, !6, i64 252, !5, i64 256, !10, i64 264, !5, i64 272, !10, i64 280}
!27 = !{!"", !28, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !5, i64 32, !5, i64 40}
!28 = !{!"", !11, i64 0, !11, i64 0, !11, i64 0, !11, i64 0, !11, i64 0, !11, i64 0, !11, i64 0, !11, i64 0, !11, i64 1, !11, i64 1}
!29 = !{!"rb_iseq_location_struct", !10, i64 0, !10, i64 8, !10, i64 16, !10, i64 24, !11, i64 32, !30, i64 36}
!30 = !{!"rb_code_location_struct", !31, i64 0, !31, i64 8}
!31 = !{!"rb_code_position_struct", !11, i64 0, !11, i64 4}
!32 = !{!"iseq_insn_info", !5, i64 0, !5, i64 8, !11, i64 16, !5, i64 24}
!33 = !{!"", !10, i64 0, !10, i64 8, !10, i64 16, !5, i64 24}
!34 = !DILocation(line: 5, column: 1, scope: !14)
!35 = !{!36, !10, i64 0}
!36 = !{!"RBasic", !10, i64 0, !10, i64 8}
!37 = !{!6, !6, i64 0}
!38 = !{!"branch_weights", i32 1, i32 2000}
!39 = !DILocation(line: 0, scope: !14)
!40 = !DILocation(line: 7, column: 3, scope: !14)
!41 = !DILocation(line: 7, column: 25, scope: !14)
!42 = !DILocation(line: 7, column: 3, scope: !14, inlinedAt: !43)
!43 = distinct !DILocation(line: 7, column: 25, scope: !14)
!44 = !{!"branch_weights", i32 4001, i32 4000000}
!45 = !{!46}
!46 = distinct !{!46, !47, !"sorbet_rb_int_plus: argument 0"}
!47 = distinct !{!47, !"sorbet_rb_int_plus"}
!48 = !DILocation(line: 5, column: 1, scope: !15)
!49 = !{!50, !10, i64 400}
!50 = !{!"rb_vm_struct", !10, i64 0, !51, i64 8, !5, i64 192, !5, i64 200, !5, i64 208, !54, i64 216, !6, i64 224, !52, i64 264, !52, i64 280, !52, i64 296, !52, i64 312, !10, i64 328, !11, i64 336, !11, i64 340, !11, i64 344, !11, i64 344, !11, i64 344, !11, i64 344, !11, i64 348, !10, i64 352, !6, i64 360, !10, i64 400, !10, i64 408, !10, i64 416, !10, i64 424, !10, i64 432, !10, i64 440, !10, i64 448, !5, i64 456, !5, i64 464, !55, i64 472, !56, i64 992, !5, i64 1016, !5, i64 1024, !11, i64 1032, !11, i64 1036, !52, i64 1040, !6, i64 1056, !10, i64 1096, !10, i64 1104, !10, i64 1112, !10, i64 1120, !10, i64 1128, !11, i64 1136, !5, i64 1144, !5, i64 1152, !5, i64 1160, !5, i64 1168, !5, i64 1176, !5, i64 1184, !11, i64 1192, !57, i64 1200, !6, i64 1232}
!51 = !{!"rb_global_vm_lock_struct", !5, i64 0, !6, i64 8, !52, i64 48, !5, i64 64, !11, i64 72, !6, i64 80, !6, i64 128, !11, i64 176, !11, i64 180}
!52 = !{!"list_head", !53, i64 0}
!53 = !{!"list_node", !5, i64 0, !5, i64 8}
!54 = !{!"long long", !6, i64 0}
!55 = !{!"", !6, i64 0}
!56 = !{!"rb_hook_list_struct", !5, i64 0, !11, i64 8, !11, i64 12, !11, i64 16}
!57 = !{!"", !10, i64 0, !10, i64 8, !10, i64 16, !10, i64 24}
!58 = !{!"branch_weights", i32 2000, i32 1}
!59 = !DILocation(line: 0, scope: !15)
!60 = !DILocation(line: 5, column: 2, scope: !15)
!61 = !{!21, !5, i64 8}
