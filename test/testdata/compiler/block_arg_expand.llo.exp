; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.7 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.16 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_data*, %struct.anon.15, i32, i32, i32, i32, i32, i8, i64 }
%struct.anon = type { %struct.anon.0, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.0 = type { i16, [2 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.iseq_insn_info_entry*, i32*, i32, %struct.succ_index_table* }
%struct.iseq_insn_info_entry = type opaque
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, i64 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.rb_scope_visi_struct }
%struct.rb_scope_visi_struct = type { i8, [3 x i8] }
%struct.rb_call_data = type { %struct.rb_call_cache, %struct.rb_call_info }
%struct.rb_call_cache = type { i64, [3 x i64], %struct.rb_callable_method_entry_struct*, i64, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_data*)*, %union.anon.14 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon.13, i64, i64 }
%union.anon.13 = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64, i32, i64*, i64 (...)*)*, i32 }
%struct.rb_calling_info = type { i64, i64, i32, i32 }
%union.anon.14 = type { i32 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.anon.15 = type { i64, i64, i64, i64* }
%union.anon.16 = type { %struct.anon.17 }
%struct.anon.17 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [5 x i8*], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_fiber_struct = type opaque
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, i64, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %union.pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.10, i32, i64, %struct.rb_fiber_struct*, [5 x i8*], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %union.pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.5, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %union.pthread_mutex_t, i64, i64, i64, i64, i64, i32, %struct.st_table*, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.rb_builtin_function*, i32, %struct.anon.6, [29 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %union.pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%struct.anon.5 = type { [65 x i64] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.rb_builtin_function = type opaque
%struct.anon.6 = type { i64, i64, i64, i64 }
%struct.native_thread_data_struct = type { %struct.list_head, %union.anon.9 }
%union.anon.9 = type { %union.pthread_cond_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.10 = type { %struct.anon.11 }
%struct.anon.11 = type { i64, i64, i32 }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (i64, i64)*, i64 (i64)* }
%struct.st_table_entry = type opaque
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (i64)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.7 = type { i64*, i64*, i64, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.FunctionInlineCache = type { %struct.rb_kwarg_call_data }
%struct.rb_kwarg_call_data = type { %struct.rb_call_cache, %struct.rb_call_info_with_kwarg }
%struct.rb_call_info_with_kwarg = type { %struct.rb_call_info, %struct.rb_call_info_kw_arg* }
%struct.rb_call_info_kw_arg = type { i32, [1 x i64] }
%struct.rb_captured_block = type { i64, i64*, %union.anon.19 }
%union.anon.19 = type { %struct.rb_iseq_struct* }
%struct.iseq_inline_iv_cache_entry = type { i64, i64 }
%struct.RArray = type { %struct.iseq_inline_iv_cache_entry, %union.anon.27 }
%union.anon.27 = type { %struct.anon.28 }
%struct.anon.28 = type { i64, %union.anon, i64* }
%struct.sorbet_inlineIntrinsicEnv = type { i64, i64, i32, i64*, i64 }

@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.8 = private unnamed_addr constant [95 x i8] c"sorbet_getBuildSCMRevision: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@.str.9 = private unnamed_addr constant [93 x i8] c"sorbet_getIsReleaseBuild: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@"stackFramePrecomputed_func_<root>.<static-init>$152" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"rubyStrFrozen_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb" = internal unnamed_addr global i64 0, align 8
@"str_test/testdata/compiler/block_arg_expand.rb" = private unnamed_addr constant [43 x i8] c"test/testdata/compiler/block_arg_expand.rb\00", align 1
@"stackFramePrecomputed_func_<root>.<static-init>$152$block_1" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_block for" = internal unnamed_addr global i64 0, align 8
@"str_block for" = private unnamed_addr constant [10 x i8] c"block for\00", align 1
@"str_<build-array>" = private unnamed_addr constant [14 x i8] c"<build-array>\00", align 1
@rubyIdPrecomputed_each = internal unnamed_addr global i64 0, align 8
@str_each = private unnamed_addr constant [5 x i8] c"each\00", align 1
@ic_each = internal global %struct.FunctionInlineCache zeroinitializer
@str_T.let = private unnamed_addr constant [6 x i8] c"T.let\00", align 1
@str_Integer = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@"rubyIdPrecomputed_+" = internal unnamed_addr global i64 0, align 8
@"str_+" = private unnamed_addr constant [2 x i8] c"+\00", align 1
@"ic_+" = internal global %struct.FunctionInlineCache zeroinitializer

; Function Attrs: noreturn
declare void @rb_error_arity(i32, i32, i32) local_unnamed_addr #0

; Function Attrs: cold noreturn
declare void @sorbet_cast_failure(i64, i8*, i8*) local_unnamed_addr #1

declare %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64, i64, i64, i64, %struct.rb_iseq_struct*, i32, i32, i32, i64*, i32, i32) local_unnamed_addr #2

declare i64 @sorbet_readRealpath() local_unnamed_addr #2

declare void @sorbet_pushBlockFrame(%struct.rb_captured_block*) local_unnamed_addr #2

declare void @sorbet_popRubyStack() local_unnamed_addr #2

declare void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache*, i64, i32, i32, i32, i64*) local_unnamed_addr #2

declare i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache*, i64) local_unnamed_addr #2

declare void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_iseq_struct*) local_unnamed_addr #2

declare i64 @sorbet_rb_int_plus_slowpath(i64, i64) local_unnamed_addr #2

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #2

declare void @rb_ary_detransient(i64) local_unnamed_addr #2

declare i64 @rb_ary_new_from_values(i64, i64*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare i64 @rb_fstring_new(i8*, i64) local_unnamed_addr #2

declare void @rb_gc_register_mark_object(i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #0

declare i64 @rb_int2big(i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #4

; Function Attrs: nounwind ssp uwtable
define internal i64 @sorbet_iterMethod(i64) #5 {
  %2 = inttoptr i64 %0 to %struct.FunctionInlineCache*
  %3 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !4
  %4 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %3, i64 0, i32 17
  %5 = load i64, i64* %4, align 8, !tbaa !8
  store i64 0, i64* %4, align 8, !tbaa !8
  %6 = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* %2, i64 %5) #10
  ret i64 %6
}

declare i64 @rb_iterate(i64 (i64)*, i64, i64 (i64, i64, i32, i64*, i64)*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i32 @sorbet_getIsReleaseBuild() local_unnamed_addr #5 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !13
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.9, i64 0, i64 0)) #11
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @sorbet_getBuildSCMRevision() local_unnamed_addr #5 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !13
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.8, i64 0, i64 0)) #11
  unreachable
}

; Function Attrs: ssp
define internal i64 @"func_<root>.<static-init>$152$block_1"(i64 %firstYieldArgRaw, i64 %localsOffset, i32 %argc, i64* nocapture readonly %argArray, i64 %blockArg) #6 !dbg !14 {
functionEntryInitializers:
  %"stackFrame_func_<root>.<static-init>$152$block_154" = load i64, i64* bitcast (%struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152$block_1" to i64*), align 8
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !4
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !19
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 2
  %4 = bitcast %struct.rb_iseq_struct** %3 to i64*
  store i64 %"stackFrame_func_<root>.<static-init>$152$block_154", i64* %4, align 8, !tbaa !20
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 4
  %6 = load i64*, i64** %5, align 8, !tbaa !22
  %7 = load i64, i64* %6, align 8, !tbaa !13
  %8 = and i64 %7, -161
  store i64 %8, i64* %6, align 8, !tbaa !13
  %9 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 0
  %10 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %3, align 8, !tbaa !20
  %11 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %10, i64 0, i32 2
  %12 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %11, align 8, !tbaa !23
  %13 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %12, i64 0, i32 2
  %14 = load i64*, i64** %13, align 8, !tbaa !25
  %15 = getelementptr inbounds i64, i64* %14, i64 5
  store i64* %15, i64** %9, align 8, !tbaa !4
  %arrayExpansionSizeGuard = icmp eq i32 %argc, 1, !dbg !34
  br i1 %arrayExpansionSizeGuard, label %argArrayExpandArrayTest, label %fillRequiredArgs, !dbg !34

argArrayExpandArrayTest:                          ; preds = %functionEntryInitializers
  %arg1_maybeExpandToFullArgs = load i64, i64* %argArray, align 8, !dbg !34
  %16 = and i64 %arg1_maybeExpandToFullArgs, 7, !dbg !34
  %17 = icmp ne i64 %16, 0, !dbg !34
  %18 = and i64 %arg1_maybeExpandToFullArgs, -9, !dbg !34
  %19 = icmp eq i64 %18, 0, !dbg !34
  %20 = or i1 %17, %19, !dbg !34
  br i1 %20, label %fillFromDefaultBlockDone2, label %sorbet_isa_Array.exit, !dbg !34

sorbet_isa_Array.exit:                            ; preds = %argArrayExpandArrayTest
  %21 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.iseq_inline_iv_cache_entry*, !dbg !34
  %22 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %21, i64 0, i32 0, !dbg !34
  %23 = load i64, i64* %22, align 8, !dbg !34, !tbaa !35
  %24 = and i64 %23, 31, !dbg !34
  %25 = icmp eq i64 %24, 7, !dbg !34
  br i1 %25, label %argArrayExpand, label %fillFromDefaultBlockDone2, !dbg !34

argArrayExpand:                                   ; preds = %sorbet_isa_Array.exit
  %26 = and i64 %23, 33554432, !dbg !34
  %27 = icmp eq i64 %26, 0, !dbg !34
  br i1 %27, label %29, label %28, !dbg !34

28:                                               ; preds = %argArrayExpand
  tail call void @rb_ary_detransient(i64 %arg1_maybeExpandToFullArgs) #10, !dbg !34
  br label %29, !dbg !34

29:                                               ; preds = %28, %argArrayExpand
  %30 = load i64, i64* %22, align 8, !dbg !34, !tbaa !35
  %31 = and i64 %30, 8192, !dbg !34
  %32 = icmp eq i64 %31, 0, !dbg !34
  %33 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.RArray*, !dbg !34
  br i1 %32, label %38, label %34, !dbg !34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.RArray, %struct.RArray* %33, i64 0, i32 1, i32 0, i32 0, !dbg !34
  %36 = lshr i64 %30, 15, !dbg !34
  %37 = and i64 %36, 3, !dbg !34
  br label %rb_array_len.exit, !dbg !34

38:                                               ; preds = %29
  %39 = getelementptr inbounds %struct.RArray, %struct.RArray* %33, i64 0, i32 1, i32 0, i32 2, !dbg !34
  %40 = load i64*, i64** %39, align 8, !dbg !34, !tbaa !37
  %41 = getelementptr inbounds %struct.RArray, %struct.RArray* %33, i64 0, i32 1, i32 0, i32 0, !dbg !34
  %42 = load i64, i64* %41, align 8, !dbg !34, !tbaa !37
  br label %rb_array_len.exit, !dbg !34

rb_array_len.exit:                                ; preds = %34, %38
  %43 = phi i64* [ %35, %34 ], [ %40, %38 ]
  %44 = phi i64 [ %37, %34 ], [ %42, %38 ], !dbg !34
  %45 = trunc i64 %44 to i32, !dbg !34
  br label %fillRequiredArgs, !dbg !34

fillFromArgBlock0:                                ; preds = %fillRequiredArgs
  %rawArg_el1 = load i64, i64* %argArrayPhi, align 8, !dbg !34
  %default1 = icmp eq i32 %argcPhi, 1, !dbg !34
  br i1 %default1, label %fillFromDefaultBlockDone2, label %fillFromArgBlock1, !dbg !34, !prof !38

fillFromArgBlock1:                                ; preds = %fillFromArgBlock0
  %46 = getelementptr i64, i64* %argArrayPhi, i64 1, !dbg !34
  %rawArg_el2 = load i64, i64* %46, align 8, !dbg !34
  br label %fillFromDefaultBlockDone2, !dbg !34

fillFromDefaultBlockDone2:                        ; preds = %sorbet_isa_Array.exit, %argArrayExpandArrayTest, %fillFromArgBlock0, %fillFromArgBlock1
  %el2.sroa.0.0 = phi i64 [ %rawArg_el2, %fillFromArgBlock1 ], [ 8, %fillFromArgBlock0 ], [ 8, %argArrayExpandArrayTest ], [ 8, %sorbet_isa_Array.exit ], !dbg !34
  %el1.sroa.0.1 = phi i64 [ %rawArg_el1, %fillFromArgBlock1 ], [ %rawArg_el1, %fillFromArgBlock0 ], [ %arg1_maybeExpandToFullArgs, %argArrayExpandArrayTest ], [ %arg1_maybeExpandToFullArgs, %sorbet_isa_Array.exit ], !dbg !34
  %47 = getelementptr inbounds i64, i64* %14, i64 7, !dbg !39
  store i64* %47, i64** %9, align 8, !dbg !39, !tbaa !4
  %48 = and i64 %el1.sroa.0.1, 1, !dbg !40
  %49 = icmp eq i64 %48, 0, !dbg !40
  br i1 %49, label %50, label %typeTestSuccess, !dbg !40, !prof !38

50:                                               ; preds = %fillFromDefaultBlockDone2.thread, %fillFromDefaultBlockDone2
  %el1.sroa.0.161 = phi i64 [ 8, %fillFromDefaultBlockDone2.thread ], [ %el1.sroa.0.1, %fillFromDefaultBlockDone2 ]
  %el2.sroa.0.059 = phi i64 [ 8, %fillFromDefaultBlockDone2.thread ], [ %el2.sroa.0.0, %fillFromDefaultBlockDone2 ]
  %51 = and i64 %el1.sroa.0.161, 7, !dbg !40
  %52 = icmp ne i64 %51, 0, !dbg !40
  %53 = and i64 %el1.sroa.0.161, -9, !dbg !40
  %54 = icmp eq i64 %53, 0, !dbg !40
  %55 = or i1 %52, %54, !dbg !40
  br i1 %55, label %codeRepl, label %sorbet_isa_Integer.exit55, !dbg !40, !prof !41

sorbet_isa_Integer.exit55:                        ; preds = %50
  %56 = inttoptr i64 %el1.sroa.0.161 to %struct.iseq_inline_iv_cache_entry*, !dbg !40
  %57 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %56, i64 0, i32 0, !dbg !40
  %58 = load i64, i64* %57, align 8, !dbg !40, !tbaa !35
  %59 = and i64 %58, 31, !dbg !40
  %60 = icmp eq i64 %59, 10, !dbg !40
  br i1 %60, label %typeTestSuccess, label %codeRepl, !dbg !40, !prof !42

fillRequiredArgs:                                 ; preds = %functionEntryInitializers, %rb_array_len.exit
  %argcPhi = phi i32 [ %argc, %functionEntryInitializers ], [ %45, %rb_array_len.exit ], !dbg !34
  %argArrayPhi = phi i64* [ %argArray, %functionEntryInitializers ], [ %43, %rb_array_len.exit ], !dbg !34
  %default0 = icmp eq i32 %argcPhi, 0, !dbg !34
  br i1 %default0, label %fillFromDefaultBlockDone2.thread, label %fillFromArgBlock0, !dbg !34, !prof !38

fillFromDefaultBlockDone2.thread:                 ; preds = %fillRequiredArgs
  %61 = getelementptr inbounds i64, i64* %14, i64 7, !dbg !39
  store i64* %61, i64** %9, align 8, !dbg !39, !tbaa !4
  br label %50, !dbg !40

typeTestSuccess:                                  ; preds = %fillFromDefaultBlockDone2, %sorbet_isa_Integer.exit55
  %el2.sroa.0.05865 = phi i64 [ %el2.sroa.0.059, %sorbet_isa_Integer.exit55 ], [ %el2.sroa.0.0, %fillFromDefaultBlockDone2 ]
  %el1.sroa.0.16064 = phi i64 [ %el1.sroa.0.161, %sorbet_isa_Integer.exit55 ], [ %el1.sroa.0.1, %fillFromDefaultBlockDone2 ]
  %62 = phi i64 [ 0, %sorbet_isa_Integer.exit55 ], [ 1, %fillFromDefaultBlockDone2 ]
  %63 = and i64 %el2.sroa.0.05865, 1, !dbg !43
  %64 = icmp eq i64 %63, 0, !dbg !43
  br i1 %64, label %65, label %"fastSymCallIntrinsic_Integer_+", !dbg !43, !prof !38

65:                                               ; preds = %typeTestSuccess
  %66 = and i64 %el2.sroa.0.05865, 7, !dbg !43
  %67 = icmp ne i64 %66, 0, !dbg !43
  %68 = and i64 %el2.sroa.0.05865, -9, !dbg !43
  %69 = icmp eq i64 %68, 0, !dbg !43
  %70 = or i1 %67, %69, !dbg !43
  br i1 %70, label %codeRepl80, label %sorbet_isa_Integer.exit, !dbg !43, !prof !41

sorbet_isa_Integer.exit:                          ; preds = %65
  %71 = inttoptr i64 %el2.sroa.0.05865 to %struct.iseq_inline_iv_cache_entry*, !dbg !43
  %72 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %71, i64 0, i32 0, !dbg !43
  %73 = load i64, i64* %72, align 8, !dbg !43, !tbaa !35
  %74 = and i64 %73, 31, !dbg !43
  %75 = icmp eq i64 %74, 10, !dbg !43
  br i1 %75, label %"fastSymCallIntrinsic_Integer_+", label %codeRepl80, !dbg !43, !prof !42

codeRepl:                                         ; preds = %sorbet_isa_Integer.exit55, %50
  tail call fastcc void @"func_<root>.<static-init>$152$block_1.cold.1"(i64 %el1.sroa.0.161) #12, !dbg !40
  unreachable

codeRepl80:                                       ; preds = %sorbet_isa_Integer.exit, %65
  tail call void @sorbet_cast_failure(i64 %el2.sroa.0.05865, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_T.let, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_Integer, i64 0, i64 0)), !dbg !44
  unreachable, !dbg !44

"fastSymCallIntrinsic_Integer_+":                 ; preds = %typeTestSuccess, %sorbet_isa_Integer.exit
  %76 = and i64 %62, %el2.sroa.0.05865, !dbg !40
  %77 = icmp eq i64 %76, 0, !dbg !40
  br i1 %77, label %87, label %78, !dbg !40, !prof !46

78:                                               ; preds = %"fastSymCallIntrinsic_Integer_+"
  %79 = add nsw i64 %el2.sroa.0.05865, -1, !dbg !40
  %80 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %el1.sroa.0.16064, i64 %79) #10, !dbg !40
  %81 = extractvalue { i64, i1 } %80, 1, !dbg !40
  %82 = extractvalue { i64, i1 } %80, 0, !dbg !40
  br i1 %81, label %83, label %sorbet_rb_int_plus.exit, !dbg !40

83:                                               ; preds = %78
  %84 = ashr i64 %82, 1, !dbg !40
  %85 = xor i64 %84, -9223372036854775808, !dbg !40
  %86 = tail call i64 @rb_int2big(i64 %85) #10, !dbg !40
  br label %sorbet_rb_int_plus.exit, !dbg !40

87:                                               ; preds = %"fastSymCallIntrinsic_Integer_+"
  %88 = tail call i64 @sorbet_rb_int_plus_slowpath(i64 %el1.sroa.0.16064, i64 %el2.sroa.0.05865) #10, !dbg !40, !noalias !47
  br label %sorbet_rb_int_plus.exit, !dbg !40

sorbet_rb_int_plus.exit:                          ; preds = %83, %78, %87
  %89 = phi i64 [ %88, %87 ], [ %86, %83 ], [ %82, %78 ], !dbg !40
  store i64* %15, i64** %9, align 8, !dbg !40, !tbaa !4
  ret i64 %89, !dbg !34
}

; Function Attrs: nounwind ssp
define internal i64 @forward_sorbet_rb_array_each(i64) #7 {
entry:
  %1 = alloca i64, align 8
  %2 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !50, !tbaa !4
  %3 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %2, i64 0, i32 17, !dbg !50
  %4 = load i64, i64* %3, align 8, !dbg !50, !tbaa !8
  store i64 0, i64* %3, align 8, !dbg !50, !tbaa !8
  %5 = inttoptr i64 %0 to %struct.sorbet_inlineIntrinsicEnv*, !dbg !50
  %6 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %5, i64 0, i32 0, !dbg !50
  %7 = load i64, i64* %6, align 8, !dbg !50, !tbaa !51
  %8 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %5, i64 0, i32 2, !dbg !50
  %9 = load i32, i32* %8, align 8, !dbg !50, !tbaa !53
  %10 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %5, i64 0, i32 4, !dbg !50
  %11 = load i64, i64* %10, align 8, !dbg !50, !tbaa !54
  %12 = icmp eq i32 %9, 0, !dbg !50
  br i1 %12, label %rb_check_arity.1.exit, label %13, !dbg !50

13:                                               ; preds = %entry
  tail call void @rb_error_arity(i32 %9, i32 0, i32 0) #11, !dbg !50
  unreachable, !dbg !50

rb_check_arity.1.exit:                            ; preds = %entry
  %14 = and i64 %4, -4, !dbg !50
  %15 = inttoptr i64 %14 to %struct.rb_captured_block*, !dbg !50
  tail call void @sorbet_pushBlockFrame(%struct.rb_captured_block* %15) #10, !dbg !50
  %16 = inttoptr i64 %7 to %struct.iseq_inline_iv_cache_entry*, !dbg !50
  %17 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %16, i64 0, i32 0, !dbg !50
  %18 = load i64, i64* %17, align 8, !dbg !50, !tbaa !35
  %19 = and i64 %18, 8192, !dbg !50
  %20 = icmp eq i64 %19, 0, !dbg !50
  br i1 %20, label %24, label %21, !dbg !50

21:                                               ; preds = %rb_check_arity.1.exit
  %22 = lshr i64 %18, 15, !dbg !50
  %23 = and i64 %22, 3, !dbg !50
  br label %rb_array_len.exit1, !dbg !50

24:                                               ; preds = %rb_check_arity.1.exit
  %25 = inttoptr i64 %7 to %struct.RArray*, !dbg !50
  %26 = getelementptr inbounds %struct.RArray, %struct.RArray* %25, i64 0, i32 1, i32 0, i32 0, !dbg !50
  %27 = load i64, i64* %26, align 8, !dbg !50, !tbaa !37
  br label %rb_array_len.exit1, !dbg !50

rb_array_len.exit1:                               ; preds = %21, %24
  %28 = phi i64 [ %23, %21 ], [ %27, %24 ], !dbg !50
  %29 = icmp sgt i64 %28, 0, !dbg !50
  br i1 %29, label %30, label %sorbet_rb_array_each_withBlock.exit, !dbg !50

30:                                               ; preds = %rb_array_len.exit1
  %31 = bitcast i64* %1 to i8*, !dbg !50
  %32 = inttoptr i64 %7 to %struct.RArray*, !dbg !55
  %33 = getelementptr inbounds %struct.RArray, %struct.RArray* %32, i64 0, i32 1, i32 0, i32 0, !dbg !55
  %34 = getelementptr inbounds %struct.RArray, %struct.RArray* %32, i64 0, i32 1, i32 0, i32 2, !dbg !55
  br label %35, !dbg !50

35:                                               ; preds = %rb_array_len.exit, %30
  %36 = phi i64 [ 0, %30 ], [ %46, %rb_array_len.exit ], !dbg !50
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #10, !dbg !50
  %37 = load i64, i64* %17, align 8, !dbg !50, !tbaa !35
  %38 = and i64 %37, 8192, !dbg !50
  %39 = icmp eq i64 %38, 0, !dbg !50
  br i1 %39, label %40, label %rb_array_const_ptr_transient.exit, !dbg !50

40:                                               ; preds = %35
  %41 = load i64*, i64** %34, align 8, !dbg !50, !tbaa !37
  br label %rb_array_const_ptr_transient.exit, !dbg !50

rb_array_const_ptr_transient.exit:                ; preds = %35, %40
  %42 = phi i64* [ %41, %40 ], [ %33, %35 ], !dbg !50
  %43 = getelementptr inbounds i64, i64* %42, i64 %36, !dbg !50
  %44 = load i64, i64* %43, align 8, !dbg !50, !tbaa !13
  store i64 %44, i64* %1, align 8, !dbg !50, !tbaa !13
  %45 = call i64 @"func_<root>.<static-init>$152$block_1"(i64 %44, i64 %11, i32 1, i64* nonnull %1, i64 8) #10, !dbg !50
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #10, !dbg !50
  %46 = add nuw nsw i64 %36, 1, !dbg !50
  %47 = load i64, i64* %17, align 8, !dbg !50, !tbaa !35
  %48 = and i64 %47, 8192, !dbg !50
  %49 = icmp eq i64 %48, 0, !dbg !50
  br i1 %49, label %53, label %50, !dbg !50

50:                                               ; preds = %rb_array_const_ptr_transient.exit
  %51 = lshr i64 %47, 15, !dbg !50
  %52 = and i64 %51, 3, !dbg !50
  br label %rb_array_len.exit, !dbg !50

53:                                               ; preds = %rb_array_const_ptr_transient.exit
  %54 = load i64, i64* %33, align 8, !dbg !50, !tbaa !37
  br label %rb_array_len.exit, !dbg !50

rb_array_len.exit:                                ; preds = %50, %53
  %55 = phi i64 [ %52, %50 ], [ %54, %53 ], !dbg !50
  %56 = icmp sgt i64 %55, %46, !dbg !50
  br i1 %56, label %35, label %sorbet_rb_array_each_withBlock.exit, !dbg !50

sorbet_rb_array_each_withBlock.exit:              ; preds = %rb_array_len.exit, %rb_array_len.exit1
  tail call void @sorbet_popRubyStack() #10, !dbg !50
  ret i64 %7, !dbg !50
}

; Function Attrs: sspreq
define void @Init_block_arg_expand() local_unnamed_addr #8 {
entry:
  %locals1.i.i = alloca [0 x i64], align 8
  %0 = alloca %struct.sorbet_inlineIntrinsicEnv, align 8
  %callArgs.i = alloca [3 x i64], align 16
  %realpath = tail call i64 @sorbet_readRealpath()
  %1 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #10
  store i64 %1, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %2 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str_block for", i64 0, i64 0), i64 9) #10
  store i64 %2, i64* @"rubyIdPrecomputed_block for", align 8
  %3 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"str_<build-array>", i64 0, i64 0), i64 13) #10
  %4 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_each, i64 0, i64 0), i64 4) #10
  store i64 %4, i64* @rubyIdPrecomputed_each, align 8
  %5 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_+", i64 0, i64 0), i64 1) #10
  store i64 %5, i64* @"rubyIdPrecomputed_+", align 8
  %6 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #10
  tail call void @rb_gc_register_mark_object(i64 %6) #10
  store i64 %6, i64* @"rubyStrFrozen_<top (required)>", align 8
  %7 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @"str_test/testdata/compiler/block_arg_expand.rb", i64 0, i64 0), i64 42) #10
  tail call void @rb_gc_register_mark_object(i64 %7) #10
  store i64 %7, i64* @"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb", align 8
  %8 = bitcast [0 x i64]* %locals1.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 0, i8* nonnull %8)
  %"rubyId_<top (required)>.i.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %locals1.sub.i.i = getelementptr inbounds [0 x i64], [0 x i64]* %locals1.i.i, i64 0, i64 0
  %9 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i.i", i64 %"rubyId_<top (required)>.i.i", i64 %7, i64 %realpath, %struct.rb_iseq_struct* null, i32 1, i32 1, i32 8, i64* nonnull %locals1.sub.i.i, i32 0, i32 3)
  store %struct.rb_iseq_struct* %9, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  call void @llvm.lifetime.end.p0i8(i64 0, i8* nonnull %8)
  %10 = call i64 @rb_fstring_new(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str_block for", i64 0, i64 0), i64 9) #10
  call void @rb_gc_register_mark_object(i64 %10) #10
  %"stackFrame_func_<root>.<static-init>$152.i.i" = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %"rubyId_block for.i.i" = load i64, i64* @"rubyIdPrecomputed_block for", align 8
  %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i2.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/block_arg_expand.rb", align 8
  %11 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %10, i64 %"rubyId_block for.i.i", i64 %"rubyStr_test/testdata/compiler/block_arg_expand.rb.i2.i", i64 %realpath, %struct.rb_iseq_struct* %"stackFrame_func_<root>.<static-init>$152.i.i", i32 2, i32 1, i32 8, i64* null, i32 0, i32 3)
  store %struct.rb_iseq_struct* %11, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152$block_1", align 8
  %rubyId_each.i = load i64, i64* @rubyIdPrecomputed_each, align 8, !dbg !50
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @ic_each, i64 %rubyId_each.i, i32 16, i32 0, i32 0, i64* null), !dbg !50
  %"rubyId_+.i" = load i64, i64* @"rubyIdPrecomputed_+", align 8, !dbg !40
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @"ic_+", i64 %"rubyId_+.i", i32 16, i32 1, i32 0, i64* null), !dbg !40
  %12 = bitcast [3 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12)
  %"stackFrame_func_<root>.<static-init>$152.i" = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %13 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !4
  %14 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %13, i64 0, i32 2
  %15 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %14, align 8, !tbaa !19
  %16 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %15, i64 0, i32 2
  store %struct.rb_iseq_struct* %"stackFrame_func_<root>.<static-init>$152.i", %struct.rb_iseq_struct** %16, align 8, !tbaa !20
  %17 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %15, i64 0, i32 4
  %18 = load i64*, i64** %17, align 8, !tbaa !22
  %19 = load i64, i64* %18, align 8, !tbaa !13
  %20 = and i64 %19, -161
  store i64 %20, i64* %18, align 8, !tbaa !13
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %13, %struct.rb_control_frame_struct* nonnull %15, %struct.rb_iseq_struct* %"stackFrame_func_<root>.<static-init>$152.i") #10
  %21 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %15, i64 0, i32 0
  %22 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %16, align 8, !tbaa !20
  %23 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %22, i64 0, i32 2
  %24 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %23, align 8, !tbaa !23
  %25 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %24, i64 0, i32 2
  %26 = load i64*, i64** %25, align 8, !tbaa !25
  %27 = getelementptr inbounds i64, i64* %26, i64 5
  store i64* %27, i64** %21, align 8, !dbg !55, !tbaa !4
  %callArgs0Addr.i = getelementptr inbounds [3 x i64], [3 x i64]* %callArgs.i, i64 0, i64 0, !dbg !56
  %28 = bitcast [3 x i64]* %callArgs.i to <2 x i64>*, !dbg !56
  store <2 x i64> <i64 3, i64 5>, <2 x i64>* %28, align 16, !dbg !56
  %29 = call i64 @rb_ary_new_from_values(i64 2, i64* nonnull %callArgs0Addr.i) #10, !dbg !56
  store i64 %29, i64* %callArgs0Addr.i, align 16, !dbg !50
  %30 = call i64 @rb_ary_new_from_values(i64 1, i64* nonnull %callArgs0Addr.i) #10, !dbg !50
  %31 = and i64 %30, 7, !dbg !50
  %32 = icmp ne i64 %31, 0, !dbg !50
  %33 = and i64 %30, -9, !dbg !50
  %34 = icmp eq i64 %33, 0, !dbg !50
  %35 = or i1 %32, %34, !dbg !50
  br i1 %35, label %alternativeCallIntrinsic_Array_each.i, label %sorbet_isa_Array.exit.i, !dbg !50, !prof !41

sorbet_isa_Array.exit.i:                          ; preds = %entry
  %36 = inttoptr i64 %30 to %struct.iseq_inline_iv_cache_entry*, !dbg !50
  %37 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %36, i64 0, i32 0, !dbg !50
  %38 = load i64, i64* %37, align 8, !dbg !50, !tbaa !35
  %39 = and i64 %38, 31, !dbg !50
  %40 = icmp eq i64 %39, 7, !dbg !50
  br i1 %40, label %fastSymCallIntrinsic_Array_each.i, label %alternativeCallIntrinsic_Array_each.i, !dbg !50, !prof !42

alternativeCallIntrinsic_Array_each.i:            ; preds = %sorbet_isa_Array.exit.i, %entry
  %41 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !50, !tbaa !4
  %42 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %41, i64 0, i32 2, !dbg !50
  %43 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %42, align 8, !dbg !50, !tbaa !19
  %44 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %43, i64 0, i32 1, !dbg !50
  %45 = load i64*, i64** %44, align 8, !dbg !50, !tbaa !57
  %46 = getelementptr inbounds i64, i64* %45, i64 1, !dbg !50
  store i64* %46, i64** %44, align 8, !dbg !50, !tbaa !57
  store i64 %30, i64* %45, align 8, !dbg !50, !tbaa !13
  %47 = call i64 @rb_iterate(i64 (i64)* nonnull @sorbet_iterMethod, i64 ptrtoint (%struct.FunctionInlineCache* @ic_each to i64), i64 (i64, i64, i32, i64*, i64)* nonnull @"func_<root>.<static-init>$152$block_1", i64 0) #10, !dbg !50
  br label %"func_<root>.<static-init>$152.exit", !dbg !50

fastSymCallIntrinsic_Array_each.i:                ; preds = %sorbet_isa_Array.exit.i
  %rubyId_each.i1 = load i64, i64* @rubyIdPrecomputed_each, align 8, !dbg !50
  %48 = bitcast %struct.sorbet_inlineIntrinsicEnv* %0 to i8*, !dbg !50
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %48) #10, !dbg !50
  %49 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %0, i64 0, i32 0, !dbg !50
  store i64 %30, i64* %49, align 8, !dbg !50, !tbaa !51
  %50 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %0, i64 0, i32 1, !dbg !50
  store i64 %rubyId_each.i1, i64* %50, align 8, !dbg !50, !tbaa !58
  %51 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %0, i64 0, i32 2, !dbg !50
  store i32 0, i32* %51, align 8, !dbg !50, !tbaa !53
  %52 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %0, i64 0, i32 3, !dbg !50
  %53 = ptrtoint %struct.sorbet_inlineIntrinsicEnv* %0 to i64, !dbg !50
  %54 = bitcast i64** %52 to i8*, !dbg !50
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %54, i8 0, i64 16, i1 false) #10, !dbg !50
  %55 = call i64 @rb_iterate(i64 (i64)* nonnull @forward_sorbet_rb_array_each, i64 %53, i64 (i64, i64, i32, i64*, i64)* nonnull @"func_<root>.<static-init>$152$block_1", i64 0) #10, !dbg !50
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %48) #10, !dbg !50
  br label %"func_<root>.<static-init>$152.exit", !dbg !50

"func_<root>.<static-init>$152.exit":             ; preds = %alternativeCallIntrinsic_Array_each.i, %fastSymCallIntrinsic_Array_each.i
  store i64* %27, i64** %21, align 8, !tbaa !4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: cold minsize noreturn ssp
define internal fastcc void @"func_<root>.<static-init>$152$block_1.cold.1"(i64 %el1.sroa.0.161) unnamed_addr #9 {
newFuncRoot:
  tail call void @sorbet_cast_failure(i64 %el1.sroa.0.161, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_T.let, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_Integer, i64 0, i64 0)), !dbg !40
  unreachable, !dbg !40
}

attributes #0 = { noreturn }
attributes #1 = { cold noreturn }
attributes #2 = { "addedToSilenceEmptyAttrsError" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind ssp uwtable }
attributes #6 = { ssp }
attributes #7 = { nounwind ssp }
attributes #8 = { sspreq }
attributes #9 = { cold minsize noreturn ssp }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { noinline }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "Sorbet LLVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "test/testdata/compiler/block_arg_expand.rb", directory: ".")
!3 = !{}
!4 = !{!5, !5, i64 0}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9, !10, i64 128}
!9 = !{!"rb_execution_context_struct", !5, i64 0, !10, i64 8, !5, i64 16, !5, i64 24, !5, i64 32, !11, i64 40, !11, i64 44, !5, i64 48, !5, i64 56, !5, i64 64, !10, i64 72, !10, i64 80, !5, i64 88, !10, i64 96, !5, i64 104, !5, i64 112, !10, i64 120, !10, i64 128, !6, i64 136, !6, i64 137, !10, i64 144, !12, i64 152}
!10 = !{!"long", !6, i64 0}
!11 = !{!"int", !6, i64 0}
!12 = !{!"", !5, i64 0, !5, i64 8, !10, i64 16, !6, i64 24}
!13 = !{!10, !10, i64 0}
!14 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.<static-init>$152$block_1", scope: !15, file: !2, line: 5, type: !16, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!15 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.<static-init>$152", scope: null, file: !2, line: 5, type: !16, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!16 = !DISubroutineType(types: !17)
!17 = !{!18}
!18 = !DIBasicType(name: "VALUE", size: 64, encoding: DW_ATE_signed)
!19 = !{!9, !5, i64 16}
!20 = !{!21, !5, i64 16}
!21 = !{!"rb_control_frame_struct", !5, i64 0, !5, i64 8, !5, i64 16, !10, i64 24, !5, i64 32, !5, i64 40, !5, i64 48}
!22 = !{!21, !5, i64 32}
!23 = !{!24, !5, i64 16}
!24 = !{!"rb_iseq_struct", !10, i64 0, !10, i64 8, !5, i64 16, !6, i64 24}
!25 = !{!26, !5, i64 8}
!26 = !{!"rb_iseq_constant_body", !6, i64 0, !11, i64 4, !5, i64 8, !27, i64 16, !29, i64 64, !32, i64 120, !5, i64 152, !5, i64 160, !5, i64 168, !5, i64 176, !5, i64 184, !5, i64 192, !33, i64 200, !11, i64 232, !11, i64 236, !11, i64 240, !11, i64 244, !11, i64 248, !6, i64 252, !10, i64 256}
!27 = !{!"", !28, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !5, i64 32, !5, i64 40}
!28 = !{!"", !11, i64 0, !11, i64 0, !11, i64 0, !11, i64 0, !11, i64 0, !11, i64 0, !11, i64 0, !11, i64 0, !11, i64 1, !11, i64 1}
!29 = !{!"rb_iseq_location_struct", !10, i64 0, !10, i64 8, !10, i64 16, !10, i64 24, !11, i64 32, !30, i64 36}
!30 = !{!"rb_code_location_struct", !31, i64 0, !31, i64 8}
!31 = !{!"rb_code_position_struct", !11, i64 0, !11, i64 4}
!32 = !{!"iseq_insn_info", !5, i64 0, !5, i64 8, !11, i64 16, !5, i64 24}
!33 = !{!"", !10, i64 0, !10, i64 8, !10, i64 16, !5, i64 24}
!34 = !DILocation(line: 5, column: 1, scope: !14)
!35 = !{!36, !10, i64 0}
!36 = !{!"RBasic", !10, i64 0, !10, i64 8}
!37 = !{!6, !6, i64 0}
!38 = !{!"branch_weights", i32 1, i32 2000}
!39 = !DILocation(line: 0, scope: !14)
!40 = !DILocation(line: 7, column: 3, scope: !14)
!41 = !{!"branch_weights", i32 1073205, i32 2146410443}
!42 = !{!"branch_weights", i32 2000, i32 1}
!43 = !DILocation(line: 7, column: 25, scope: !14)
!44 = !DILocation(line: 7, column: 3, scope: !14, inlinedAt: !45)
!45 = distinct !DILocation(line: 7, column: 25, scope: !14)
!46 = !{!"branch_weights", i32 4001, i32 4000000}
!47 = !{!48}
!48 = distinct !{!48, !49, !"sorbet_rb_int_plus: argument 0"}
!49 = distinct !{!49, !"sorbet_rb_int_plus"}
!50 = !DILocation(line: 5, column: 1, scope: !15)
!51 = !{!52, !10, i64 0}
!52 = !{!"sorbet_inlineIntrinsicEnv", !10, i64 0, !10, i64 8, !11, i64 16, !5, i64 24, !10, i64 32}
!53 = !{!52, !11, i64 16}
!54 = !{!52, !10, i64 32}
!55 = !DILocation(line: 0, scope: !15)
!56 = !DILocation(line: 5, column: 2, scope: !15)
!57 = !{!21, !5, i64 8}
!58 = !{!52, !10, i64 8}
