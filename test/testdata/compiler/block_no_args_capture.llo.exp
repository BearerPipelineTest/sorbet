; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.7 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.17 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_data*, %struct.anon.16, i32, i32, i32, i32, i32, i8, i64 }
%struct.anon = type { %struct.anon.0, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.0 = type { i16, [2 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.iseq_insn_info_entry*, i32*, i32, %struct.succ_index_table* }
%struct.iseq_insn_info_entry = type opaque
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, i64 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.rb_scope_visi_struct }
%struct.rb_scope_visi_struct = type { i8, [3 x i8] }
%struct.rb_call_data = type { %struct.rb_call_cache, %struct.rb_call_info }
%struct.rb_call_cache = type { i64, [3 x i64], %struct.rb_callable_method_entry_struct*, i64, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_data*)*, %union.anon.15 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon.13, i64, i64 }
%union.anon.13 = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64, i32, i64*, i64 (...)*)*, i32 }
%struct.rb_calling_info = type { i64, i64, i32, i32 }
%union.anon.15 = type { i32 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.anon.16 = type { i64, i64, i64, i64* }
%union.anon.17 = type { %struct.anon.18 }
%struct.anon.18 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [5 x i8*], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_fiber_struct = type opaque
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, i64, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %union.pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.10, i32, i64, %struct.rb_fiber_struct*, [5 x i8*], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %union.pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.5, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %union.pthread_mutex_t, i64, i64, i64, i64, i64, i32, %struct.st_table*, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.rb_builtin_function*, i32, %struct.anon.6, [29 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %union.pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%struct.anon.5 = type { [65 x i64] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.rb_builtin_function = type opaque
%struct.anon.6 = type { i64, i64, i64, i64 }
%struct.native_thread_data_struct = type { %struct.list_head, %union.anon.9 }
%union.anon.9 = type { %union.pthread_cond_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.10 = type { %struct.anon.11 }
%struct.anon.11 = type { i64, i64, i32 }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (i64, i64)*, i64 (i64)* }
%struct.st_table_entry = type opaque
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (i64)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.7 = type { i64*, i64*, i64, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.SorbetLineNumberInfo = type { i32, %struct.iseq_insn_info_entry*, i64* }
%struct.FunctionInlineCache = type { %struct.rb_kwarg_call_data }
%struct.rb_kwarg_call_data = type { %struct.rb_call_cache, %struct.rb_call_info_with_kwarg }
%struct.rb_call_info_with_kwarg = type { %struct.rb_call_info, %struct.rb_call_info_kw_arg* }
%struct.rb_call_info_kw_arg = type { i32, [1 x i64] }
%struct.rb_captured_block = type { i64, i64*, %union.anon.20 }
%union.anon.20 = type { %struct.rb_iseq_struct* }
%struct.sorbet_inlineIntrinsicEnv = type { i64, i64, i32, i64*, i64 }

@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@sorbet_rb_int_dotimes_withBlock.rb_funcallv_data = internal global %struct.rb_call_data zeroinitializer, align 8
@sorbet_rb_int_dotimes_withBlock.rb_funcallv_data.5 = internal global %struct.rb_call_data zeroinitializer, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.10 = private unnamed_addr constant [95 x i8] c"sorbet_getBuildSCMRevision: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@.str.11 = private unnamed_addr constant [93 x i8] c"sorbet_getIsReleaseBuild: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@"stackFramePrecomputed_func_<root>.<static-init>$152" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"rubyStrFrozen_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"rubyStrFrozen_test/testdata/compiler/block_no_args_capture.rb" = internal unnamed_addr global i64 0, align 8
@"str_test/testdata/compiler/block_no_args_capture.rb" = private unnamed_addr constant [48 x i8] c"test/testdata/compiler/block_no_args_capture.rb\00", align 1
@rubyIdPrecomputed_s = internal unnamed_addr global i64 0, align 8
@str_s = private unnamed_addr constant [2 x i8] c"s\00", align 1
@iseqEncodedArray = internal global [8 x i64] zeroinitializer
@fileLineNumberInfo = internal global %struct.SorbetLineNumberInfo zeroinitializer
@"stackFramePrecomputed_func_<root>.<static-init>$152$block_1" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_block for" = internal unnamed_addr global i64 0, align 8
@"str_block for" = private unnamed_addr constant [10 x i8] c"block for\00", align 1
@rubyStrFrozen_hi = internal unnamed_addr global i64 0, align 8
@str_hi = private unnamed_addr constant [3 x i8] c"hi\00", align 1
@rubyIdPrecomputed_times = internal unnamed_addr global i64 0, align 8
@str_times = private unnamed_addr constant [6 x i8] c"times\00", align 1
@ic_puts = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@rb_mKernel = external local_unnamed_addr constant i64

; Function Attrs: noreturn
declare void @rb_error_arity(i32, i32, i32) local_unnamed_addr #0

declare %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64, i64, i64, i64, %struct.rb_iseq_struct*, i32, i32, %struct.SorbetLineNumberInfo*, i64*, i32, i32) local_unnamed_addr #1

declare void @sorbet_initLineNumberInfo(%struct.SorbetLineNumberInfo*, i64*, i32) local_unnamed_addr #1

declare i64 @sorbet_readRealpath() local_unnamed_addr #1

declare void @sorbet_pushBlockFrame(%struct.rb_captured_block*) local_unnamed_addr #1

declare void @sorbet_popRubyStack() local_unnamed_addr #1

declare void @sorbet_vm_env_write_slowpath(i64*, i32, i64) local_unnamed_addr #1

declare void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache*, i64, i32, i32, i32, i64*) local_unnamed_addr #1

declare i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache*, i64) local_unnamed_addr #1

declare void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_iseq_struct*) local_unnamed_addr #1

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i64 @rb_funcallv_with_cc(%struct.rb_call_data*, i64, i64, i32, i64*) local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i64 @rb_fstring_new(i8*, i64) local_unnamed_addr #1

declare void @rb_gc_register_mark_object(i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #0

declare i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct*, i32) local_unnamed_addr #1

declare i64 @rb_iterate(i64 (i64)*, i64, i64 (i64, i64, i32, i64*, i64)*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define weak i32 @sorbet_getIsReleaseBuild() local_unnamed_addr #3 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* noundef getelementptr inbounds ([93 x i8], [93 x i8]* @.str.11, i64 0, i64 0)) #8
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @sorbet_getBuildSCMRevision() local_unnamed_addr #3 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* noundef getelementptr inbounds ([95 x i8], [95 x i8]* @.str.10, i64 0, i64 0)) #8
  unreachable
}

; Function Attrs: ssp
define internal i64 @"func_<root>.<static-init>$152$block_1"(i64 %firstYieldArgRaw, i64 %localsOffset, i32 %argc, i64* nocapture nofree readnone %argArray, i64 %blockArg) #4 !dbg !8 {
vm_get_ep.exit:
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !13
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !15
  %stackFrame = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152$block_1", align 8
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame, %struct.rb_iseq_struct** %3, align 8, !tbaa !19
  %4 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 4
  %5 = load i64*, i64** %4, align 8
  %6 = load i64, i64* %5, align 8, !tbaa !4
  %7 = and i64 %6, -129
  store i64 %7, i64* %5, align 8, !tbaa !4
  %8 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 0
  store i64* getelementptr inbounds ([8 x i64], [8 x i64]* @iseqEncodedArray, i64 0, i64 6), i64** %8, align 8, !dbg !21, !tbaa !13
  %9 = getelementptr inbounds i64, i64* %5, i64 -1, !dbg !22
  %10 = load i64, i64* %9, align 8, !dbg !22, !tbaa !4
  %11 = and i64 %10, -4, !dbg !22
  %12 = load i64, i64* @rb_mKernel, align 8, !dbg !22
  %13 = inttoptr i64 %11 to i64*, !dbg !22
  %14 = getelementptr inbounds i64, i64* %13, i64 -3, !dbg !22
  %15 = load i64, i64* %14, align 8, !dbg !22, !tbaa !4
  %16 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 1, !dbg !22
  %17 = load i64*, i64** %16, align 8, !dbg !22
  store i64 %12, i64* %17, align 8, !dbg !22, !tbaa !4
  %18 = getelementptr inbounds i64, i64* %17, i64 1, !dbg !22
  store i64 %15, i64* %18, align 8, !dbg !22, !tbaa !4
  %19 = getelementptr inbounds i64, i64* %18, i64 1, !dbg !22
  store i64* %19, i64** %16, align 8, !dbg !22
  %send = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_puts, i64 0), !dbg !22
  store i64* getelementptr inbounds ([8 x i64], [8 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %8, align 8, !dbg !22, !tbaa !13
  ret i64 %send, !dbg !21
}

; Function Attrs: nounwind ssp
define internal i64 @forward_sorbet_rb_int_dotimes_withBlock(i64 %0) #5 {
entry:
  %1 = alloca [1 x i64], align 8
  %2 = alloca [1 x i64], align 8
  %3 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !23, !tbaa !13
  %4 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %3, i64 0, i32 17, !dbg !23
  %5 = load i64, i64* %4, align 8, !dbg !23, !tbaa !24
  %6 = and i64 %5, -4, !dbg !23
  %7 = inttoptr i64 %6 to %struct.rb_captured_block*, !dbg !23
  store i64 0, i64* %4, align 8, !dbg !23, !tbaa !24
  %8 = inttoptr i64 %0 to %struct.sorbet_inlineIntrinsicEnv*, !dbg !23
  %9 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %8, i64 0, i32 0, !dbg !23
  %10 = load i64, i64* %9, align 8, !dbg !23, !tbaa !25
  %11 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %8, i64 0, i32 2, !dbg !23
  %12 = load i32, i32* %11, align 8, !dbg !23, !tbaa !27
  %13 = icmp slt i32 %12, 0, !dbg !23
  %14 = icmp sgt i32 %12, 0, !dbg !23
  %or.cond.i = or i1 %13, %14, !dbg !23
  br i1 %or.cond.i, label %15, label %rb_check_arity.1.exit, !dbg !23

15:                                               ; preds = %entry
  tail call void @rb_error_arity(i32 %12, i32 noundef 0, i32 noundef 0) #8, !dbg !23
  unreachable, !dbg !23

rb_check_arity.1.exit:                            ; preds = %entry
  tail call void @sorbet_pushBlockFrame(%struct.rb_captured_block* %7) #9, !dbg !23
  %16 = and i64 %10, 1, !dbg !23
  %17 = icmp eq i64 %16, 0, !dbg !23
  br i1 %17, label %18, label %28, !dbg !23, !prof !28

18:                                               ; preds = %rb_check_arity.1.exit
  %19 = bitcast [1 x i64]* %1 to i8*, !dbg !23
  call void @llvm.lifetime.start.p0i8(i64 noundef 8, i8* noundef nonnull %19) #9, !dbg !23
  %20 = getelementptr inbounds [1 x i64], [1 x i64]* %1, i64 0, i64 0, !dbg !23
  store i64 %10, i64* %20, align 8, !dbg !23, !tbaa !4
  %21 = call i64 @rb_funcallv_with_cc(%struct.rb_call_data* noundef nonnull @sorbet_rb_int_dotimes_withBlock.rb_funcallv_data, i64 noundef 1, i64 noundef 60, i32 noundef 1, i64* noundef nonnull align 8 %20) #9, !dbg !23
  call void @llvm.lifetime.end.p0i8(i64 noundef 8, i8* noundef nonnull %19) #9, !dbg !23
  %22 = and i64 %21, -9, !dbg !23
  %23 = icmp eq i64 %22, 0, !dbg !23
  br i1 %23, label %sorbet_rb_int_dotimes_withBlock.exit, label %24, !dbg !23

24:                                               ; preds = %18
  %25 = bitcast [1 x i64]* %2 to i8*, !dbg !23
  %26 = getelementptr inbounds [1 x i64], [1 x i64]* %2, i64 0, i64 0, !dbg !23
  %27 = load i64, i64* @rb_mKernel, align 8
  br label %58, !dbg !23

28:                                               ; preds = %rb_check_arity.1.exit
  %29 = ashr i64 %10, 1, !dbg !23
  %30 = icmp sgt i64 %10, 1, !dbg !23
  br i1 %30, label %31, label %sorbet_rb_int_dotimes_withBlock.exit, !dbg !23

31:                                               ; preds = %28
  %32 = icmp sgt i64 %29, 1, !dbg !23
  %33 = select i1 %32, i64 %29, i64 1, !dbg !23
  %34 = load i64, i64* @rb_mKernel, align 8
  br label %35, !dbg !23

35:                                               ; preds = %35, %31
  %36 = phi i64 [ 0, %31 ], [ %56, %35 ], !dbg !23
  %37 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !13
  %38 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %37, i64 0, i32 2
  %39 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %38, align 8, !tbaa !15
  %stackFrame.i1 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152$block_1", align 8
  %40 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %39, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i1, %struct.rb_iseq_struct** %40, align 8, !tbaa !19
  %41 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %39, i64 0, i32 4
  %42 = load i64*, i64** %41, align 8
  %43 = load i64, i64* %42, align 8, !tbaa !4
  %44 = and i64 %43, -129
  store i64 %44, i64* %42, align 8, !tbaa !4
  %45 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %39, i64 0, i32 0
  store i64* getelementptr inbounds ([8 x i64], [8 x i64]* @iseqEncodedArray, i64 0, i64 6), i64** %45, align 8, !dbg !29, !tbaa !13
  %46 = getelementptr inbounds i64, i64* %42, i64 -1, !dbg !31
  %47 = load i64, i64* %46, align 8, !dbg !31, !tbaa !4
  %48 = and i64 %47, -4, !dbg !31
  %49 = inttoptr i64 %48 to i64*, !dbg !31
  %50 = getelementptr inbounds i64, i64* %49, i64 -3, !dbg !31
  %51 = load i64, i64* %50, align 8, !dbg !31, !tbaa !4
  %52 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %39, i64 0, i32 1, !dbg !31
  %53 = load i64*, i64** %52, align 8, !dbg !31
  store i64 %34, i64* %53, align 8, !dbg !31, !tbaa !4
  %54 = getelementptr inbounds i64, i64* %53, i64 1, !dbg !31
  store i64 %51, i64* %54, align 8, !dbg !31, !tbaa !4
  %55 = getelementptr inbounds i64, i64* %54, i64 1, !dbg !31
  store i64* %55, i64** %52, align 8, !dbg !31
  %send = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_puts, i64 0), !dbg !31
  store i64* getelementptr inbounds ([8 x i64], [8 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %45, align 8, !dbg !31, !tbaa !13
  %56 = add nuw nsw i64 %36, 1, !dbg !23
  %57 = icmp eq i64 %56, %33, !dbg !23
  br i1 %57, label %sorbet_rb_int_dotimes_withBlock.exit, label %35, !dbg !23, !llvm.loop !32

58:                                               ; preds = %58, %24
  %59 = phi i64 [ 1, %24 ], [ %79, %58 ], !dbg !23
  %60 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !13
  %61 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %60, i64 0, i32 2
  %62 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %61, align 8, !tbaa !15
  %stackFrame.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152$block_1", align 8
  %63 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %62, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i, %struct.rb_iseq_struct** %63, align 8, !tbaa !19
  %64 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %62, i64 0, i32 4
  %65 = load i64*, i64** %64, align 8
  %66 = load i64, i64* %65, align 8, !tbaa !4
  %67 = and i64 %66, -129
  store i64 %67, i64* %65, align 8, !tbaa !4
  %68 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %62, i64 0, i32 0
  store i64* getelementptr inbounds ([8 x i64], [8 x i64]* @iseqEncodedArray, i64 0, i64 6), i64** %68, align 8, !dbg !34, !tbaa !13
  %69 = getelementptr inbounds i64, i64* %65, i64 -1, !dbg !36
  %70 = load i64, i64* %69, align 8, !dbg !36, !tbaa !4
  %71 = and i64 %70, -4, !dbg !36
  %72 = inttoptr i64 %71 to i64*, !dbg !36
  %73 = getelementptr inbounds i64, i64* %72, i64 -3, !dbg !36
  %74 = load i64, i64* %73, align 8, !dbg !36, !tbaa !4
  %75 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %62, i64 0, i32 1, !dbg !36
  %76 = load i64*, i64** %75, align 8, !dbg !36
  store i64 %27, i64* %76, align 8, !dbg !36, !tbaa !4
  %77 = getelementptr inbounds i64, i64* %76, i64 1, !dbg !36
  store i64 %74, i64* %77, align 8, !dbg !36, !tbaa !4
  %78 = getelementptr inbounds i64, i64* %77, i64 1, !dbg !36
  store i64* %78, i64** %75, align 8, !dbg !36
  %send8 = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* @ic_puts, i64 0), !dbg !36
  store i64* getelementptr inbounds ([8 x i64], [8 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %68, align 8, !dbg !36, !tbaa !13
  call void @llvm.lifetime.start.p0i8(i64 noundef 8, i8* noundef nonnull %25) #9, !dbg !23
  store i64 3, i64* %26, align 8, !dbg !23
  %79 = call i64 @rb_funcallv_with_cc(%struct.rb_call_data* noundef nonnull @sorbet_rb_int_dotimes_withBlock.rb_funcallv_data.5, i64 %59, i64 noundef 43, i32 noundef 1, i64* noundef nonnull %26) #9, !dbg !23
  call void @llvm.lifetime.end.p0i8(i64 noundef 8, i8* noundef nonnull %25) #9, !dbg !23
  call void @llvm.lifetime.start.p0i8(i64 noundef 8, i8* noundef nonnull %19) #9, !dbg !23
  store i64 %10, i64* %20, align 8, !dbg !23, !tbaa !4
  %80 = call i64 @rb_funcallv_with_cc(%struct.rb_call_data* noundef nonnull @sorbet_rb_int_dotimes_withBlock.rb_funcallv_data, i64 %79, i64 noundef 60, i32 noundef 1, i64* noundef nonnull %20) #9, !dbg !23
  call void @llvm.lifetime.end.p0i8(i64 noundef 8, i8* noundef nonnull %19) #9, !dbg !23
  %81 = and i64 %80, -9, !dbg !23
  %82 = icmp eq i64 %81, 0, !dbg !23
  br i1 %82, label %sorbet_rb_int_dotimes_withBlock.exit, label %58, !dbg !23, !llvm.loop !37

sorbet_rb_int_dotimes_withBlock.exit:             ; preds = %35, %58, %18, %28
  call void @sorbet_popRubyStack() #9, !dbg !23
  ret i64 %10, !dbg !23
}

; Function Attrs: sspreq
define void @Init_block_no_args_capture() local_unnamed_addr #6 {
entry:
  %0 = alloca %struct.sorbet_inlineIntrinsicEnv, align 8
  %locals.i.i = alloca i64, align 8
  %realpath = tail call i64 @sorbet_readRealpath()
  %1 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 noundef 16) #9
  store i64 %1, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %2 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @str_s, i64 0, i64 0), i64 noundef 1) #9
  store i64 %2, i64* @rubyIdPrecomputed_s, align 8
  %3 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @"str_block for", i64 0, i64 0), i64 noundef 9) #9
  store i64 %3, i64* @"rubyIdPrecomputed_block for", align 8
  %4 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @str_times, i64 0, i64 0), i64 noundef 5) #9
  store i64 %4, i64* @rubyIdPrecomputed_times, align 8
  %5 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 noundef 4) #9
  store i64 %5, i64* @rubyIdPrecomputed_puts, align 8
  %6 = tail call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 noundef 16) #9
  tail call void @rb_gc_register_mark_object(i64 %6) #9
  store i64 %6, i64* @"rubyStrFrozen_<top (required)>", align 8
  %7 = tail call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([48 x i8], [48 x i8]* @"str_test/testdata/compiler/block_no_args_capture.rb", i64 0, i64 0), i64 noundef 47) #9
  tail call void @rb_gc_register_mark_object(i64 %7) #9
  store i64 %7, i64* @"rubyStrFrozen_test/testdata/compiler/block_no_args_capture.rb", align 8
  tail call void @sorbet_initLineNumberInfo(%struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef getelementptr inbounds ([8 x i64], [8 x i64]* @iseqEncodedArray, i32 0, i32 0), i32 noundef 8)
  %8 = bitcast i64* %locals.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8)
  %"rubyId_<top (required)>.i.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/compiler/block_no_args_capture.rb.i.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/block_no_args_capture.rb", align 8
  %rubyId_s.i.i = load i64, i64* @rubyIdPrecomputed_s, align 8
  store i64 %rubyId_s.i.i, i64* %locals.i.i, align 8
  %9 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i.i", i64 %"rubyId_<top (required)>.i.i", i64 %"rubyStr_test/testdata/compiler/block_no_args_capture.rb.i.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 0, i32 noundef 4, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull align 8 %locals.i.i, i32 noundef 1, i32 noundef 2)
  store %struct.rb_iseq_struct* %9, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8)
  %10 = call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @"str_block for", i64 0, i64 0), i64 noundef 9) #9
  call void @rb_gc_register_mark_object(i64 %10) #9
  %stackFrame.i.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %"rubyId_block for.i.i" = load i64, i64* @"rubyIdPrecomputed_block for", align 8
  %"rubyStr_test/testdata/compiler/block_no_args_capture.rb.i2.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/block_no_args_capture.rb", align 8
  %11 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %10, i64 %"rubyId_block for.i.i", i64 %"rubyStr_test/testdata/compiler/block_no_args_capture.rb.i2.i", i64 %realpath, %struct.rb_iseq_struct* %stackFrame.i.i, i32 noundef 2, i32 noundef 4, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef null, i32 noundef 0, i32 noundef 2)
  store %struct.rb_iseq_struct* %11, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152$block_1", align 8
  %12 = call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @str_hi, i64 0, i64 0), i64 noundef 2) #9
  call void @rb_gc_register_mark_object(i64 %12) #9
  store i64 %12, i64* @rubyStrFrozen_hi, align 8
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !22
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_puts, i64 %rubyId_puts.i, i32 noundef 16, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !22
  %13 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !13
  %14 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %13, i64 0, i32 2
  %15 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %14, align 8, !tbaa !15
  %stackFrame.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %16 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %15, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i, %struct.rb_iseq_struct** %16, align 8, !tbaa !19
  %17 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %15, i64 0, i32 4
  %18 = load i64*, i64** %17, align 8, !tbaa !38
  %19 = load i64, i64* %18, align 8, !tbaa !4
  %20 = and i64 %19, -33
  store i64 %20, i64* %18, align 8, !tbaa !4
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %13, %struct.rb_control_frame_struct* %15, %struct.rb_iseq_struct* %stackFrame.i) #9
  %21 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %15, i64 0, i32 0
  store i64* getelementptr inbounds ([8 x i64], [8 x i64]* @iseqEncodedArray, i64 0, i64 4), i64** %21, align 8, !dbg !39, !tbaa !13
  %rubyStr_hi.i = load i64, i64* @rubyStrFrozen_hi, align 8, !dbg !40
  %22 = load i64*, i64** %17, align 8, !dbg !40, !tbaa !38
  %23 = load i64, i64* %22, align 8, !dbg !40, !tbaa !4
  %24 = and i64 %23, 8, !dbg !40
  %25 = icmp eq i64 %24, 0, !dbg !40
  br i1 %25, label %26, label %28, !dbg !40, !prof !41

26:                                               ; preds = %entry
  %27 = getelementptr inbounds i64, i64* %22, i64 -3, !dbg !40
  store i64 %rubyStr_hi.i, i64* %27, align 8, !dbg !40, !tbaa !4
  br label %sorbet_writeLocal.exit.i, !dbg !40

28:                                               ; preds = %entry
  call void @sorbet_vm_env_write_slowpath(i64* nonnull align 8 dereferenceable(8) %22, i32 noundef -3, i64 %rubyStr_hi.i) #9, !dbg !40
  br label %sorbet_writeLocal.exit.i, !dbg !40

sorbet_writeLocal.exit.i:                         ; preds = %28, %26
  store i64* getelementptr inbounds ([8 x i64], [8 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %21, align 8, !dbg !40, !tbaa !13
  %rubyId_times.i = load i64, i64* @rubyIdPrecomputed_times, align 8, !dbg !23
  %29 = bitcast %struct.sorbet_inlineIntrinsicEnv* %0 to i8*, !dbg !23
  call void @llvm.lifetime.start.p0i8(i64 noundef 40, i8* noundef nonnull %29) #9, !dbg !23
  %30 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %0, i64 0, i32 0, !dbg !23
  store i64 21, i64* %30, align 8, !dbg !23, !tbaa !25
  %31 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %0, i64 0, i32 1, !dbg !23
  store i64 %rubyId_times.i, i64* %31, align 8, !dbg !23, !tbaa !42
  %32 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %0, i64 0, i32 2, !dbg !23
  store i32 0, i32* %32, align 8, !dbg !23, !tbaa !27
  %33 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %0, i64 0, i32 3, !dbg !23
  %34 = ptrtoint %struct.sorbet_inlineIntrinsicEnv* %0 to i64, !dbg !23
  %35 = bitcast i64** %33 to i8*, !dbg !23
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 16, i1 false) #9, !dbg !23
  %36 = call i64 @rb_iterate(i64 (i64)* noundef @forward_sorbet_rb_int_dotimes_withBlock, i64 noundef %34, i64 (i64, i64, i32, i64*, i64)* noundef @"func_<root>.<static-init>$152$block_1", i64 noundef 0) #9, !dbg !23
  call void @llvm.lifetime.end.p0i8(i64 noundef 40, i8* noundef nonnull %29) #9, !dbg !23
  %37 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !23, !tbaa !13
  %38 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %37, i64 0, i32 5, !dbg !23
  %39 = load i32, i32* %38, align 8, !dbg !23, !tbaa !43
  %40 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %37, i64 0, i32 6, !dbg !23
  %41 = load i32, i32* %40, align 4, !dbg !23, !tbaa !44
  %42 = xor i32 %41, -1, !dbg !23
  %43 = and i32 %42, %39, !dbg !23
  %44 = icmp eq i32 %43, 0, !dbg !23
  br i1 %44, label %"func_<root>.<static-init>$152.exit", label %45, !dbg !23, !prof !41

45:                                               ; preds = %sorbet_writeLocal.exit.i
  %46 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %37, i64 0, i32 8, !dbg !23
  %47 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %46, align 8, !dbg !23, !tbaa !45
  %48 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %47, i32 noundef 0) #9, !dbg !23
  br label %"func_<root>.<static-init>$152.exit", !dbg !23

"func_<root>.<static-init>$152.exit":             ; preds = %sorbet_writeLocal.exit.i, %45
  store i64* getelementptr inbounds ([8 x i64], [8 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %21, align 8, !tbaa !13
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

attributes #0 = { noreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nofree nosync nounwind willreturn }
attributes #3 = { nounwind ssp uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { ssp }
attributes #5 = { nounwind ssp }
attributes #6 = { sspreq }
attributes #7 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #8 = { noreturn nounwind }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "Sorbet LLVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "test/testdata/compiler/block_no_args_capture.rb", directory: ".")
!3 = !{}
!4 = !{!5, !5, i64 0}
!5 = !{!"long", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.<static-init>$152$block_1", scope: !9, file: !2, line: 4, type: !10, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!9 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.<static-init>$152", scope: null, file: !2, line: 4, type: !10, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!10 = !DISubroutineType(types: !11)
!11 = !{!12}
!12 = !DIBasicType(name: "VALUE", size: 64, encoding: DW_ATE_signed)
!13 = !{!14, !14, i64 0}
!14 = !{!"any pointer", !6, i64 0}
!15 = !{!16, !14, i64 16}
!16 = !{!"rb_execution_context_struct", !14, i64 0, !5, i64 8, !14, i64 16, !14, i64 24, !14, i64 32, !17, i64 40, !17, i64 44, !14, i64 48, !14, i64 56, !14, i64 64, !5, i64 72, !5, i64 80, !14, i64 88, !5, i64 96, !14, i64 104, !14, i64 112, !5, i64 120, !5, i64 128, !6, i64 136, !6, i64 137, !5, i64 144, !18, i64 152}
!17 = !{!"int", !6, i64 0}
!18 = !{!"", !14, i64 0, !14, i64 8, !5, i64 16, !6, i64 24}
!19 = !{!20, !14, i64 16}
!20 = !{!"rb_control_frame_struct", !14, i64 0, !14, i64 8, !14, i64 16, !5, i64 24, !14, i64 32, !14, i64 40, !14, i64 48}
!21 = !DILocation(line: 5, column: 1, scope: !8)
!22 = !DILocation(line: 6, column: 3, scope: !8)
!23 = !DILocation(line: 5, column: 1, scope: !9)
!24 = !{!16, !5, i64 128}
!25 = !{!26, !5, i64 0}
!26 = !{!"sorbet_inlineIntrinsicEnv", !5, i64 0, !5, i64 8, !17, i64 16, !14, i64 24, !5, i64 32}
!27 = !{!26, !17, i64 16}
!28 = !{!"branch_weights", i32 1, i32 2000}
!29 = !DILocation(line: 5, column: 1, scope: !8, inlinedAt: !30)
!30 = distinct !DILocation(line: 5, column: 1, scope: !9)
!31 = !DILocation(line: 6, column: 3, scope: !8, inlinedAt: !30)
!32 = distinct !{!32, !33}
!33 = !{!"llvm.loop.unroll.disable"}
!34 = !DILocation(line: 5, column: 1, scope: !8, inlinedAt: !35)
!35 = distinct !DILocation(line: 5, column: 1, scope: !9)
!36 = !DILocation(line: 6, column: 3, scope: !8, inlinedAt: !35)
!37 = distinct !{!37, !33}
!38 = !{!20, !14, i64 32}
!39 = !DILocation(line: 0, scope: !9)
!40 = !DILocation(line: 4, column: 5, scope: !9)
!41 = !{!"branch_weights", i32 2000, i32 1}
!42 = !{!26, !5, i64 8}
!43 = !{!16, !17, i64 40}
!44 = !{!16, !17, i64 44}
!45 = !{!16, !14, i64 56}
