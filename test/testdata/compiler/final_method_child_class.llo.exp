; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.5 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.14 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_data*, %struct.anon.13, i32, i32, i32, i32, i32, i8, i64 }
%struct.anon = type { %struct.anon.0, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.0 = type { i16, [2 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.iseq_insn_info_entry*, i32*, i32, %struct.succ_index_table* }
%struct.iseq_insn_info_entry = type opaque
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, i64 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.rb_scope_visi_struct }
%struct.rb_scope_visi_struct = type { i8, [3 x i8] }
%struct.rb_call_data = type { %struct.rb_call_cache, %struct.rb_call_info }
%struct.rb_call_cache = type { i64, [3 x i64], %struct.rb_callable_method_entry_struct*, i64, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_data*)*, %union.anon.12 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon.10, i64, i64 }
%union.anon.10 = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64, i32, i64*, i64 (...)*)*, i32 }
%struct.rb_calling_info = type { i64, i64, i32, i32 }
%union.anon.12 = type { i32 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.anon.13 = type { i64, i64, i64, i64* }
%union.anon.14 = type { %struct.anon.15 }
%struct.anon.15 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [5 x i8*], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_fiber_struct = type opaque
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, i64, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %union.pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.7, i32, i64, %struct.rb_fiber_struct*, [5 x i8*], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %union.pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.3, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %union.pthread_mutex_t, i64, i64, i64, i64, i64, i32, %struct.st_table*, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.rb_builtin_function*, i32, %struct.anon.4, [29 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %union.pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32 }
%union.pthread_cond_t = type { %struct.anon.2 }
%struct.anon.2 = type { i32, i32, i64, i64, i64, i8*, i32, i32 }
%struct.anon.3 = type { [65 x i64] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.rb_builtin_function = type opaque
%struct.anon.4 = type { i64, i64, i64, i64 }
%struct.native_thread_data_struct = type { %struct.list_head, %union.anon.6 }
%union.anon.6 = type { %union.pthread_cond_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.7 = type { %struct.anon.8 }
%struct.anon.8 = type { i64, i64, i32 }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (i64, i64)*, i64 (i64)* }
%struct.st_table_entry = type opaque
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (i64)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.5 = type { i64*, i64*, i64, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.SorbetLineNumberInfo = type { i32, %struct.iseq_insn_info_entry*, i64* }
%struct.FunctionInlineCache = type { %struct.rb_kwarg_call_data }
%struct.rb_kwarg_call_data = type { %struct.rb_call_cache, %struct.rb_call_info_with_kwarg }
%struct.rb_call_info_with_kwarg = type { %struct.rb_call_info, %struct.rb_call_info_kw_arg* }
%struct.rb_call_info_kw_arg = type { i32, [1 x i64] }
%struct.rb_sorbet_param_struct = type { %struct.anon.0, i32, i32, i32, i32, i32, i32, i32, i64*, i32, i32, i32, i32, i64* }
%struct.vm_throw_data = type { i64, i64, i64, %struct.rb_control_frame_struct*, i32 }

@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@sorbet_getVoidSingleton.name = internal constant [30 x i8] c"T::Private::Types::Void::VOID\00", align 16
@ruby_vm_global_constant_state = external local_unnamed_addr global i64, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.10 = private unnamed_addr constant [95 x i8] c"sorbet_getBuildSCMRevision: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@.str.11 = private unnamed_addr constant [93 x i8] c"sorbet_getIsReleaseBuild: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@"stackFramePrecomputed_func_<root>.<static-init>$152" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"rubyStrFrozen_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"rubyStrFrozen_test/testdata/compiler/final_method_child_class.rb" = internal unnamed_addr global i64 0, align 8
@"str_test/testdata/compiler/final_method_child_class.rb" = private unnamed_addr constant [51 x i8] c"test/testdata/compiler/final_method_child_class.rb\00", align 1
@iseqEncodedArray = internal global [21 x i64] zeroinitializer
@fileLineNumberInfo = internal global %struct.SorbetLineNumberInfo zeroinitializer
@str_Parent = private unnamed_addr constant [7 x i8] c"Parent\00", align 1
@str_Child = private unnamed_addr constant [6 x i8] c"Child\00", align 1
@ic_new = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_new = internal unnamed_addr global i64 0, align 8
@str_new = private unnamed_addr constant [4 x i8] c"new\00", align 1
@ic_final_method = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_final_method = internal unnamed_addr global i64 0, align 8
@str_final_method = private unnamed_addr constant [13 x i8] c"final_method\00", align 1
@"stackFramePrecomputed_func_Parent#final_method" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyStrFrozen_final method!" = internal unnamed_addr global i64 0, align 8
@"str_final method!" = private unnamed_addr constant [14 x i8] c"final method!\00", align 1
@ic_puts = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@"<void-singleton>" = internal unnamed_addr global i64 0
@"stackFramePrecomputed_func_Parent.<static-init>" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"stackFramePrecomputed_func_Parent.<static-init>$block_1" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_block for" = internal unnamed_addr global i64 0, align 8
@"str_block for" = private unnamed_addr constant [10 x i8] c"block for\00", align 1
@rubyIdPrecomputed_final = internal unnamed_addr global i64 0, align 8
@str_final = private unnamed_addr constant [6 x i8] c"final\00", align 1
@ic_sig = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_sig = internal unnamed_addr global i64 0, align 8
@str_sig = private unnamed_addr constant [4 x i8] c"sig\00", align 1
@ic_void = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_void = internal unnamed_addr global i64 0, align 8
@str_void = private unnamed_addr constant [5 x i8] c"void\00", align 1
@"str_T::Sig" = private unnamed_addr constant [7 x i8] c"T::Sig\00", align 1
@ic_extend = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_extend = internal unnamed_addr global i64 0, align 8
@str_extend = private unnamed_addr constant [7 x i8] c"extend\00", align 1
@"str_T::Helpers" = private unnamed_addr constant [11 x i8] c"T::Helpers\00", align 1
@ic_extend.1 = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_normal = internal unnamed_addr global i64 0, align 8
@str_normal = private unnamed_addr constant [7 x i8] c"normal\00", align 1
@ic_keep_def = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_keep_def = internal unnamed_addr global i64 0, align 8
@str_keep_def = private unnamed_addr constant [9 x i8] c"keep_def\00", align 1
@"stackFramePrecomputed_func_Child.<static-init>" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@rb_cObject = external local_unnamed_addr constant i64
@"guard_epoch_T::Sig" = linkonce local_unnamed_addr global i64 0
@"guarded_const_T::Sig" = linkonce local_unnamed_addr global i64 0
@"guard_epoch_T::Helpers" = linkonce local_unnamed_addr global i64 0
@"guarded_const_T::Helpers" = linkonce local_unnamed_addr global i64 0
@guard_epoch_Parent = linkonce local_unnamed_addr global i64 0
@guarded_const_Parent = linkonce local_unnamed_addr global i64 0
@guard_epoch_Child = linkonce local_unnamed_addr global i64 0
@guarded_const_Child = linkonce local_unnamed_addr global i64 0

; Function Attrs: noreturn
declare void @sorbet_raiseArity(i32, i32, i32) local_unnamed_addr #0

declare %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64, i64, i64, i64, %struct.rb_iseq_struct*, i32, i32, %struct.SorbetLineNumberInfo*, i64*, i32, i32) local_unnamed_addr #1

declare void @sorbet_initLineNumberInfo(%struct.SorbetLineNumberInfo*, i64*, i32) local_unnamed_addr #1

declare i64 @sorbet_getConstant(i8*, i64) local_unnamed_addr #1

declare i64 @sorbet_readRealpath() local_unnamed_addr #1

declare %struct.rb_control_frame_struct* @sorbet_pushStaticInitFrame(i64) local_unnamed_addr #1

declare void @sorbet_popRubyStack() local_unnamed_addr #1

declare void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache*, i64, i32, i32, i32, i64*) local_unnamed_addr #1

declare i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache*, i64) local_unnamed_addr #1

declare void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_iseq_struct*) local_unnamed_addr #1

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i8* @llvm.frameaddress.p0i8(i32 immarg) #2

; Function Attrs: nofree nosync nounwind willreturn
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare i32 @llvm.eh.sjlj.setjmp(i8*) #4

declare void @rb_vm_rewind_cfp(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*) local_unnamed_addr #1

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(i8*) #5

declare i64 @rb_define_class(i8*, i64) local_unnamed_addr #1

declare i64 @rb_intern(i8*) local_unnamed_addr #1

declare void @rb_add_method_sorbet(i64, i64, i64 (i32, i64*, i64, %struct.rb_control_frame_struct*)*, %struct.rb_sorbet_param_struct*, i32, i8*) local_unnamed_addr #1

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #1

declare i64 @rb_id2sym(i64) local_unnamed_addr #1

declare i64 @rb_fstring_new(i8*, i64) local_unnamed_addr #1

declare void @rb_gc_register_mark_object(i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #0

declare i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct*, i32) local_unnamed_addr #1

; Function Attrs: alwaysinline nounwind ssp uwtable
define noalias nonnull i8* @sorbet_allocateParamInfo() local_unnamed_addr #6 {
  %1 = tail call noalias nonnull i8* @ruby_xcalloc(i64 noundef 1, i64 noundef 64) #14
  ret i8* %1
}

; Function Attrs: allocsize(0,1)
declare noalias nonnull i8* @ruby_xcalloc(i64, i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define weak i32 @sorbet_getIsReleaseBuild() local_unnamed_addr #8 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* noundef getelementptr inbounds ([93 x i8], [93 x i8]* @.str.11, i64 0, i64 0)) #5
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @sorbet_getBuildSCMRevision() local_unnamed_addr #8 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* noundef getelementptr inbounds ([95 x i8], [95 x i8]* @.str.10, i64 0, i64 0)) #5
  unreachable
}

; Function Attrs: sspreq
define void @Init_final_method_child_class() local_unnamed_addr #9 {
entry:
  %ecTag.i1.i = alloca %struct.rb_vm_tag, align 8
  %ecTag.i.i = alloca %struct.rb_vm_tag, align 8
  %ecTag.i = alloca %struct.rb_vm_tag, align 8
  %locals.i23.i = alloca i64, i32 0, align 8
  %locals.i18.i = alloca i64, i32 0, align 8
  %locals.i14.i = alloca i64, i32 0, align 8
  %locals.i.i = alloca i64, i32 0, align 8
  %realpath = tail call i64 @sorbet_readRealpath()
  %0 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 noundef 16) #4
  store i64 %0, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %1 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @str_new, i64 0, i64 0), i64 noundef 3) #4
  store i64 %1, i64* @rubyIdPrecomputed_new, align 8
  %2 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @str_final_method, i64 0, i64 0), i64 noundef 12) #4
  store i64 %2, i64* @rubyIdPrecomputed_final_method, align 8
  %3 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 noundef 4) #4
  store i64 %3, i64* @rubyIdPrecomputed_puts, align 8
  %4 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @"str_block for", i64 0, i64 0), i64 noundef 9) #4
  store i64 %4, i64* @"rubyIdPrecomputed_block for", align 8
  %5 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @str_final, i64 0, i64 0), i64 noundef 5) #4
  store i64 %5, i64* @rubyIdPrecomputed_final, align 8
  %6 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @str_sig, i64 0, i64 0), i64 noundef 3) #4
  store i64 %6, i64* @rubyIdPrecomputed_sig, align 8
  %7 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @str_void, i64 0, i64 0), i64 noundef 4) #4
  store i64 %7, i64* @rubyIdPrecomputed_void, align 8
  %8 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @str_extend, i64 0, i64 0), i64 noundef 6) #4
  store i64 %8, i64* @rubyIdPrecomputed_extend, align 8
  %9 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @str_normal, i64 0, i64 0), i64 noundef 6) #4
  store i64 %9, i64* @rubyIdPrecomputed_normal, align 8
  %10 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([9 x i8], [9 x i8]* @str_keep_def, i64 0, i64 0), i64 noundef 8) #4
  store i64 %10, i64* @rubyIdPrecomputed_keep_def, align 8
  %11 = tail call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 noundef 16) #4
  tail call void @rb_gc_register_mark_object(i64 %11) #4
  store i64 %11, i64* @"rubyStrFrozen_<top (required)>", align 8
  %12 = tail call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([51 x i8], [51 x i8]* @"str_test/testdata/compiler/final_method_child_class.rb", i64 0, i64 0), i64 noundef 50) #4
  tail call void @rb_gc_register_mark_object(i64 %12) #4
  store i64 %12, i64* @"rubyStrFrozen_test/testdata/compiler/final_method_child_class.rb", align 8
  tail call void @sorbet_initLineNumberInfo(%struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i32 0, i32 0), i32 noundef 21)
  %"rubyId_<top (required)>.i.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/final_method_child_class.rb", align 8
  %13 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i.i", i64 %"rubyId_<top (required)>.i.i", i64 %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 0, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals.i.i, i32 noundef 0, i32 noundef 2)
  store %struct.rb_iseq_struct* %13, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %rubyId_new.i = load i64, i64* @rubyIdPrecomputed_new, align 8, !dbg !8
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_new, i64 %rubyId_new.i, i32 noundef 16, i32 noundef 0, i32 noundef 0, i64* noundef null), !dbg !8
  %rubyId_final_method.i = load i64, i64* @rubyIdPrecomputed_final_method, align 8, !dbg !8
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_final_method, i64 %rubyId_final_method.i, i32 noundef 16, i32 noundef 0, i32 noundef 0, i64* noundef null), !dbg !8
  %14 = call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @str_final_method, i64 0, i64 0), i64 noundef 12) #4
  call void @rb_gc_register_mark_object(i64 %14) #4
  %rubyId_final_method.i.i = load i64, i64* @rubyIdPrecomputed_final_method, align 8
  %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i13.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/final_method_child_class.rb", align 8
  %15 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %14, i64 %rubyId_final_method.i.i, i64 %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i13.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 1, i32 noundef 10, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals.i14.i, i32 noundef 0, i32 noundef 2)
  store %struct.rb_iseq_struct* %15, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Parent#final_method", align 8
  %16 = call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @"str_final method!", i64 0, i64 0), i64 noundef 13) #4
  call void @rb_gc_register_mark_object(i64 %16) #4
  store i64 %16, i64* @"rubyStrFrozen_final method!", align 8
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !13
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_puts, i64 %rubyId_puts.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !13
  %17 = call i64 @sorbet_getConstant(i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @sorbet_getVoidSingleton.name, i64 0, i64 0), i64 noundef 30) #4
  store i64 %17, i64* @"<void-singleton>", align 8
  %"rubyId_<top (required)>.i15.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i16.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i17.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/final_method_child_class.rb", align 8
  %18 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i16.i", i64 %"rubyId_<top (required)>.i15.i", i64 %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i17.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 3, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals.i18.i, i32 noundef 0, i32 noundef 4)
  store %struct.rb_iseq_struct* %18, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Parent.<static-init>", align 8
  %19 = call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @"str_block for", i64 0, i64 0), i64 noundef 9) #4
  call void @rb_gc_register_mark_object(i64 %19) #4
  %stackFrame.i.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Parent.<static-init>", align 8
  %"rubyId_block for.i.i" = load i64, i64* @"rubyIdPrecomputed_block for", align 8
  %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i19.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/final_method_child_class.rb", align 8
  %20 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %19, i64 %"rubyId_block for.i.i", i64 %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i19.i", i64 %realpath, %struct.rb_iseq_struct* %stackFrame.i.i, i32 noundef 2, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef null, i32 noundef 0, i32 noundef 4)
  store %struct.rb_iseq_struct* %20, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Parent.<static-init>$block_1", align 8
  %rubyId_sig.i = load i64, i64* @rubyIdPrecomputed_sig, align 8, !dbg !15
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_sig, i64 %rubyId_sig.i, i32 noundef 20, i32 noundef 2, i32 noundef 0, i64* noundef null), !dbg !15
  %rubyId_void.i = load i64, i64* @rubyIdPrecomputed_void, align 8, !dbg !17
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_void, i64 %rubyId_void.i, i32 noundef 20, i32 noundef 0, i32 noundef 0, i64* noundef null), !dbg !17
  %rubyId_extend.i = load i64, i64* @rubyIdPrecomputed_extend, align 8, !dbg !19
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_extend, i64 %rubyId_extend.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !19
  %rubyId_extend9.i = load i64, i64* @rubyIdPrecomputed_extend, align 8, !dbg !20
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_extend.1, i64 %rubyId_extend9.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !20
  %rubyId_keep_def.i = load i64, i64* @rubyIdPrecomputed_keep_def, align 8, !dbg !21
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_keep_def, i64 %rubyId_keep_def.i, i32 noundef 16, i32 noundef 3, i32 noundef 0, i64* noundef null), !dbg !21
  %"rubyId_<top (required)>.i20.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i21.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i22.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/final_method_child_class.rb", align 8
  %21 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i21.i", i64 %"rubyId_<top (required)>.i20.i", i64 %"rubyStr_test/testdata/compiler/final_method_child_class.rb.i22.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 3, i32 noundef 15, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals.i23.i, i32 noundef 0, i32 noundef 0)
  store %struct.rb_iseq_struct* %21, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Child.<static-init>", align 8
  %22 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !22
  %23 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %22, i64 0, i32 2
  %24 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %23, align 8, !tbaa !24
  %25 = bitcast %struct.rb_vm_tag* %ecTag.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %25)
  %stackFrame.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %26 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %23, align 8, !tbaa !24
  %27 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %26, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i, %struct.rb_iseq_struct** %27, align 8, !tbaa !28
  %28 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %26, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8, !tbaa !30
  %30 = load i64, i64* %29, align 8, !tbaa !4
  %31 = and i64 %30, -33
  store i64 %31, i64* %29, align 8, !tbaa !4
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %22, %struct.rb_control_frame_struct* %26, %struct.rb_iseq_struct* %stackFrame.i) #4
  %32 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %24, i64 0, i32 0
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %32, align 8, !tbaa !22
  %33 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !22
  %34 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i, i64 0, i32 4
  store i32 0, i32* %34, align 8, !tbaa !31
  %35 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i, i64 0, i32 0
  store i64 52, i64* %35, align 8, !tbaa !33
  %36 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %33, i64 0, i32 3
  %37 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %36, align 8, !tbaa !34
  %38 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i, i64 0, i32 3
  store %struct.rb_vm_tag* %37, %struct.rb_vm_tag** %38, align 8, !tbaa !35
  %39 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i, i64 0, i32 2, i64 0
  %40 = call i8* @llvm.frameaddress.p0i8(i32 noundef 0) #4
  store i8* %40, i8** %39, align 8
  %41 = call i8* @llvm.stacksave() #4
  %42 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i, i64 0, i32 2, i64 2
  store i8* %41, i8** %42, align 8
  %43 = bitcast i8** %39 to i8*
  %44 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull align 8 %43) #4
  %45 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !22
  %46 = icmp eq i32 %44, 0
  %47 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %45, i64 0, i32 3
  br i1 %46, label %69, label %48

48:                                               ; preds = %entry
  %49 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %47, align 8, !tbaa !34
  %50 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %49, i64 0, i32 4
  %51 = load i32, i32* %50, align 8, !tbaa !31
  store i32 0, i32* %50, align 8, !tbaa !31
  %52 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %45, i64 0, i32 16
  %53 = load i64, i64* %52, align 8, !tbaa !36
  %54 = inttoptr i64 %53 to %struct.vm_throw_data*
  %55 = icmp eq i32 %51, 1
  br i1 %55, label %56, label %61

56:                                               ; preds = %48
  %57 = getelementptr inbounds %struct.vm_throw_data, %struct.vm_throw_data* %54, i64 0, i32 3
  %58 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %57, align 8, !tbaa !37
  %59 = icmp eq %struct.rb_control_frame_struct* %58, %24
  br i1 %59, label %sorbet_processThrowReturnSetJmp.exit.i, label %.thread4.i

.thread4.i:                                       ; preds = %56
  %60 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %38, align 8, !tbaa !35
  store %struct.rb_vm_tag* %60, %struct.rb_vm_tag** %47, align 8, !tbaa !34
  br label %64

61:                                               ; preds = %48
  %62 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %38, align 8, !tbaa !35
  store %struct.rb_vm_tag* %62, %struct.rb_vm_tag** %47, align 8, !tbaa !34
  %63 = icmp eq i32 %51, 0
  br i1 %63, label %fillRequiredArgs.i, label %64

64:                                               ; preds = %61, %.thread4.i
  %65 = phi %struct.rb_vm_tag* [ %60, %.thread4.i ], [ %62, %61 ]
  %66 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %65, i64 0, i32 4
  store i32 %51, i32* %66, align 8, !tbaa !31
  %67 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %65, i64 0, i32 2, i64 0
  %68 = bitcast i8** %67 to i8*
  call void @llvm.eh.sjlj.longjmp(i8* nonnull %68) #5
  unreachable

69:                                               ; preds = %entry
  store %struct.rb_vm_tag* %ecTag.i, %struct.rb_vm_tag** %47, align 8, !tbaa !34
  br label %fillRequiredArgs.i

sorbet_processThrowReturnSetJmp.exit.i:           ; preds = %56
  call void @rb_vm_rewind_cfp(%struct.rb_execution_context_struct* nonnull %45, %struct.rb_control_frame_struct* nonnull %24) #4
  store i64 8, i64* %52, align 8, !tbaa !36
  %70 = getelementptr inbounds %struct.vm_throw_data, %struct.vm_throw_data* %54, i64 0, i32 2
  %71 = load i64, i64* %70, align 8, !tbaa !39
  %72 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %38, align 8, !tbaa !35
  store %struct.rb_vm_tag* %72, %struct.rb_vm_tag** %47, align 8, !tbaa !34
  %73 = icmp eq i64 %71, 52
  br i1 %73, label %fillRequiredArgs.i, label %"func_<root>.<static-init>$152.exit"

fillRequiredArgs.i:                               ; preds = %sorbet_processThrowReturnSetJmp.exit.i, %69, %61
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %32, align 8, !dbg !40, !tbaa !22
  %74 = load i64, i64* @rb_cObject, align 8, !dbg !41
  %75 = call i64 @rb_define_class(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @str_Parent, i64 0, i64 0), i64 %74) #4, !dbg !41
  %76 = call %struct.rb_control_frame_struct* @sorbet_pushStaticInitFrame(i64 %75) #4, !dbg !41
  %77 = bitcast %struct.rb_vm_tag* %ecTag.i1.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %77) #4
  %stackFrame.i2.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Parent.<static-init>", align 8
  %78 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !22
  %79 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %78, i64 0, i32 2
  %80 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %79, align 8, !tbaa !24
  %81 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %80, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i2.i, %struct.rb_iseq_struct** %81, align 8, !tbaa !28
  %82 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %80, i64 0, i32 4
  %83 = load i64*, i64** %82, align 8, !tbaa !30
  %84 = load i64, i64* %83, align 8, !tbaa !4
  %85 = and i64 %84, -33
  store i64 %85, i64* %83, align 8, !tbaa !4
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %78, %struct.rb_control_frame_struct* %80, %struct.rb_iseq_struct* %stackFrame.i2.i) #4
  %86 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %76, i64 0, i32 0
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %86, align 8, !tbaa !22
  %87 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !22
  %88 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i1.i, i64 0, i32 4
  store i32 0, i32* %88, align 8, !tbaa !31
  %89 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i1.i, i64 0, i32 0
  store i64 52, i64* %89, align 8, !tbaa !33
  %90 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %87, i64 0, i32 3
  %91 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %90, align 8, !tbaa !34
  %92 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i1.i, i64 0, i32 3
  store %struct.rb_vm_tag* %91, %struct.rb_vm_tag** %92, align 8, !tbaa !35
  %93 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i1.i, i64 0, i32 2, i64 0
  store i8* %40, i8** %93, align 8
  %94 = call i8* @llvm.stacksave() #4
  %95 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i1.i, i64 0, i32 2, i64 2
  store i8* %94, i8** %95, align 8
  %96 = bitcast i8** %93 to i8*
  %97 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull align 8 %96) #4
  %98 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !22
  %99 = icmp eq i32 %97, 0
  %100 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %98, i64 0, i32 3
  br i1 %99, label %122, label %101

101:                                              ; preds = %fillRequiredArgs.i
  %102 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %100, align 8, !tbaa !34
  %103 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %102, i64 0, i32 4
  %104 = load i32, i32* %103, align 8, !tbaa !31
  store i32 0, i32* %103, align 8, !tbaa !31
  %105 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %98, i64 0, i32 16
  %106 = load i64, i64* %105, align 8, !tbaa !36
  %107 = inttoptr i64 %106 to %struct.vm_throw_data*
  %108 = icmp eq i32 %104, 1
  br i1 %108, label %109, label %114

109:                                              ; preds = %101
  %110 = getelementptr inbounds %struct.vm_throw_data, %struct.vm_throw_data* %107, i64 0, i32 3
  %111 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %110, align 8, !tbaa !37
  %112 = icmp eq %struct.rb_control_frame_struct* %111, %76
  br i1 %112, label %sorbet_processThrowReturnSetJmp.exit.i3.i, label %.thread2.i.i

.thread2.i.i:                                     ; preds = %109
  %113 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %92, align 8, !tbaa !35
  store %struct.rb_vm_tag* %113, %struct.rb_vm_tag** %100, align 8, !tbaa !34
  br label %117

114:                                              ; preds = %101
  %115 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %92, align 8, !tbaa !35
  store %struct.rb_vm_tag* %115, %struct.rb_vm_tag** %100, align 8, !tbaa !34
  %116 = icmp eq i32 %104, 0
  br i1 %116, label %fastSymCallIntrinsic_Static_sig.i.i, label %117

117:                                              ; preds = %114, %.thread2.i.i
  %118 = phi %struct.rb_vm_tag* [ %113, %.thread2.i.i ], [ %115, %114 ]
  %119 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %118, i64 0, i32 4
  store i32 %104, i32* %119, align 8, !tbaa !31
  %120 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %118, i64 0, i32 2, i64 0
  %121 = bitcast i8** %120 to i8*
  call void @llvm.eh.sjlj.longjmp(i8* nonnull %121) #5
  unreachable

122:                                              ; preds = %fillRequiredArgs.i
  store %struct.rb_vm_tag* %ecTag.i1.i, %struct.rb_vm_tag** %100, align 8, !tbaa !34
  br label %fastSymCallIntrinsic_Static_sig.i.i

sorbet_processThrowReturnSetJmp.exit.i3.i:        ; preds = %109
  call void @rb_vm_rewind_cfp(%struct.rb_execution_context_struct* nonnull %98, %struct.rb_control_frame_struct* nonnull %76) #4
  store i64 8, i64* %105, align 8, !tbaa !36
  %123 = getelementptr inbounds %struct.vm_throw_data, %struct.vm_throw_data* %107, i64 0, i32 2
  %124 = load i64, i64* %123, align 8, !tbaa !39
  %125 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %92, align 8, !tbaa !35
  store %struct.rb_vm_tag* %125, %struct.rb_vm_tag** %100, align 8, !tbaa !34
  %126 = icmp eq i64 %124, 52
  br i1 %126, label %fastSymCallIntrinsic_Static_sig.i.i, label %"func_Parent.<static-init>L62.exit.i"

fastSymCallIntrinsic_Static_sig.i.i:              ; preds = %sorbet_processThrowReturnSetJmp.exit.i3.i, %122, %114
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 9), i64** %86, align 8, !dbg !42, !tbaa !22
  %rubyId_final.i.i = load i64, i64* @rubyIdPrecomputed_final, align 8, !dbg !44
  %rawSym.i.i = call i64 @rb_id2sym(i64 %rubyId_final.i.i) #4, !dbg !44
  %127 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !45, !tbaa !22
  %128 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %127, i64 0, i32 5, !dbg !45
  %129 = load i32, i32* %128, align 8, !dbg !45, !tbaa !46
  %130 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %127, i64 0, i32 6, !dbg !45
  %131 = load i32, i32* %130, align 4, !dbg !45, !tbaa !47
  %132 = xor i32 %131, -1, !dbg !45
  %133 = and i32 %132, %129, !dbg !45
  %134 = icmp eq i32 %133, 0, !dbg !45
  br i1 %134, label %fastSymCallIntrinsic_Static_keep_def.i.i, label %135, !dbg !45, !prof !48

135:                                              ; preds = %fastSymCallIntrinsic_Static_sig.i.i
  %136 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %127, i64 0, i32 8, !dbg !45
  %137 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %136, align 8, !dbg !45, !tbaa !49
  %138 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %137, i32 noundef 0) #4, !dbg !45
  br label %fastSymCallIntrinsic_Static_keep_def.i.i, !dbg !45

fastSymCallIntrinsic_Static_keep_def.i.i:         ; preds = %135, %fastSymCallIntrinsic_Static_sig.i.i
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 6), i64** %86, align 8, !dbg !45, !tbaa !22
  %139 = load i64, i64* @"guard_epoch_T::Sig", align 8, !dbg !50
  %140 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !50, !tbaa !51
  %needTakeSlowPath = icmp ne i64 %139, %140, !dbg !50
  br i1 %needTakeSlowPath, label %141, label %142, !dbg !50, !prof !53

141:                                              ; preds = %fastSymCallIntrinsic_Static_keep_def.i.i
  call void @"const_recompute_T::Sig"(), !dbg !50
  br label %142, !dbg !50

142:                                              ; preds = %fastSymCallIntrinsic_Static_keep_def.i.i, %141
  %143 = load i64, i64* @"guarded_const_T::Sig", align 8, !dbg !50
  %144 = load i64, i64* @"guard_epoch_T::Sig", align 8, !dbg !50
  %145 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !50, !tbaa !51
  %guardUpdated = icmp eq i64 %144, %145, !dbg !50
  call void @llvm.assume(i1 %guardUpdated), !dbg !50
  %146 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %76, i64 0, i32 1, !dbg !50
  %147 = load i64*, i64** %146, align 8, !dbg !50, !tbaa !54
  %148 = getelementptr inbounds i64, i64* %147, i64 1, !dbg !50
  store i64 %75, i64* %147, align 8, !dbg !50, !tbaa !4
  %149 = getelementptr inbounds i64, i64* %148, i64 1, !dbg !50
  store i64* %149, i64** %146, align 8, !dbg !50, !tbaa !54
  store i64 %143, i64* %148, align 8, !dbg !50, !tbaa !4
  %send.i.i = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_extend, i64 0) #4, !dbg !50
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 7), i64** %86, align 8, !dbg !50, !tbaa !22
  %150 = load i64, i64* @"guard_epoch_T::Helpers", align 8, !dbg !55
  %151 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !55, !tbaa !51
  %needTakeSlowPath18 = icmp ne i64 %150, %151, !dbg !55
  br i1 %needTakeSlowPath18, label %152, label %153, !dbg !55, !prof !53

152:                                              ; preds = %142
  call void @"const_recompute_T::Helpers"(), !dbg !55
  br label %153, !dbg !55

153:                                              ; preds = %142, %152
  %154 = load i64, i64* @"guarded_const_T::Helpers", align 8, !dbg !55
  %155 = load i64, i64* @"guard_epoch_T::Helpers", align 8, !dbg !55
  %156 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !55, !tbaa !51
  %guardUpdated19 = icmp eq i64 %155, %156, !dbg !55
  call void @llvm.assume(i1 %guardUpdated19), !dbg !55
  %157 = load i64*, i64** %146, align 8, !dbg !55, !tbaa !54
  %158 = getelementptr inbounds i64, i64* %157, i64 1, !dbg !55
  store i64 %75, i64* %157, align 8, !dbg !55, !tbaa !4
  %159 = getelementptr inbounds i64, i64* %158, i64 1, !dbg !55
  store i64* %159, i64** %146, align 8, !dbg !55, !tbaa !54
  store i64 %154, i64* %158, align 8, !dbg !55, !tbaa !4
  %send41.i.i = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_extend.1, i64 0) #4, !dbg !55
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 10), i64** %86, align 8, !dbg !55, !tbaa !22
  %rubyId_final_method.i.i1 = load i64, i64* @rubyIdPrecomputed_final_method, align 8, !dbg !56
  %rawSym42.i.i = call i64 @rb_id2sym(i64 %rubyId_final_method.i.i1) #4, !dbg !56
  %rubyId_normal.i.i = load i64, i64* @rubyIdPrecomputed_normal, align 8, !dbg !56
  %rawSym43.i.i = call i64 @rb_id2sym(i64 %rubyId_normal.i.i) #4, !dbg !56
  %160 = load i64, i64* @guard_epoch_Parent, align 8, !dbg !56
  %161 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !56, !tbaa !51
  %needTakeSlowPath20 = icmp ne i64 %160, %161, !dbg !56
  br i1 %needTakeSlowPath20, label %162, label %163, !dbg !56, !prof !53

162:                                              ; preds = %153
  call void @const_recompute_Parent(), !dbg !56
  br label %163, !dbg !56

163:                                              ; preds = %153, %162
  %164 = load i64, i64* @guarded_const_Parent, align 8, !dbg !56
  %165 = load i64, i64* @guard_epoch_Parent, align 8, !dbg !56
  %166 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !56, !tbaa !51
  %guardUpdated21 = icmp eq i64 %165, %166, !dbg !56
  call void @llvm.assume(i1 %guardUpdated21), !dbg !56
  %stackFrame45.i.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Parent#final_method", align 8, !dbg !56
  %167 = call noalias nonnull i8* @ruby_xcalloc(i64 noundef 1, i64 noundef 64) #14, !dbg !56
  %168 = bitcast i8* %167 to i16*, !dbg !56
  %169 = load i16, i16* %168, align 8, !dbg !56
  %170 = and i16 %169, -384, !dbg !56
  store i16 %170, i16* %168, align 8, !dbg !56
  %171 = getelementptr inbounds i8, i8* %167, i64 4, !dbg !56
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %171, i8 0, i64 28, i1 false) #4, !dbg !56
  %172 = call i64 @rb_intern(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @str_final_method, i64 0, i64 0)) #4, !dbg !56
  %173 = bitcast i8* %167 to %struct.rb_sorbet_param_struct*, !dbg !56
  %174 = bitcast %struct.rb_iseq_struct* %stackFrame45.i.i to i8*, !dbg !56
  call void @rb_add_method_sorbet(i64 %164, i64 %172, i64 (i32, i64*, i64, %struct.rb_control_frame_struct*)* noundef @"func_Parent#final_method", %struct.rb_sorbet_param_struct* nonnull %173, i32 noundef 1, i8* %174) #4, !dbg !56
  %175 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !56, !tbaa !22
  %176 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %175, i64 0, i32 5, !dbg !56
  %177 = load i32, i32* %176, align 8, !dbg !56, !tbaa !46
  %178 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %175, i64 0, i32 6, !dbg !56
  %179 = load i32, i32* %178, align 4, !dbg !56, !tbaa !47
  %180 = xor i32 %179, -1, !dbg !56
  %181 = and i32 %180, %177, !dbg !56
  %182 = icmp eq i32 %181, 0, !dbg !56
  br i1 %182, label %"func_Parent.<static-init>L62.exit.i", label %183, !dbg !56, !prof !48

183:                                              ; preds = %163
  %184 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %175, i64 0, i32 8, !dbg !56
  %185 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %184, align 8, !dbg !56, !tbaa !49
  %186 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %185, i32 noundef 0) #4, !dbg !56
  br label %"func_Parent.<static-init>L62.exit.i", !dbg !56

"func_Parent.<static-init>L62.exit.i":            ; preds = %183, %163, %sorbet_processThrowReturnSetJmp.exit.i3.i
  %187 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !22
  %188 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %92, align 8, !tbaa !35
  %189 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %187, i64 0, i32 3
  store %struct.rb_vm_tag* %188, %struct.rb_vm_tag** %189, align 8, !tbaa !34
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %77) #4
  call void @sorbet_popRubyStack() #4, !dbg !41
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 15), i64** %32, align 8, !dbg !41, !tbaa !22
  %190 = load i64, i64* @guard_epoch_Parent, align 8, !dbg !57
  %191 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !57, !tbaa !51
  %needTakeSlowPath22 = icmp ne i64 %190, %191, !dbg !57
  br i1 %needTakeSlowPath22, label %192, label %193, !dbg !57, !prof !53

192:                                              ; preds = %"func_Parent.<static-init>L62.exit.i"
  call void @const_recompute_Parent(), !dbg !57
  br label %193, !dbg !57

193:                                              ; preds = %"func_Parent.<static-init>L62.exit.i", %192
  %194 = load i64, i64* @guarded_const_Parent, align 8, !dbg !57
  %195 = load i64, i64* @guard_epoch_Parent, align 8, !dbg !57
  %196 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !57, !tbaa !51
  %guardUpdated23 = icmp eq i64 %195, %196, !dbg !57
  call void @llvm.assume(i1 %guardUpdated23), !dbg !57
  %197 = call i64 @rb_define_class(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @str_Child, i64 0, i64 0), i64 %194) #4, !dbg !57
  %198 = call %struct.rb_control_frame_struct* @sorbet_pushStaticInitFrame(i64 %197) #4, !dbg !57
  %199 = bitcast %struct.rb_vm_tag* %ecTag.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %199) #4
  %stackFrame.i.i2 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Child.<static-init>", align 8
  %200 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !22
  %201 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %200, i64 0, i32 2
  %202 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %201, align 8, !tbaa !24
  %203 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %202, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i.i2, %struct.rb_iseq_struct** %203, align 8, !tbaa !28
  %204 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %202, i64 0, i32 4
  %205 = load i64*, i64** %204, align 8, !tbaa !30
  %206 = load i64, i64* %205, align 8, !tbaa !4
  %207 = and i64 %206, -33
  store i64 %207, i64* %205, align 8, !tbaa !4
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %200, %struct.rb_control_frame_struct* %202, %struct.rb_iseq_struct* %stackFrame.i.i2) #4
  %208 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %198, i64 0, i32 0
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 15), i64** %208, align 8, !tbaa !22
  %209 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !22
  %210 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i.i, i64 0, i32 4
  store i32 0, i32* %210, align 8, !tbaa !31
  %211 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i.i, i64 0, i32 0
  store i64 52, i64* %211, align 8, !tbaa !33
  %212 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %209, i64 0, i32 3
  %213 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %212, align 8, !tbaa !34
  %214 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i.i, i64 0, i32 3
  store %struct.rb_vm_tag* %213, %struct.rb_vm_tag** %214, align 8, !tbaa !35
  %215 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i.i, i64 0, i32 2, i64 0
  store i8* %40, i8** %215, align 8
  %216 = call i8* @llvm.stacksave() #4
  %217 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i.i, i64 0, i32 2, i64 2
  store i8* %216, i8** %217, align 8
  %218 = bitcast i8** %215 to i8*
  %219 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull align 8 %218) #4
  %220 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !22
  %221 = icmp eq i32 %219, 0
  %222 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %220, i64 0, i32 3
  br i1 %221, label %244, label %223

223:                                              ; preds = %193
  %224 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %222, align 8, !tbaa !34
  %225 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %224, i64 0, i32 4
  %226 = load i32, i32* %225, align 8, !tbaa !31
  store i32 0, i32* %225, align 8, !tbaa !31
  %227 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %220, i64 0, i32 16
  %228 = load i64, i64* %227, align 8, !tbaa !36
  %229 = inttoptr i64 %228 to %struct.vm_throw_data*
  %230 = icmp eq i32 %226, 1
  br i1 %230, label %231, label %236

231:                                              ; preds = %223
  %232 = getelementptr inbounds %struct.vm_throw_data, %struct.vm_throw_data* %229, i64 0, i32 3
  %233 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %232, align 8, !tbaa !37
  %234 = icmp eq %struct.rb_control_frame_struct* %233, %198
  br i1 %234, label %sorbet_processThrowReturnSetJmp.exit.i.i, label %.thread1.i.i

.thread1.i.i:                                     ; preds = %231
  %235 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %214, align 8, !tbaa !35
  store %struct.rb_vm_tag* %235, %struct.rb_vm_tag** %222, align 8, !tbaa !34
  br label %239

236:                                              ; preds = %223
  %237 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %214, align 8, !tbaa !35
  store %struct.rb_vm_tag* %237, %struct.rb_vm_tag** %222, align 8, !tbaa !34
  %238 = icmp eq i32 %226, 0
  br i1 %238, label %fillRequiredArgs.i.i, label %239

239:                                              ; preds = %236, %.thread1.i.i
  %240 = phi %struct.rb_vm_tag* [ %235, %.thread1.i.i ], [ %237, %236 ]
  %241 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %240, i64 0, i32 4
  store i32 %226, i32* %241, align 8, !tbaa !31
  %242 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %240, i64 0, i32 2, i64 0
  %243 = bitcast i8** %242 to i8*
  call void @llvm.eh.sjlj.longjmp(i8* nonnull %243) #5
  unreachable

244:                                              ; preds = %193
  store %struct.rb_vm_tag* %ecTag.i.i, %struct.rb_vm_tag** %222, align 8, !tbaa !34
  br label %fillRequiredArgs.i.i

sorbet_processThrowReturnSetJmp.exit.i.i:         ; preds = %231
  call void @rb_vm_rewind_cfp(%struct.rb_execution_context_struct* nonnull %220, %struct.rb_control_frame_struct* nonnull %198) #4
  store i64 8, i64* %227, align 8, !tbaa !36
  %245 = getelementptr inbounds %struct.vm_throw_data, %struct.vm_throw_data* %229, i64 0, i32 2
  %246 = load i64, i64* %245, align 8, !tbaa !39
  %247 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %214, align 8, !tbaa !35
  store %struct.rb_vm_tag* %247, %struct.rb_vm_tag** %222, align 8, !tbaa !34
  %248 = icmp eq i64 %246, 52
  br i1 %248, label %fillRequiredArgs.i.i, label %"func_Child.<static-init>L188.exit.i"

fillRequiredArgs.i.i:                             ; preds = %sorbet_processThrowReturnSetJmp.exit.i.i, %244, %236
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 15), i64** %208, align 8, !dbg !58, !tbaa !22
  br label %"func_Child.<static-init>L188.exit.i", !dbg !61

"func_Child.<static-init>L188.exit.i":            ; preds = %fillRequiredArgs.i.i, %sorbet_processThrowReturnSetJmp.exit.i.i
  %249 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !22
  %250 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %214, align 8, !tbaa !35
  %251 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %249, i64 0, i32 3
  store %struct.rb_vm_tag* %250, %struct.rb_vm_tag** %251, align 8, !tbaa !34
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %199) #4
  call void @sorbet_popRubyStack() #4, !dbg !57
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 20), i64** %32, align 8, !dbg !57, !tbaa !22
  %252 = load i64, i64* @guard_epoch_Child, align 8, !dbg !8
  %253 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !8, !tbaa !51
  %needTakeSlowPath24 = icmp ne i64 %252, %253, !dbg !8
  br i1 %needTakeSlowPath24, label %254, label %255, !dbg !8, !prof !53

254:                                              ; preds = %"func_Child.<static-init>L188.exit.i"
  call void @const_recompute_Child(), !dbg !8
  br label %255, !dbg !8

255:                                              ; preds = %"func_Child.<static-init>L188.exit.i", %254
  %256 = load i64, i64* @guarded_const_Child, align 8, !dbg !8
  %257 = load i64, i64* @guard_epoch_Child, align 8, !dbg !8
  %258 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !8, !tbaa !51
  %guardUpdated25 = icmp eq i64 %257, %258, !dbg !8
  call void @llvm.assume(i1 %guardUpdated25), !dbg !8
  %259 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %24, i64 0, i32 1, !dbg !8
  %260 = load i64*, i64** %259, align 8, !dbg !8, !tbaa !54
  %261 = getelementptr inbounds i64, i64* %260, i64 1, !dbg !8
  store i64* %261, i64** %259, align 8, !dbg !8, !tbaa !54
  store i64 %256, i64* %260, align 8, !dbg !8, !tbaa !4
  %send.i = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_new, i64 0) #4, !dbg !8
  %262 = load i64*, i64** %259, align 8, !dbg !8, !tbaa !54
  %263 = getelementptr inbounds i64, i64* %262, i64 1, !dbg !8
  store i64* %263, i64** %259, align 8, !dbg !8, !tbaa !54
  store i64 %send.i, i64* %262, align 8, !dbg !8, !tbaa !4
  %send27.i = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_final_method, i64 0) #4, !dbg !8
  br label %"func_<root>.<static-init>$152.exit", !dbg !8

"func_<root>.<static-init>$152.exit":             ; preds = %sorbet_processThrowReturnSetJmp.exit.i, %255
  %264 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !22
  %265 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %38, align 8, !tbaa !35
  %266 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %264, i64 0, i32 3
  store %struct.rb_vm_tag* %265, %struct.rb_vm_tag** %266, align 8, !tbaa !34
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %25)
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_Parent#final_method"(i32 %argc, i64* nocapture nofree readnone %argArray, i64 %selfRaw, %struct.rb_control_frame_struct* nonnull align 8 dereferenceable(8) %cfp) #10 !dbg !14 {
functionEntryInitializers:
  %ecTag = alloca %struct.rb_vm_tag, align 8
  %0 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 0
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 10), i64** %0, align 8, !tbaa !22
  %1 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !22
  %2 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag, i64 0, i32 4
  store i32 0, i32* %2, align 8, !tbaa !31
  %3 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag, i64 0, i32 0
  store i64 52, i64* %3, align 8, !tbaa !33
  %4 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %1, i64 0, i32 3
  %5 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %4, align 8, !tbaa !34
  %6 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag, i64 0, i32 3
  store %struct.rb_vm_tag* %5, %struct.rb_vm_tag** %6, align 8, !tbaa !35
  %7 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag, i64 0, i32 2, i64 0
  %8 = tail call i8* @llvm.frameaddress.p0i8(i32 noundef 0) #15
  store i8* %8, i8** %7, align 8
  %9 = tail call i8* @llvm.stacksave() #15
  %10 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag, i64 0, i32 2, i64 2
  store i8* %9, i8** %10, align 8
  %11 = bitcast i8** %7 to i8*
  %12 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull align 8 %11) #4
  %13 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !22
  %14 = icmp eq i32 %12, 0
  %15 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %13, i64 0, i32 3
  br i1 %14, label %37, label %16

16:                                               ; preds = %functionEntryInitializers
  %17 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %15, align 8, !tbaa !34
  %18 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %17, i64 0, i32 4
  %19 = load i32, i32* %18, align 8, !tbaa !31
  store i32 0, i32* %18, align 8, !tbaa !31
  %20 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %13, i64 0, i32 16
  %21 = load i64, i64* %20, align 8, !tbaa !36
  %22 = inttoptr i64 %21 to %struct.vm_throw_data*
  %23 = icmp eq i32 %19, 1
  br i1 %23, label %24, label %29

24:                                               ; preds = %16
  %25 = getelementptr inbounds %struct.vm_throw_data, %struct.vm_throw_data* %22, i64 0, i32 3
  %26 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %25, align 8, !tbaa !37
  %27 = icmp eq %struct.rb_control_frame_struct* %26, %cfp
  br i1 %27, label %sorbet_processThrowReturnSetJmp.exit, label %.thread11

.thread11:                                        ; preds = %24
  %28 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %6, align 8, !tbaa !35
  store %struct.rb_vm_tag* %28, %struct.rb_vm_tag** %15, align 8, !tbaa !34
  br label %32

29:                                               ; preds = %16
  %30 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %6, align 8, !tbaa !35
  store %struct.rb_vm_tag* %30, %struct.rb_vm_tag** %15, align 8, !tbaa !34
  %31 = icmp eq i32 %19, 0
  br i1 %31, label %argumentSetup, label %32

32:                                               ; preds = %.thread11, %29
  %33 = phi %struct.rb_vm_tag* [ %28, %.thread11 ], [ %30, %29 ]
  %34 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %33, i64 0, i32 4
  store i32 %19, i32* %34, align 8, !tbaa !31
  %35 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %33, i64 0, i32 2, i64 0
  %36 = bitcast i8** %35 to i8*
  call void @llvm.eh.sjlj.longjmp(i8* nonnull %36) #5
  unreachable

37:                                               ; preds = %functionEntryInitializers
  store %struct.rb_vm_tag* %ecTag, %struct.rb_vm_tag** %15, align 8, !tbaa !34
  br label %argumentSetup

sorbet_processThrowReturnSetJmp.exit:             ; preds = %24
  call void @rb_vm_rewind_cfp(%struct.rb_execution_context_struct* nonnull %13, %struct.rb_control_frame_struct* nonnull %cfp) #4
  store i64 8, i64* %20, align 8, !tbaa !36
  %38 = getelementptr inbounds %struct.vm_throw_data, %struct.vm_throw_data* %22, i64 0, i32 2
  %39 = load i64, i64* %38, align 8, !tbaa !39
  %40 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %6, align 8, !tbaa !35
  store %struct.rb_vm_tag* %40, %struct.rb_vm_tag** %15, align 8, !tbaa !34
  %41 = icmp eq i64 %39, 52
  br i1 %41, label %argumentSetup, label %postProcess

argumentSetup:                                    ; preds = %29, %37, %sorbet_processThrowReturnSetJmp.exit
  %tooManyArgs = icmp ugt i32 %argc, 0, !dbg !62
  br i1 %tooManyArgs, label %argCountFailBlock, label %fillRequiredArgs, !dbg !62, !prof !63

postProcess:                                      ; preds = %sorbet_processThrowReturnSetJmp.exit, %fillRequiredArgs
  %"<void-singleton>" = load i64, i64* @"<void-singleton>", align 8
  %42 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !22
  %43 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %6, align 8, !tbaa !35
  %44 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %42, i64 0, i32 3
  store %struct.rb_vm_tag* %43, %struct.rb_vm_tag** %44, align 8, !tbaa !34
  ret i64 %"<void-singleton>"

argCountFailBlock:                                ; preds = %argumentSetup
  call void @sorbet_raiseArity(i32 %argc, i32 noundef 0, i32 noundef 0) #0, !dbg !62
  unreachable, !dbg !62

fillRequiredArgs:                                 ; preds = %argumentSetup
  store i64* getelementptr inbounds ([21 x i64], [21 x i64]* @iseqEncodedArray, i64 0, i64 11), i64** %0, align 8, !dbg !64, !tbaa !22
  %"rubyStr_final method!" = load i64, i64* @"rubyStrFrozen_final method!", align 8, !dbg !65
  %45 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 1, !dbg !13
  %46 = load i64*, i64** %45, align 8, !dbg !13, !tbaa !54
  %47 = getelementptr inbounds i64, i64* %46, i64 1, !dbg !13
  store i64 %selfRaw, i64* %46, align 8, !dbg !13, !tbaa !4
  %48 = getelementptr inbounds i64, i64* %47, i64 1, !dbg !13
  store i64* %48, i64** %45, align 8, !dbg !13, !tbaa !54
  store i64 %"rubyStr_final method!", i64* %47, align 8, !dbg !13, !tbaa !4
  %send = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_puts, i64 0), !dbg !13
  br label %postProcess, !dbg !13
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #11

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #12

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #12

; Function Attrs: nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #3

; Function Attrs: ssp
define linkonce void @"const_recompute_T::Sig"() local_unnamed_addr #13 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"str_T::Sig", i64 0, i64 0), i64 6)
  store i64 %1, i64* @"guarded_const_T::Sig", align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !51
  store i64 %2, i64* @"guard_epoch_T::Sig", align 8
  ret void
}

; Function Attrs: ssp
define linkonce void @"const_recompute_T::Helpers"() local_unnamed_addr #13 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"str_T::Helpers", i64 0, i64 0), i64 10)
  store i64 %1, i64* @"guarded_const_T::Helpers", align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !51
  store i64 %2, i64* @"guard_epoch_T::Helpers", align 8
  ret void
}

; Function Attrs: ssp
define linkonce void @const_recompute_Parent() local_unnamed_addr #13 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Parent, i64 0, i64 0), i64 6)
  store i64 %1, i64* @guarded_const_Parent, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !51
  store i64 %2, i64* @guard_epoch_Parent, align 8
  ret void
}

; Function Attrs: ssp
define linkonce void @const_recompute_Child() local_unnamed_addr #13 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_Child, i64 0, i64 0), i64 5)
  store i64 %1, i64* @guarded_const_Child, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !51
  store i64 %2, i64* @guard_epoch_Child, align 8
  ret void
}

attributes #0 = { noreturn }
attributes #1 = { "addedToSilenceEmptyAttrsError" }
attributes #2 = { nofree nosync nounwind readnone willreturn }
attributes #3 = { nofree nosync nounwind willreturn }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }
attributes #6 = { alwaysinline nounwind ssp uwtable }
attributes #7 = { allocsize(0,1) }
attributes #8 = { nounwind ssp uwtable }
attributes #9 = { sspreq }
attributes #10 = { nounwind sspreq uwtable }
attributes #11 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #12 = { argmemonly nofree nosync nounwind willreturn }
attributes #13 = { ssp }
attributes #14 = { nounwind allocsize(0,1) }
attributes #15 = { nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "Sorbet LLVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "test/testdata/compiler/final_method_child_class.rb", directory: ".")
!3 = !{}
!4 = !{!5, !5, i64 0}
!5 = !{!"long", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !DILocation(line: 20, column: 1, scope: !9)
!9 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.<static-init>$152", scope: null, file: !2, line: 5, type: !10, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!10 = !DISubroutineType(types: !11)
!11 = !{!12}
!12 = !DIBasicType(name: "VALUE", size: 64, encoding: DW_ATE_signed)
!13 = !DILocation(line: 11, column: 5, scope: !14)
!14 = distinct !DISubprogram(name: "Parent#final_method", linkageName: "func_Parent#final_method", scope: null, file: !2, line: 10, type: !10, scopeLine: 10, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!15 = !DILocation(line: 9, column: 3, scope: !16)
!16 = distinct !DISubprogram(name: "Parent.<static-init>", linkageName: "func_Parent.<static-init>L62", scope: null, file: !2, line: 5, type: !10, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!17 = !DILocation(line: 9, column: 16, scope: !18)
!18 = distinct !DISubprogram(name: "Parent.<static-init>", linkageName: "func_Parent.<static-init>L62$block_1", scope: !16, file: !2, line: 5, type: !10, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!19 = !DILocation(line: 6, column: 3, scope: !16)
!20 = !DILocation(line: 7, column: 3, scope: !16)
!21 = !DILocation(line: 10, column: 3, scope: !16)
!22 = !{!23, !23, i64 0}
!23 = !{!"any pointer", !6, i64 0}
!24 = !{!25, !23, i64 16}
!25 = !{!"rb_execution_context_struct", !23, i64 0, !5, i64 8, !23, i64 16, !23, i64 24, !23, i64 32, !26, i64 40, !26, i64 44, !23, i64 48, !23, i64 56, !23, i64 64, !5, i64 72, !5, i64 80, !23, i64 88, !5, i64 96, !23, i64 104, !23, i64 112, !5, i64 120, !5, i64 128, !6, i64 136, !6, i64 137, !5, i64 144, !27, i64 152}
!26 = !{!"int", !6, i64 0}
!27 = !{!"", !23, i64 0, !23, i64 8, !5, i64 16, !6, i64 24}
!28 = !{!29, !23, i64 16}
!29 = !{!"rb_control_frame_struct", !23, i64 0, !23, i64 8, !23, i64 16, !5, i64 24, !23, i64 32, !23, i64 40, !23, i64 48}
!30 = !{!29, !23, i64 32}
!31 = !{!32, !6, i64 64}
!32 = !{!"rb_vm_tag", !5, i64 0, !5, i64 8, !6, i64 16, !23, i64 56, !6, i64 64}
!33 = !{!32, !5, i64 0}
!34 = !{!25, !23, i64 24}
!35 = !{!32, !23, i64 56}
!36 = !{!25, !5, i64 120}
!37 = !{!38, !23, i64 24}
!38 = !{!"vm_throw_data", !5, i64 0, !5, i64 8, !5, i64 16, !23, i64 24, !26, i64 32}
!39 = !{!38, !5, i64 16}
!40 = !DILocation(line: 0, scope: !9)
!41 = !DILocation(line: 5, column: 1, scope: !9)
!42 = !DILocation(line: 0, scope: !16, inlinedAt: !43)
!43 = distinct !DILocation(line: 5, column: 1, scope: !9)
!44 = !DILocation(line: 9, column: 7, scope: !16, inlinedAt: !43)
!45 = !DILocation(line: 9, column: 3, scope: !16, inlinedAt: !43)
!46 = !{!25, !26, i64 40}
!47 = !{!25, !26, i64 44}
!48 = !{!"branch_weights", i32 2000, i32 1}
!49 = !{!25, !23, i64 56}
!50 = !DILocation(line: 6, column: 3, scope: !16, inlinedAt: !43)
!51 = !{!52, !52, i64 0}
!52 = !{!"long long", !6, i64 0}
!53 = !{!"branch_weights", i32 1, i32 10000}
!54 = !{!29, !23, i64 8}
!55 = !DILocation(line: 7, column: 3, scope: !16, inlinedAt: !43)
!56 = !DILocation(line: 10, column: 3, scope: !16, inlinedAt: !43)
!57 = !DILocation(line: 15, column: 1, scope: !9)
!58 = !DILocation(line: 0, scope: !59, inlinedAt: !60)
!59 = distinct !DISubprogram(name: "Child.<static-init>", linkageName: "func_Child.<static-init>L188", scope: null, file: !2, line: 15, type: !10, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!60 = distinct !DILocation(line: 15, column: 1, scope: !9)
!61 = !DILocation(line: 15, column: 1, scope: !59, inlinedAt: !60)
!62 = !DILocation(line: 10, column: 3, scope: !14)
!63 = !{!"branch_weights", i32 1, i32 2000}
!64 = !DILocation(line: 0, scope: !14)
!65 = !DILocation(line: 11, column: 10, scope: !14)
