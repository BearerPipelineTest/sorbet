; ModuleID = 'payload'
source_filename = "compiler/IREmitter/Payload/payload.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_data_type_struct = type { i8*, %struct.anon.1, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.1 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.19 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.16 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon.2, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_info*, %struct.rb_call_cache*, %struct.anon.15, i32, i32, i32, i32, i32, i8 }
%struct.anon.2 = type { %struct.anon.3, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.3 = type { i8, [3 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.iseq_insn_info_entry*, i32*, i32, %struct.succ_index_table* }
%struct.iseq_insn_info_entry = type { i32, i32 }
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, %union.anon.12 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.rb_scope_visi_struct }
%struct.rb_scope_visi_struct = type { i8, [3 x i8] }
%union.anon.12 = type { i64 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.rb_call_cache = type { i64, i64, %struct.rb_callable_method_entry_struct*, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_info*, %struct.rb_call_cache*)*, %union.anon.14 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon.13, i64 }
%union.anon.13 = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64 (...)*, i64, i32, i64*)*, i32 }
%struct.rb_calling_info = type { i64, i64, i32 }
%union.anon.14 = type { i32 }
%struct.anon.15 = type { i64, i64, i64, i64* }
%union.anon.16 = type { %struct.anon.17 }
%struct.anon.17 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [38 x i32], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_fiber_struct = type opaque
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, %struct._opaque_pthread_t*, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %struct._opaque_pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.9, i32, i64, %struct.rb_fiber_struct*, [38 x i32], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %struct._opaque_pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.5, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %struct._opaque_pthread_mutex_t, i64, i64, i64, i64, i64, i32, i64, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.anon.6, [28 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %struct._opaque_pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %struct._opaque_pthread_cond_t, %struct._opaque_pthread_cond_t, i32, i32 }
%struct._opaque_pthread_cond_t = type { i64, [40 x i8] }
%struct.anon.5 = type { [32 x i64], [32 x i8] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.anon.6 = type { i64, i64, i64, i64 }
%struct._opaque_pthread_t = type { i64, %struct.__darwin_pthread_handler_rec*, [8176 x i8] }
%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }
%struct.native_thread_data_struct = type { %union.anon.7, %struct.anon.8 }
%union.anon.7 = type { %struct.list_node }
%struct.anon.8 = type { %struct._opaque_pthread_cond_t, %struct._opaque_pthread_cond_t }
%struct._opaque_pthread_mutex_t = type { i64, [56 x i8] }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.9 = type { %struct.anon.10 }
%struct.anon.10 = type { i64, i64 }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (...)*, i64 (...)* }
%struct.st_table_entry = type opaque
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (...)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.19 = type { i64*, i64*, i64, [37 x i32] }
%struct.RBasic = type { i64, i64 }
%struct.RString = type { %struct.RBasic, %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { i64, i8*, %union.anon.0 }
%union.anon.0 = type { i64 }
%struct.OnigEncodingTypeST = type { i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i8*, i32, i32, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8**, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i32 (i32, i32*, i32, i8*)*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, i8*, %struct.OnigCaseFoldCodeItem*, %struct.OnigEncodingTypeST*)*, i32 (%struct.OnigEncodingTypeST*, i8*, i8*)*, i32 (i32, i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i32*, i32**, %struct.OnigEncodingTypeST*)*, i8* (i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32*, i8**, i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32, i32 }
%struct.OnigCaseFoldCodeItem = type { i32, i32, [3 x i32] }
%struct.rb_ast_body_struct = type { %struct.RNode*, i64, i32 }
%struct.RNode = type { i64, %union.anon.20, %union.anon.21, %union.anon.22, %struct.rb_code_location_struct, i32 }
%union.anon.20 = type { %struct.RNode* }
%union.anon.21 = type { %struct.RNode* }
%union.anon.22 = type { %struct.RNode* }
%struct.rb_compile_option_struct = type { i16, i32 }

@.str = private unnamed_addr constant [5 x i8] c"%li\0B\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@ruby_vm_global_constant_state = external local_unnamed_addr global i64, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.1 = private unnamed_addr constant [29 x i8] c"wrong constant name %li\0B%li\0B\00", align 1
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@.str.2 = private unnamed_addr constant [36 x i8] c"%li\0B does not refer to class/module\00", align 1
@sorbet_getConstantAt.rb_intern_id_cache = internal unnamed_addr global i64 0, align 8
@.str.3 = private unnamed_addr constant [14 x i8] c"const_missing\00", align 1
@.str.4 = private unnamed_addr constant [50 x i8] c"wrong number of arguments (given %d, expected %d)\00", align 1
@.str.5 = private unnamed_addr constant [51 x i8] c"wrong number of arguments (given %d, expected %d+)\00", align 1
@.str.6 = private unnamed_addr constant [54 x i8] c"wrong number of arguments (given %d, expected %d..%d)\00", align 1
@rb_eArgError = external local_unnamed_addr global i64, align 8
@.str.7 = private unnamed_addr constant [45 x i8] c"%s: Expected type %s, got %s with value %li\0B\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@closureInfo = local_unnamed_addr constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i32 0, i32 0), %struct.anon.1 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"str_test/testdata/compiler/instancefields.rb" = private unnamed_addr constant [41 x i8] c"test/testdata/compiler/instancefields.rb\00", align 1
@str_cast = private unnamed_addr constant [5 x i8] c"cast\00", align 1
@rubyIdPrecomputed_unsafe = internal unnamed_addr global i64 0, align 8
@str_unsafe = private unnamed_addr constant [7 x i8] c"unsafe\00", align 1
@str_A = private unnamed_addr constant [2 x i8] c"A\00", align 1
@rubyIdPrecomputed_new = internal unnamed_addr global i64 0, align 8
@str_new = private unnamed_addr constant [4 x i8] c"new\00", align 1
@rubyIdPrecomputed_read = internal unnamed_addr global i64 0, align 8
@str_read = private unnamed_addr constant [5 x i8] c"read\00", align 1
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@str_value = private unnamed_addr constant [6 x i8] c"value\00", align 1
@rubyIdPrecomputed_write = internal unnamed_addr global i64 0, align 8
@str_write = private unnamed_addr constant [6 x i8] c"write\00", align 1
@"rubyIdPrecomputed_@f" = internal unnamed_addr global i64 0, align 8
@"str_@f" = private unnamed_addr constant [3 x i8] c"@f\00", align 1
@llvm.global_ctors = appending global [7 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_<top (required)>", i8* bitcast (i64* @"rubyIdPrecomputed_<top (required)>" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_unsafe, i8* bitcast (i64* @rubyIdPrecomputed_unsafe to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_new, i8* bitcast (i64* @rubyIdPrecomputed_new to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_read, i8* bitcast (i64* @rubyIdPrecomputed_read to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_puts, i8* bitcast (i64* @rubyIdPrecomputed_puts to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_write, i8* bitcast (i64* @rubyIdPrecomputed_write to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_@f", i8* bitcast (i64* @"rubyIdPrecomputed_@f" to i8*) }]
@guard_epoch_A = linkonce local_unnamed_addr global i64 0
@guarded_const_A = linkonce local_unnamed_addr global i64 0

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_pi(i64 %0) local_unnamed_addr #0 {
  %2 = tail call i8* @rb_id2name(i64 %0) #16
  ret i8* %2
}

declare i8* @rb_id2name(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_p(i64 %0) local_unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 %0) #16
  %3 = inttoptr i64 %2 to %struct.RBasic*
  %4 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !0
  %6 = and i64 %5, 8192
  %7 = icmp eq i64 %6, 0
  %8 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 %0) #16
  %9 = inttoptr i64 %8 to %struct.RString*
  br i1 %7, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !5
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i8* [ %12, %10 ], [ %15, %13 ]
  ret i8* %17
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i64 @rb_str_new(i8*, i64) local_unnamed_addr #1

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #1

declare i64 @rb_id2sym(i64) local_unnamed_addr #1

declare i8* @rb_obj_classname(i64) local_unnamed_addr #1

declare i64 @rb_ivar_get(i64, i64) local_unnamed_addr #1

declare i64 @rb_ivar_set(i64, i64, i64) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @sorbet_getConstantAt(i64 %0, i64 %1) unnamed_addr #3 {
  %3 = tail call i64 @rb_id2sym(i64 %1) #16
  %4 = tail call %struct.OnigEncodingTypeST* @rb_enc_get(i64 %3) #16
  %5 = tail call i8* @rb_id2name(i64 %1) #16
  %6 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %5)
  %7 = getelementptr inbounds i8, i8* %5, i64 %6
  %8 = icmp sgt i64 %6, 0
  br i1 %8, label %9, label %.loopexit11

9:                                                ; preds = %2
  %10 = ptrtoint i8* %5 to i64
  br label %13

.loopexit10:                                      ; preds = %91, %44, %41, %28, %107
  %11 = phi i64 [ %108, %107 ], [ %3, %28 ], [ %3, %44 ], [ %3, %41 ], [ %66, %91 ]
  %12 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !6
  tail call void (i64, i8*, ...) @rb_raise(i64 %12, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i64 %14, i64 %11) #17
  unreachable

13:                                               ; preds = %115, %9
  %14 = phi i64 [ %0, %9 ], [ %116, %115 ]
  %15 = phi i8* [ %5, %9 ], [ %50, %115 ]
  %16 = phi i8* [ %5, %9 ], [ %49, %115 ]
  %17 = icmp ult i8* %16, %7
  br i1 %17, label %18, label %28

18:                                               ; preds = %13
  %19 = load i8, i8* %16, align 1, !tbaa !5
  %20 = icmp eq i8 %19, 58
  br i1 %20, label %28, label %.preheader

21:                                               ; preds = %.preheader
  %22 = load i8, i8* %25, align 1, !tbaa !5
  %23 = icmp eq i8 %22, 58
  br i1 %23, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %18, %21
  %24 = phi i8* [ %25, %21 ], [ %16, %18 ]
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  %26 = icmp eq i8* %25, %7
  br i1 %26, label %.loopexit, label %21

.loopexit:                                        ; preds = %21, %.preheader
  %.lcssa = phi i8* [ %25, %21 ], [ %7, %.preheader ]
  %27 = icmp ult i8* %.lcssa, %7
  br label %28

28:                                               ; preds = %.loopexit, %18, %13
  %29 = phi i8* [ %16, %13 ], [ %16, %18 ], [ %.lcssa, %.loopexit ]
  %30 = phi i1 [ false, %13 ], [ true, %18 ], [ %27, %.loopexit ]
  %31 = icmp eq i8* %15, %29
  br i1 %31, label %.loopexit10, label %32

32:                                               ; preds = %28
  %33 = ptrtoint i8* %29 to i64
  %34 = ptrtoint i8* %15 to i64
  %35 = sub i64 %33, %34
  %36 = tail call i64 @rb_check_id_cstr(i8* %15, i64 %35, %struct.OnigEncodingTypeST* %4) #16
  %37 = sub i64 %34, %10
  br i1 %30, label %38, label %48

38:                                               ; preds = %32
  %39 = load i8, i8* %29, align 1, !tbaa !5
  %40 = icmp eq i8 %39, 58
  br i1 %40, label %41, label %48

41:                                               ; preds = %38
  %42 = getelementptr inbounds i8, i8* %29, i64 2
  %43 = icmp ult i8* %42, %7
  br i1 %43, label %44, label %.loopexit10

44:                                               ; preds = %41
  %45 = getelementptr inbounds i8, i8* %29, i64 1
  %46 = load i8, i8* %45, align 1, !tbaa !5
  %47 = icmp eq i8 %46, 58
  br i1 %47, label %48, label %.loopexit10

48:                                               ; preds = %44, %38, %32
  %49 = phi i8* [ %29, %38 ], [ %29, %32 ], [ %42, %44 ]
  %50 = phi i8* [ %15, %38 ], [ %15, %32 ], [ %42, %44 ]
  %51 = and i64 %14, 7
  %52 = icmp ne i64 %51, 0
  %53 = and i64 %14, -9
  %54 = icmp eq i64 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %61, label %56

56:                                               ; preds = %48
  %57 = inttoptr i64 %14 to %struct.RBasic*
  %58 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %57, i64 0, i32 0
  %59 = load i64, i64* %58, align 8, !tbaa !0
  %60 = and i64 %59, 30
  %switch = icmp eq i64 %60, 2
  br i1 %switch, label %63, label %61

61:                                               ; preds = %56, %48
  %62 = load i64, i64* @rb_eTypeError, align 8, !tbaa !6
  tail call void (i64, i8*, ...) @rb_raise(i64 %62, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i64 %3) #17
  unreachable

63:                                               ; preds = %56
  %64 = icmp eq i64 %36, 0
  br i1 %64, label %65, label %104

65:                                               ; preds = %63
  %66 = tail call i64 @rb_str_subseq(i64 %3, i64 %37, i64 %35) #16
  %67 = and i64 %66, 7
  %68 = icmp ne i64 %67, 0
  %69 = and i64 %66, -9
  %70 = icmp eq i64 %69, 0
  %71 = or i1 %68, %70
  br i1 %71, label %rb_obj_freeze_inline.exit, label %72

72:                                               ; preds = %65
  %73 = inttoptr i64 %66 to %struct.RBasic*
  %74 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %73, i64 0, i32 0
  %75 = load i64, i64* %74, align 8, !tbaa !0
  %76 = and i64 %75, 31
  %77 = icmp eq i64 %76, 27
  br i1 %77, label %rb_obj_freeze_inline.exit, label %78

78:                                               ; preds = %72
  %79 = or i64 %75, 2048
  store i64 %79, i64* %74, align 8, !tbaa !0
  %80 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %73, i64 0, i32 1
  %81 = load i64, i64* %80, align 8, !tbaa !7
  %82 = icmp ne i64 %81, 0
  %83 = and i64 %75, 4096
  %84 = icmp eq i64 %83, 0
  %85 = and i1 %84, %82
  br i1 %85, label %86, label %rb_obj_freeze_inline.exit

86:                                               ; preds = %78
  tail call void @rb_freeze_singleton_class(i64 %66) #16
  br label %rb_obj_freeze_inline.exit

rb_obj_freeze_inline.exit:                        ; preds = %65, %72, %78, %86
  %87 = load i64, i64* @sorbet_getConstantAt.rb_intern_id_cache, align 8, !tbaa !6
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %91

89:                                               ; preds = %rb_obj_freeze_inline.exit
  %90 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i64 13) #16
  store i64 %90, i64* @sorbet_getConstantAt.rb_intern_id_cache, align 8, !tbaa !6
  br label %91

91:                                               ; preds = %89, %rb_obj_freeze_inline.exit
  %92 = load i64, i64* @sorbet_getConstantAt.rb_intern_id_cache, align 8, !tbaa !6
  %93 = tail call i32 @rb_is_const_name(i64 %66) #16
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %.loopexit10, label %rb_class_of.exit

rb_class_of.exit:                                 ; preds = %91
  %95 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %57, i64 0, i32 1
  %96 = load i64, i64* %95, align 8, !tbaa !6
  %97 = tail call i32 @rb_method_basic_definition_p(i64 %96, i64 %92) #16
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %102

99:                                               ; preds = %rb_class_of.exit
  %100 = tail call i64 @rb_str_intern(i64 %66) #16
  %101 = tail call i64 @rb_const_missing(i64 %14, i64 %100) #16
  br label %115

102:                                              ; preds = %rb_class_of.exit
  %103 = tail call i64 @rb_mod_const_missing(i64 %14, i64 %66) #17
  unreachable

104:                                              ; preds = %63
  %105 = tail call i32 @rb_is_const_id(i64 %36) #6
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %109

107:                                              ; preds = %104
  %108 = tail call i64 @rb_id2sym(i64 %36) #16
  br label %.loopexit10

109:                                              ; preds = %104
  %110 = icmp eq i64 %37, 0
  br i1 %110, label %111, label %113

111:                                              ; preds = %109
  %112 = tail call i64 @rb_const_get(i64 %14, i64 %36) #16
  br label %115

113:                                              ; preds = %109
  %114 = tail call i64 @rb_const_get_from(i64 %14, i64 %36) #16
  br label %115

115:                                              ; preds = %113, %111, %99
  %116 = phi i64 [ %101, %99 ], [ %112, %111 ], [ %114, %113 ]
  %117 = icmp ult i8* %49, %7
  br i1 %117, label %13, label %.loopexit11

.loopexit11:                                      ; preds = %115, %2
  %118 = phi i64 [ %0, %2 ], [ %116, %115 ]
  ret i64 %118
}

declare %struct.OnigEncodingTypeST* @rb_enc_get(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #5

declare i64 @rb_check_id_cstr(i8*, i64, %struct.OnigEncodingTypeST*) local_unnamed_addr #1

declare i64 @rb_str_subseq(i64, i64, i64) local_unnamed_addr #1

declare i32 @rb_is_const_name(i64) local_unnamed_addr #1

declare i32 @rb_method_basic_definition_p(i64, i64) local_unnamed_addr #1

declare i64 @rb_str_intern(i64) local_unnamed_addr #1

declare i64 @rb_const_missing(i64, i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare i64 @rb_mod_const_missing(i64, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @rb_is_const_id(i64) local_unnamed_addr #6

declare i64 @rb_const_get(i64, i64) local_unnamed_addr #1

declare i64 @rb_const_get_from(i64, i64) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @sorbet_getConstant(i8* %0, i64 %1) unnamed_addr #3 {
  %3 = load i64, i64* @rb_cObject, align 8, !tbaa !6
  %4 = tail call i64 @rb_intern2(i8* %0, i64 %1) #16
  %5 = tail call fastcc i64 @sorbet_getConstantAt(i64 %3, i64 %4)
  ret i64 %5
}

declare i64 @rb_define_class(i8*, i64) local_unnamed_addr #1

declare void @rb_define_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #1

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @sorbet_rb_arity_error_new(i32 %0, i32 %1, i32 %2) unnamed_addr #0 {
  %4 = icmp eq i32 %1, %2
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  %6 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.4, i64 0, i64 0), i32 %0, i32 %1) #16
  br label %13

7:                                                ; preds = %3
  %8 = icmp eq i32 %2, -1
  br i1 %8, label %9, label %11

9:                                                ; preds = %7
  %10 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.5, i64 0, i64 0), i32 %0, i32 %1) #16
  br label %13

11:                                               ; preds = %7
  %12 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i64 0, i64 0), i32 %0, i32 %1, i32 %2) #16
  br label %13

13:                                               ; preds = %11, %9, %5
  %14 = phi i64 [ %6, %5 ], [ %10, %9 ], [ %12, %11 ]
  %15 = load i64, i64* @rb_eArgError, align 8, !tbaa !6
  %16 = tail call i64 @rb_exc_new_str(i64 %15, i64 %14) #16
  ret i64 %16
}

declare i64 @rb_exc_new_str(i64, i64) local_unnamed_addr #1

; Function Attrs: cold minsize noreturn nounwind optsize ssp uwtable
define internal fastcc void @sorbet_cast_failure(i64 %0) unnamed_addr #7 {
  %2 = load i64, i64* @rb_eTypeError, align 8, !tbaa !6
  %3 = tail call i8* @rb_obj_classname(i64 %0) #16
  tail call void (i64, i8*, ...) @rb_raise(i64 %2, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_A, i64 0, i64 0), i8* %3, i64 %0) #17
  unreachable
}

; Function Attrs: noreturn nounwind ssp uwtable
define internal fastcc void @sorbet_raiseArity(i32 %0, i32 %1, i32 %2) unnamed_addr #8 {
  %4 = tail call fastcc i64 @sorbet_rb_arity_error_new(i32 %0, i32 %1, i32 %2)
  tail call void @rb_exc_raise(i64 %4) #17
  unreachable
}

; Function Attrs: noreturn
declare void @rb_exc_raise(i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8* %0) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !8
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #16
  ret void
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly %0) #9 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !8
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

declare %struct.rb_iseq_struct* @rb_iseq_new_with_opt(%struct.rb_ast_body_struct*, i64, i64, i64, i64, %struct.rb_iseq_struct*, i32, %struct.rb_compile_option_struct*) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare i64 @rb_obj_is_kind_of(i64, i64) local_unnamed_addr #6

declare void @rb_freeze_singleton_class(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_<top (required)>"() #10 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #16
  store i64 %0, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_unsafe() #10 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_unsafe, i64 0, i64 0), i64 6) #16
  store i64 %0, i64* @rubyIdPrecomputed_unsafe, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_new() #10 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_new, i64 0, i64 0), i64 3) #16
  store i64 %0, i64* @rubyIdPrecomputed_new, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_read() #10 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_read, i64 0, i64 0), i64 4) #16
  store i64 %0, i64* @rubyIdPrecomputed_read, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_puts() #10 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 4) #16
  store i64 %0, i64* @rubyIdPrecomputed_puts, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_write() #10 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_write, i64 0, i64 0), i64 5) #16
  store i64 %0, i64* @rubyIdPrecomputed_write, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_test_testdata_compiler_instancefields() local_unnamed_addr #11 {
"func_<root>.<static-init>$111.exit":
  %0 = alloca i64, align 8
  %1 = alloca i64, align 8
  %callArgs.i = alloca [1 x i64], align 8
  %2 = load i64, i64* @rb_cObject, align 8
  %3 = bitcast [1 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3)
  %rubyId_new.i = load i64, i64* @rubyIdPrecomputed_new, align 8
  %rubyId_read.i = load i64, i64* @rubyIdPrecomputed_read, align 8
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8
  %rubyId_write.i = load i64, i64* @rubyIdPrecomputed_write, align 8
  %4 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #16
  %5 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"str_test/testdata/compiler/instancefields.rb", i64 0, i64 0), i64 40) #16
  %6 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"str_test/testdata/compiler/instancefields.rb", i64 0, i64 0), i64 40) #16
  %7 = bitcast i64* %1 to %struct.rb_compile_option_struct*
  %8 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %9 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %8, i64 0, i32 2
  %10 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %9, align 8, !tbaa !12
  %11 = bitcast i64* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #16
  store i64 0, i64* %1, align 8
  %12 = call %struct.rb_iseq_struct* @rb_iseq_new_with_opt(%struct.rb_ast_body_struct* null, i64 %4, i64 %5, i64 %6, i64 7, %struct.rb_iseq_struct* null, i32 0, %struct.rb_compile_option_struct* nonnull %7) #16
  %13 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %12, i64 0, i32 2
  %14 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %13, align 8, !tbaa !15
  %15 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %14, i64 0, i32 2
  %16 = bitcast i64** %15 to i64*
  %17 = load i64, i64* %16, align 8, !tbaa !17
  %18 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %10, i64 0, i32 2
  store %struct.rb_iseq_struct* %12, %struct.rb_iseq_struct** %18, align 8, !tbaa !26
  %19 = bitcast %struct.rb_control_frame_struct* %10 to i64*
  store i64 %17, i64* %19, align 8, !tbaa !28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #16
  %20 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %21 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %20, i64 0, i32 2
  %22 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %21, align 8, !tbaa !12
  %23 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %22, i64 0, i32 2
  %24 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %23, align 8, !tbaa !26
  %25 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %24, i64 0, i32 2
  %26 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %25, align 8, !tbaa !15
  %27 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %26, i64 0, i32 5, i32 0
  %28 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %27, align 8, !tbaa !29
  %29 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %28, i64 0, i32 0
  %callArgsAddr.i = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs.i, i64 0, i64 0
  store i64 %2, i64* %callArgsAddr.i, align 8
  store i32 3, i32* %29, align 4, !tbaa !30
  %30 = call i64 @rb_define_class(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_A, i64 0, i64 0), i64 %2) #16
  %31 = load i64, i64* @guard_epoch_A, align 8
  %32 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !32
  %needTakeSlowPath = icmp eq i64 %31, %32
  br i1 %needTakeSlowPath, label %34, label %33, !prof !34

33:                                               ; preds = %"func_<root>.<static-init>$111.exit"
  call void @const_recompute_A() #16
  br label %34

34:                                               ; preds = %"func_<root>.<static-init>$111.exit", %33
  %35 = load i64, i64* @guarded_const_A, align 8
  %36 = load i64, i64* @guard_epoch_A, align 8
  %37 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !32
  %guardUpdated = icmp eq i64 %36, %37
  call void @llvm.assume(i1 %guardUpdated)
  %rubyId_write.i.i.i = load i64, i64* @rubyIdPrecomputed_write, align 8
  %rubyId_read.i.i.i = load i64, i64* @rubyIdPrecomputed_read, align 8
  %38 = call i64 @rb_str_new(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #16
  %39 = call i64 @rb_str_new(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"str_test/testdata/compiler/instancefields.rb", i64 0, i64 0), i64 40) #16
  %40 = call i64 @rb_str_new(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"str_test/testdata/compiler/instancefields.rb", i64 0, i64 0), i64 40) #16
  %41 = bitcast i64* %0 to %struct.rb_compile_option_struct*
  %42 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %43 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %42, i64 0, i32 2
  %44 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %43, align 8, !tbaa !12
  %45 = bitcast i64* %0 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #16
  store i64 0, i64* %0, align 8
  %46 = call %struct.rb_iseq_struct* @rb_iseq_new_with_opt(%struct.rb_ast_body_struct* null, i64 %38, i64 %39, i64 %40, i64 7, %struct.rb_iseq_struct* null, i32 0, %struct.rb_compile_option_struct* nonnull %41) #16
  %47 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %46, i64 0, i32 2
  %48 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %47, align 8, !tbaa !15
  %49 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %48, i64 0, i32 2
  %50 = bitcast i64** %49 to i64*
  %51 = load i64, i64* %50, align 8, !tbaa !17
  %52 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %44, i64 0, i32 2
  store %struct.rb_iseq_struct* %46, %struct.rb_iseq_struct** %52, align 8, !tbaa !26
  %53 = bitcast %struct.rb_control_frame_struct* %44 to i64*
  store i64 %51, i64* %53, align 8, !tbaa !28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #16
  %54 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %55 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %54, i64 0, i32 2
  %56 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %55, align 8, !tbaa !12
  %57 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %56, i64 0, i32 2
  %58 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %57, align 8, !tbaa !26
  %59 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %58, i64 0, i32 2
  %60 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %59, align 8, !tbaa !15
  %61 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %60, i64 0, i32 5, i32 0
  %62 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %61, align 8, !tbaa !29
  %63 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %62, i64 0, i32 0
  store i32 4, i32* %63, align 4, !tbaa !30
  %rawSym.i.i.i = call i64 @rb_id2sym(i64 %rubyId_write.i.i.i) #16
  %64 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %65 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %64, i64 0, i32 2
  %66 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %65, align 8, !tbaa !12
  %67 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %66, i64 0, i32 2
  %68 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %67, align 8, !tbaa !26
  %69 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %68, i64 0, i32 2
  %70 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %69, align 8, !tbaa !15
  %71 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %70, i64 0, i32 5, i32 0
  %72 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %71, align 8, !tbaa !29
  %73 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %72, i64 0, i32 0
  store i32 4, i32* %73, align 4, !tbaa !30
  call void @rb_define_method(i64 %35, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_write, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"func_A#write" to i64 (...)*), i32 -1) #16
  %74 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %75 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %74, i64 0, i32 2
  %76 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %75, align 8, !tbaa !12
  %77 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %76, i64 0, i32 2
  %78 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %77, align 8, !tbaa !26
  %79 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %78, i64 0, i32 2
  %80 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %79, align 8, !tbaa !15
  %81 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %80, i64 0, i32 5, i32 0
  %82 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %81, align 8, !tbaa !29
  %83 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %82, i64 0, i32 0
  store i32 7, i32* %83, align 4, !tbaa !30
  %rawSym39.i.i.i = call i64 @rb_id2sym(i64 %rubyId_read.i.i.i) #16
  %84 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %85 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %84, i64 0, i32 2
  %86 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %85, align 8, !tbaa !12
  %87 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %86, i64 0, i32 2
  %88 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %87, align 8, !tbaa !26
  %89 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %88, i64 0, i32 2
  %90 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %89, align 8, !tbaa !15
  %91 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %90, i64 0, i32 5, i32 0
  %92 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %91, align 8, !tbaa !29
  %93 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %92, i64 0, i32 0
  store i32 7, i32* %93, align 4, !tbaa !30
  call void @rb_define_method(i64 %35, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_read, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"func_A#read" to i64 (...)*), i32 -1) #16
  %94 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %95 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %94, i64 0, i32 2
  %96 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %95, align 8, !tbaa !12
  %97 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %96, i64 0, i32 2
  %98 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %97, align 8, !tbaa !26
  %99 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %98, i64 0, i32 2
  %100 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %99, align 8, !tbaa !15
  %101 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %100, i64 0, i32 5, i32 0
  %102 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %101, align 8, !tbaa !29
  %103 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %102, i64 0, i32 0
  store i32 12, i32* %103, align 4, !tbaa !30
  %104 = call i64 @rb_funcallv(i64 %35, i64 %rubyId_new.i, i32 0, i64* nonnull %callArgsAddr.i) #16
  %105 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %106 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %105, i64 0, i32 2
  %107 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %106, align 8, !tbaa !12
  %108 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %107, i64 0, i32 2
  %109 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %108, align 8, !tbaa !26
  %110 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %109, i64 0, i32 2
  %111 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %110, align 8, !tbaa !15
  %112 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %111, i64 0, i32 5, i32 0
  %113 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %112, align 8, !tbaa !29
  %114 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %113, i64 0, i32 0
  store i32 13, i32* %114, align 4, !tbaa !30
  %115 = call i64 @rb_funcallv(i64 %35, i64 %rubyId_new.i, i32 0, i64* nonnull %callArgsAddr.i) #16
  %116 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %117 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %116, i64 0, i32 2
  %118 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %117, align 8, !tbaa !12
  %119 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %118, i64 0, i32 2
  %120 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %119, align 8, !tbaa !26
  %121 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %120, i64 0, i32 2
  %122 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %121, align 8, !tbaa !15
  %123 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %122, i64 0, i32 5, i32 0
  %124 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %123, align 8, !tbaa !29
  %125 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %124, i64 0, i32 0
  store i32 14, i32* %125, align 4, !tbaa !30
  %126 = call i64 @rb_funcallv(i64 %104, i64 %rubyId_read.i, i32 0, i64* nonnull %callArgsAddr.i) #16
  %127 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %128 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %127, i64 0, i32 2
  %129 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %128, align 8, !tbaa !12
  %130 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %129, i64 0, i32 2
  %131 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %130, align 8, !tbaa !26
  %132 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %131, i64 0, i32 2
  %133 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %132, align 8, !tbaa !15
  %134 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %133, i64 0, i32 5, i32 0
  %135 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %134, align 8, !tbaa !29
  %136 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %135, i64 0, i32 0
  store i32 14, i32* %136, align 4, !tbaa !30
  store i64 %126, i64* %callArgsAddr.i, align 8
  %137 = call i64 @rb_funcallv(i64 %2, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #16
  %138 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %139 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %138, i64 0, i32 2
  %140 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %139, align 8, !tbaa !12
  %141 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %140, i64 0, i32 2
  %142 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %141, align 8, !tbaa !26
  %143 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %142, i64 0, i32 2
  %144 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %143, align 8, !tbaa !15
  %145 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %144, i64 0, i32 5, i32 0
  %146 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %145, align 8, !tbaa !29
  %147 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %146, i64 0, i32 0
  store i32 15, i32* %147, align 4, !tbaa !30
  %148 = call i64 @rb_str_new(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_value, i64 0, i64 0), i64 5) #16
  %149 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %150 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %149, i64 0, i32 2
  %151 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %150, align 8, !tbaa !12
  %152 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %151, i64 0, i32 2
  %153 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %152, align 8, !tbaa !26
  %154 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %153, i64 0, i32 2
  %155 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %154, align 8, !tbaa !15
  %156 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %155, i64 0, i32 5, i32 0
  %157 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %156, align 8, !tbaa !29
  %158 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %157, i64 0, i32 0
  store i32 15, i32* %158, align 4, !tbaa !30
  store i64 %148, i64* %callArgsAddr.i, align 8
  %159 = call i64 @rb_funcallv(i64 %104, i64 %rubyId_write.i, i32 1, i64* nonnull %callArgsAddr.i) #16
  %160 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %161 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %160, i64 0, i32 2
  %162 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %161, align 8, !tbaa !12
  %163 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %162, i64 0, i32 2
  %164 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %163, align 8, !tbaa !26
  %165 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %164, i64 0, i32 2
  %166 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %165, align 8, !tbaa !15
  %167 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %166, i64 0, i32 5, i32 0
  %168 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %167, align 8, !tbaa !29
  %169 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %168, i64 0, i32 0
  store i32 16, i32* %169, align 4, !tbaa !30
  %170 = call i64 @rb_funcallv(i64 %104, i64 %rubyId_read.i, i32 0, i64* nonnull %callArgsAddr.i) #16
  %171 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %172 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %171, i64 0, i32 2
  %173 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %172, align 8, !tbaa !12
  %174 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %173, i64 0, i32 2
  %175 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %174, align 8, !tbaa !26
  %176 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %175, i64 0, i32 2
  %177 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %176, align 8, !tbaa !15
  %178 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %177, i64 0, i32 5, i32 0
  %179 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %178, align 8, !tbaa !29
  %180 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %179, i64 0, i32 0
  store i32 16, i32* %180, align 4, !tbaa !30
  store i64 %170, i64* %callArgsAddr.i, align 8
  %181 = call i64 @rb_funcallv(i64 %2, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #16
  %182 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %183 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %182, i64 0, i32 2
  %184 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %183, align 8, !tbaa !12
  %185 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %184, i64 0, i32 2
  %186 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %185, align 8, !tbaa !26
  %187 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %186, i64 0, i32 2
  %188 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %187, align 8, !tbaa !15
  %189 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %188, i64 0, i32 5, i32 0
  %190 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %189, align 8, !tbaa !29
  %191 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %190, i64 0, i32 0
  store i32 17, i32* %191, align 4, !tbaa !30
  %192 = call i64 @rb_funcallv(i64 %115, i64 %rubyId_read.i, i32 0, i64* nonnull %callArgsAddr.i) #16
  %193 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %194 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %193, i64 0, i32 2
  %195 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %194, align 8, !tbaa !12
  %196 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %195, i64 0, i32 2
  %197 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %196, align 8, !tbaa !26
  %198 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %197, i64 0, i32 2
  %199 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %198, align 8, !tbaa !15
  %200 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %199, i64 0, i32 5, i32 0
  %201 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %200, align 8, !tbaa !29
  %202 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %201, i64 0, i32 0
  store i32 17, i32* %202, align 4, !tbaa !30
  store i64 %192, i64* %callArgsAddr.i, align 8
  %203 = call i64 @rb_funcallv(i64 %2, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #16
  %204 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %205 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %204, i64 0, i32 2
  %206 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %205, align 8, !tbaa !12
  %207 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %206, i64 0, i32 2
  %208 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %207, align 8, !tbaa !26
  %209 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %208, i64 0, i32 2
  %210 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %209, align 8, !tbaa !15
  %211 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %210, i64 0, i32 5, i32 0
  %212 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %211, align 8, !tbaa !29
  %213 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %212, i64 0, i32 0
  store i32 17, i32* %213, align 4, !tbaa !30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3)
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_A#write"(i32 %argc, i64* nocapture readonly %argArray, i64 %selfRaw) #12 {
functionEntryInitializers:
  %0 = alloca i64, align 8
  %"rubyId_@f" = load i64, i64* @"rubyIdPrecomputed_@f", align 8
  %1 = icmp eq i32 %argc, 1
  br i1 %1, label %fillRequiredArgs, label %argCountFailBlock, !prof !35, !misexpect !36

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_raiseArity(i32 %argc, i32 1, i32 1)
  unreachable

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %rawArg_v = load i64, i64* %argArray, align 8
  %2 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_write, i64 0, i64 0), i64 5) #16
  %3 = load i64, i64* @guard_epoch_A, align 8
  %4 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !32
  %needTakeSlowPath = icmp eq i64 %3, %4
  br i1 %needTakeSlowPath, label %6, label %5, !prof !34

5:                                                ; preds = %fillRequiredArgs
  tail call void @const_recompute_A() #16
  br label %6

6:                                                ; preds = %fillRequiredArgs, %5
  %7 = load i64, i64* @guarded_const_A, align 8
  %8 = load i64, i64* @guard_epoch_A, align 8
  %9 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !32
  %guardUpdated = icmp eq i64 %8, %9
  tail call void @llvm.assume(i1 %guardUpdated)
  %10 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"str_test/testdata/compiler/instancefields.rb", i64 0, i64 0), i64 40) #16
  %11 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"str_test/testdata/compiler/instancefields.rb", i64 0, i64 0), i64 40) #16
  %12 = bitcast i64* %0 to %struct.rb_compile_option_struct*
  %13 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %14 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %13, i64 0, i32 2
  %15 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %14, align 8, !tbaa !12
  %16 = bitcast i64* %0 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #16
  store i64 0, i64* %0, align 8
  %17 = call %struct.rb_iseq_struct* @rb_iseq_new_with_opt(%struct.rb_ast_body_struct* null, i64 %2, i64 %10, i64 %11, i64 9, %struct.rb_iseq_struct* null, i32 0, %struct.rb_compile_option_struct* nonnull %12) #16
  %18 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %17, i64 0, i32 2
  %19 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %18, align 8, !tbaa !15
  %20 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %19, i64 0, i32 2
  %21 = bitcast i64** %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !17
  %23 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %15, i64 0, i32 2
  store %struct.rb_iseq_struct* %17, %struct.rb_iseq_struct** %23, align 8, !tbaa !26
  %24 = bitcast %struct.rb_control_frame_struct* %15 to i64*
  store i64 %22, i64* %24, align 8, !tbaa !28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #16
  %25 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %26 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %25, i64 0, i32 2
  %27 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %26, align 8, !tbaa !12
  %28 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %27, i64 0, i32 2
  %29 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %28, align 8, !tbaa !26
  %30 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %29, i64 0, i32 2
  %31 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %30, align 8, !tbaa !15
  %32 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %31, i64 0, i32 5, i32 0
  %33 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %32, align 8, !tbaa !29
  %34 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %33, i64 0, i32 0
  store i32 4, i32* %34, align 4, !tbaa !30
  %35 = call i64 @rb_obj_is_kind_of(i64 %selfRaw, i64 %7) #6
  %36 = icmp eq i64 %35, 20
  br i1 %36, label %typeTestSuccess, label %codeRepl, !prof !37, !misexpect !38

typeTestSuccess:                                  ; preds = %6
  store i32 5, i32* %34, align 4, !tbaa !30
  %37 = call i64 @rb_ivar_set(i64 %selfRaw, i64 %"rubyId_@f", i64 %rawArg_v) #16
  %38 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %39 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %38, i64 0, i32 2
  %40 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %39, align 8, !tbaa !12
  %41 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %40, i64 0, i32 2
  %42 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %41, align 8, !tbaa !26
  %43 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %42, i64 0, i32 2
  %44 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %43, align 8, !tbaa !15
  %45 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %44, i64 0, i32 5, i32 0
  %46 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %45, align 8, !tbaa !29
  %47 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %46, i64 0, i32 0
  store i32 5, i32* %47, align 4, !tbaa !30
  %48 = call i64 @rb_ivar_get(i64 %selfRaw, i64 %"rubyId_@f") #16
  %49 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %50 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %49, i64 0, i32 2
  %51 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %50, align 8, !tbaa !12
  %52 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %51, i64 0, i32 2
  %53 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %52, align 8, !tbaa !26
  %54 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %53, i64 0, i32 2
  %55 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %54, align 8, !tbaa !15
  %56 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %55, i64 0, i32 5, i32 0
  %57 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %56, align 8, !tbaa !29
  %58 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %57, i64 0, i32 0
  store i32 5, i32* %58, align 4, !tbaa !30
  ret i64 %48

codeRepl:                                         ; preds = %6
  call fastcc void @sorbet_cast_failure(i64 %selfRaw) #16
  unreachable
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_@f"() #10 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"str_@f", i64 0, i64 0), i64 2) #16
  store i64 %0, i64* @"rubyIdPrecomputed_@f", align 8
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_A#read"(i32 %argc, i64* nocapture readnone %argArray, i64 %selfRaw) #12 {
functionEntryInitializers:
  %0 = alloca i64, align 8
  %"rubyId_@f" = load i64, i64* @"rubyIdPrecomputed_@f", align 8
  %tooManyArgs = icmp eq i32 %argc, 0
  br i1 %tooManyArgs, label %fillRequiredArgs, label %argCountFailBlock, !prof !37, !misexpect !36

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_raiseArity(i32 %argc, i32 0, i32 0)
  unreachable

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %1 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_read, i64 0, i64 0), i64 4) #16
  %2 = load i64, i64* @guard_epoch_A, align 8
  %3 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !32
  %needTakeSlowPath = icmp eq i64 %2, %3
  br i1 %needTakeSlowPath, label %5, label %4, !prof !34

4:                                                ; preds = %fillRequiredArgs
  tail call void @const_recompute_A() #16
  br label %5

5:                                                ; preds = %fillRequiredArgs, %4
  %6 = load i64, i64* @guarded_const_A, align 8
  %7 = load i64, i64* @guard_epoch_A, align 8
  %8 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !32
  %guardUpdated = icmp eq i64 %7, %8
  tail call void @llvm.assume(i1 %guardUpdated)
  %9 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"str_test/testdata/compiler/instancefields.rb", i64 0, i64 0), i64 40) #16
  %10 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"str_test/testdata/compiler/instancefields.rb", i64 0, i64 0), i64 40) #16
  %11 = bitcast i64* %0 to %struct.rb_compile_option_struct*
  %12 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %13 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %12, i64 0, i32 2
  %14 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %13, align 8, !tbaa !12
  %15 = bitcast i64* %0 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #16
  store i64 0, i64* %0, align 8
  %16 = call %struct.rb_iseq_struct* @rb_iseq_new_with_opt(%struct.rb_ast_body_struct* null, i64 %1, i64 %9, i64 %10, i64 15, %struct.rb_iseq_struct* null, i32 0, %struct.rb_compile_option_struct* nonnull %11) #16
  %17 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %16, i64 0, i32 2
  %18 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %17, align 8, !tbaa !15
  %19 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %18, i64 0, i32 2
  %20 = bitcast i64** %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !17
  %22 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %14, i64 0, i32 2
  store %struct.rb_iseq_struct* %16, %struct.rb_iseq_struct** %22, align 8, !tbaa !26
  %23 = bitcast %struct.rb_control_frame_struct* %14 to i64*
  store i64 %21, i64* %23, align 8, !tbaa !28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #16
  %24 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %25 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %24, i64 0, i32 2
  %26 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %25, align 8, !tbaa !12
  %27 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %26, i64 0, i32 2
  %28 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %27, align 8, !tbaa !26
  %29 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %28, i64 0, i32 2
  %30 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %29, align 8, !tbaa !15
  %31 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %30, i64 0, i32 5, i32 0
  %32 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %31, align 8, !tbaa !29
  %33 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %32, i64 0, i32 0
  store i32 7, i32* %33, align 4, !tbaa !30
  %34 = call i64 @rb_obj_is_kind_of(i64 %selfRaw, i64 %6) #6
  %35 = icmp eq i64 %34, 20
  br i1 %35, label %typeTestSuccess, label %codeRepl, !prof !37, !misexpect !38

typeTestSuccess:                                  ; preds = %5
  store i32 8, i32* %33, align 4, !tbaa !30
  %36 = call i64 @rb_ivar_get(i64 %selfRaw, i64 %"rubyId_@f") #16
  %37 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %38 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %37, i64 0, i32 2
  %39 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %38, align 8, !tbaa !12
  %40 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %39, i64 0, i32 2
  %41 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %40, align 8, !tbaa !26
  %42 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %41, i64 0, i32 2
  %43 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %42, align 8, !tbaa !15
  %44 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %43, i64 0, i32 5, i32 0
  %45 = load %struct.iseq_insn_info_entry*, %struct.iseq_insn_info_entry** %44, align 8, !tbaa !29
  %46 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %45, i64 0, i32 0
  store i32 8, i32* %46, align 4, !tbaa !30
  ret i64 %36

codeRepl:                                         ; preds = %5
  call fastcc void @"func_A#read.cold.1"(i64 %selfRaw) #18
  unreachable
}

; Function Attrs: cold minsize noreturn nounwind sspreq uwtable
define internal fastcc void @"func_A#read.cold.1"(i64 %selfRaw) unnamed_addr #13 {
newFuncRoot:
  tail call fastcc void @sorbet_cast_failure(i64 %selfRaw)
  unreachable
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #14

; Function Attrs: ssp
define linkonce void @const_recompute_A() local_unnamed_addr #15 {
  %1 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_A, i64 0, i64 0), i64 1)
  store i64 %1, i64* @guarded_const_A, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !32
  store i64 %2, i64* @guard_epoch_A, align 8
  ret void
}

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { "addedToSilenceEmptyAttrsError" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noinline nounwind ssp uwtable }
attributes #4 = { argmemonly nofree nounwind readonly }
attributes #5 = { noreturn }
attributes #6 = { nounwind readnone }
attributes #7 = { cold minsize noreturn nounwind optsize ssp uwtable }
attributes #8 = { noreturn nounwind ssp uwtable }
attributes #9 = { norecurse nounwind readnone ssp uwtable }
attributes #10 = { nounwind ssp }
attributes #11 = { nounwind sspreq }
attributes #12 = { nounwind sspreq uwtable }
attributes #13 = { cold minsize noreturn nounwind sspreq uwtable }
attributes #14 = { nounwind willreturn }
attributes #15 = { ssp }
attributes #16 = { nounwind }
attributes #17 = { noreturn nounwind }
attributes #18 = { noinline }

!0 = !{!1, !2, i64 0}
!1 = !{!"RBasic", !2, i64 0, !2, i64 8}
!2 = !{!"long", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!3, !3, i64 0}
!6 = !{!2, !2, i64 0}
!7 = !{!1, !2, i64 8}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !3, i64 0}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !3, i64 0}
!12 = !{!13, !11, i64 16}
!13 = !{!"rb_execution_context_struct", !11, i64 0, !2, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !9, i64 40, !9, i64 44, !11, i64 48, !11, i64 56, !11, i64 64, !2, i64 72, !2, i64 80, !11, i64 88, !2, i64 96, !11, i64 104, !11, i64 112, !2, i64 120, !2, i64 128, !3, i64 136, !3, i64 137, !2, i64 144, !14, i64 152}
!14 = !{!"", !11, i64 0, !11, i64 8, !2, i64 16, !3, i64 24}
!15 = !{!16, !11, i64 16}
!16 = !{!"rb_iseq_struct", !2, i64 0, !2, i64 8, !11, i64 16, !3, i64 24}
!17 = !{!18, !11, i64 8}
!18 = !{!"rb_iseq_constant_body", !3, i64 0, !9, i64 4, !11, i64 8, !19, i64 16, !21, i64 64, !24, i64 120, !11, i64 152, !11, i64 160, !11, i64 168, !11, i64 176, !11, i64 184, !11, i64 192, !11, i64 200, !25, i64 208, !9, i64 240, !9, i64 244, !9, i64 248, !9, i64 252, !9, i64 256, !3, i64 260}
!19 = !{!"", !20, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24, !9, i64 28, !11, i64 32, !11, i64 40}
!20 = !{!"", !9, i64 0, !9, i64 0, !9, i64 0, !9, i64 0, !9, i64 0, !9, i64 0, !9, i64 0, !9, i64 0}
!21 = !{!"rb_iseq_location_struct", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !9, i64 32, !22, i64 36}
!22 = !{!"rb_code_location_struct", !23, i64 0, !23, i64 8}
!23 = !{!"rb_code_position_struct", !9, i64 0, !9, i64 4}
!24 = !{!"iseq_insn_info", !11, i64 0, !11, i64 8, !9, i64 16, !11, i64 24}
!25 = !{!"", !2, i64 0, !2, i64 8, !2, i64 16, !11, i64 24}
!26 = !{!27, !11, i64 16}
!27 = !{!"rb_control_frame_struct", !11, i64 0, !11, i64 8, !11, i64 16, !2, i64 24, !11, i64 32, !11, i64 40, !11, i64 48}
!28 = !{!27, !11, i64 0}
!29 = !{!18, !11, i64 120}
!30 = !{!31, !9, i64 0}
!31 = !{!"iseq_insn_info_entry", !9, i64 0, !9, i64 4}
!32 = !{!33, !33, i64 0}
!33 = !{!"long long", !3, i64 0}
!34 = !{!"branch_weights", i32 10000, i32 1}
!35 = !{!"branch_weights", i32 4000000, i32 4001}
!36 = !{!"misexpect", i64 1, i64 2000, i64 1}
!37 = !{!"branch_weights", i32 2000, i32 1}
!38 = !{!"misexpect", i64 0, i64 2000, i64 1}
