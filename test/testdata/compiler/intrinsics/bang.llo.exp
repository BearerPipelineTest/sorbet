; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.5 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.14 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_data*, %struct.anon.13, i32, i32, i32, i32, i32, i8, i64 }
%struct.anon = type { %struct.anon.0, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.0 = type { i16, [2 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.iseq_insn_info_entry*, i32*, i32, %struct.succ_index_table* }
%struct.iseq_insn_info_entry = type opaque
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, i64 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.rb_scope_visi_struct }
%struct.rb_scope_visi_struct = type { i8, [3 x i8] }
%struct.rb_call_data = type { %struct.rb_call_cache, %struct.rb_call_info }
%struct.rb_call_cache = type { i64, [3 x i64], %struct.rb_callable_method_entry_struct*, i64, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_data*)*, %union.anon.12 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon.10, i64, i64 }
%union.anon.10 = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64, i32, i64*, i64 (...)*)*, i32 }
%struct.rb_calling_info = type { i64, i64, i32, i32 }
%union.anon.12 = type { i32 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.anon.13 = type { i64, i64, i64, i64* }
%union.anon.14 = type { %struct.anon.15 }
%struct.anon.15 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [5 x i8*], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_fiber_struct = type opaque
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, i64, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %union.pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.7, i32, i64, %struct.rb_fiber_struct*, [5 x i8*], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %union.pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.3, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %union.pthread_mutex_t, i64, i64, i64, i64, i64, i32, %struct.st_table*, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.rb_builtin_function*, i32, %struct.anon.4, [29 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %union.pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32 }
%union.pthread_cond_t = type { %struct.anon.2 }
%struct.anon.2 = type { i32, i32, i64, i64, i64, i8*, i32, i32 }
%struct.anon.3 = type { [65 x i64] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.rb_builtin_function = type opaque
%struct.anon.4 = type { i64, i64, i64, i64 }
%struct.native_thread_data_struct = type { %struct.list_head, %union.anon.6 }
%union.anon.6 = type { %union.pthread_cond_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.7 = type { %struct.anon.8 }
%struct.anon.8 = type { i64, i64, i32 }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (i64, i64)*, i64 (i64)* }
%struct.st_table_entry = type opaque
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (i64)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.5 = type { i64*, i64*, i64, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.SorbetLineNumberInfo = type { i32, %struct.iseq_insn_info_entry*, i64* }
%struct.FunctionInlineCache = type { %struct.rb_kwarg_call_data }
%struct.rb_kwarg_call_data = type { %struct.rb_call_cache, %struct.rb_call_info_with_kwarg }
%struct.rb_call_info_with_kwarg = type { %struct.rb_call_info, %struct.rb_call_info_kw_arg* }
%struct.rb_call_info_kw_arg = type { i32, [1 x i64] }
%struct.rb_sorbet_param_struct = type { %struct.anon.0, i32, i32, i32, i32, i32, i32, i32, i64*, i32, i32, i32, i32, i64* }
%struct.vm_throw_data = type { i64, i64, i64, %struct.rb_control_frame_struct*, i32 }

@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@ruby_vm_global_constant_state = external local_unnamed_addr global i64, align 8
@sorbet_bang.rb_funcallv_data = internal global %struct.rb_call_data zeroinitializer, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.10 = private unnamed_addr constant [95 x i8] c"sorbet_getBuildSCMRevision: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@.str.11 = private unnamed_addr constant [93 x i8] c"sorbet_getIsReleaseBuild: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@"stackFramePrecomputed_func_<root>.<static-init>$152" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"rubyStrFrozen_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"rubyStrFrozen_test/testdata/compiler/intrinsics/bang.rb" = internal unnamed_addr global i64 0, align 8
@"str_test/testdata/compiler/intrinsics/bang.rb" = private unnamed_addr constant [42 x i8] c"test/testdata/compiler/intrinsics/bang.rb\00", align 1
@iseqEncodedArray = internal global [23 x i64] zeroinitializer
@fileLineNumberInfo = internal global %struct.SorbetLineNumberInfo zeroinitializer
@str_Bad = private unnamed_addr constant [4 x i8] c"Bad\00", align 1
@str_Main = private unnamed_addr constant [5 x i8] c"Main\00", align 1
@ic_test = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_test = internal unnamed_addr global i64 0, align 8
@str_test = private unnamed_addr constant [5 x i8] c"test\00", align 1
@"stackFramePrecomputed_func_Bad#!" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_!" = internal unnamed_addr global i64 0, align 8
@"str_!" = private unnamed_addr constant [2 x i8] c"!\00", align 1
@"rubyStrFrozen_bad bang overload" = internal unnamed_addr global i64 0, align 8
@"str_bad bang overload" = private unnamed_addr constant [18 x i8] c"bad bang overload\00", align 1
@ic_puts = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@"stackFramePrecomputed_func_Bad.<static-init>" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@rubyIdPrecomputed_normal = internal unnamed_addr global i64 0, align 8
@str_normal = private unnamed_addr constant [7 x i8] c"normal\00", align 1
@ic_keep_def = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_keep_def = internal unnamed_addr global i64 0, align 8
@str_keep_def = private unnamed_addr constant [9 x i8] c"keep_def\00", align 1
@stackFramePrecomputed_func_Main.test = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@ic_puts.1 = internal global %struct.FunctionInlineCache zeroinitializer
@ic_puts.2 = internal global %struct.FunctionInlineCache zeroinitializer
@ic_puts.3 = internal global %struct.FunctionInlineCache zeroinitializer
@rubyStrFrozen_hello = internal unnamed_addr global i64 0, align 8
@str_hello = private unnamed_addr constant [6 x i8] c"hello\00", align 1
@ic_puts.4 = internal global %struct.FunctionInlineCache zeroinitializer
@ic_new = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_new = internal unnamed_addr global i64 0, align 8
@str_new = private unnamed_addr constant [4 x i8] c"new\00", align 1
@ic_puts.5 = internal global %struct.FunctionInlineCache zeroinitializer
@"stackFramePrecomputed_func_Main.<static-init>" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@ic_keep_self_def = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_keep_self_def = internal unnamed_addr global i64 0, align 8
@str_keep_self_def = private unnamed_addr constant [14 x i8] c"keep_self_def\00", align 1
@rb_cObject = external local_unnamed_addr constant i64
@guard_epoch_Bad = linkonce local_unnamed_addr global i64 0
@guarded_const_Bad = linkonce local_unnamed_addr global i64 0
@guard_epoch_Main = linkonce local_unnamed_addr global i64 0
@guarded_const_Main = linkonce local_unnamed_addr global i64 0

; Function Attrs: noreturn
declare void @sorbet_raiseArity(i32, i32, i32) local_unnamed_addr #0

declare %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64, i64, i64, i64, %struct.rb_iseq_struct*, i32, i32, %struct.SorbetLineNumberInfo*, i64*, i32, i32) local_unnamed_addr #1

declare void @sorbet_initLineNumberInfo(%struct.SorbetLineNumberInfo*, i64*, i32) local_unnamed_addr #1

declare i64 @sorbet_getConstant(i8*, i64) local_unnamed_addr #1

declare i64 @sorbet_readRealpath() local_unnamed_addr #1

declare %struct.rb_control_frame_struct* @sorbet_pushStaticInitFrame(i64) local_unnamed_addr #1

declare void @sorbet_popRubyStack() local_unnamed_addr #1

declare void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache*, i64, i32, i32, i32, i64*) local_unnamed_addr #1

declare i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache*, i64) local_unnamed_addr #1

declare void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_iseq_struct*) local_unnamed_addr #1

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i8* @llvm.frameaddress.p0i8(i32 immarg) #2

; Function Attrs: nofree nosync nounwind willreturn
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare i32 @llvm.eh.sjlj.setjmp(i8*) #4

declare void @rb_vm_rewind_cfp(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*) local_unnamed_addr #1

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(i8*) #5

declare i64 @rb_define_module(i8*) local_unnamed_addr #1

declare i64 @rb_define_class(i8*, i64) local_unnamed_addr #1

declare i64 @rb_intern(i8*) local_unnamed_addr #1

declare void @rb_add_method_sorbet(i64, i64, i64 (i32, i64*, i64, %struct.rb_control_frame_struct*)*, %struct.rb_sorbet_param_struct*, i32, i8*) local_unnamed_addr #1

declare void @rb_define_singleton_sorbet_method(i64, i8*, i64 (i32, i64*, i64, %struct.rb_control_frame_struct*)*, i8*, i8*) local_unnamed_addr #1

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #1

declare i64 @rb_id2sym(i64) local_unnamed_addr #1

declare i64 @rb_funcallv_with_cc(%struct.rb_call_data*, i64, i64, i32, i64*) local_unnamed_addr #1

declare i64 @rb_fstring_new(i8*, i64) local_unnamed_addr #1

declare void @rb_gc_register_mark_object(i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #0

declare i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct*, i32) local_unnamed_addr #1

; Function Attrs: alwaysinline nounwind ssp uwtable
define noalias nonnull i8* @sorbet_allocateParamInfo() local_unnamed_addr #6 {
  %1 = tail call noalias nonnull i8* @ruby_xcalloc(i64 noundef 1, i64 noundef 64) #15
  ret i8* %1
}

; Function Attrs: allocsize(0,1)
declare noalias nonnull i8* @ruby_xcalloc(i64, i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define weak i32 @sorbet_getIsReleaseBuild() local_unnamed_addr #8 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* noundef getelementptr inbounds ([93 x i8], [93 x i8]* @.str.11, i64 0, i64 0)) #5
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @sorbet_getBuildSCMRevision() local_unnamed_addr #8 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* noundef getelementptr inbounds ([95 x i8], [95 x i8]* @.str.10, i64 0, i64 0)) #5
  unreachable
}

; Function Attrs: sspreq
define void @Init_bang() local_unnamed_addr #9 {
entry:
  %ecTag.i1.i = alloca %struct.rb_vm_tag, align 8
  %ecTag.i.i = alloca %struct.rb_vm_tag, align 8
  %ecTag.i = alloca %struct.rb_vm_tag, align 8
  %locals.i31.i = alloca i64, i32 0, align 8
  %locals.i27.i = alloca i64, i32 0, align 8
  %locals.i25.i = alloca i64, i32 0, align 8
  %locals.i21.i = alloca i64, i32 0, align 8
  %locals.i.i = alloca i64, i32 0, align 8
  %realpath = tail call i64 @sorbet_readRealpath()
  %0 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 noundef 16) #4
  store i64 %0, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %1 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @str_test, i64 0, i64 0), i64 noundef 4) #4
  store i64 %1, i64* @rubyIdPrecomputed_test, align 8
  %2 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @"str_!", i64 0, i64 0), i64 noundef 1) #4
  store i64 %2, i64* @"rubyIdPrecomputed_!", align 8
  %3 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 noundef 4) #4
  store i64 %3, i64* @rubyIdPrecomputed_puts, align 8
  %4 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @str_normal, i64 0, i64 0), i64 noundef 6) #4
  store i64 %4, i64* @rubyIdPrecomputed_normal, align 8
  %5 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([9 x i8], [9 x i8]* @str_keep_def, i64 0, i64 0), i64 noundef 8) #4
  store i64 %5, i64* @rubyIdPrecomputed_keep_def, align 8
  %6 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @str_new, i64 0, i64 0), i64 noundef 3) #4
  store i64 %6, i64* @rubyIdPrecomputed_new, align 8
  %7 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @str_keep_self_def, i64 0, i64 0), i64 noundef 13) #4
  store i64 %7, i64* @rubyIdPrecomputed_keep_self_def, align 8
  %8 = tail call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 noundef 16) #4
  tail call void @rb_gc_register_mark_object(i64 %8) #4
  store i64 %8, i64* @"rubyStrFrozen_<top (required)>", align 8
  %9 = tail call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([42 x i8], [42 x i8]* @"str_test/testdata/compiler/intrinsics/bang.rb", i64 0, i64 0), i64 noundef 41) #4
  tail call void @rb_gc_register_mark_object(i64 %9) #4
  store i64 %9, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/bang.rb", align 8
  tail call void @sorbet_initLineNumberInfo(%struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i32 0, i32 0), i32 noundef 23)
  %"rubyId_<top (required)>.i.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/compiler/intrinsics/bang.rb.i.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/bang.rb", align 8
  %10 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i.i", i64 %"rubyId_<top (required)>.i.i", i64 %"rubyStr_test/testdata/compiler/intrinsics/bang.rb.i.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 0, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals.i.i, i32 noundef 0, i32 noundef 2)
  store %struct.rb_iseq_struct* %10, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %rubyId_test.i = load i64, i64* @rubyIdPrecomputed_test, align 8, !dbg !8
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_test, i64 %rubyId_test.i, i32 noundef 16, i32 noundef 0, i32 noundef 0, i64* noundef null), !dbg !8
  %11 = call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @"str_!", i64 0, i64 0), i64 noundef 1) #4
  call void @rb_gc_register_mark_object(i64 %11) #4
  %"rubyId_!.i.i" = load i64, i64* @"rubyIdPrecomputed_!", align 8
  %"rubyStr_test/testdata/compiler/intrinsics/bang.rb.i20.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/bang.rb", align 8
  %12 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %11, i64 %"rubyId_!.i.i", i64 %"rubyStr_test/testdata/compiler/intrinsics/bang.rb.i20.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 1, i32 noundef 6, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals.i21.i, i32 noundef 0, i32 noundef 2)
  store %struct.rb_iseq_struct* %12, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Bad#!", align 8
  %13 = call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([18 x i8], [18 x i8]* @"str_bad bang overload", i64 0, i64 0), i64 noundef 17) #4
  call void @rb_gc_register_mark_object(i64 %13) #4
  store i64 %13, i64* @"rubyStrFrozen_bad bang overload", align 8
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !13
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_puts, i64 %rubyId_puts.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !13
  %"rubyId_<top (required)>.i22.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i23.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/compiler/intrinsics/bang.rb.i24.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/bang.rb", align 8
  %14 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i23.i", i64 %"rubyId_<top (required)>.i22.i", i64 %"rubyStr_test/testdata/compiler/intrinsics/bang.rb.i24.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 3, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals.i25.i, i32 noundef 0, i32 noundef 4)
  store %struct.rb_iseq_struct* %14, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Bad.<static-init>", align 8
  %rubyId_keep_def.i = load i64, i64* @rubyIdPrecomputed_keep_def, align 8, !dbg !15
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_keep_def, i64 %rubyId_keep_def.i, i32 noundef 16, i32 noundef 3, i32 noundef 0, i64* noundef null), !dbg !15
  %15 = call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @str_test, i64 0, i64 0), i64 noundef 4) #4
  call void @rb_gc_register_mark_object(i64 %15) #4
  %rubyId_test.i.i = load i64, i64* @rubyIdPrecomputed_test, align 8
  %"rubyStr_test/testdata/compiler/intrinsics/bang.rb.i26.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/bang.rb", align 8
  %16 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %15, i64 %rubyId_test.i.i, i64 %"rubyStr_test/testdata/compiler/intrinsics/bang.rb.i26.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 1, i32 noundef 13, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals.i27.i, i32 noundef 0, i32 noundef 2)
  store %struct.rb_iseq_struct* %16, %struct.rb_iseq_struct** @stackFramePrecomputed_func_Main.test, align 8
  %rubyId_puts3.i = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !17
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_puts.1, i64 %rubyId_puts3.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !17
  %rubyId_puts6.i = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !19
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_puts.2, i64 %rubyId_puts6.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !19
  %rubyId_puts9.i = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !20
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_puts.3, i64 %rubyId_puts9.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !20
  %17 = call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @str_hello, i64 0, i64 0), i64 noundef 5) #4
  call void @rb_gc_register_mark_object(i64 %17) #4
  store i64 %17, i64* @rubyStrFrozen_hello, align 8
  %rubyId_puts12.i = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !21
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_puts.4, i64 %rubyId_puts12.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !21
  %rubyId_new.i = load i64, i64* @rubyIdPrecomputed_new, align 8, !dbg !22
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_new, i64 %rubyId_new.i, i32 noundef 16, i32 noundef 0, i32 noundef 0, i64* noundef null), !dbg !22
  %rubyId_puts16.i = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !23
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_puts.5, i64 %rubyId_puts16.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !23
  %"rubyId_<top (required)>.i28.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i29.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/compiler/intrinsics/bang.rb.i30.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/bang.rb", align 8
  %18 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i29.i", i64 %"rubyId_<top (required)>.i28.i", i64 %"rubyStr_test/testdata/compiler/intrinsics/bang.rb.i30.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 3, i32 noundef 12, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals.i31.i, i32 noundef 0, i32 noundef 4)
  store %struct.rb_iseq_struct* %18, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Main.<static-init>", align 8
  %rubyId_keep_self_def.i = load i64, i64* @rubyIdPrecomputed_keep_self_def, align 8, !dbg !24
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_keep_self_def, i64 %rubyId_keep_self_def.i, i32 noundef 16, i32 noundef 3, i32 noundef 0, i64* noundef null), !dbg !24
  %19 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !26
  %20 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %19, i64 0, i32 2
  %21 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %20, align 8, !tbaa !28
  %22 = bitcast %struct.rb_vm_tag* %ecTag.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %22)
  %stackFrame.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %23 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %20, align 8, !tbaa !28
  %24 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %23, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i, %struct.rb_iseq_struct** %24, align 8, !tbaa !32
  %25 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %23, i64 0, i32 4
  %26 = load i64*, i64** %25, align 8, !tbaa !34
  %27 = load i64, i64* %26, align 8, !tbaa !4
  %28 = and i64 %27, -33
  store i64 %28, i64* %26, align 8, !tbaa !4
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %19, %struct.rb_control_frame_struct* %23, %struct.rb_iseq_struct* %stackFrame.i) #4
  %29 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %21, i64 0, i32 0
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %29, align 8, !tbaa !26
  %30 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !26
  %31 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i, i64 0, i32 4
  store i32 0, i32* %31, align 8, !tbaa !35
  %32 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i, i64 0, i32 0
  store i64 52, i64* %32, align 8, !tbaa !37
  %33 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %30, i64 0, i32 3
  %34 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %33, align 8, !tbaa !38
  %35 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i, i64 0, i32 3
  store %struct.rb_vm_tag* %34, %struct.rb_vm_tag** %35, align 8, !tbaa !39
  %36 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i, i64 0, i32 2, i64 0
  %37 = call i8* @llvm.frameaddress.p0i8(i32 noundef 0) #4
  store i8* %37, i8** %36, align 8
  %38 = call i8* @llvm.stacksave() #4
  %39 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i, i64 0, i32 2, i64 2
  store i8* %38, i8** %39, align 8
  %40 = bitcast i8** %36 to i8*
  %41 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull align 8 %40) #4
  %42 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !26
  %43 = icmp eq i32 %41, 0
  %44 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %42, i64 0, i32 3
  br i1 %43, label %66, label %45

45:                                               ; preds = %entry
  %46 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %44, align 8, !tbaa !38
  %47 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %46, i64 0, i32 4
  %48 = load i32, i32* %47, align 8, !tbaa !35
  store i32 0, i32* %47, align 8, !tbaa !35
  %49 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %42, i64 0, i32 16
  %50 = load i64, i64* %49, align 8, !tbaa !40
  %51 = inttoptr i64 %50 to %struct.vm_throw_data*
  %52 = icmp eq i32 %48, 1
  br i1 %52, label %53, label %58

53:                                               ; preds = %45
  %54 = getelementptr inbounds %struct.vm_throw_data, %struct.vm_throw_data* %51, i64 0, i32 3
  %55 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %54, align 8, !tbaa !41
  %56 = icmp eq %struct.rb_control_frame_struct* %55, %21
  br i1 %56, label %sorbet_processThrowReturnSetJmp.exit.i, label %.thread9.i

.thread9.i:                                       ; preds = %53
  %57 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %35, align 8, !tbaa !39
  store %struct.rb_vm_tag* %57, %struct.rb_vm_tag** %44, align 8, !tbaa !38
  br label %61

58:                                               ; preds = %45
  %59 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %35, align 8, !tbaa !39
  store %struct.rb_vm_tag* %59, %struct.rb_vm_tag** %44, align 8, !tbaa !38
  %60 = icmp eq i32 %48, 0
  br i1 %60, label %fillRequiredArgs.i, label %61

61:                                               ; preds = %58, %.thread9.i
  %62 = phi %struct.rb_vm_tag* [ %57, %.thread9.i ], [ %59, %58 ]
  %63 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %62, i64 0, i32 4
  store i32 %48, i32* %63, align 8, !tbaa !35
  %64 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %62, i64 0, i32 2, i64 0
  %65 = bitcast i8** %64 to i8*
  call void @llvm.eh.sjlj.longjmp(i8* nonnull %65) #5
  unreachable

66:                                               ; preds = %entry
  store %struct.rb_vm_tag* %ecTag.i, %struct.rb_vm_tag** %44, align 8, !tbaa !38
  br label %fillRequiredArgs.i

sorbet_processThrowReturnSetJmp.exit.i:           ; preds = %53
  call void @rb_vm_rewind_cfp(%struct.rb_execution_context_struct* nonnull %42, %struct.rb_control_frame_struct* nonnull %21) #4
  store i64 8, i64* %49, align 8, !tbaa !40
  %67 = getelementptr inbounds %struct.vm_throw_data, %struct.vm_throw_data* %51, i64 0, i32 2
  %68 = load i64, i64* %67, align 8, !tbaa !43
  %69 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %35, align 8, !tbaa !39
  store %struct.rb_vm_tag* %69, %struct.rb_vm_tag** %44, align 8, !tbaa !38
  %70 = icmp eq i64 %68, 52
  br i1 %70, label %fillRequiredArgs.i, label %"func_<root>.<static-init>$152.exit"

fillRequiredArgs.i:                               ; preds = %sorbet_processThrowReturnSetJmp.exit.i, %66, %58
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %29, align 8, !dbg !44, !tbaa !26
  %71 = load i64, i64* @rb_cObject, align 8, !dbg !45
  %72 = call i64 @rb_define_class(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @str_Bad, i64 0, i64 0), i64 %71) #4, !dbg !45
  %73 = call %struct.rb_control_frame_struct* @sorbet_pushStaticInitFrame(i64 %72) #4, !dbg !45
  %74 = bitcast %struct.rb_vm_tag* %ecTag.i1.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %74) #4
  %stackFrame.i2.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Bad.<static-init>", align 8
  %75 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !26
  %76 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %75, i64 0, i32 2
  %77 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %76, align 8, !tbaa !28
  %78 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %77, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i2.i, %struct.rb_iseq_struct** %78, align 8, !tbaa !32
  %79 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %77, i64 0, i32 4
  %80 = load i64*, i64** %79, align 8, !tbaa !34
  %81 = load i64, i64* %80, align 8, !tbaa !4
  %82 = and i64 %81, -33
  store i64 %82, i64* %80, align 8, !tbaa !4
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %75, %struct.rb_control_frame_struct* %77, %struct.rb_iseq_struct* %stackFrame.i2.i) #4
  %83 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %73, i64 0, i32 0
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %83, align 8, !tbaa !26
  %84 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !26
  %85 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i1.i, i64 0, i32 4
  store i32 0, i32* %85, align 8, !tbaa !35
  %86 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i1.i, i64 0, i32 0
  store i64 52, i64* %86, align 8, !tbaa !37
  %87 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %84, i64 0, i32 3
  %88 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %87, align 8, !tbaa !38
  %89 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i1.i, i64 0, i32 3
  store %struct.rb_vm_tag* %88, %struct.rb_vm_tag** %89, align 8, !tbaa !39
  %90 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i1.i, i64 0, i32 2, i64 0
  store i8* %37, i8** %90, align 8
  %91 = call i8* @llvm.stacksave() #4
  %92 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i1.i, i64 0, i32 2, i64 2
  store i8* %91, i8** %92, align 8
  %93 = bitcast i8** %90 to i8*
  %94 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull align 8 %93) #4
  %95 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !26
  %96 = icmp eq i32 %94, 0
  %97 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %95, i64 0, i32 3
  br i1 %96, label %119, label %98

98:                                               ; preds = %fillRequiredArgs.i
  %99 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %97, align 8, !tbaa !38
  %100 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %99, i64 0, i32 4
  %101 = load i32, i32* %100, align 8, !tbaa !35
  store i32 0, i32* %100, align 8, !tbaa !35
  %102 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %95, i64 0, i32 16
  %103 = load i64, i64* %102, align 8, !tbaa !40
  %104 = inttoptr i64 %103 to %struct.vm_throw_data*
  %105 = icmp eq i32 %101, 1
  br i1 %105, label %106, label %111

106:                                              ; preds = %98
  %107 = getelementptr inbounds %struct.vm_throw_data, %struct.vm_throw_data* %104, i64 0, i32 3
  %108 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %107, align 8, !tbaa !41
  %109 = icmp eq %struct.rb_control_frame_struct* %108, %73
  br i1 %109, label %sorbet_processThrowReturnSetJmp.exit.i4.i, label %.thread1.i3.i

.thread1.i3.i:                                    ; preds = %106
  %110 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %89, align 8, !tbaa !39
  store %struct.rb_vm_tag* %110, %struct.rb_vm_tag** %97, align 8, !tbaa !38
  br label %114

111:                                              ; preds = %98
  %112 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %89, align 8, !tbaa !39
  store %struct.rb_vm_tag* %112, %struct.rb_vm_tag** %97, align 8, !tbaa !38
  %113 = icmp eq i32 %101, 0
  br i1 %113, label %fastSymCallIntrinsic_Static_keep_def.i.i, label %114

114:                                              ; preds = %111, %.thread1.i3.i
  %115 = phi %struct.rb_vm_tag* [ %110, %.thread1.i3.i ], [ %112, %111 ]
  %116 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %115, i64 0, i32 4
  store i32 %101, i32* %116, align 8, !tbaa !35
  %117 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %115, i64 0, i32 2, i64 0
  %118 = bitcast i8** %117 to i8*
  call void @llvm.eh.sjlj.longjmp(i8* nonnull %118) #5
  unreachable

119:                                              ; preds = %fillRequiredArgs.i
  store %struct.rb_vm_tag* %ecTag.i1.i, %struct.rb_vm_tag** %97, align 8, !tbaa !38
  br label %fastSymCallIntrinsic_Static_keep_def.i.i

sorbet_processThrowReturnSetJmp.exit.i4.i:        ; preds = %106
  call void @rb_vm_rewind_cfp(%struct.rb_execution_context_struct* nonnull %95, %struct.rb_control_frame_struct* nonnull %73) #4
  store i64 8, i64* %102, align 8, !tbaa !40
  %120 = getelementptr inbounds %struct.vm_throw_data, %struct.vm_throw_data* %104, i64 0, i32 2
  %121 = load i64, i64* %120, align 8, !tbaa !43
  %122 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %89, align 8, !tbaa !39
  store %struct.rb_vm_tag* %122, %struct.rb_vm_tag** %97, align 8, !tbaa !38
  %123 = icmp eq i64 %121, 52
  br i1 %123, label %fastSymCallIntrinsic_Static_keep_def.i.i, label %"func_Bad.<static-init>L62.exit.i"

fastSymCallIntrinsic_Static_keep_def.i.i:         ; preds = %sorbet_processThrowReturnSetJmp.exit.i4.i, %119, %111
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 6), i64** %83, align 8, !dbg !46, !tbaa !26
  %"rubyId_!.i.i1" = load i64, i64* @"rubyIdPrecomputed_!", align 8, !dbg !48
  %rawSym.i5.i = call i64 @rb_id2sym(i64 %"rubyId_!.i.i1") #4, !dbg !48
  %rubyId_normal.i6.i = load i64, i64* @rubyIdPrecomputed_normal, align 8, !dbg !48
  %rawSym7.i7.i = call i64 @rb_id2sym(i64 %rubyId_normal.i6.i) #4, !dbg !48
  %124 = load i64, i64* @guard_epoch_Bad, align 8, !dbg !48
  %125 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !48, !tbaa !49
  %needTakeSlowPath = icmp ne i64 %124, %125, !dbg !48
  br i1 %needTakeSlowPath, label %126, label %127, !dbg !48, !prof !51

126:                                              ; preds = %fastSymCallIntrinsic_Static_keep_def.i.i
  call void @const_recompute_Bad(), !dbg !48
  br label %127, !dbg !48

127:                                              ; preds = %fastSymCallIntrinsic_Static_keep_def.i.i, %126
  %128 = load i64, i64* @guarded_const_Bad, align 8, !dbg !48
  %129 = load i64, i64* @guard_epoch_Bad, align 8, !dbg !48
  %130 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !48, !tbaa !49
  %guardUpdated = icmp eq i64 %129, %130, !dbg !48
  call void @llvm.assume(i1 %guardUpdated), !dbg !48
  %stackFrame8.i8.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Bad#!", align 8, !dbg !48
  %131 = call noalias nonnull i8* @ruby_xcalloc(i64 noundef 1, i64 noundef 64) #15, !dbg !48
  %132 = bitcast i8* %131 to i16*, !dbg !48
  %133 = load i16, i16* %132, align 8, !dbg !48
  %134 = and i16 %133, -384, !dbg !48
  store i16 %134, i16* %132, align 8, !dbg !48
  %135 = getelementptr inbounds i8, i8* %131, i64 4, !dbg !48
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %135, i8 0, i64 28, i1 false) #4, !dbg !48
  %136 = call i64 @rb_intern(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @"str_!", i64 0, i64 0)) #4, !dbg !48
  %137 = bitcast i8* %131 to %struct.rb_sorbet_param_struct*, !dbg !48
  %138 = bitcast %struct.rb_iseq_struct* %stackFrame8.i8.i to i8*, !dbg !48
  call void @rb_add_method_sorbet(i64 %128, i64 %136, i64 (i32, i64*, i64, %struct.rb_control_frame_struct*)* noundef @"func_Bad#!", %struct.rb_sorbet_param_struct* nonnull %137, i32 noundef 1, i8* %138) #4, !dbg !48
  %139 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !48, !tbaa !26
  %140 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %139, i64 0, i32 5, !dbg !48
  %141 = load i32, i32* %140, align 8, !dbg !48, !tbaa !52
  %142 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %139, i64 0, i32 6, !dbg !48
  %143 = load i32, i32* %142, align 4, !dbg !48, !tbaa !53
  %144 = xor i32 %143, -1, !dbg !48
  %145 = and i32 %144, %141, !dbg !48
  %146 = icmp eq i32 %145, 0, !dbg !48
  br i1 %146, label %"func_Bad.<static-init>L62.exit.i", label %147, !dbg !48, !prof !54

147:                                              ; preds = %127
  %148 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %139, i64 0, i32 8, !dbg !48
  %149 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %148, align 8, !dbg !48, !tbaa !55
  %150 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %149, i32 noundef 0) #4, !dbg !48
  br label %"func_Bad.<static-init>L62.exit.i", !dbg !48

"func_Bad.<static-init>L62.exit.i":               ; preds = %147, %127, %sorbet_processThrowReturnSetJmp.exit.i4.i
  %151 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !26
  %152 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %89, align 8, !tbaa !39
  %153 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %151, i64 0, i32 3
  store %struct.rb_vm_tag* %152, %struct.rb_vm_tag** %153, align 8, !tbaa !38
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %74) #4
  call void @sorbet_popRubyStack() #4, !dbg !45
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 12), i64** %29, align 8, !dbg !45, !tbaa !26
  %154 = call i64 @rb_define_module(i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @str_Main, i64 0, i64 0)) #4, !dbg !56
  %155 = call %struct.rb_control_frame_struct* @sorbet_pushStaticInitFrame(i64 %154) #4, !dbg !56
  %156 = bitcast %struct.rb_vm_tag* %ecTag.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %156) #4
  %stackFrame.i.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Main.<static-init>", align 8
  %157 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !26
  %158 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %157, i64 0, i32 2
  %159 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %158, align 8, !tbaa !28
  %160 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %159, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i.i, %struct.rb_iseq_struct** %160, align 8, !tbaa !32
  %161 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %159, i64 0, i32 4
  %162 = load i64*, i64** %161, align 8, !tbaa !34
  %163 = load i64, i64* %162, align 8, !tbaa !4
  %164 = and i64 %163, -33
  store i64 %164, i64* %162, align 8, !tbaa !4
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %157, %struct.rb_control_frame_struct* %159, %struct.rb_iseq_struct* %stackFrame.i.i) #4
  %165 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %155, i64 0, i32 0
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 12), i64** %165, align 8, !tbaa !26
  %166 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !26
  %167 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i.i, i64 0, i32 4
  store i32 0, i32* %167, align 8, !tbaa !35
  %168 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i.i, i64 0, i32 0
  store i64 52, i64* %168, align 8, !tbaa !37
  %169 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %166, i64 0, i32 3
  %170 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %169, align 8, !tbaa !38
  %171 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i.i, i64 0, i32 3
  store %struct.rb_vm_tag* %170, %struct.rb_vm_tag** %171, align 8, !tbaa !39
  %172 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i.i, i64 0, i32 2, i64 0
  store i8* %37, i8** %172, align 8
  %173 = call i8* @llvm.stacksave() #4
  %174 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag.i.i, i64 0, i32 2, i64 2
  store i8* %173, i8** %174, align 8
  %175 = bitcast i8** %172 to i8*
  %176 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull align 8 %175) #4
  %177 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !26
  %178 = icmp eq i32 %176, 0
  %179 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %177, i64 0, i32 3
  br i1 %178, label %201, label %180

180:                                              ; preds = %"func_Bad.<static-init>L62.exit.i"
  %181 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %179, align 8, !tbaa !38
  %182 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %181, i64 0, i32 4
  %183 = load i32, i32* %182, align 8, !tbaa !35
  store i32 0, i32* %182, align 8, !tbaa !35
  %184 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %177, i64 0, i32 16
  %185 = load i64, i64* %184, align 8, !tbaa !40
  %186 = inttoptr i64 %185 to %struct.vm_throw_data*
  %187 = icmp eq i32 %183, 1
  br i1 %187, label %188, label %193

188:                                              ; preds = %180
  %189 = getelementptr inbounds %struct.vm_throw_data, %struct.vm_throw_data* %186, i64 0, i32 3
  %190 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %189, align 8, !tbaa !41
  %191 = icmp eq %struct.rb_control_frame_struct* %190, %155
  br i1 %191, label %sorbet_processThrowReturnSetJmp.exit.i.i, label %.thread1.i.i

.thread1.i.i:                                     ; preds = %188
  %192 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %171, align 8, !tbaa !39
  store %struct.rb_vm_tag* %192, %struct.rb_vm_tag** %179, align 8, !tbaa !38
  br label %196

193:                                              ; preds = %180
  %194 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %171, align 8, !tbaa !39
  store %struct.rb_vm_tag* %194, %struct.rb_vm_tag** %179, align 8, !tbaa !38
  %195 = icmp eq i32 %183, 0
  br i1 %195, label %fastSymCallIntrinsic_Static_keep_self_def.i.i, label %196

196:                                              ; preds = %193, %.thread1.i.i
  %197 = phi %struct.rb_vm_tag* [ %192, %.thread1.i.i ], [ %194, %193 ]
  %198 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %197, i64 0, i32 4
  store i32 %183, i32* %198, align 8, !tbaa !35
  %199 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %197, i64 0, i32 2, i64 0
  %200 = bitcast i8** %199 to i8*
  call void @llvm.eh.sjlj.longjmp(i8* nonnull %200) #5
  unreachable

201:                                              ; preds = %"func_Bad.<static-init>L62.exit.i"
  store %struct.rb_vm_tag* %ecTag.i.i, %struct.rb_vm_tag** %179, align 8, !tbaa !38
  br label %fastSymCallIntrinsic_Static_keep_self_def.i.i

sorbet_processThrowReturnSetJmp.exit.i.i:         ; preds = %188
  call void @rb_vm_rewind_cfp(%struct.rb_execution_context_struct* nonnull %177, %struct.rb_control_frame_struct* nonnull %155) #4
  store i64 8, i64* %184, align 8, !tbaa !40
  %202 = getelementptr inbounds %struct.vm_throw_data, %struct.vm_throw_data* %186, i64 0, i32 2
  %203 = load i64, i64* %202, align 8, !tbaa !43
  %204 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %171, align 8, !tbaa !39
  store %struct.rb_vm_tag* %204, %struct.rb_vm_tag** %179, align 8, !tbaa !38
  %205 = icmp eq i64 %203, 52
  br i1 %205, label %fastSymCallIntrinsic_Static_keep_self_def.i.i, label %"func_Main.<static-init>L129.exit.i"

fastSymCallIntrinsic_Static_keep_self_def.i.i:    ; preds = %sorbet_processThrowReturnSetJmp.exit.i.i, %201, %193
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 13), i64** %165, align 8, !dbg !57, !tbaa !26
  %rubyId_test.i.i2 = load i64, i64* @rubyIdPrecomputed_test, align 8, !dbg !59
  %rawSym.i.i = call i64 @rb_id2sym(i64 %rubyId_test.i.i2) #4, !dbg !59
  %rubyId_normal.i.i = load i64, i64* @rubyIdPrecomputed_normal, align 8, !dbg !59
  %rawSym7.i.i = call i64 @rb_id2sym(i64 %rubyId_normal.i.i) #4, !dbg !59
  %206 = load i64, i64* @guard_epoch_Main, align 8, !dbg !59
  %207 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !59, !tbaa !49
  %needTakeSlowPath18 = icmp ne i64 %206, %207, !dbg !59
  br i1 %needTakeSlowPath18, label %208, label %209, !dbg !59, !prof !51

208:                                              ; preds = %fastSymCallIntrinsic_Static_keep_self_def.i.i
  call void @const_recompute_Main(), !dbg !59
  br label %209, !dbg !59

209:                                              ; preds = %fastSymCallIntrinsic_Static_keep_self_def.i.i, %208
  %210 = load i64, i64* @guarded_const_Main, align 8, !dbg !59
  %211 = load i64, i64* @guard_epoch_Main, align 8, !dbg !59
  %212 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !59, !tbaa !49
  %guardUpdated19 = icmp eq i64 %211, %212, !dbg !59
  call void @llvm.assume(i1 %guardUpdated19), !dbg !59
  %stackFrame8.i.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @stackFramePrecomputed_func_Main.test, align 8, !dbg !59
  %213 = call noalias nonnull i8* @ruby_xcalloc(i64 noundef 1, i64 noundef 64) #15, !dbg !59
  %214 = bitcast i8* %213 to i16*, !dbg !59
  %215 = load i16, i16* %214, align 8, !dbg !59
  %216 = and i16 %215, -384, !dbg !59
  store i16 %216, i16* %214, align 8, !dbg !59
  %217 = getelementptr inbounds i8, i8* %213, i64 4, !dbg !59
  %218 = bitcast %struct.rb_iseq_struct* %stackFrame8.i.i to i8*, !dbg !59
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %217, i8 0, i64 28, i1 false) #4, !dbg !59
  call void @rb_define_singleton_sorbet_method(i64 %210, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @str_test, i64 0, i64 0), i64 (i32, i64*, i64, %struct.rb_control_frame_struct*)* noundef @func_Main.test, i8* nonnull %213, i8* %218) #4, !dbg !59
  %219 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !59, !tbaa !26
  %220 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %219, i64 0, i32 5, !dbg !59
  %221 = load i32, i32* %220, align 8, !dbg !59, !tbaa !52
  %222 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %219, i64 0, i32 6, !dbg !59
  %223 = load i32, i32* %222, align 4, !dbg !59, !tbaa !53
  %224 = xor i32 %223, -1, !dbg !59
  %225 = and i32 %224, %221, !dbg !59
  %226 = icmp eq i32 %225, 0, !dbg !59
  br i1 %226, label %"func_Main.<static-init>L129.exit.i", label %227, !dbg !59, !prof !54

227:                                              ; preds = %209
  %228 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %219, i64 0, i32 8, !dbg !59
  %229 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %228, align 8, !dbg !59, !tbaa !55
  %230 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %229, i32 noundef 0) #4, !dbg !59
  br label %"func_Main.<static-init>L129.exit.i", !dbg !59

"func_Main.<static-init>L129.exit.i":             ; preds = %227, %209, %sorbet_processThrowReturnSetJmp.exit.i.i
  %231 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !26
  %232 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %171, align 8, !tbaa !39
  %233 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %231, i64 0, i32 3
  store %struct.rb_vm_tag* %232, %struct.rb_vm_tag** %233, align 8, !tbaa !38
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %156) #4
  call void @sorbet_popRubyStack() #4, !dbg !56
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 22), i64** %29, align 8, !dbg !56, !tbaa !26
  %234 = load i64, i64* @guard_epoch_Main, align 8, !dbg !8
  %235 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !8, !tbaa !49
  %needTakeSlowPath20 = icmp ne i64 %234, %235, !dbg !8
  br i1 %needTakeSlowPath20, label %236, label %237, !dbg !8, !prof !51

236:                                              ; preds = %"func_Main.<static-init>L129.exit.i"
  call void @const_recompute_Main(), !dbg !8
  br label %237, !dbg !8

237:                                              ; preds = %"func_Main.<static-init>L129.exit.i", %236
  %238 = load i64, i64* @guarded_const_Main, align 8, !dbg !8
  %239 = load i64, i64* @guard_epoch_Main, align 8, !dbg !8
  %240 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !8, !tbaa !49
  %guardUpdated21 = icmp eq i64 %239, %240, !dbg !8
  call void @llvm.assume(i1 %guardUpdated21), !dbg !8
  %241 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %21, i64 0, i32 1, !dbg !8
  %242 = load i64*, i64** %241, align 8, !dbg !8, !tbaa !60
  %243 = getelementptr inbounds i64, i64* %242, i64 1, !dbg !8
  store i64* %243, i64** %241, align 8, !dbg !8, !tbaa !60
  store i64 %238, i64* %242, align 8, !dbg !8, !tbaa !4
  %send.i = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_test, i64 0) #4, !dbg !8
  br label %"func_<root>.<static-init>$152.exit", !dbg !8

"func_<root>.<static-init>$152.exit":             ; preds = %sorbet_processThrowReturnSetJmp.exit.i, %237
  %244 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !26
  %245 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %35, align 8, !tbaa !39
  %246 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %244, i64 0, i32 3
  store %struct.rb_vm_tag* %245, %struct.rb_vm_tag** %246, align 8, !tbaa !38
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %22)
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_Bad#!"(i32 %argc, i64* nocapture nofree readnone %argArray, i64 %selfRaw, %struct.rb_control_frame_struct* nonnull align 8 dereferenceable(8) %cfp) #10 !dbg !14 {
functionEntryInitializers:
  %ecTag = alloca %struct.rb_vm_tag, align 8
  %0 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 0
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 6), i64** %0, align 8, !tbaa !26
  %1 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !26
  %2 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag, i64 0, i32 4
  store i32 0, i32* %2, align 8, !tbaa !35
  %3 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag, i64 0, i32 0
  store i64 52, i64* %3, align 8, !tbaa !37
  %4 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %1, i64 0, i32 3
  %5 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %4, align 8, !tbaa !38
  %6 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag, i64 0, i32 3
  store %struct.rb_vm_tag* %5, %struct.rb_vm_tag** %6, align 8, !tbaa !39
  %7 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag, i64 0, i32 2, i64 0
  %8 = tail call i8* @llvm.frameaddress.p0i8(i32 noundef 0) #16
  store i8* %8, i8** %7, align 8
  %9 = tail call i8* @llvm.stacksave() #16
  %10 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag, i64 0, i32 2, i64 2
  store i8* %9, i8** %10, align 8
  %11 = bitcast i8** %7 to i8*
  %12 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull align 8 %11) #4
  %13 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !26
  %14 = icmp eq i32 %12, 0
  %15 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %13, i64 0, i32 3
  br i1 %14, label %37, label %16

16:                                               ; preds = %functionEntryInitializers
  %17 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %15, align 8, !tbaa !38
  %18 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %17, i64 0, i32 4
  %19 = load i32, i32* %18, align 8, !tbaa !35
  store i32 0, i32* %18, align 8, !tbaa !35
  %20 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %13, i64 0, i32 16
  %21 = load i64, i64* %20, align 8, !tbaa !40
  %22 = inttoptr i64 %21 to %struct.vm_throw_data*
  %23 = icmp eq i32 %19, 1
  br i1 %23, label %24, label %29

24:                                               ; preds = %16
  %25 = getelementptr inbounds %struct.vm_throw_data, %struct.vm_throw_data* %22, i64 0, i32 3
  %26 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %25, align 8, !tbaa !41
  %27 = icmp eq %struct.rb_control_frame_struct* %26, %cfp
  br i1 %27, label %sorbet_processThrowReturnSetJmp.exit, label %.thread15

.thread15:                                        ; preds = %24
  %28 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %6, align 8, !tbaa !39
  store %struct.rb_vm_tag* %28, %struct.rb_vm_tag** %15, align 8, !tbaa !38
  br label %32

29:                                               ; preds = %16
  %30 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %6, align 8, !tbaa !39
  store %struct.rb_vm_tag* %30, %struct.rb_vm_tag** %15, align 8, !tbaa !38
  %31 = icmp eq i32 %19, 0
  br i1 %31, label %argumentSetup, label %32

32:                                               ; preds = %.thread15, %29
  %33 = phi %struct.rb_vm_tag* [ %28, %.thread15 ], [ %30, %29 ]
  %34 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %33, i64 0, i32 4
  store i32 %19, i32* %34, align 8, !tbaa !35
  %35 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %33, i64 0, i32 2, i64 0
  %36 = bitcast i8** %35 to i8*
  call void @llvm.eh.sjlj.longjmp(i8* nonnull %36) #5
  unreachable

37:                                               ; preds = %functionEntryInitializers
  store %struct.rb_vm_tag* %ecTag, %struct.rb_vm_tag** %15, align 8, !tbaa !38
  br label %argumentSetup

sorbet_processThrowReturnSetJmp.exit:             ; preds = %24
  call void @rb_vm_rewind_cfp(%struct.rb_execution_context_struct* nonnull %13, %struct.rb_control_frame_struct* nonnull %cfp) #4
  store i64 8, i64* %20, align 8, !tbaa !40
  %38 = getelementptr inbounds %struct.vm_throw_data, %struct.vm_throw_data* %22, i64 0, i32 2
  %39 = load i64, i64* %38, align 8, !tbaa !43
  %40 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %6, align 8, !tbaa !39
  store %struct.rb_vm_tag* %40, %struct.rb_vm_tag** %15, align 8, !tbaa !38
  %41 = icmp eq i64 %39, 52
  br i1 %41, label %argumentSetup, label %postProcess

argumentSetup:                                    ; preds = %29, %37, %sorbet_processThrowReturnSetJmp.exit
  %tooManyArgs = icmp ugt i32 %argc, 0, !dbg !61
  br i1 %tooManyArgs, label %argCountFailBlock, label %fillRequiredArgs, !dbg !61, !prof !62

postProcess:                                      ; preds = %sorbet_processThrowReturnSetJmp.exit, %fillRequiredArgs
  %"<returnValue>.sroa.0.0" = phi i64 [ 20, %fillRequiredArgs ], [ %39, %sorbet_processThrowReturnSetJmp.exit ]
  %42 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !26
  %43 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %6, align 8, !tbaa !39
  %44 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %42, i64 0, i32 3
  store %struct.rb_vm_tag* %43, %struct.rb_vm_tag** %44, align 8, !tbaa !38
  ret i64 %"<returnValue>.sroa.0.0"

argCountFailBlock:                                ; preds = %argumentSetup
  call void @sorbet_raiseArity(i32 %argc, i32 noundef 0, i32 noundef 0) #0, !dbg !61
  unreachable, !dbg !61

fillRequiredArgs:                                 ; preds = %argumentSetup
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 7), i64** %0, align 8, !dbg !63, !tbaa !26
  %"rubyStr_bad bang overload" = load i64, i64* @"rubyStrFrozen_bad bang overload", align 8, !dbg !64
  %45 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 1, !dbg !13
  %46 = load i64*, i64** %45, align 8, !dbg !13, !tbaa !60
  %47 = getelementptr inbounds i64, i64* %46, i64 1, !dbg !13
  store i64 %selfRaw, i64* %46, align 8, !dbg !13, !tbaa !4
  %48 = getelementptr inbounds i64, i64* %47, i64 1, !dbg !13
  store i64* %48, i64** %45, align 8, !dbg !13, !tbaa !60
  store i64 %"rubyStr_bad bang overload", i64* %47, align 8, !dbg !13, !tbaa !4
  %send = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_puts, i64 0), !dbg !13
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 8), i64** %0, align 8, !dbg !13, !tbaa !26
  br label %postProcess, !dbg !65
}

; Function Attrs: nounwind sspreq uwtable
define i64 @func_Main.test(i32 %argc, i64* nocapture nofree readnone %argArray, i64 %selfRaw, %struct.rb_control_frame_struct* nonnull align 8 dereferenceable(8) %cfp) #10 !dbg !18 {
functionEntryInitializers:
  %ecTag = alloca %struct.rb_vm_tag, align 8
  %0 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 0
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 13), i64** %0, align 8, !tbaa !26
  %1 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !26
  %2 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag, i64 0, i32 4
  store i32 0, i32* %2, align 8, !tbaa !35
  %3 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag, i64 0, i32 0
  store i64 52, i64* %3, align 8, !tbaa !37
  %4 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %1, i64 0, i32 3
  %5 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %4, align 8, !tbaa !38
  %6 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag, i64 0, i32 3
  store %struct.rb_vm_tag* %5, %struct.rb_vm_tag** %6, align 8, !tbaa !39
  %7 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag, i64 0, i32 2, i64 0
  %8 = tail call i8* @llvm.frameaddress.p0i8(i32 noundef 0) #16
  store i8* %8, i8** %7, align 8
  %9 = tail call i8* @llvm.stacksave() #16
  %10 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %ecTag, i64 0, i32 2, i64 2
  store i8* %9, i8** %10, align 8
  %11 = bitcast i8** %7 to i8*
  %12 = call i32 @llvm.eh.sjlj.setjmp(i8* nonnull align 8 %11) #4
  %13 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !26
  %14 = icmp eq i32 %12, 0
  %15 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %13, i64 0, i32 3
  br i1 %14, label %37, label %16

16:                                               ; preds = %functionEntryInitializers
  %17 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %15, align 8, !tbaa !38
  %18 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %17, i64 0, i32 4
  %19 = load i32, i32* %18, align 8, !tbaa !35
  store i32 0, i32* %18, align 8, !tbaa !35
  %20 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %13, i64 0, i32 16
  %21 = load i64, i64* %20, align 8, !tbaa !40
  %22 = inttoptr i64 %21 to %struct.vm_throw_data*
  %23 = icmp eq i32 %19, 1
  br i1 %23, label %24, label %29

24:                                               ; preds = %16
  %25 = getelementptr inbounds %struct.vm_throw_data, %struct.vm_throw_data* %22, i64 0, i32 3
  %26 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %25, align 8, !tbaa !41
  %27 = icmp eq %struct.rb_control_frame_struct* %26, %cfp
  br i1 %27, label %sorbet_processThrowReturnSetJmp.exit, label %.thread100

.thread100:                                       ; preds = %24
  %28 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %6, align 8, !tbaa !39
  store %struct.rb_vm_tag* %28, %struct.rb_vm_tag** %15, align 8, !tbaa !38
  br label %32

29:                                               ; preds = %16
  %30 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %6, align 8, !tbaa !39
  store %struct.rb_vm_tag* %30, %struct.rb_vm_tag** %15, align 8, !tbaa !38
  %31 = icmp eq i32 %19, 0
  br i1 %31, label %argumentSetup, label %32

32:                                               ; preds = %.thread100, %29
  %33 = phi %struct.rb_vm_tag* [ %28, %.thread100 ], [ %30, %29 ]
  %34 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %33, i64 0, i32 4
  store i32 %19, i32* %34, align 8, !tbaa !35
  %35 = getelementptr inbounds %struct.rb_vm_tag, %struct.rb_vm_tag* %33, i64 0, i32 2, i64 0
  %36 = bitcast i8** %35 to i8*
  call void @llvm.eh.sjlj.longjmp(i8* nonnull %36) #5
  unreachable

37:                                               ; preds = %functionEntryInitializers
  store %struct.rb_vm_tag* %ecTag, %struct.rb_vm_tag** %15, align 8, !tbaa !38
  br label %argumentSetup

sorbet_processThrowReturnSetJmp.exit:             ; preds = %24
  call void @rb_vm_rewind_cfp(%struct.rb_execution_context_struct* nonnull %13, %struct.rb_control_frame_struct* nonnull %cfp) #4
  store i64 8, i64* %20, align 8, !tbaa !40
  %38 = getelementptr inbounds %struct.vm_throw_data, %struct.vm_throw_data* %22, i64 0, i32 2
  %39 = load i64, i64* %38, align 8, !tbaa !43
  %40 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %6, align 8, !tbaa !39
  store %struct.rb_vm_tag* %40, %struct.rb_vm_tag** %15, align 8, !tbaa !38
  %41 = icmp eq i64 %39, 52
  br i1 %41, label %argumentSetup, label %postProcess

argumentSetup:                                    ; preds = %29, %37, %sorbet_processThrowReturnSetJmp.exit
  %tooManyArgs = icmp ugt i32 %argc, 0, !dbg !66
  br i1 %tooManyArgs, label %argCountFailBlock, label %fillRequiredArgs, !dbg !66, !prof !62

postProcess:                                      ; preds = %sorbet_processThrowReturnSetJmp.exit, %sorbet_bang.exit
  %"<returnValue>.sroa.0.0" = phi i64 [ %send82, %sorbet_bang.exit ], [ %39, %sorbet_processThrowReturnSetJmp.exit ]
  %42 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !26
  %43 = load %struct.rb_vm_tag*, %struct.rb_vm_tag** %6, align 8, !tbaa !39
  %44 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %42, i64 0, i32 3
  store %struct.rb_vm_tag* %43, %struct.rb_vm_tag** %44, align 8, !tbaa !38
  ret i64 %"<returnValue>.sroa.0.0"

argCountFailBlock:                                ; preds = %argumentSetup
  call void @sorbet_raiseArity(i32 %argc, i32 noundef 0, i32 noundef 0) #0, !dbg !66
  unreachable, !dbg !66

fillRequiredArgs:                                 ; preds = %argumentSetup
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 14), i64** %0, align 8, !dbg !67, !tbaa !26
  call void @llvm.experimental.noalias.scope.decl(metadata !68), !dbg !71
  %45 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 1, !dbg !17
  %46 = load i64*, i64** %45, align 8, !dbg !17, !tbaa !60
  %47 = getelementptr inbounds i64, i64* %46, i64 1, !dbg !17
  store i64 %selfRaw, i64* %46, align 8, !dbg !17, !tbaa !4
  %48 = getelementptr inbounds i64, i64* %47, i64 1, !dbg !17
  store i64* %48, i64** %45, align 8, !dbg !17, !tbaa !60
  store i64 0, i64* %47, align 8, !dbg !17, !tbaa !4
  %send = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_puts.1, i64 0), !dbg !17
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 15), i64** %0, align 8, !dbg !17, !tbaa !26
  call void @llvm.experimental.noalias.scope.decl(metadata !72), !dbg !75
  %49 = load i64*, i64** %45, align 8, !dbg !19, !tbaa !60
  %50 = getelementptr inbounds i64, i64* %49, i64 1, !dbg !19
  store i64 %selfRaw, i64* %49, align 8, !dbg !19, !tbaa !4
  %51 = getelementptr inbounds i64, i64* %50, i64 1, !dbg !19
  store i64* %51, i64** %45, align 8, !dbg !19, !tbaa !60
  store i64 20, i64* %50, align 8, !dbg !19, !tbaa !4
  %send45 = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_puts.2, i64 0), !dbg !19
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 16), i64** %0, align 8, !dbg !19, !tbaa !26
  call void @llvm.experimental.noalias.scope.decl(metadata !76), !dbg !79
  %52 = load i64*, i64** %45, align 8, !dbg !20, !tbaa !60
  %53 = getelementptr inbounds i64, i64* %52, i64 1, !dbg !20
  store i64 %selfRaw, i64* %52, align 8, !dbg !20, !tbaa !4
  %54 = getelementptr inbounds i64, i64* %53, i64 1, !dbg !20
  store i64* %54, i64** %45, align 8, !dbg !20, !tbaa !60
  store i64 20, i64* %53, align 8, !dbg !20, !tbaa !4
  %send57 = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_puts.3, i64 0), !dbg !20
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 17), i64** %0, align 8, !dbg !20, !tbaa !26
  %rubyStr_hello = load i64, i64* @rubyStrFrozen_hello, align 8, !dbg !80
  %"rubyId_!61" = load i64, i64* @"rubyIdPrecomputed_!", align 8, !dbg !81
  call void @llvm.experimental.noalias.scope.decl(metadata !82), !dbg !81
  %55 = and i64 %rubyStr_hello, -9, !dbg !81
  %56 = icmp eq i64 %55, 0, !dbg !81
  br i1 %56, label %sorbet_bang.exit95, label %57, !dbg !81

57:                                               ; preds = %fillRequiredArgs
  %58 = icmp eq i64 %rubyStr_hello, 20, !dbg !81
  br i1 %58, label %sorbet_bang.exit95, label %59, !dbg !81

59:                                               ; preds = %57
  %60 = call i64 @rb_funcallv_with_cc(%struct.rb_call_data* noundef nonnull @sorbet_bang.rb_funcallv_data, i64 %rubyStr_hello, i64 %"rubyId_!61", i32 noundef 0, i64* noundef null) #4, !dbg !81
  br label %sorbet_bang.exit95, !dbg !81

sorbet_bang.exit95:                               ; preds = %fillRequiredArgs, %57, %59
  %61 = phi i64 [ %60, %59 ], [ 0, %57 ], [ 20, %fillRequiredArgs ], !dbg !81
  %62 = load i64*, i64** %45, align 8, !dbg !21, !tbaa !60
  %63 = getelementptr inbounds i64, i64* %62, i64 1, !dbg !21
  store i64 %selfRaw, i64* %62, align 8, !dbg !21, !tbaa !4
  %64 = getelementptr inbounds i64, i64* %63, i64 1, !dbg !21
  store i64* %64, i64** %45, align 8, !dbg !21, !tbaa !60
  store i64 %61, i64* %63, align 8, !dbg !21, !tbaa !4
  %send68 = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_puts.4, i64 0), !dbg !21
  store i64* getelementptr inbounds ([23 x i64], [23 x i64]* @iseqEncodedArray, i64 0, i64 18), i64** %0, align 8, !dbg !21, !tbaa !26
  %65 = load i64, i64* @guard_epoch_Bad, align 8, !dbg !22
  %66 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !22, !tbaa !49
  %needTakeSlowPath = icmp ne i64 %65, %66, !dbg !22
  br i1 %needTakeSlowPath, label %67, label %68, !dbg !22, !prof !51

67:                                               ; preds = %sorbet_bang.exit95
  call void @const_recompute_Bad(), !dbg !22
  br label %68, !dbg !22

68:                                               ; preds = %sorbet_bang.exit95, %67
  %69 = load i64, i64* @guarded_const_Bad, align 8, !dbg !22
  %70 = load i64, i64* @guard_epoch_Bad, align 8, !dbg !22
  %71 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !22, !tbaa !49
  %guardUpdated = icmp eq i64 %70, %71, !dbg !22
  call void @llvm.assume(i1 %guardUpdated), !dbg !22
  %72 = load i64*, i64** %45, align 8, !dbg !22, !tbaa !60
  %73 = getelementptr inbounds i64, i64* %72, i64 1, !dbg !22
  store i64* %73, i64** %45, align 8, !dbg !22, !tbaa !60
  store i64 %69, i64* %72, align 8, !dbg !22, !tbaa !4
  %send71 = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_new, i64 0), !dbg !22
  %"rubyId_!75" = load i64, i64* @"rubyIdPrecomputed_!", align 8, !dbg !85
  call void @llvm.experimental.noalias.scope.decl(metadata !86), !dbg !85
  %74 = and i64 %send71, -9, !dbg !85
  %75 = icmp eq i64 %74, 0, !dbg !85
  br i1 %75, label %sorbet_bang.exit, label %76, !dbg !85

76:                                               ; preds = %68
  %77 = icmp eq i64 %send71, 20, !dbg !85
  br i1 %77, label %sorbet_bang.exit, label %78, !dbg !85

78:                                               ; preds = %76
  %79 = call i64 @rb_funcallv_with_cc(%struct.rb_call_data* noundef nonnull @sorbet_bang.rb_funcallv_data, i64 %send71, i64 %"rubyId_!75", i32 noundef 0, i64* noundef null) #4, !dbg !85
  br label %sorbet_bang.exit, !dbg !85

sorbet_bang.exit:                                 ; preds = %68, %76, %78
  %80 = phi i64 [ %79, %78 ], [ 0, %76 ], [ 20, %68 ], !dbg !85
  %81 = load i64*, i64** %45, align 8, !dbg !23, !tbaa !60
  %82 = getelementptr inbounds i64, i64* %81, i64 1, !dbg !23
  store i64 %selfRaw, i64* %81, align 8, !dbg !23, !tbaa !4
  %83 = getelementptr inbounds i64, i64* %82, i64 1, !dbg !23
  store i64* %83, i64** %45, align 8, !dbg !23, !tbaa !60
  store i64 %80, i64* %82, align 8, !dbg !23, !tbaa !4
  %send82 = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_puts.5, i64 0), !dbg !23
  br label %postProcess, !dbg !23
}

; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn
declare void @llvm.experimental.noalias.scope.decl(metadata) #11

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #12

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #13

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #13

; Function Attrs: nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #3

; Function Attrs: ssp
define linkonce void @const_recompute_Bad() local_unnamed_addr #14 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Bad, i64 0, i64 0), i64 3)
  store i64 %1, i64* @guarded_const_Bad, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !49
  store i64 %2, i64* @guard_epoch_Bad, align 8
  ret void
}

; Function Attrs: ssp
define linkonce void @const_recompute_Main() local_unnamed_addr #14 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_Main, i64 0, i64 0), i64 4)
  store i64 %1, i64* @guarded_const_Main, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !49
  store i64 %2, i64* @guard_epoch_Main, align 8
  ret void
}

attributes #0 = { noreturn }
attributes #1 = { "addedToSilenceEmptyAttrsError" }
attributes #2 = { nofree nosync nounwind readnone willreturn }
attributes #3 = { nofree nosync nounwind willreturn }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }
attributes #6 = { alwaysinline nounwind ssp uwtable }
attributes #7 = { allocsize(0,1) }
attributes #8 = { nounwind ssp uwtable }
attributes #9 = { sspreq }
attributes #10 = { nounwind sspreq uwtable }
attributes #11 = { inaccessiblememonly nofree nosync nounwind willreturn }
attributes #12 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #13 = { argmemonly nofree nosync nounwind willreturn }
attributes #14 = { ssp }
attributes #15 = { nounwind allocsize(0,1) }
attributes #16 = { nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "Sorbet LLVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "test/testdata/compiler/intrinsics/bang.rb", directory: ".")
!3 = !{}
!4 = !{!5, !5, i64 0}
!5 = !{!"long", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !DILocation(line: 22, column: 1, scope: !9)
!9 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.<static-init>$152", scope: null, file: !2, line: 5, type: !10, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!10 = !DISubroutineType(types: !11)
!11 = !{!12}
!12 = !DIBasicType(name: "VALUE", size: 64, encoding: DW_ATE_signed)
!13 = !DILocation(line: 7, column: 5, scope: !14)
!14 = distinct !DISubprogram(name: "Bad#!", linkageName: "func_Bad#!", scope: null, file: !2, line: 6, type: !10, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!15 = !DILocation(line: 6, column: 3, scope: !16)
!16 = distinct !DISubprogram(name: "Bad.<static-init>", linkageName: "func_Bad.<static-init>L62", scope: null, file: !2, line: 5, type: !10, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!17 = !DILocation(line: 14, column: 5, scope: !18)
!18 = distinct !DISubprogram(name: "Main.test", linkageName: "func_Main.test", scope: null, file: !2, line: 13, type: !10, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!19 = !DILocation(line: 15, column: 5, scope: !18)
!20 = !DILocation(line: 16, column: 5, scope: !18)
!21 = !DILocation(line: 17, column: 5, scope: !18)
!22 = !DILocation(line: 18, column: 11, scope: !18)
!23 = !DILocation(line: 18, column: 5, scope: !18)
!24 = !DILocation(line: 13, column: 3, scope: !25)
!25 = distinct !DISubprogram(name: "Main.<static-init>", linkageName: "func_Main.<static-init>L129", scope: null, file: !2, line: 12, type: !10, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!26 = !{!27, !27, i64 0}
!27 = !{!"any pointer", !6, i64 0}
!28 = !{!29, !27, i64 16}
!29 = !{!"rb_execution_context_struct", !27, i64 0, !5, i64 8, !27, i64 16, !27, i64 24, !27, i64 32, !30, i64 40, !30, i64 44, !27, i64 48, !27, i64 56, !27, i64 64, !5, i64 72, !5, i64 80, !27, i64 88, !5, i64 96, !27, i64 104, !27, i64 112, !5, i64 120, !5, i64 128, !6, i64 136, !6, i64 137, !5, i64 144, !31, i64 152}
!30 = !{!"int", !6, i64 0}
!31 = !{!"", !27, i64 0, !27, i64 8, !5, i64 16, !6, i64 24}
!32 = !{!33, !27, i64 16}
!33 = !{!"rb_control_frame_struct", !27, i64 0, !27, i64 8, !27, i64 16, !5, i64 24, !27, i64 32, !27, i64 40, !27, i64 48}
!34 = !{!33, !27, i64 32}
!35 = !{!36, !6, i64 64}
!36 = !{!"rb_vm_tag", !5, i64 0, !5, i64 8, !6, i64 16, !27, i64 56, !6, i64 64}
!37 = !{!36, !5, i64 0}
!38 = !{!29, !27, i64 24}
!39 = !{!36, !27, i64 56}
!40 = !{!29, !5, i64 120}
!41 = !{!42, !27, i64 24}
!42 = !{!"vm_throw_data", !5, i64 0, !5, i64 8, !5, i64 16, !27, i64 24, !30, i64 32}
!43 = !{!42, !5, i64 16}
!44 = !DILocation(line: 0, scope: !9)
!45 = !DILocation(line: 5, column: 1, scope: !9)
!46 = !DILocation(line: 0, scope: !16, inlinedAt: !47)
!47 = distinct !DILocation(line: 5, column: 1, scope: !9)
!48 = !DILocation(line: 6, column: 3, scope: !16, inlinedAt: !47)
!49 = !{!50, !50, i64 0}
!50 = !{!"long long", !6, i64 0}
!51 = !{!"branch_weights", i32 1, i32 10000}
!52 = !{!29, !30, i64 40}
!53 = !{!29, !30, i64 44}
!54 = !{!"branch_weights", i32 2000, i32 1}
!55 = !{!29, !27, i64 56}
!56 = !DILocation(line: 12, column: 1, scope: !9)
!57 = !DILocation(line: 0, scope: !25, inlinedAt: !58)
!58 = distinct !DILocation(line: 12, column: 1, scope: !9)
!59 = !DILocation(line: 13, column: 3, scope: !25, inlinedAt: !58)
!60 = !{!33, !27, i64 8}
!61 = !DILocation(line: 6, column: 3, scope: !14)
!62 = !{!"branch_weights", i32 1, i32 2000}
!63 = !DILocation(line: 0, scope: !14)
!64 = !DILocation(line: 7, column: 10, scope: !14)
!65 = !DILocation(line: 8, column: 5, scope: !14)
!66 = !DILocation(line: 13, column: 3, scope: !18)
!67 = !DILocation(line: 0, scope: !18)
!68 = !{!69}
!69 = distinct !{!69, !70, !"sorbet_bang: argument 0"}
!70 = distinct !{!70, !"sorbet_bang"}
!71 = !DILocation(line: 14, column: 10, scope: !18)
!72 = !{!73}
!73 = distinct !{!73, !74, !"sorbet_bang: argument 0"}
!74 = distinct !{!74, !"sorbet_bang"}
!75 = !DILocation(line: 15, column: 10, scope: !18)
!76 = !{!77}
!77 = distinct !{!77, !78, !"sorbet_bang: argument 0"}
!78 = distinct !{!78, !"sorbet_bang"}
!79 = !DILocation(line: 16, column: 10, scope: !18)
!80 = !DILocation(line: 17, column: 11, scope: !18)
!81 = !DILocation(line: 17, column: 10, scope: !18)
!82 = !{!83}
!83 = distinct !{!83, !84, !"sorbet_bang: argument 0"}
!84 = distinct !{!84, !"sorbet_bang"}
!85 = !DILocation(line: 18, column: 10, scope: !18)
!86 = !{!87}
!87 = distinct !{!87, !88, !"sorbet_bang: argument 0"}
!88 = distinct !{!88, !"sorbet_bang"}
