; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_call_data = type { %struct.rb_call_cache, %struct.rb_call_info }
%struct.rb_call_cache = type { i64, [3 x i64], %struct.rb_callable_method_entry_struct*, i64, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_data*)*, %union.anon.11 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon, i64, i64 }
%union.anon = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64, i32, i64*, i64 (...)*)*, i32 }
%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.5 }
%struct.rb_vm_tag = type { i64, i64, [5 x i8*], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_fiber_struct = type opaque
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, i64, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %union.pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.8, i32, i64, %struct.rb_fiber_struct*, [5 x i8*], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %union.pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.3, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %union.pthread_mutex_t, i64, i64, i64, i64, i64, i32, %struct.st_table*, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.rb_builtin_function*, i32, %struct.anon.4, [29 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %union.pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32 }
%union.pthread_cond_t = type { %struct.anon.2 }
%struct.anon.2 = type { i32, i32, i64, i64, i64, i8*, i32, i32 }
%struct.anon.3 = type { [65 x i64] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.rb_builtin_function = type opaque
%struct.anon.4 = type { i64, i64, i64, i64 }
%struct.native_thread_data_struct = type { %struct.list_head, %union.anon.7 }
%union.anon.7 = type { %union.pthread_cond_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i64, i64, i32 }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (i64, i64)*, i64 (i64)* }
%struct.st_table_entry = type opaque
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (i64)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.5 = type { i64*, i64*, i64, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.13 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_data*, %struct.anon.12, i32, i32, i32, i32, i32, i8, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*)*, i64, %struct.rb_mjit_unit*, i64 }
%struct.anon = type { %struct.anon.0, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.0 = type { i16, [2 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.iseq_insn_info_entry*, i32*, i32, %struct.succ_index_table* }
%struct.iseq_insn_info_entry = type opaque
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, i64 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.rb_scope_visi_struct }
%struct.rb_scope_visi_struct = type { i8, [3 x i8] }
%struct.anon.12 = type { i64, i64, i64, i64* }
%struct.rb_mjit_unit = type opaque
%union.anon.13 = type { %struct.anon.14 }
%struct.anon.14 = type { i64, i32 }
%struct.rb_calling_info = type { i64, i64, i32, i32 }
%union.anon.11 = type { i32 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.FunctionInlineCache = type { %struct.rb_callable_method_entry_struct*, i64, i64 }

@ruby_vm_global_constant_state = external local_unnamed_addr global i64, align 8
@sorbet_bang.rb_intern_id_cache = internal unnamed_addr global i64 0, align 8
@sorbet_bang.rb_funcallv_data = internal global %struct.rb_call_data zeroinitializer, align 8
@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.7 = private unnamed_addr constant [95 x i8] c"sorbet_getBuildSCMRevision: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@.str.8 = private unnamed_addr constant [93 x i8] c"sorbet_getIsReleaseBuild: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@"stackFramePrecomputed_func_<root>.<static-init>$152" = internal unnamed_addr global i8* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"rubyStrFrozen_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"rubyStrFrozen_test/testdata/compiler/intrinsics/bang.rb" = internal unnamed_addr global i64 0, align 8
@"str_test/testdata/compiler/intrinsics/bang.rb" = private unnamed_addr constant [42 x i8] c"test/testdata/compiler/intrinsics/bang.rb\00", align 1
@str_Bad = private unnamed_addr constant [4 x i8] c"Bad\00", align 1
@str_Main = private unnamed_addr constant [5 x i8] c"Main\00", align 1
@rubyIdPrecomputed_test = internal unnamed_addr global i64 0, align 8
@str_test = private unnamed_addr constant [5 x i8] c"test\00", align 1
@ic_callFunc_test = internal global %struct.FunctionInlineCache zeroinitializer
@"stackFramePrecomputed_func_Bad#!" = internal unnamed_addr global i8* null, align 8
@"rubyIdPrecomputed_!" = internal unnamed_addr global i64 0, align 8
@"str_!" = private unnamed_addr constant [2 x i8] c"!\00", align 1
@"rubyStrFrozen_bad bang overload" = internal unnamed_addr global i64 0, align 8
@"str_bad bang overload" = private unnamed_addr constant [18 x i8] c"bad bang overload\00", align 1
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@ic_callFunc_puts = internal global %struct.FunctionInlineCache zeroinitializer
@"stackFramePrecomputed_func_Bad.<static-init>" = internal unnamed_addr global i8* null, align 8
@rubyIdPrecomputed_normal = internal unnamed_addr global i64 0, align 8
@str_normal = private unnamed_addr constant [7 x i8] c"normal\00", align 1
@str_keep_def = private unnamed_addr constant [9 x i8] c"keep_def\00", align 1
@stackFramePrecomputed_func_Main.test = internal unnamed_addr global i8* null, align 8
@ic_callFunc_puts.2 = internal global %struct.FunctionInlineCache zeroinitializer
@ic_callFunc_puts.3 = internal global %struct.FunctionInlineCache zeroinitializer
@ic_callFunc_puts.4 = internal global %struct.FunctionInlineCache zeroinitializer
@rubyStrFrozen_hello = internal unnamed_addr global i64 0, align 8
@str_hello = private unnamed_addr constant [6 x i8] c"hello\00", align 1
@ic_callFunc_puts.5 = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_new = internal unnamed_addr global i64 0, align 8
@str_new = private unnamed_addr constant [4 x i8] c"new\00", align 1
@ic_callFunc_new = internal global %struct.FunctionInlineCache zeroinitializer
@ic_callFunc_puts.6 = internal global %struct.FunctionInlineCache zeroinitializer
@"stackFramePrecomputed_func_Main.<static-init>" = internal unnamed_addr global i8* null, align 8
@"<static-init-locals-storage>.7" = internal global [0 x i64] zeroinitializer
@str_keep_self_def = private unnamed_addr constant [14 x i8] c"keep_self_def\00", align 1
@rb_cObject = external local_unnamed_addr constant i64
@guard_epoch_Bad = linkonce local_unnamed_addr global i64 0
@guarded_const_Bad = linkonce local_unnamed_addr global i64 0
@guard_epoch_Main = linkonce local_unnamed_addr global i64 0
@guarded_const_Main = linkonce local_unnamed_addr global i64 0

; Function Attrs: noreturn
declare void @sorbet_raiseArity(i32, i32, i32) local_unnamed_addr #0

declare i8* @sorbet_allocateRubyStackFrame(i64, i64, i64, i64, i8*, i32, i32, i32, i64*, i32) local_unnamed_addr #1

declare i64 @sorbet_getConstant(i8*, i64) local_unnamed_addr #1

declare i64 @sorbet_readRealpath() local_unnamed_addr #1

declare i64 @sorbet_callFuncWithCache(i64, i64, i32, i64* nocapture, i32, %struct.FunctionInlineCache*) local_unnamed_addr #1

declare void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_iseq_struct*) local_unnamed_addr #1

declare i64 @rb_define_module(i8*) local_unnamed_addr #1

declare i64 @rb_define_class(i8*, i64) local_unnamed_addr #1

declare extern_weak void @rb_define_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #1

declare extern_weak void @rb_define_singleton_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #1

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #1

declare i64 @rb_id2sym(i64) local_unnamed_addr #1

declare i64 @rb_funcallv_with_cc(%struct.rb_call_data*, i64, i64, i32, i64*) local_unnamed_addr #1

declare i64 @rb_fstring_new(i8*, i64) local_unnamed_addr #1

declare void @rb_gc_register_mark_object(i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #0

; Function Attrs: nounwind ssp uwtable
define weak i32 @sorbet_getIsReleaseBuild() local_unnamed_addr #2 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.8, i64 0, i64 0)) #8
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @sorbet_getBuildSCMRevision() local_unnamed_addr #2 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.7, i64 0, i64 0)) #8
  unreachable
}

; Function Attrs: sspreq
define void @Init_bang() local_unnamed_addr #3 {
entry:
  %locals1.i.i = alloca [0 x i64], align 8
  %realpath = tail call i64 @sorbet_readRealpath()
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #6
  store i64 %0, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %1 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_test, i64 0, i64 0), i64 4) #6
  store i64 %1, i64* @rubyIdPrecomputed_test, align 8
  %2 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_!", i64 0, i64 0), i64 1) #6
  store i64 %2, i64* @"rubyIdPrecomputed_!", align 8
  %3 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 4) #6
  store i64 %3, i64* @rubyIdPrecomputed_puts, align 8
  %4 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_normal, i64 0, i64 0), i64 6) #6
  store i64 %4, i64* @rubyIdPrecomputed_normal, align 8
  %5 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str_keep_def, i64 0, i64 0), i64 8) #6
  %6 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_new, i64 0, i64 0), i64 3) #6
  store i64 %6, i64* @rubyIdPrecomputed_new, align 8
  %7 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str_keep_self_def, i64 0, i64 0), i64 13) #6
  %8 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #6
  tail call void @rb_gc_register_mark_object(i64 %8) #6
  store i64 %8, i64* @"rubyStrFrozen_<top (required)>", align 8
  %9 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str_test/testdata/compiler/intrinsics/bang.rb", i64 0, i64 0), i64 41) #6
  tail call void @rb_gc_register_mark_object(i64 %9) #6
  store i64 %9, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/bang.rb", align 8
  %"rubyId_<top (required)>.i.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %10 = tail call i8* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i.i", i64 %"rubyId_<top (required)>.i.i", i64 %9, i64 %realpath, i8* null, i32 1, i32 1, i32 22, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @"<static-init-locals-storage>.7", i64 0, i64 0), i32 0)
  store i8* %10, i8** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %11 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_!", i64 0, i64 0), i64 1) #6
  tail call void @rb_gc_register_mark_object(i64 %11) #6
  %12 = bitcast [0 x i64]* %locals1.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 0, i8* nonnull %12)
  %"rubyId_!.i.i" = load i64, i64* @"rubyIdPrecomputed_!", align 8
  %"rubyStr_test/testdata/compiler/intrinsics/bang.rb.i3.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/bang.rb", align 8
  %locals1.sub.i.i = getelementptr inbounds [0 x i64], [0 x i64]* %locals1.i.i, i64 0, i64 0
  %13 = call i8* @sorbet_allocateRubyStackFrame(i64 %11, i64 %"rubyId_!.i.i", i64 %"rubyStr_test/testdata/compiler/intrinsics/bang.rb.i3.i", i64 %realpath, i8* null, i32 1, i32 6, i32 9, i64* nonnull %locals1.sub.i.i, i32 0)
  store i8* %13, i8** @"stackFramePrecomputed_func_Bad#!", align 8
  call void @llvm.lifetime.end.p0i8(i64 0, i8* nonnull %12)
  %14 = call i64 @rb_fstring_new(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"str_bad bang overload", i64 0, i64 0), i64 17) #6
  call void @rb_gc_register_mark_object(i64 %14) #6
  store i64 %14, i64* @"rubyStrFrozen_bad bang overload", align 8
  %"rubyId_<top (required)>.i4.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i5.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/compiler/intrinsics/bang.rb.i6.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/bang.rb", align 8
  %15 = call i8* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i5.i", i64 %"rubyId_<top (required)>.i4.i", i64 %"rubyStr_test/testdata/compiler/intrinsics/bang.rb.i6.i", i64 %realpath, i8* null, i32 1, i32 1, i32 5, i64* null, i32 0)
  store i8* %15, i8** @"stackFramePrecomputed_func_Bad.<static-init>", align 8
  %16 = call i64 @rb_fstring_new(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_test, i64 0, i64 0), i64 4) #6
  call void @rb_gc_register_mark_object(i64 %16) #6
  call void @llvm.lifetime.start.p0i8(i64 0, i8* nonnull %12)
  %rubyId_test.i.i = load i64, i64* @rubyIdPrecomputed_test, align 8
  %"rubyStr_test/testdata/compiler/intrinsics/bang.rb.i8.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/bang.rb", align 8
  %17 = call i8* @sorbet_allocateRubyStackFrame(i64 %16, i64 %rubyId_test.i.i, i64 %"rubyStr_test/testdata/compiler/intrinsics/bang.rb.i8.i", i64 %realpath, i8* null, i32 1, i32 13, i32 19, i64* nonnull %locals1.sub.i.i, i32 0)
  store i8* %17, i8** @stackFramePrecomputed_func_Main.test, align 8
  call void @llvm.lifetime.end.p0i8(i64 0, i8* nonnull %12)
  %18 = call i64 @rb_fstring_new(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_hello, i64 0, i64 0), i64 5) #6
  call void @rb_gc_register_mark_object(i64 %18) #6
  store i64 %18, i64* @rubyStrFrozen_hello, align 8
  %"rubyId_<top (required)>.i10.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i11.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/compiler/intrinsics/bang.rb.i12.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/bang.rb", align 8
  %19 = call i8* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i11.i", i64 %"rubyId_<top (required)>.i10.i", i64 %"rubyStr_test/testdata/compiler/intrinsics/bang.rb.i12.i", i64 %realpath, i8* null, i32 1, i32 1, i32 12, i64* null, i32 0)
  store i8* %19, i8** @"stackFramePrecomputed_func_Main.<static-init>", align 8
  %"stackFrame_func_<root>.<static-init>$152.i" = load i8*, i8** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %20 = bitcast i8* %"stackFrame_func_<root>.<static-init>$152.i" to %struct.rb_iseq_struct*
  %21 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !8
  %22 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %21, i64 0, i32 2
  %23 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %22, align 8, !tbaa !10
  %24 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %23, i64 0, i32 2
  %25 = bitcast %struct.rb_iseq_struct** %24 to i8**
  store i8* %"stackFrame_func_<root>.<static-init>$152.i", i8** %25, align 8, !tbaa !14
  %26 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %23, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8, !tbaa !16
  %28 = load i64, i64* %27, align 8, !tbaa !4
  %29 = and i64 %28, -129
  store i64 %29, i64* %27, align 8, !tbaa !4
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %21, %struct.rb_control_frame_struct* nonnull %23, %struct.rb_iseq_struct* %20) #6
  %30 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %23, i64 0, i32 0
  %31 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %24, align 8, !tbaa !14
  %32 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %31, i64 0, i32 2
  %33 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %32, align 8, !tbaa !17
  %34 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %33, i64 0, i32 2
  %35 = load i64*, i64** %34, align 8, !tbaa !19
  %36 = getelementptr inbounds i64, i64* %35, i64 5
  store i64* %36, i64** %30, align 8, !dbg !28, !tbaa !8
  %37 = load i64, i64* @rb_cObject, align 8, !dbg !33
  %38 = call i64 @rb_define_class(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Bad, i64 0, i64 0), i64 %37) #6, !dbg !33
  %39 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !8
  %40 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %39, i64 0, i32 2
  %41 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %40, align 8, !tbaa !10
  %42 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %41, i64 0, i32 0
  %43 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %41, i64 0, i32 2
  %44 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %43, align 8, !tbaa !14
  %45 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %44, i64 0, i32 2
  %46 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %45, align 8, !tbaa !17
  %47 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %46, i64 0, i32 2
  %48 = load i64*, i64** %47, align 8, !tbaa !19
  %49 = getelementptr inbounds i64, i64* %48, i64 6, !dbg !34
  store i64* %49, i64** %42, align 8, !dbg !34, !tbaa !8
  %"rubyId_!.i.i1" = load i64, i64* @"rubyIdPrecomputed_!", align 8, !dbg !37
  %rawSym.i1.i = call i64 @rb_id2sym(i64 %"rubyId_!.i.i1") #6, !dbg !37
  %rubyId_normal.i2.i = load i64, i64* @rubyIdPrecomputed_normal, align 8, !dbg !37
  %rawSym8.i3.i = call i64 @rb_id2sym(i64 %rubyId_normal.i2.i) #6, !dbg !37
  %50 = load i64, i64* @guard_epoch_Bad, align 8, !dbg !37
  %51 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !37, !tbaa !38
  %needTakeSlowPath = icmp eq i64 %50, %51, !dbg !37
  br i1 %needTakeSlowPath, label %53, label %52, !dbg !37, !prof !40

52:                                               ; preds = %entry
  call void @const_recompute_Bad(), !dbg !37
  br label %53, !dbg !37

53:                                               ; preds = %entry, %52
  %54 = load i64, i64* @guarded_const_Bad, align 8, !dbg !37
  %55 = load i64, i64* @guard_epoch_Bad, align 8, !dbg !37
  %56 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !37, !tbaa !38
  %guardUpdated = icmp eq i64 %55, %56, !dbg !37
  call void @llvm.assume(i1 %guardUpdated), !dbg !37
  call void @rb_define_method(i64 %54, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_!", i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"func_Bad#!" to i64 (...)*), i32 -1) #6, !dbg !37
  %57 = getelementptr inbounds i64, i64* %35, i64 12, !dbg !28
  store i64* %57, i64** %30, align 8, !dbg !28, !tbaa !8
  %58 = call i64 @rb_define_module(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_Main, i64 0, i64 0)) #6, !dbg !41
  %59 = load i64, i64* @guard_epoch_Main, align 8, !dbg !41
  %60 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !41, !tbaa !38
  %needTakeSlowPath3 = icmp eq i64 %59, %60, !dbg !41
  br i1 %needTakeSlowPath3, label %62, label %61, !dbg !41, !prof !40

61:                                               ; preds = %53
  call void @const_recompute_Main(), !dbg !41
  br label %62, !dbg !41

62:                                               ; preds = %53, %61
  %63 = load i64, i64* @guarded_const_Main, align 8, !dbg !41
  %64 = load i64, i64* @guard_epoch_Main, align 8, !dbg !41
  %65 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !41, !tbaa !38
  %guardUpdated4 = icmp eq i64 %64, %65, !dbg !41
  call void @llvm.assume(i1 %guardUpdated4), !dbg !41
  %66 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !8
  %67 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %66, i64 0, i32 2
  %68 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %67, align 8, !tbaa !10
  %69 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %68, i64 0, i32 0
  %70 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %68, i64 0, i32 2
  %71 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %70, align 8, !tbaa !14
  %72 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %71, i64 0, i32 2
  %73 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %72, align 8, !tbaa !17
  %74 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %73, i64 0, i32 2
  %75 = load i64*, i64** %74, align 8, !tbaa !19
  %76 = getelementptr inbounds i64, i64* %75, i64 13, !dbg !42
  store i64* %76, i64** %69, align 8, !dbg !42, !tbaa !8
  %rubyId_test.i.i2 = load i64, i64* @rubyIdPrecomputed_test, align 8, !dbg !45
  %rawSym.i.i = call i64 @rb_id2sym(i64 %rubyId_test.i.i2) #6, !dbg !45
  %rubyId_normal.i.i = load i64, i64* @rubyIdPrecomputed_normal, align 8, !dbg !45
  %rawSym8.i.i = call i64 @rb_id2sym(i64 %rubyId_normal.i.i) #6, !dbg !45
  call void @rb_define_singleton_method(i64 %63, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_test, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @func_Main.test to i64 (...)*), i32 -1) #6, !dbg !45
  %77 = getelementptr inbounds i64, i64* %35, i64 22, !dbg !28
  store i64* %77, i64** %30, align 8, !dbg !28, !tbaa !8
  %rubyId_test.i = load i64, i64* @rubyIdPrecomputed_test, align 8, !dbg !46
  %callFunc_test.i = call i64 @sorbet_callFuncWithCache(i64 %63, i64 %rubyId_test.i, i32 0, i64* null, i32 0, %struct.FunctionInlineCache* nonnull @ic_callFunc_test) #6, !dbg !46
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_Bad#!"(i32 %argc, i64* nocapture readnone %argArray, i64 %selfRaw) #4 !dbg !47 {
functionEntryInitializers:
  %callArgs = alloca [1 x i64], align 8
  %"stackFrame_func_Bad#!" = load i8*, i8** @"stackFramePrecomputed_func_Bad#!", align 8
  %0 = bitcast i8* %"stackFrame_func_Bad#!" to %struct.rb_iseq_struct*
  %1 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !8
  %2 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %1, i64 0, i32 2
  %3 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %2, align 8, !tbaa !10
  %4 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %3, i64 0, i32 2
  %5 = bitcast %struct.rb_iseq_struct** %4 to i8**
  store i8* %"stackFrame_func_Bad#!", i8** %5, align 8, !tbaa !14
  %6 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %3, i64 0, i32 4
  %7 = load i64*, i64** %6, align 8, !tbaa !16
  %8 = load i64, i64* %7, align 8, !tbaa !4
  %9 = and i64 %8, -129
  store i64 %9, i64* %7, align 8, !tbaa !4
  tail call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %1, %struct.rb_control_frame_struct* nonnull %3, %struct.rb_iseq_struct* %0) #6
  %10 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %3, i64 0, i32 0
  %11 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %4, align 8, !tbaa !14
  %12 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %11, i64 0, i32 2
  %13 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %12, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %13, i64 0, i32 2
  %15 = load i64*, i64** %14, align 8, !tbaa !19
  %16 = getelementptr inbounds i64, i64* %15, i64 1
  store i64* %16, i64** %10, align 8, !tbaa !8
  %tooManyArgs = icmp eq i32 %argc, 0, !dbg !48
  br i1 %tooManyArgs, label %fillRequiredArgs, label %argCountFailBlock, !dbg !48, !prof !49

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call void @sorbet_raiseArity(i32 %argc, i32 0, i32 0) #6, !dbg !48
  unreachable, !dbg !48

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %17 = getelementptr inbounds i64, i64* %15, i64 2, !dbg !50
  store i64* %17, i64** %10, align 8, !dbg !50, !tbaa !8
  %"rubyStr_bad bang overload" = load i64, i64* @"rubyStrFrozen_bad bang overload", align 8, !dbg !51
  %callArgs0Addr = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs, i64 0, i64 0, !dbg !52
  store i64 %"rubyStr_bad bang overload", i64* %callArgs0Addr, align 8, !dbg !52
  %rubyId_puts = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !52
  %callFunc_puts = call i64 @sorbet_callFuncWithCache(i64 %selfRaw, i64 %rubyId_puts, i32 1, i64* nonnull %callArgs0Addr, i32 0, %struct.FunctionInlineCache* nonnull @ic_callFunc_puts) #6, !dbg !52
  %18 = getelementptr inbounds i64, i64* %15, i64 3, !dbg !52
  store i64* %18, i64** %10, align 8, !dbg !52, !tbaa !8
  ret i64 20
}

; Function Attrs: nounwind sspreq uwtable
define i64 @func_Main.test(i32 %argc, i64* nocapture readnone %argArray, i64 %selfRaw) #4 !dbg !53 {
functionEntryInitializers:
  %callArgs = alloca [1 x i64], align 8
  %stackFrame_func_Main.test = load i8*, i8** @stackFramePrecomputed_func_Main.test, align 8
  %0 = bitcast i8* %stackFrame_func_Main.test to %struct.rb_iseq_struct*
  %1 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !8
  %2 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %1, i64 0, i32 2
  %3 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %2, align 8, !tbaa !10
  %4 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %3, i64 0, i32 2
  %5 = bitcast %struct.rb_iseq_struct** %4 to i8**
  store i8* %stackFrame_func_Main.test, i8** %5, align 8, !tbaa !14
  %6 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %3, i64 0, i32 4
  %7 = load i64*, i64** %6, align 8, !tbaa !16
  %8 = load i64, i64* %7, align 8, !tbaa !4
  %9 = and i64 %8, -129
  store i64 %9, i64* %7, align 8, !tbaa !4
  tail call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %1, %struct.rb_control_frame_struct* nonnull %3, %struct.rb_iseq_struct* %0) #6
  %10 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %3, i64 0, i32 0
  %11 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %4, align 8, !tbaa !14
  %12 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %11, i64 0, i32 2
  %13 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %12, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %13, i64 0, i32 2
  %15 = load i64*, i64** %14, align 8, !tbaa !19
  %16 = getelementptr inbounds i64, i64* %15, i64 1
  store i64* %16, i64** %10, align 8, !tbaa !8
  %tooManyArgs = icmp eq i32 %argc, 0, !dbg !54
  br i1 %tooManyArgs, label %fillRequiredArgs, label %argCountFailBlock, !dbg !54, !prof !49

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call void @sorbet_raiseArity(i32 %argc, i32 0, i32 0) #6, !dbg !54
  unreachable, !dbg !54

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %17 = getelementptr inbounds i64, i64* %15, i64 2, !dbg !55
  store i64* %17, i64** %10, align 8, !dbg !55, !tbaa !8
  %callArgs0Addr = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs, i64 0, i64 0, !dbg !56
  store i64 0, i64* %callArgs0Addr, align 8, !dbg !56
  %rubyId_puts = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !56
  %callFunc_puts = call i64 @sorbet_callFuncWithCache(i64 %selfRaw, i64 %rubyId_puts, i32 1, i64* nonnull %callArgs0Addr, i32 0, %struct.FunctionInlineCache* nonnull @ic_callFunc_puts.2) #6, !dbg !56
  %18 = getelementptr inbounds i64, i64* %15, i64 3, !dbg !56
  store i64* %18, i64** %10, align 8, !dbg !56, !tbaa !8
  store i64 20, i64* %callArgs0Addr, align 8, !dbg !57
  %rubyId_puts46 = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !57
  %callFunc_puts47 = call i64 @sorbet_callFuncWithCache(i64 %selfRaw, i64 %rubyId_puts46, i32 1, i64* nonnull %callArgs0Addr, i32 0, %struct.FunctionInlineCache* nonnull @ic_callFunc_puts.3) #6, !dbg !57
  %19 = getelementptr inbounds i64, i64* %15, i64 4, !dbg !57
  store i64* %19, i64** %10, align 8, !dbg !57, !tbaa !8
  store i64 20, i64* %callArgs0Addr, align 8, !dbg !58
  %rubyId_puts59 = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !58
  %callFunc_puts60 = call i64 @sorbet_callFuncWithCache(i64 %selfRaw, i64 %rubyId_puts59, i32 1, i64* nonnull %callArgs0Addr, i32 0, %struct.FunctionInlineCache* nonnull @ic_callFunc_puts.4) #6, !dbg !58
  %20 = getelementptr inbounds i64, i64* %15, i64 5, !dbg !58
  store i64* %20, i64** %10, align 8, !dbg !58, !tbaa !8
  %rubyStr_hello = load i64, i64* @rubyStrFrozen_hello, align 8, !dbg !59
  %21 = and i64 %rubyStr_hello, -9, !dbg !60
  %22 = icmp eq i64 %21, 0, !dbg !60
  br i1 %22, label %sorbet_bang.exit103, label %23, !dbg !60

23:                                               ; preds = %fillRequiredArgs
  %24 = icmp eq i64 %rubyStr_hello, 20, !dbg !60
  br i1 %24, label %sorbet_bang.exit103, label %25, !dbg !60

25:                                               ; preds = %23
  %26 = load i64, i64* @sorbet_bang.rb_intern_id_cache, align 8, !dbg !60, !tbaa !4, !noalias !61
  %27 = icmp eq i64 %26, 0, !dbg !60
  br i1 %27, label %28, label %30, !dbg !60

28:                                               ; preds = %25
  %29 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_!", i64 0, i64 0), i64 1) #6, !dbg !60
  store i64 %29, i64* @sorbet_bang.rb_intern_id_cache, align 8, !dbg !60, !tbaa !4
  br label %30, !dbg !60

30:                                               ; preds = %28, %25
  %31 = load i64, i64* @sorbet_bang.rb_intern_id_cache, align 8, !dbg !60, !tbaa !4, !noalias !61
  %32 = tail call i64 @rb_funcallv_with_cc(%struct.rb_call_data* nonnull @sorbet_bang.rb_funcallv_data, i64 %rubyStr_hello, i64 %31, i32 0, i64* null) #6, !dbg !60
  br label %sorbet_bang.exit103, !dbg !60

sorbet_bang.exit103:                              ; preds = %fillRequiredArgs, %23, %30
  %33 = phi i64 [ %32, %30 ], [ 0, %23 ], [ 20, %fillRequiredArgs ], !dbg !60
  store i64 %33, i64* %callArgs0Addr, align 8, !dbg !64
  %rubyId_puts71 = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !64
  %callFunc_puts72 = call i64 @sorbet_callFuncWithCache(i64 %selfRaw, i64 %rubyId_puts71, i32 1, i64* nonnull %callArgs0Addr, i32 0, %struct.FunctionInlineCache* nonnull @ic_callFunc_puts.5) #6, !dbg !64
  %34 = getelementptr inbounds i64, i64* %15, i64 6, !dbg !64
  store i64* %34, i64** %10, align 8, !dbg !64, !tbaa !8
  %35 = load i64, i64* @guard_epoch_Bad, align 8, !dbg !65
  %36 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !65, !tbaa !38
  %needTakeSlowPath = icmp eq i64 %35, %36, !dbg !65
  br i1 %needTakeSlowPath, label %38, label %37, !dbg !65, !prof !40

37:                                               ; preds = %sorbet_bang.exit103
  tail call void @const_recompute_Bad() #6, !dbg !65
  br label %38, !dbg !65

38:                                               ; preds = %sorbet_bang.exit103, %37
  %39 = load i64, i64* @guarded_const_Bad, align 8, !dbg !65
  %40 = load i64, i64* @guard_epoch_Bad, align 8, !dbg !65
  %41 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !65, !tbaa !38
  %guardUpdated = icmp eq i64 %40, %41, !dbg !65
  tail call void @llvm.assume(i1 %guardUpdated), !dbg !65
  %rubyId_new = load i64, i64* @rubyIdPrecomputed_new, align 8, !dbg !65
  %callFunc_new = tail call i64 @sorbet_callFuncWithCache(i64 %39, i64 %rubyId_new, i32 0, i64* null, i32 0, %struct.FunctionInlineCache* nonnull @ic_callFunc_new) #6, !dbg !65
  %42 = and i64 %callFunc_new, -9, !dbg !66
  %43 = icmp eq i64 %42, 0, !dbg !66
  br i1 %43, label %sorbet_bang.exit, label %44, !dbg !66

44:                                               ; preds = %38
  %45 = icmp eq i64 %callFunc_new, 20, !dbg !66
  br i1 %45, label %sorbet_bang.exit, label %46, !dbg !66

46:                                               ; preds = %44
  %47 = load i64, i64* @sorbet_bang.rb_intern_id_cache, align 8, !dbg !66, !tbaa !4, !noalias !67
  %48 = icmp eq i64 %47, 0, !dbg !66
  br i1 %48, label %49, label %51, !dbg !66

49:                                               ; preds = %46
  %50 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_!", i64 0, i64 0), i64 1) #6, !dbg !66
  store i64 %50, i64* @sorbet_bang.rb_intern_id_cache, align 8, !dbg !66, !tbaa !4
  br label %51, !dbg !66

51:                                               ; preds = %49, %46
  %52 = load i64, i64* @sorbet_bang.rb_intern_id_cache, align 8, !dbg !66, !tbaa !4, !noalias !67
  %53 = tail call i64 @rb_funcallv_with_cc(%struct.rb_call_data* nonnull @sorbet_bang.rb_funcallv_data, i64 %callFunc_new, i64 %52, i32 0, i64* null) #6, !dbg !66
  br label %sorbet_bang.exit, !dbg !66

sorbet_bang.exit:                                 ; preds = %38, %44, %51
  %54 = phi i64 [ %53, %51 ], [ 0, %44 ], [ 20, %38 ], !dbg !66
  store i64 %54, i64* %callArgs0Addr, align 8, !dbg !70
  %rubyId_puts84 = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !70
  %callFunc_puts85 = call i64 @sorbet_callFuncWithCache(i64 %selfRaw, i64 %rubyId_puts84, i32 1, i64* nonnull %callArgs0Addr, i32 0, %struct.FunctionInlineCache* nonnull @ic_callFunc_puts.6) #6, !dbg !70
  ret i64 %callFunc_puts85
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind
declare void @llvm.assume(i1) #6

; Function Attrs: ssp
define linkonce void @const_recompute_Bad() local_unnamed_addr #7 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Bad, i64 0, i64 0), i64 3)
  store i64 %1, i64* @guarded_const_Bad, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !38
  store i64 %2, i64* @guard_epoch_Bad, align 8
  ret void
}

; Function Attrs: ssp
define linkonce void @const_recompute_Main() local_unnamed_addr #7 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_Main, i64 0, i64 0), i64 4)
  store i64 %1, i64* @guarded_const_Main, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !38
  store i64 %2, i64* @guard_epoch_Main, align 8
  ret void
}

attributes #0 = { noreturn }
attributes #1 = { "addedToSilenceEmptyAttrsError" }
attributes #2 = { nounwind ssp uwtable }
attributes #3 = { sspreq }
attributes #4 = { nounwind sspreq uwtable }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }
attributes #7 = { ssp }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "Sorbet LLVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "test/testdata/compiler/intrinsics/bang.rb", directory: ".")
!3 = !{}
!4 = !{!5, !5, i64 0}
!5 = !{!"long", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"any pointer", !6, i64 0}
!10 = !{!11, !9, i64 16}
!11 = !{!"rb_execution_context_struct", !9, i64 0, !5, i64 8, !9, i64 16, !9, i64 24, !9, i64 32, !12, i64 40, !12, i64 44, !9, i64 48, !9, i64 56, !9, i64 64, !5, i64 72, !5, i64 80, !9, i64 88, !5, i64 96, !9, i64 104, !9, i64 112, !5, i64 120, !5, i64 128, !6, i64 136, !6, i64 137, !5, i64 144, !13, i64 152}
!12 = !{!"int", !6, i64 0}
!13 = !{!"", !9, i64 0, !9, i64 8, !5, i64 16, !6, i64 24}
!14 = !{!15, !9, i64 16}
!15 = !{!"rb_control_frame_struct", !9, i64 0, !9, i64 8, !9, i64 16, !5, i64 24, !9, i64 32, !9, i64 40, !9, i64 48}
!16 = !{!15, !9, i64 32}
!17 = !{!18, !9, i64 16}
!18 = !{!"rb_iseq_struct", !5, i64 0, !5, i64 8, !9, i64 16, !6, i64 24}
!19 = !{!20, !9, i64 8}
!20 = !{!"rb_iseq_constant_body", !6, i64 0, !12, i64 4, !9, i64 8, !21, i64 16, !23, i64 64, !26, i64 120, !9, i64 152, !9, i64 160, !9, i64 168, !9, i64 176, !9, i64 184, !9, i64 192, !27, i64 200, !12, i64 232, !12, i64 236, !12, i64 240, !12, i64 244, !12, i64 248, !6, i64 252, !9, i64 256, !5, i64 264, !9, i64 272, !5, i64 280}
!21 = !{!"", !22, i64 0, !12, i64 4, !12, i64 8, !12, i64 12, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28, !9, i64 32, !9, i64 40}
!22 = !{!"", !12, i64 0, !12, i64 0, !12, i64 0, !12, i64 0, !12, i64 0, !12, i64 0, !12, i64 0, !12, i64 0, !12, i64 1, !12, i64 1}
!23 = !{!"rb_iseq_location_struct", !5, i64 0, !5, i64 8, !5, i64 16, !5, i64 24, !12, i64 32, !24, i64 36}
!24 = !{!"rb_code_location_struct", !25, i64 0, !25, i64 8}
!25 = !{!"rb_code_position_struct", !12, i64 0, !12, i64 4}
!26 = !{!"iseq_insn_info", !9, i64 0, !9, i64 8, !12, i64 16, !9, i64 24}
!27 = !{!"", !5, i64 0, !5, i64 8, !5, i64 16, !9, i64 24}
!28 = !DILocation(line: 0, scope: !29)
!29 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.<static-init>$152", scope: null, file: !2, line: 5, type: !30, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!30 = !DISubroutineType(types: !31)
!31 = !{!32}
!32 = !DIBasicType(name: "VALUE", size: 64, encoding: DW_ATE_signed)
!33 = !DILocation(line: 5, column: 1, scope: !29)
!34 = !DILocation(line: 0, scope: !35, inlinedAt: !36)
!35 = distinct !DISubprogram(name: "Bad.<static-init>", linkageName: "func_Bad.<static-init>L62", scope: null, file: !2, line: 5, type: !30, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!36 = distinct !DILocation(line: 5, column: 1, scope: !29)
!37 = !DILocation(line: 6, column: 3, scope: !35, inlinedAt: !36)
!38 = !{!39, !39, i64 0}
!39 = !{!"long long", !6, i64 0}
!40 = !{!"branch_weights", i32 10000, i32 1}
!41 = !DILocation(line: 12, column: 1, scope: !29)
!42 = !DILocation(line: 0, scope: !43, inlinedAt: !44)
!43 = distinct !DISubprogram(name: "Main.<static-init>", linkageName: "func_Main.<static-init>L129", scope: null, file: !2, line: 12, type: !30, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!44 = distinct !DILocation(line: 12, column: 1, scope: !29)
!45 = !DILocation(line: 13, column: 3, scope: !43, inlinedAt: !44)
!46 = !DILocation(line: 22, column: 1, scope: !29)
!47 = distinct !DISubprogram(name: "Bad#!", linkageName: "func_Bad#!", scope: null, file: !2, line: 6, type: !30, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!48 = !DILocation(line: 6, column: 3, scope: !47)
!49 = !{!"branch_weights", i32 2000, i32 1}
!50 = !DILocation(line: 0, scope: !47)
!51 = !DILocation(line: 7, column: 10, scope: !47)
!52 = !DILocation(line: 7, column: 5, scope: !47)
!53 = distinct !DISubprogram(name: "Main.test", linkageName: "func_Main.test", scope: null, file: !2, line: 13, type: !30, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!54 = !DILocation(line: 13, column: 3, scope: !53)
!55 = !DILocation(line: 0, scope: !53)
!56 = !DILocation(line: 14, column: 5, scope: !53)
!57 = !DILocation(line: 15, column: 5, scope: !53)
!58 = !DILocation(line: 16, column: 5, scope: !53)
!59 = !DILocation(line: 17, column: 11, scope: !53)
!60 = !DILocation(line: 17, column: 10, scope: !53)
!61 = !{!62}
!62 = distinct !{!62, !63, !"sorbet_bang: argument 0"}
!63 = distinct !{!63, !"sorbet_bang"}
!64 = !DILocation(line: 17, column: 5, scope: !53)
!65 = !DILocation(line: 18, column: 11, scope: !53)
!66 = !DILocation(line: 18, column: 10, scope: !53)
!67 = !{!68}
!68 = distinct !{!68, !69, !"sorbet_bang: argument 0"}
!69 = distinct !{!69, !"sorbet_bang"}
!70 = !DILocation(line: 18, column: 5, scope: !53)
