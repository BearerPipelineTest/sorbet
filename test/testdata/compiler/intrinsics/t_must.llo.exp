; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.5 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.14 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_data*, %struct.anon.13, i32, i32, i32, i32, i32, i8, i64 }
%struct.anon = type { %struct.anon.0, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.0 = type { i16, [2 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.iseq_insn_info_entry*, i32*, i32, %struct.succ_index_table* }
%struct.iseq_insn_info_entry = type opaque
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, i64 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.rb_scope_visi_struct }
%struct.rb_scope_visi_struct = type { i8, [3 x i8] }
%struct.rb_call_data = type { %struct.rb_call_cache, %struct.rb_call_info }
%struct.rb_call_cache = type { i64, [3 x i64], %struct.rb_callable_method_entry_struct*, i64, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_data*)*, %union.anon.12 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon.10, i64, i64 }
%union.anon.10 = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64, i32, i64*, i64 (...)*)*, i32 }
%struct.rb_calling_info = type { i64, i64, i32, i32 }
%union.anon.12 = type { i32 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.anon.13 = type { i64, i64, i64, i64* }
%union.anon.14 = type { %struct.anon.15 }
%struct.anon.15 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [5 x i8*], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_fiber_struct = type opaque
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, i64, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %union.pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.7, i32, i64, %struct.rb_fiber_struct*, [5 x i8*], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %union.pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.3, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %union.pthread_mutex_t, i64, i64, i64, i64, i64, i32, %struct.st_table*, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.rb_builtin_function*, i32, %struct.anon.4, [29 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %union.pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32 }
%union.pthread_cond_t = type { %struct.anon.2 }
%struct.anon.2 = type { i32, i32, i64, i64, i64, i8*, i32, i32 }
%struct.anon.3 = type { [65 x i64] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.rb_builtin_function = type opaque
%struct.anon.4 = type { i64, i64, i64, i64 }
%struct.native_thread_data_struct = type { %struct.list_head, %union.anon.6 }
%union.anon.6 = type { %union.pthread_cond_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.7 = type { %struct.anon.8 }
%struct.anon.8 = type { i64, i64, i32 }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (i64, i64)*, i64 (i64)* }
%struct.st_table_entry = type opaque
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (i64)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.5 = type { i64*, i64*, i64, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.SorbetLineNumberInfo = type { i32, %struct.iseq_insn_info_entry*, i64* }
%struct.FunctionInlineCache = type { %struct.rb_kwarg_call_data }
%struct.rb_kwarg_call_data = type { %struct.rb_call_cache, %struct.rb_call_info_with_kwarg }
%struct.rb_call_info_with_kwarg = type { %struct.rb_call_info, %struct.rb_call_info_kw_arg* }
%struct.rb_call_info_kw_arg = type { i32, [1 x i64] }
%struct.ExceptionClosure = type { i64 (i64**, i64, %struct.rb_control_frame_struct*)*, i64**, i64, %struct.rb_control_frame_struct*, i64* }

@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@ruby_vm_global_constant_state = external local_unnamed_addr global i64, align 8
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@.str.2 = private unnamed_addr constant [25 x i8] c"Passed `nil` into T.must\00", align 1
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@sorbet_getTRetry.retry = internal constant [25 x i8] c"T::Private::Retry::RETRY\00", align 16
@rb_eException = external local_unnamed_addr global i64, align 8
@.str.8 = private unnamed_addr constant [95 x i8] c"sorbet_getBuildSCMRevision: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@.str.9 = private unnamed_addr constant [93 x i8] c"sorbet_getIsReleaseBuild: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@"stackFramePrecomputed_func_<root>.<static-init>$152" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"rubyStrFrozen_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"rubyStrFrozen_test/testdata/compiler/intrinsics/t_must.rb" = internal unnamed_addr global i64 0, align 8
@"str_test/testdata/compiler/intrinsics/t_must.rb" = private unnamed_addr constant [44 x i8] c"test/testdata/compiler/intrinsics/t_must.rb\00", align 1
@iseqEncodedArray = internal global [28 x i64] zeroinitializer
@fileLineNumberInfo = internal global %struct.SorbetLineNumberInfo zeroinitializer
@str_Test = private unnamed_addr constant [5 x i8] c"Test\00", align 1
@ic_test_known_nil = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_test_known_nil = internal unnamed_addr global i64 0, align 8
@str_test_known_nil = private unnamed_addr constant [15 x i8] c"test_known_nil\00", align 1
@ic_test_nilable_arg = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_test_nilable_arg = internal unnamed_addr global i64 0, align 8
@str_test_nilable_arg = private unnamed_addr constant [17 x i8] c"test_nilable_arg\00", align 1
@ic_test_nilable_arg.1 = internal global %struct.FunctionInlineCache zeroinitializer
@ic_test_nilable_arg.2 = internal global %struct.FunctionInlineCache zeroinitializer
@stackFramePrecomputed_func_Test.test_known_nil = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_<exceptionValue>" = internal unnamed_addr global i64 0, align 8
@"str_<exceptionValue>" = private unnamed_addr constant [17 x i8] c"<exceptionValue>\00", align 1
@"rubyIdPrecomputed_<magic>" = internal unnamed_addr global i64 0, align 8
@"str_<magic>" = private unnamed_addr constant [8 x i8] c"<magic>\00", align 1
@"rubyIdPrecomputed_<returnMethodTemp>" = internal unnamed_addr global i64 0, align 8
@"str_<returnMethodTemp>" = private unnamed_addr constant [19 x i8] c"<returnMethodTemp>\00", align 1
@"rubyIdPrecomputed_<gotoDeadTemp>" = internal unnamed_addr global i64 0, align 8
@"str_<gotoDeadTemp>" = private unnamed_addr constant [15 x i8] c"<gotoDeadTemp>\00", align 1
@"stackFramePrecomputed_func_Test.test_known_nil$block_2" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_rescue for" = internal unnamed_addr global i64 0, align 8
@"str_rescue for" = private unnamed_addr constant [11 x i8] c"rescue for\00", align 1
@"rubyStrFrozen_rescue for" = internal unnamed_addr global i64 0, align 8
@"stackFramePrecomputed_func_Test.test_known_nil$block_3" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_ensure for" = internal unnamed_addr global i64 0, align 8
@"str_ensure for" = private unnamed_addr constant [11 x i8] c"ensure for\00", align 1
@"rubyStrFrozen_ensure for" = internal unnamed_addr global i64 0, align 8
@"<retry-singleton>" = internal unnamed_addr global i64 0
@rubyIdPrecomputed_must = internal unnamed_addr global i64 0, align 8
@str_must = private unnamed_addr constant [5 x i8] c"must\00", align 1
@ic_must = internal global %struct.FunctionInlineCache zeroinitializer
@"ic_is_a?" = internal global %struct.FunctionInlineCache zeroinitializer
@"rubyIdPrecomputed_is_a?" = internal unnamed_addr global i64 0, align 8
@"str_is_a?" = private unnamed_addr constant [6 x i8] c"is_a?\00", align 1
@ic_puts = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@stackFramePrecomputed_func_Test.test_nilable_arg = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@rubyIdPrecomputed_arg = internal unnamed_addr global i64 0, align 8
@str_arg = private unnamed_addr constant [4 x i8] c"arg\00", align 1
@"stackFramePrecomputed_func_Test.test_nilable_arg$block_2" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"stackFramePrecomputed_func_Test.test_nilable_arg$block_3" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@ic_must.3 = internal global %struct.FunctionInlineCache zeroinitializer
@"rubyStrFrozen_ wasn't nil" = internal unnamed_addr global i64 0, align 8
@"str_ wasn't nil" = private unnamed_addr constant [12 x i8] c" wasn't nil\00", align 1
@"rubyIdPrecomputed_<string-interpolate>" = internal unnamed_addr global i64 0, align 8
@"str_<string-interpolate>" = private unnamed_addr constant [21 x i8] c"<string-interpolate>\00", align 1
@ic_puts.4 = internal global %struct.FunctionInlineCache zeroinitializer
@"ic_is_a?.5" = internal global %struct.FunctionInlineCache zeroinitializer
@ic_puts.6 = internal global %struct.FunctionInlineCache zeroinitializer
@"stackFramePrecomputed_func_Test.<static-init>" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@rubyIdPrecomputed_normal = internal unnamed_addr global i64 0, align 8
@str_normal = private unnamed_addr constant [7 x i8] c"normal\00", align 1
@ic_keep_self_def = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_keep_self_def = internal unnamed_addr global i64 0, align 8
@str_keep_self_def = private unnamed_addr constant [14 x i8] c"keep_self_def\00", align 1
@ic_keep_self_def.7 = internal global %struct.FunctionInlineCache zeroinitializer
@guard_epoch_Test = linkonce local_unnamed_addr global i64 0
@guarded_const_Test = linkonce local_unnamed_addr global i64 0
@rb_eStandardError = external local_unnamed_addr constant i64

; Function Attrs: noreturn
declare void @sorbet_raiseArity(i32, i32, i32) local_unnamed_addr #0

declare %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64, i64, i64, i64, %struct.rb_iseq_struct*, i32, i32, %struct.SorbetLineNumberInfo*, i64*, i32, i32) local_unnamed_addr #1

declare void @sorbet_initLineNumberInfo(%struct.SorbetLineNumberInfo*, i64*, i32) local_unnamed_addr #1

declare i64 @sorbet_getConstant(i8*, i64) local_unnamed_addr #1

declare i64 @sorbet_readRealpath() local_unnamed_addr #1

declare %struct.rb_control_frame_struct* @sorbet_pushStaticInitFrame(i64) local_unnamed_addr #1

declare void @sorbet_popRubyStack() local_unnamed_addr #1

declare void @sorbet_vm_env_write_slowpath(i64*, i32, i64) local_unnamed_addr #1

declare void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache*, i64, i32, i32, i32, i64*) local_unnamed_addr #1

declare i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache*, i64) local_unnamed_addr #1

declare void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_iseq_struct*) local_unnamed_addr #1

declare void @sorbet_setExceptionStackFrame(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_iseq_struct*) local_unnamed_addr #1

declare i64 @sorbet_stringInterpolate(i64, i64, i32, i64*, i64 (i64, i64, i32, i64*, i64)*, i64) local_unnamed_addr #1

declare i64 @rb_define_module(i8*) local_unnamed_addr #1

declare void @rb_define_singleton_sorbet_method(i64, i8*, i64 (i32, i64*, i64, %struct.rb_control_frame_struct*)*, i8*, i8*) local_unnamed_addr #1

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #1

declare i64 @rb_id2sym(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i64 @rb_fstring_new(i8*, i64) local_unnamed_addr #1

declare void @rb_gc_register_mark_object(i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #0

; Function Attrs: alwaysinline nounwind ssp uwtable
define noalias nonnull i8* @sorbet_allocateParamInfo() local_unnamed_addr #3 {
  %1 = tail call noalias nonnull i8* @ruby_xcalloc(i64 noundef 1, i64 noundef 64) #15
  ret i8* %1
}

; Function Attrs: allocsize(0,1)
declare noalias nonnull i8* @ruby_xcalloc(i64, i64) local_unnamed_addr #4

; Function Attrs: allocsize(0,1)
declare noalias nonnull i8* @ruby_xmalloc2(i64, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare void @rb_set_errinfo(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal noundef i64 @sorbet_applyExceptionClosure(i64 %0) #5 {
  %2 = inttoptr i64 %0 to %struct.ExceptionClosure*
  %3 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %2, i64 0, i32 0
  %4 = load i64 (i64**, i64, %struct.rb_control_frame_struct*)*, i64 (i64**, i64, %struct.rb_control_frame_struct*)** %3, align 8, !tbaa !4
  %5 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %2, i64 0, i32 1
  %6 = load i64**, i64*** %5, align 8, !tbaa !10
  %7 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %2, i64 0, i32 2
  %8 = load i64, i64* %7, align 8, !tbaa !11
  %9 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %2, i64 0, i32 3
  %10 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %9, align 8, !tbaa !12
  %11 = tail call i64 %4(i64** %6, i64 %8, %struct.rb_control_frame_struct* %10) #16
  %12 = icmp eq i64 %11, 52
  br i1 %12, label %16, label %13

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %2, i64 0, i32 4
  %15 = load i64*, i64** %14, align 8, !tbaa !13
  store i64 %11, i64* %15, align 8, !tbaa !14
  br label %16

16:                                               ; preds = %13, %1
  ret i64 52
}

; Function Attrs: nofree norecurse nosync nounwind ssp uwtable willreturn writeonly
define internal noundef i64 @sorbet_rescueStoreException(i64 %0, i64 %1) #6 {
  %3 = inttoptr i64 %0 to i64*
  store i64 %1, i64* %3, align 8, !tbaa !14
  ret i64 52
}

declare i64 @rb_rescue2(i64 (i64)*, i64, i64 (i64, i64)*, i64, ...) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @rb_exc_raise(i64) local_unnamed_addr #0

; Function Attrs: nounwind ssp uwtable
define weak i32 @sorbet_getIsReleaseBuild() local_unnamed_addr #5 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !14
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* noundef getelementptr inbounds ([93 x i8], [93 x i8]* @.str.9, i64 0, i64 0)) #17
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @sorbet_getBuildSCMRevision() local_unnamed_addr #5 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !14
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* noundef getelementptr inbounds ([95 x i8], [95 x i8]* @.str.8, i64 0, i64 0)) #17
  unreachable
}

declare i64 @rb_errinfo() local_unnamed_addr #1

; Function Attrs: sspreq
define void @Init_t_must() local_unnamed_addr #7 {
entry:
  %positional_table.i.i = alloca i64, align 8, !dbg !15
  %locals.i44.i = alloca i64, i32 0, align 8
  %locals.i28.i = alloca i64, i32 5, align 8
  %locals.i23.i = alloca i64, i32 4, align 8
  %locals.i.i = alloca i64, i32 0, align 8
  %realpath = tail call i64 @sorbet_readRealpath()
  %0 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 noundef 16) #16
  store i64 %0, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %1 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @str_test_known_nil, i64 0, i64 0), i64 noundef 14) #16
  store i64 %1, i64* @rubyIdPrecomputed_test_known_nil, align 8
  %2 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @str_test_nilable_arg, i64 0, i64 0), i64 noundef 16) #16
  store i64 %2, i64* @rubyIdPrecomputed_test_nilable_arg, align 8
  %3 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<exceptionValue>", i64 0, i64 0), i64 noundef 16) #16
  store i64 %3, i64* @"rubyIdPrecomputed_<exceptionValue>", align 8
  %4 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([8 x i8], [8 x i8]* @"str_<magic>", i64 0, i64 0), i64 noundef 7) #16
  store i64 %4, i64* @"rubyIdPrecomputed_<magic>", align 8
  %5 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @"str_<returnMethodTemp>", i64 0, i64 0), i64 noundef 18) #16
  store i64 %5, i64* @"rubyIdPrecomputed_<returnMethodTemp>", align 8
  %6 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @"str_<gotoDeadTemp>", i64 0, i64 0), i64 noundef 14) #16
  store i64 %6, i64* @"rubyIdPrecomputed_<gotoDeadTemp>", align 8
  %7 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([11 x i8], [11 x i8]* @"str_rescue for", i64 0, i64 0), i64 noundef 10) #16
  store i64 %7, i64* @"rubyIdPrecomputed_rescue for", align 8
  %8 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([11 x i8], [11 x i8]* @"str_ensure for", i64 0, i64 0), i64 noundef 10) #16
  store i64 %8, i64* @"rubyIdPrecomputed_ensure for", align 8
  %9 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @str_must, i64 0, i64 0), i64 noundef 4) #16
  store i64 %9, i64* @rubyIdPrecomputed_must, align 8
  %10 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @"str_is_a?", i64 0, i64 0), i64 noundef 5) #16
  store i64 %10, i64* @"rubyIdPrecomputed_is_a?", align 8
  %11 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 noundef 4) #16
  store i64 %11, i64* @rubyIdPrecomputed_puts, align 8
  %12 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @str_arg, i64 0, i64 0), i64 noundef 3) #16
  store i64 %12, i64* @rubyIdPrecomputed_arg, align 8
  %13 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @"str_<string-interpolate>", i64 0, i64 0), i64 noundef 20) #16
  store i64 %13, i64* @"rubyIdPrecomputed_<string-interpolate>", align 8
  %14 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @str_normal, i64 0, i64 0), i64 noundef 6) #16
  store i64 %14, i64* @rubyIdPrecomputed_normal, align 8
  %15 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @str_keep_self_def, i64 0, i64 0), i64 noundef 13) #16
  store i64 %15, i64* @rubyIdPrecomputed_keep_self_def, align 8
  %16 = tail call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 noundef 16) #16
  tail call void @rb_gc_register_mark_object(i64 %16) #16
  store i64 %16, i64* @"rubyStrFrozen_<top (required)>", align 8
  %17 = tail call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([44 x i8], [44 x i8]* @"str_test/testdata/compiler/intrinsics/t_must.rb", i64 0, i64 0), i64 noundef 43) #16
  tail call void @rb_gc_register_mark_object(i64 %17) #16
  store i64 %17, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/t_must.rb", align 8
  tail call void @sorbet_initLineNumberInfo(%struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i32 0, i32 0), i32 noundef 28)
  %"rubyId_<top (required)>.i.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/t_must.rb", align 8
  %18 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i.i", i64 %"rubyId_<top (required)>.i.i", i64 %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 0, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals.i.i, i32 noundef 0, i32 noundef 2)
  store %struct.rb_iseq_struct* %18, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %rubyId_test_known_nil.i = load i64, i64* @rubyIdPrecomputed_test_known_nil, align 8, !dbg !22
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_test_known_nil, i64 %rubyId_test_known_nil.i, i32 noundef 16, i32 noundef 0, i32 noundef 0, i64* noundef null), !dbg !22
  %rubyId_test_nilable_arg.i = load i64, i64* @rubyIdPrecomputed_test_nilable_arg, align 8, !dbg !23
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_test_nilable_arg, i64 %rubyId_test_nilable_arg.i, i32 noundef 16, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !23
  %rubyId_test_nilable_arg2.i = load i64, i64* @rubyIdPrecomputed_test_nilable_arg, align 8, !dbg !24
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_test_nilable_arg.1, i64 %rubyId_test_nilable_arg2.i, i32 noundef 16, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !24
  %rubyId_test_nilable_arg4.i = load i64, i64* @rubyIdPrecomputed_test_nilable_arg, align 8, !dbg !25
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_test_nilable_arg.2, i64 %rubyId_test_nilable_arg4.i, i32 noundef 16, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !25
  %19 = call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @str_test_known_nil, i64 0, i64 0), i64 noundef 14) #16
  call void @rb_gc_register_mark_object(i64 %19) #16
  %20 = bitcast i64* %locals.i23.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20)
  %rubyId_test_known_nil.i.i = load i64, i64* @rubyIdPrecomputed_test_known_nil, align 8
  %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i22.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/t_must.rb", align 8
  %"rubyId_<exceptionValue>.i.i" = load i64, i64* @"rubyIdPrecomputed_<exceptionValue>", align 8
  store i64 %"rubyId_<exceptionValue>.i.i", i64* %locals.i23.i, align 8
  %"rubyId_<magic>.i.i" = load i64, i64* @"rubyIdPrecomputed_<magic>", align 8
  %21 = getelementptr i64, i64* %locals.i23.i, i32 1
  store i64 %"rubyId_<magic>.i.i", i64* %21, align 8
  %"rubyId_<returnMethodTemp>.i.i" = load i64, i64* @"rubyIdPrecomputed_<returnMethodTemp>", align 8
  %22 = getelementptr i64, i64* %locals.i23.i, i32 2
  store i64 %"rubyId_<returnMethodTemp>.i.i", i64* %22, align 8
  %"rubyId_<gotoDeadTemp>.i.i" = load i64, i64* @"rubyIdPrecomputed_<gotoDeadTemp>", align 8
  %23 = getelementptr i64, i64* %locals.i23.i, i32 3
  store i64 %"rubyId_<gotoDeadTemp>.i.i", i64* %23, align 8
  %24 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %19, i64 %rubyId_test_known_nil.i.i, i64 %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i22.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 1, i32 noundef 6, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull align 8 %locals.i23.i, i32 noundef 4, i32 noundef 2)
  store %struct.rb_iseq_struct* %24, %struct.rb_iseq_struct** @stackFramePrecomputed_func_Test.test_known_nil, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20)
  %25 = call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([11 x i8], [11 x i8]* @"str_rescue for", i64 0, i64 0), i64 noundef 10) #16
  call void @rb_gc_register_mark_object(i64 %25) #16
  store i64 %25, i64* @"rubyStrFrozen_rescue for", align 8
  %stackFrame.i.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @stackFramePrecomputed_func_Test.test_known_nil, align 8
  %"rubyId_rescue for.i.i" = load i64, i64* @"rubyIdPrecomputed_rescue for", align 8
  %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i24.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/t_must.rb", align 8
  %26 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %25, i64 %"rubyId_rescue for.i.i", i64 %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i24.i", i64 %realpath, %struct.rb_iseq_struct* %stackFrame.i.i, i32 noundef 4, i32 noundef 6, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef null, i32 noundef 0, i32 noundef 2)
  store %struct.rb_iseq_struct* %26, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Test.test_known_nil$block_2", align 8
  %27 = call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([11 x i8], [11 x i8]* @"str_ensure for", i64 0, i64 0), i64 noundef 10) #16
  call void @rb_gc_register_mark_object(i64 %27) #16
  store i64 %27, i64* @"rubyStrFrozen_ensure for", align 8
  %stackFrame.i25.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @stackFramePrecomputed_func_Test.test_known_nil, align 8
  %"rubyId_ensure for.i.i" = load i64, i64* @"rubyIdPrecomputed_ensure for", align 8
  %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i26.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/t_must.rb", align 8
  %28 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %27, i64 %"rubyId_ensure for.i.i", i64 %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i26.i", i64 %realpath, %struct.rb_iseq_struct* %stackFrame.i25.i, i32 noundef 5, i32 noundef 6, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef null, i32 noundef 0, i32 noundef 2)
  store %struct.rb_iseq_struct* %28, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Test.test_known_nil$block_3", align 8
  %29 = call i64 @sorbet_getConstant(i8* noundef getelementptr inbounds ([25 x i8], [25 x i8]* @sorbet_getTRetry.retry, i64 0, i64 0), i64 noundef 25) #16
  store i64 %29, i64* @"<retry-singleton>", align 8
  %rubyId_must.i = load i64, i64* @rubyIdPrecomputed_must, align 8, !dbg !26
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_must, i64 %rubyId_must.i, i32 noundef 16, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !26
  %"rubyId_is_a?.i" = load i64, i64* @"rubyIdPrecomputed_is_a?", align 8, !dbg !29
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @"ic_is_a?", i64 %"rubyId_is_a?.i", i32 noundef 16, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !29
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !31
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_puts, i64 %rubyId_puts.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !31
  %30 = call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @str_test_nilable_arg, i64 0, i64 0), i64 noundef 16) #16
  call void @rb_gc_register_mark_object(i64 %30) #16
  %31 = bitcast i64* %locals.i28.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %31)
  %rubyId_test_nilable_arg.i.i = load i64, i64* @rubyIdPrecomputed_test_nilable_arg, align 8
  %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i27.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/t_must.rb", align 8
  %"rubyId_<exceptionValue>.i29.i" = load i64, i64* @"rubyIdPrecomputed_<exceptionValue>", align 8
  store i64 %"rubyId_<exceptionValue>.i29.i", i64* %locals.i28.i, align 8
  %rubyId_arg.i.i = load i64, i64* @rubyIdPrecomputed_arg, align 8
  %32 = getelementptr i64, i64* %locals.i28.i, i32 1
  store i64 %rubyId_arg.i.i, i64* %32, align 8
  %"rubyId_<magic>.i30.i" = load i64, i64* @"rubyIdPrecomputed_<magic>", align 8
  %33 = getelementptr i64, i64* %locals.i28.i, i32 2
  store i64 %"rubyId_<magic>.i30.i", i64* %33, align 8
  %"rubyId_<returnMethodTemp>.i31.i" = load i64, i64* @"rubyIdPrecomputed_<returnMethodTemp>", align 8
  %34 = getelementptr i64, i64* %locals.i28.i, i32 3
  store i64 %"rubyId_<returnMethodTemp>.i31.i", i64* %34, align 8
  %"rubyId_<gotoDeadTemp>.i32.i" = load i64, i64* @"rubyIdPrecomputed_<gotoDeadTemp>", align 8
  %35 = getelementptr i64, i64* %locals.i28.i, i32 4
  store i64 %"rubyId_<gotoDeadTemp>.i32.i", i64* %35, align 8
  %36 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %30, i64 %rubyId_test_nilable_arg.i.i, i64 %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i27.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 1, i32 noundef 14, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull align 8 %locals.i28.i, i32 noundef 5, i32 noundef 3)
  store %struct.rb_iseq_struct* %36, %struct.rb_iseq_struct** @stackFramePrecomputed_func_Test.test_nilable_arg, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %31)
  %"rubyId_rescue for.i34.i" = load i64, i64* @"rubyIdPrecomputed_rescue for", align 8
  %"rubyStr_rescue for.i35.i" = load i64, i64* @"rubyStrFrozen_rescue for", align 8
  %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i36.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/t_must.rb", align 8
  %37 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_rescue for.i35.i", i64 %"rubyId_rescue for.i34.i", i64 %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i36.i", i64 %realpath, %struct.rb_iseq_struct* %36, i32 noundef 4, i32 noundef 14, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef null, i32 noundef 0, i32 noundef 3)
  store %struct.rb_iseq_struct* %37, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Test.test_nilable_arg$block_2", align 8
  %stackFrame.i37.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @stackFramePrecomputed_func_Test.test_nilable_arg, align 8
  %"rubyId_ensure for.i38.i" = load i64, i64* @"rubyIdPrecomputed_ensure for", align 8
  %"rubyStr_ensure for.i39.i" = load i64, i64* @"rubyStrFrozen_ensure for", align 8
  %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i40.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/t_must.rb", align 8
  %38 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_ensure for.i39.i", i64 %"rubyId_ensure for.i38.i", i64 %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i40.i", i64 %realpath, %struct.rb_iseq_struct* %stackFrame.i37.i, i32 noundef 5, i32 noundef 14, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef null, i32 noundef 0, i32 noundef 3)
  store %struct.rb_iseq_struct* %38, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Test.test_nilable_arg$block_3", align 8
  %rubyId_must9.i = load i64, i64* @rubyIdPrecomputed_must, align 8, !dbg !32
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_must.3, i64 %rubyId_must9.i, i32 noundef 16, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !32
  %39 = call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @"str_ wasn't nil", i64 0, i64 0), i64 noundef 11) #16
  call void @rb_gc_register_mark_object(i64 %39) #16
  store i64 %39, i64* @"rubyStrFrozen_ wasn't nil", align 8
  %rubyId_puts11.i = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !35
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_puts.4, i64 %rubyId_puts11.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !35
  %"rubyId_is_a?14.i" = load i64, i64* @"rubyIdPrecomputed_is_a?", align 8, !dbg !36
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @"ic_is_a?.5", i64 %"rubyId_is_a?14.i", i32 noundef 16, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !36
  %rubyId_puts16.i = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !38
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_puts.6, i64 %rubyId_puts16.i, i32 noundef 20, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !38
  %"rubyId_<top (required)>.i41.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i42.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i43.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/t_must.rb", align 8
  %40 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i42.i", i64 %"rubyId_<top (required)>.i41.i", i64 %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i43.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 3, i32 noundef 5, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals.i44.i, i32 noundef 0, i32 noundef 4)
  store %struct.rb_iseq_struct* %40, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Test.<static-init>", align 8
  %rubyId_keep_self_def.i = load i64, i64* @rubyIdPrecomputed_keep_self_def, align 8, !dbg !39
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_keep_self_def, i64 %rubyId_keep_self_def.i, i32 noundef 16, i32 noundef 3, i32 noundef 0, i64* noundef null), !dbg !39
  %rubyId_keep_self_def20.i = load i64, i64* @rubyIdPrecomputed_keep_self_def, align 8, !dbg !40
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @ic_keep_self_def.7, i64 %rubyId_keep_self_def20.i, i32 noundef 16, i32 noundef 3, i32 noundef 0, i64* noundef null), !dbg !40
  %41 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !41
  %42 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %41, i64 0, i32 2
  %43 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %42, align 8, !tbaa !42
  %stackFrame.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %44 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %43, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i, %struct.rb_iseq_struct** %44, align 8, !tbaa !46
  %45 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %43, i64 0, i32 4
  %46 = load i64*, i64** %45, align 8, !tbaa !48
  %47 = load i64, i64* %46, align 8, !tbaa !14
  %48 = and i64 %47, -33
  store i64 %48, i64* %46, align 8, !tbaa !14
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %41, %struct.rb_control_frame_struct* %43, %struct.rb_iseq_struct* %stackFrame.i) #16
  %49 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %43, i64 0, i32 0
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %49, align 8, !dbg !49, !tbaa !41
  %50 = call i64 @rb_define_module(i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @str_Test, i64 0, i64 0)) #16, !dbg !50
  %51 = call %struct.rb_control_frame_struct* @sorbet_pushStaticInitFrame(i64 %50) #16, !dbg !50
  %52 = bitcast i64* %positional_table.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #16
  %stackFrame.i.i1 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Test.<static-init>", align 8
  %53 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !41
  %54 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %53, i64 0, i32 2
  %55 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %54, align 8, !tbaa !42
  %56 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %55, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i.i1, %struct.rb_iseq_struct** %56, align 8, !tbaa !46
  %57 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %55, i64 0, i32 4
  %58 = load i64*, i64** %57, align 8, !tbaa !48
  %59 = load i64, i64* %58, align 8, !tbaa !14
  %60 = and i64 %59, -33
  store i64 %60, i64* %58, align 8, !tbaa !14
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %53, %struct.rb_control_frame_struct* %55, %struct.rb_iseq_struct* %stackFrame.i.i1) #16
  %61 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %51, i64 0, i32 0
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 6), i64** %61, align 8, !dbg !51, !tbaa !41
  %rubyId_test_known_nil.i.i2 = load i64, i64* @rubyIdPrecomputed_test_known_nil, align 8, !dbg !52
  %rawSym.i.i = call i64 @rb_id2sym(i64 %rubyId_test_known_nil.i.i2) #16, !dbg !52
  %rubyId_normal.i.i = load i64, i64* @rubyIdPrecomputed_normal, align 8, !dbg !52
  %rawSym17.i.i = call i64 @rb_id2sym(i64 %rubyId_normal.i.i) #16, !dbg !52
  %62 = load i64, i64* @guard_epoch_Test, align 8, !dbg !52
  %63 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !52, !tbaa !53
  %needTakeSlowPath = icmp ne i64 %62, %63, !dbg !52
  br i1 %needTakeSlowPath, label %64, label %65, !dbg !52, !prof !55

64:                                               ; preds = %entry
  call void @const_recompute_Test(), !dbg !52
  br label %65, !dbg !52

65:                                               ; preds = %entry, %64
  %66 = load i64, i64* @guarded_const_Test, align 8, !dbg !52
  %67 = load i64, i64* @guard_epoch_Test, align 8, !dbg !52
  %68 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !52, !tbaa !53
  %guardUpdated = icmp eq i64 %67, %68, !dbg !52
  call void @llvm.assume(i1 %guardUpdated), !dbg !52
  %stackFrame18.i.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @stackFramePrecomputed_func_Test.test_known_nil, align 8, !dbg !52
  %69 = call noalias nonnull i8* @ruby_xcalloc(i64 noundef 1, i64 noundef 64) #15, !dbg !52
  %70 = bitcast i8* %69 to i16*, !dbg !52
  %71 = load i16, i16* %70, align 8, !dbg !52
  %72 = and i16 %71, -384, !dbg !52
  store i16 %72, i16* %70, align 8, !dbg !52
  %73 = getelementptr inbounds i8, i8* %69, i64 4, !dbg !52
  %74 = bitcast %struct.rb_iseq_struct* %stackFrame18.i.i to i8*, !dbg !52
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %73, i8 0, i64 28, i1 false) #16, !dbg !52
  call void @rb_define_singleton_sorbet_method(i64 %66, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @str_test_known_nil, i64 0, i64 0), i64 (i32, i64*, i64, %struct.rb_control_frame_struct*)* noundef @func_Test.test_known_nil, i8* nonnull %69, i8* %74) #16, !dbg !52
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 14), i64** %61, align 8, !dbg !52, !tbaa !41
  %rubyId_test_nilable_arg.i.i3 = load i64, i64* @rubyIdPrecomputed_test_nilable_arg, align 8, !dbg !15
  %rawSym23.i.i = call i64 @rb_id2sym(i64 %rubyId_test_nilable_arg.i.i3) #16, !dbg !15
  %rubyId_normal24.i.i = load i64, i64* @rubyIdPrecomputed_normal, align 8, !dbg !15
  %rawSym25.i.i = call i64 @rb_id2sym(i64 %rubyId_normal24.i.i) #16, !dbg !15
  %stackFrame30.i.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @stackFramePrecomputed_func_Test.test_nilable_arg, align 8, !dbg !15
  %75 = call noalias nonnull i8* @ruby_xcalloc(i64 noundef 1, i64 noundef 64) #15, !dbg !15
  %76 = bitcast i8* %75 to i16*, !dbg !15
  %77 = load i16, i16* %76, align 8, !dbg !15
  %78 = and i16 %77, -384, !dbg !15
  %79 = or i16 %78, 1, !dbg !15
  store i16 %79, i16* %76, align 8, !dbg !15
  %80 = getelementptr inbounds i8, i8* %75, i64 8, !dbg !15
  %81 = bitcast i8* %80 to i32*, !dbg !15
  store i32 1, i32* %81, align 8, !dbg !15, !tbaa !56
  %82 = getelementptr inbounds i8, i8* %75, i64 12, !dbg !15
  %83 = getelementptr inbounds i8, i8* %75, i64 4, !dbg !15
  %84 = bitcast i8* %83 to i32*, !dbg !15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %82, i8 0, i64 20, i1 false) #16, !dbg !15
  store i32 1, i32* %84, align 4, !dbg !15, !tbaa !59
  %rubyId_arg.i.i4 = load i64, i64* @rubyIdPrecomputed_arg, align 8, !dbg !15
  store i64 %rubyId_arg.i.i4, i64* %positional_table.i.i, align 8, !dbg !15
  %85 = call noalias nonnull i8* @ruby_xmalloc2(i64 noundef 1, i64 noundef 8) #15, !dbg !15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture nonnull writeonly align 1 %85, i8* nocapture noundef nonnull readonly align 8 dereferenceable(8) %52, i64 noundef 8, i1 noundef false) #16, !dbg !15
  %86 = getelementptr inbounds i8, i8* %75, i64 32, !dbg !15
  %87 = bitcast i8* %86 to i8**, !dbg !15
  store i8* %85, i8** %87, align 8, !dbg !15, !tbaa !60
  %88 = bitcast %struct.rb_iseq_struct* %stackFrame30.i.i to i8*, !dbg !15
  call void @rb_define_singleton_sorbet_method(i64 %66, i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @str_test_nilable_arg, i64 0, i64 0), i64 (i32, i64*, i64, %struct.rb_control_frame_struct*)* noundef @func_Test.test_nilable_arg, i8* nonnull %75, i8* %88) #16, !dbg !15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #16
  call void @sorbet_popRubyStack() #16, !dbg !50
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 24), i64** %49, align 8, !dbg !50, !tbaa !41
  %89 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %43, i64 0, i32 1, !dbg !22
  %90 = load i64*, i64** %89, align 8, !dbg !22, !tbaa !61
  %91 = getelementptr inbounds i64, i64* %90, i64 1, !dbg !22
  store i64* %91, i64** %89, align 8, !dbg !22, !tbaa !61
  store i64 %66, i64* %90, align 8, !dbg !22, !tbaa !14
  %send.i = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_test_known_nil, i64 0) #16, !dbg !22
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 25), i64** %49, align 8, !dbg !22, !tbaa !41
  %92 = load i64*, i64** %89, align 8, !dbg !23, !tbaa !61
  %93 = getelementptr inbounds i64, i64* %92, i64 1, !dbg !23
  store i64 %66, i64* %92, align 8, !dbg !23, !tbaa !14
  %94 = getelementptr inbounds i64, i64* %93, i64 1, !dbg !23
  store i64* %94, i64** %89, align 8, !dbg !23, !tbaa !61
  store i64 21, i64* %93, align 8, !dbg !23, !tbaa !14
  %send34.i = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_test_nilable_arg, i64 0) #16, !dbg !23
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 26), i64** %49, align 8, !dbg !23, !tbaa !41
  %95 = load i64*, i64** %89, align 8, !dbg !24, !tbaa !61
  %96 = getelementptr inbounds i64, i64* %95, i64 1, !dbg !24
  store i64 %66, i64* %95, align 8, !dbg !24, !tbaa !14
  %97 = getelementptr inbounds i64, i64* %96, i64 1, !dbg !24
  store i64* %97, i64** %89, align 8, !dbg !24, !tbaa !61
  store i64 0, i64* %96, align 8, !dbg !24, !tbaa !14
  %send39.i = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_test_nilable_arg.1, i64 0) #16, !dbg !24
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 27), i64** %49, align 8, !dbg !24, !tbaa !41
  %98 = load i64*, i64** %89, align 8, !dbg !25, !tbaa !61
  %99 = getelementptr inbounds i64, i64* %98, i64 1, !dbg !25
  store i64 %66, i64* %98, align 8, !dbg !25, !tbaa !14
  %100 = getelementptr inbounds i64, i64* %99, i64 1, !dbg !25
  store i64* %100, i64** %89, align 8, !dbg !25, !tbaa !61
  store i64 8, i64* %99, align 8, !dbg !25, !tbaa !14
  %send45.i = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_test_nilable_arg.2, i64 0) #16, !dbg !25
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @func_Test.test_known_nil(i32 %argc, i64* nocapture nofree readnone %argArray, i64 %selfRaw, %struct.rb_control_frame_struct* nonnull align 8 dereferenceable(8) %cfp) #8 !dbg !28 {
functionEntryInitializers:
  %0 = alloca i64, align 8
  %1 = alloca %struct.ExceptionClosure, align 8
  %2 = alloca i64, align 8
  %3 = alloca %struct.ExceptionClosure, align 8
  %4 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 0
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 6), i64** %4, align 8, !tbaa !41
  %exceptionValue = alloca i64, align 8, !dbg !62
  %tooManyArgs = icmp ugt i32 %argc, 0, !dbg !63
  br i1 %tooManyArgs, label %argCountFailBlock, label %fillRequiredArgs, !dbg !63, !prof !64

postProcess:                                      ; preds = %exception-ensure, %sorbet_raiseIfNotNil.exit, %exception-body-return
  %"<returnValue>.sroa.0.0" = phi i64 [ %.lcssa28, %exception-body-return ], [ %112, %sorbet_raiseIfNotNil.exit ], [ %.lcssa31, %exception-ensure ], !dbg !65
  ret i64 %"<returnValue>.sroa.0.0"

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call void @sorbet_raiseArity(i32 %argc, i32 noundef 0, i32 noundef 0) #0, !dbg !63
  unreachable, !dbg !63

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 8), i64** %4, align 8, !dbg !65, !tbaa !41
  %previousException = tail call i64 @rb_errinfo(), !dbg !62
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 4
  %6 = bitcast i64* %2 to i8*
  %7 = bitcast %struct.ExceptionClosure* %3 to i8*
  %8 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 0
  %9 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 1
  %10 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 2
  %11 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 3
  %12 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 4
  %13 = icmp eq i64 %previousException, 8
  %14 = ptrtoint %struct.ExceptionClosure* %3 to i64
  %15 = ptrtoint i64* %exceptionValue to i64
  %16 = bitcast i64* %0 to i8*
  %17 = bitcast %struct.ExceptionClosure* %1 to i8*
  %18 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 0
  %19 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 1
  %20 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 2
  %21 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 3
  %22 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 4
  %23 = ptrtoint %struct.ExceptionClosure* %1 to i64
  br i1 %13, label %exception-entry.us, label %exception-entry, !dbg !62

exception-entry.us:                               ; preds = %fillRequiredArgs, %sorbet_try.exit26.us
  %24 = load i64*, i64** %5, align 8, !dbg !62, !tbaa !48
  %25 = load i64, i64* %24, align 8, !dbg !62, !tbaa !14
  %26 = and i64 %25, 8, !dbg !62
  %27 = icmp eq i64 %26, 0, !dbg !62
  br i1 %27, label %29, label %28, !dbg !62, !prof !66

28:                                               ; preds = %exception-entry.us
  call void @sorbet_vm_env_write_slowpath(i64* nonnull align 8 dereferenceable(8) %24, i32 noundef -3, i64 noundef 8) #16, !dbg !62
  br label %sorbet_writeLocal.exit.us, !dbg !62

29:                                               ; preds = %exception-entry.us
  %30 = getelementptr inbounds i64, i64* %24, i64 -3, !dbg !62
  store i64 8, i64* %30, align 8, !dbg !62, !tbaa !14
  br label %sorbet_writeLocal.exit.us, !dbg !62

sorbet_writeLocal.exit.us:                        ; preds = %29, %28
  call void @llvm.lifetime.start.p0i8(i64 noundef 8, i8* noundef nonnull align 8 %6) #16, !dbg !62
  store i64 52, i64* %2, align 8, !dbg !62, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 noundef 40, i8* noundef nonnull align 8 %7) #16, !dbg !62
  store i64 (i64**, i64, %struct.rb_control_frame_struct*)* @"func_Test.test_known_nil$block_1", i64 (i64**, i64, %struct.rb_control_frame_struct*)** %8, align 8, !dbg !62, !tbaa !4
  store i64** %4, i64*** %9, align 8, !dbg !62, !tbaa !10
  store i64 0, i64* %10, align 8, !dbg !62, !tbaa !11
  store %struct.rb_control_frame_struct* %cfp, %struct.rb_control_frame_struct** %11, align 8, !dbg !62, !tbaa !12
  store i64* %2, i64** %12, align 8, !dbg !62, !tbaa !13
  store i64 8, i64* %exceptionValue, align 8, !dbg !62, !tbaa !14
  %31 = load i64, i64* @rb_eException, align 8, !dbg !62, !tbaa !14
  %32 = call i64 (i64 (i64)*, i64, i64 (i64, i64)*, i64, ...) @rb_rescue2(i64 (i64)* noundef nonnull @sorbet_applyExceptionClosure, i64 noundef %14, i64 (i64, i64)* noundef nonnull @sorbet_rescueStoreException, i64 %15, i64 %31, i32 0) #16, !dbg !62
  %33 = load i64, i64* %2, align 8, !dbg !62
  call void @llvm.lifetime.end.p0i8(i64 noundef 40, i8* noundef nonnull %7) #16, !dbg !62
  call void @llvm.lifetime.end.p0i8(i64 noundef 8, i8* noundef nonnull %6) #16, !dbg !62
  %isReturnValue.us = icmp ne i64 %33, 52, !dbg !62
  br i1 %isReturnValue.us, label %exception-body-return, label %exception-body-continue.us, !dbg !62

exception-body-continue.us:                       ; preds = %sorbet_writeLocal.exit.us
  %34 = load i64, i64* %exceptionValue, align 8, !dbg !62
  %35 = load i64*, i64** %5, align 8, !dbg !62, !tbaa !48
  %36 = load i64, i64* %35, align 8, !dbg !62, !tbaa !14
  %37 = and i64 %36, 8, !dbg !62
  %38 = icmp eq i64 %37, 0, !dbg !62
  br i1 %38, label %40, label %39, !dbg !62, !prof !66

39:                                               ; preds = %exception-body-continue.us
  call void @sorbet_vm_env_write_slowpath(i64* nonnull align 8 dereferenceable(8) %35, i32 noundef -3, i64 %34) #16, !dbg !62
  br label %sorbet_writeLocal.exit22.us, !dbg !62

40:                                               ; preds = %exception-body-continue.us
  %41 = getelementptr inbounds i64, i64* %35, i64 -3, !dbg !62
  store i64 %34, i64* %41, align 8, !dbg !62, !tbaa !14
  br label %sorbet_writeLocal.exit22.us, !dbg !62

sorbet_writeLocal.exit22.us:                      ; preds = %40, %39
  %42 = icmp ne i64 %34, 8, !dbg !62
  %handler.us = select i1 %42, i64 (i64**, i64, %struct.rb_control_frame_struct*)* @"func_Test.test_known_nil$block_2", i64 (i64**, i64, %struct.rb_control_frame_struct*)* @"func_Test.test_known_nil$block_4", !dbg !62
  call void @llvm.lifetime.start.p0i8(i64 noundef 8, i8* noundef nonnull align 8 %16) #16, !dbg !62
  store i64 52, i64* %0, align 8, !dbg !62, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 noundef 40, i8* noundef nonnull align 8 %17) #16, !dbg !62
  store i64 (i64**, i64, %struct.rb_control_frame_struct*)* %handler.us, i64 (i64**, i64, %struct.rb_control_frame_struct*)** %18, align 8, !dbg !62, !tbaa !4
  store i64** %4, i64*** %19, align 8, !dbg !62, !tbaa !10
  store i64 0, i64* %20, align 8, !dbg !62, !tbaa !11
  store %struct.rb_control_frame_struct* %cfp, %struct.rb_control_frame_struct** %21, align 8, !dbg !62, !tbaa !12
  store i64* %0, i64** %22, align 8, !dbg !62, !tbaa !13
  store i64 8, i64* %exceptionValue, align 8, !dbg !62, !tbaa !14
  %43 = icmp eq i64 %34, 8, !dbg !62
  br i1 %43, label %sorbet_try.exit26.us, label %44, !dbg !62

44:                                               ; preds = %sorbet_writeLocal.exit22.us
  call void @rb_set_errinfo(i64 %34) #16, !dbg !62
  br label %sorbet_try.exit26.us, !dbg !62

sorbet_try.exit26.us:                             ; preds = %44, %sorbet_writeLocal.exit22.us
  %45 = load i64, i64* @rb_eException, align 8, !dbg !62, !tbaa !14
  %46 = call i64 (i64 (i64)*, i64, i64 (i64, i64)*, i64, ...) @rb_rescue2(i64 (i64)* noundef nonnull @sorbet_applyExceptionClosure, i64 noundef %23, i64 (i64, i64)* noundef nonnull @sorbet_rescueStoreException, i64 %15, i64 %45, i32 0) #16, !dbg !62
  %47 = load i64, i64* %0, align 8, !dbg !62
  call void @llvm.lifetime.end.p0i8(i64 noundef 40, i8* noundef nonnull %17) #16, !dbg !62
  call void @llvm.lifetime.end.p0i8(i64 noundef 8, i8* noundef nonnull %16) #16, !dbg !62
  %48 = load i64, i64* %exceptionValue, align 8, !dbg !62
  %49 = icmp ne i64 %48, 8, !dbg !62
  %50 = load i64*, i64** %5, align 8, !dbg !62, !tbaa !48
  %51 = getelementptr inbounds i64, i64* %50, i64 -3, !dbg !62
  %52 = load i64, i64* %51, align 8, !dbg !62, !tbaa !14
  %53 = icmp ne i64 %52, 8, !dbg !62
  %54 = select i1 %53, i64 %52, i64 8, !dbg !62
  %55 = select i1 %49, i64 %48, i64 %54, !dbg !62
  call void @rb_set_errinfo(i64 %55), !dbg !62
  %"<retry-singleton>.us" = load i64, i64* @"<retry-singleton>", align 8, !dbg !62
  %shouldRetry.us = icmp eq i64 %47, %"<retry-singleton>.us", !dbg !62
  %56 = and i1 %42, %shouldRetry.us, !dbg !62
  br i1 %56, label %exception-entry.us, label %exception-ensure, !dbg !62

exception-entry:                                  ; preds = %fillRequiredArgs, %sorbet_try.exit26
  %57 = load i64*, i64** %5, align 8, !dbg !62, !tbaa !48
  %58 = load i64, i64* %57, align 8, !dbg !62, !tbaa !14
  %59 = and i64 %58, 8, !dbg !62
  %60 = icmp eq i64 %59, 0, !dbg !62
  br i1 %60, label %61, label %63, !dbg !62, !prof !66

61:                                               ; preds = %exception-entry
  %62 = getelementptr inbounds i64, i64* %57, i64 -3, !dbg !62
  store i64 8, i64* %62, align 8, !dbg !62, !tbaa !14
  br label %sorbet_writeLocal.exit, !dbg !62

63:                                               ; preds = %exception-entry
  call void @sorbet_vm_env_write_slowpath(i64* nonnull align 8 dereferenceable(8) %57, i32 noundef -3, i64 noundef 8) #16, !dbg !62
  br label %sorbet_writeLocal.exit, !dbg !62

sorbet_writeLocal.exit:                           ; preds = %61, %63
  call void @llvm.lifetime.start.p0i8(i64 noundef 8, i8* noundef nonnull align 8 %6) #16, !dbg !62
  store i64 52, i64* %2, align 8, !dbg !62, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 noundef 40, i8* noundef nonnull align 8 %7) #16, !dbg !62
  store i64 (i64**, i64, %struct.rb_control_frame_struct*)* @"func_Test.test_known_nil$block_1", i64 (i64**, i64, %struct.rb_control_frame_struct*)** %8, align 8, !dbg !62, !tbaa !4
  store i64** %4, i64*** %9, align 8, !dbg !62, !tbaa !10
  store i64 0, i64* %10, align 8, !dbg !62, !tbaa !11
  store %struct.rb_control_frame_struct* %cfp, %struct.rb_control_frame_struct** %11, align 8, !dbg !62, !tbaa !12
  store i64* %2, i64** %12, align 8, !dbg !62, !tbaa !13
  store i64 8, i64* %exceptionValue, align 8, !dbg !62, !tbaa !14
  call void @rb_set_errinfo(i64 %previousException) #16, !dbg !62
  %64 = load i64, i64* @rb_eException, align 8, !dbg !62, !tbaa !14
  %65 = call i64 (i64 (i64)*, i64, i64 (i64, i64)*, i64, ...) @rb_rescue2(i64 (i64)* noundef nonnull @sorbet_applyExceptionClosure, i64 noundef %14, i64 (i64, i64)* noundef nonnull @sorbet_rescueStoreException, i64 %15, i64 %64, i32 0) #16, !dbg !62
  %66 = load i64, i64* %2, align 8, !dbg !62
  call void @llvm.lifetime.end.p0i8(i64 noundef 40, i8* noundef nonnull %7) #16, !dbg !62
  call void @llvm.lifetime.end.p0i8(i64 noundef 8, i8* noundef nonnull %6) #16, !dbg !62
  %isReturnValue = icmp ne i64 %66, 52, !dbg !62
  br i1 %isReturnValue, label %exception-body-return, label %exception-body-continue, !dbg !62

exception-body-return:                            ; preds = %sorbet_writeLocal.exit, %sorbet_writeLocal.exit.us
  %.lcssa28 = phi i64 [ %33, %sorbet_writeLocal.exit.us ], [ %66, %sorbet_writeLocal.exit ], !dbg !62
  call void @rb_set_errinfo(i64 %previousException), !dbg !62
  %stackFrame.i25 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Test.test_known_nil$block_3", align 8
  %67 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !41
  %68 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %67, i64 0, i32 2
  %69 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %68, align 8, !tbaa !42
  call void @sorbet_setExceptionStackFrame(%struct.rb_execution_context_struct* %67, %struct.rb_control_frame_struct* %69, %struct.rb_iseq_struct* %stackFrame.i25) #16
  %70 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !41
  %71 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %70, i64 0, i32 2
  %72 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %71, align 8, !tbaa !42
  %73 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %72, i64 0, i32 0
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 6), i64** %73, align 8, !tbaa !41
  call void @sorbet_popRubyStack()
  br label %postProcess, !dbg !62

exception-body-continue:                          ; preds = %sorbet_writeLocal.exit
  %74 = load i64, i64* %exceptionValue, align 8, !dbg !62
  %75 = load i64*, i64** %5, align 8, !dbg !62, !tbaa !48
  %76 = load i64, i64* %75, align 8, !dbg !62, !tbaa !14
  %77 = and i64 %76, 8, !dbg !62
  %78 = icmp eq i64 %77, 0, !dbg !62
  br i1 %78, label %79, label %81, !dbg !62, !prof !66

79:                                               ; preds = %exception-body-continue
  %80 = getelementptr inbounds i64, i64* %75, i64 -3, !dbg !62
  store i64 %74, i64* %80, align 8, !dbg !62, !tbaa !14
  br label %sorbet_writeLocal.exit22, !dbg !62

81:                                               ; preds = %exception-body-continue
  call void @sorbet_vm_env_write_slowpath(i64* nonnull align 8 dereferenceable(8) %75, i32 noundef -3, i64 %74) #16, !dbg !62
  br label %sorbet_writeLocal.exit22, !dbg !62

sorbet_writeLocal.exit22:                         ; preds = %79, %81
  %82 = icmp ne i64 %74, 8, !dbg !62
  %handler = select i1 %82, i64 (i64**, i64, %struct.rb_control_frame_struct*)* @"func_Test.test_known_nil$block_2", i64 (i64**, i64, %struct.rb_control_frame_struct*)* @"func_Test.test_known_nil$block_4", !dbg !62
  call void @llvm.lifetime.start.p0i8(i64 noundef 8, i8* noundef nonnull align 8 %16) #16, !dbg !62
  store i64 52, i64* %0, align 8, !dbg !62, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 noundef 40, i8* noundef nonnull align 8 %17) #16, !dbg !62
  store i64 (i64**, i64, %struct.rb_control_frame_struct*)* %handler, i64 (i64**, i64, %struct.rb_control_frame_struct*)** %18, align 8, !dbg !62, !tbaa !4
  store i64** %4, i64*** %19, align 8, !dbg !62, !tbaa !10
  store i64 0, i64* %20, align 8, !dbg !62, !tbaa !11
  store %struct.rb_control_frame_struct* %cfp, %struct.rb_control_frame_struct** %21, align 8, !dbg !62, !tbaa !12
  store i64* %0, i64** %22, align 8, !dbg !62, !tbaa !13
  store i64 8, i64* %exceptionValue, align 8, !dbg !62, !tbaa !14
  %83 = icmp eq i64 %74, 8, !dbg !62
  br i1 %83, label %sorbet_try.exit26, label %84, !dbg !62

84:                                               ; preds = %sorbet_writeLocal.exit22
  call void @rb_set_errinfo(i64 %74) #16, !dbg !62
  br label %sorbet_try.exit26, !dbg !62

sorbet_try.exit26:                                ; preds = %sorbet_writeLocal.exit22, %84
  %85 = load i64, i64* @rb_eException, align 8, !dbg !62, !tbaa !14
  %86 = call i64 (i64 (i64)*, i64, i64 (i64, i64)*, i64, ...) @rb_rescue2(i64 (i64)* noundef nonnull @sorbet_applyExceptionClosure, i64 noundef %23, i64 (i64, i64)* noundef nonnull @sorbet_rescueStoreException, i64 %15, i64 %85, i32 0) #16, !dbg !62
  %87 = load i64, i64* %0, align 8, !dbg !62
  call void @llvm.lifetime.end.p0i8(i64 noundef 40, i8* noundef nonnull %17) #16, !dbg !62
  call void @llvm.lifetime.end.p0i8(i64 noundef 8, i8* noundef nonnull %16) #16, !dbg !62
  %88 = load i64, i64* %exceptionValue, align 8, !dbg !62
  %89 = icmp ne i64 %88, 8, !dbg !62
  %90 = load i64*, i64** %5, align 8, !dbg !62, !tbaa !48
  %91 = getelementptr inbounds i64, i64* %90, i64 -3, !dbg !62
  %92 = load i64, i64* %91, align 8, !dbg !62, !tbaa !14
  %93 = icmp ne i64 %92, 8, !dbg !62
  %94 = select i1 %93, i64 %92, i64 %previousException, !dbg !62
  %95 = select i1 %89, i64 %88, i64 %94, !dbg !62
  call void @rb_set_errinfo(i64 %95), !dbg !62
  %"<retry-singleton>" = load i64, i64* @"<retry-singleton>", align 8, !dbg !62
  %shouldRetry = icmp eq i64 %87, %"<retry-singleton>", !dbg !62
  %96 = and i1 %82, %shouldRetry, !dbg !62
  br i1 %96, label %exception-entry, label %exception-ensure, !dbg !62

exception-ensure:                                 ; preds = %sorbet_try.exit26, %sorbet_try.exit26.us
  %.lcssa31 = phi i64 [ %47, %sorbet_try.exit26.us ], [ %87, %sorbet_try.exit26 ], !dbg !62
  %.lcssa30 = phi i64 [ %55, %sorbet_try.exit26.us ], [ %95, %sorbet_try.exit26 ], !dbg !62
  %stackFrame.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Test.test_known_nil$block_3", align 8
  %97 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !41
  %98 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %97, i64 0, i32 2
  %99 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %98, align 8, !tbaa !42
  call void @sorbet_setExceptionStackFrame(%struct.rb_execution_context_struct* %97, %struct.rb_control_frame_struct* %99, %struct.rb_iseq_struct* %stackFrame.i) #16
  %100 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !41
  %101 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %100, i64 0, i32 2
  %102 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %101, align 8, !tbaa !42
  %103 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %102, i64 0, i32 0
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 6), i64** %103, align 8, !tbaa !41
  call void @sorbet_popRubyStack()
  %isReturnValue13 = icmp ne i64 %.lcssa31, 52, !dbg !62
  br i1 %isReturnValue13, label %postProcess, label %exception-continue, !dbg !62

exception-continue:                               ; preds = %exception-ensure
  %104 = icmp eq i64 %.lcssa30, 8, !dbg !62
  br i1 %104, label %sorbet_raiseIfNotNil.exit21, label %105, !dbg !62

105:                                              ; preds = %exception-continue
  call void @rb_exc_raise(i64 %.lcssa30) #17, !dbg !62
  unreachable, !dbg !62

sorbet_raiseIfNotNil.exit21:                      ; preds = %exception-continue
  %106 = load i64*, i64** %5, align 8, !dbg !62, !tbaa !48
  %107 = getelementptr inbounds i64, i64* %106, i64 -3, !dbg !62
  %108 = load i64, i64* %107, align 8, !dbg !62, !tbaa !14
  %109 = icmp eq i64 %108, 8, !dbg !62
  br i1 %109, label %sorbet_raiseIfNotNil.exit, label %110, !dbg !62

110:                                              ; preds = %sorbet_raiseIfNotNil.exit21
  call void @rb_exc_raise(i64 %108) #17, !dbg !62
  unreachable, !dbg !62

sorbet_raiseIfNotNil.exit:                        ; preds = %sorbet_raiseIfNotNil.exit21
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 12), i64** %4, align 8, !tbaa !41
  %111 = getelementptr inbounds i64, i64* %106, i64 -5, !dbg !67
  %112 = load i64, i64* %111, align 8, !dbg !67, !tbaa !14
  br label %postProcess, !dbg !67
}

; Function Attrs: nounwind ssp
define internal noundef i64 @"func_Test.test_known_nil$block_1"(i64** nocapture nonnull writeonly align 8 dereferenceable(8) %pc, i64 %localsOffset, %struct.rb_control_frame_struct* nocapture %cfp) #9 !dbg !27 {
fastSymCallIntrinsic_T_must:
  %callArgs = alloca [2 x i64], align 8
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 8), i64** %pc, align 8, !tbaa !41
  %callArgs0Addr = getelementptr [2 x i64], [2 x i64]* %callArgs, i32 0, i64 0, !dbg !26
  store i64 8, i64* %callArgs0Addr, align 8, !dbg !26
  %0 = getelementptr [2 x i64], [2 x i64]* %callArgs, i64 0, i64 0, !dbg !26
  tail call void @llvm.experimental.noalias.scope.decl(metadata !68), !dbg !26
  %1 = load i64, i64* %0, align 8, !dbg !26, !tbaa !14, !alias.scope !68
  %2 = icmp eq i64 %1, 8, !dbg !26
  br i1 %2, label %11, label %afterSend, !dbg !26, !prof !64

afterSend:                                        ; preds = %fastSymCallIntrinsic_T_must
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 4, !dbg !26
  %4 = load i64*, i64** %3, align 8, !dbg !26, !tbaa !48
  %5 = load i64, i64* %4, align 8, !dbg !26, !tbaa !14
  %6 = and i64 %5, 8, !dbg !26
  %7 = icmp eq i64 %6, 0, !dbg !26
  br i1 %7, label %8, label %10, !dbg !26, !prof !66

8:                                                ; preds = %afterSend
  %9 = getelementptr inbounds i64, i64* %4, i64 -5, !dbg !26
  store i64 %1, i64* %9, align 8, !dbg !26, !tbaa !14
  br label %sorbet_writeLocal.exit, !dbg !26

10:                                               ; preds = %afterSend
  tail call void @sorbet_vm_env_write_slowpath(i64* nonnull align 8 dereferenceable(8) %4, i32 noundef -5, i64 %1) #16, !dbg !26
  br label %sorbet_writeLocal.exit, !dbg !26

sorbet_writeLocal.exit:                           ; preds = %8, %10
  ret i64 52

11:                                               ; preds = %fastSymCallIntrinsic_T_must
  %12 = load i64, i64* @rb_eTypeError, align 8, !dbg !26, !tbaa !14, !noalias !68
  tail call void (i64, i8*, ...) @rb_raise(i64 %12, i8* noundef getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)) #17, !dbg !26, !noalias !68
  unreachable, !dbg !26
}

; Function Attrs: ssp
define internal noundef i64 @"func_Test.test_known_nil$block_2"(i64** nocapture nofree readnone %pc, i64 %localsOffset, %struct.rb_control_frame_struct* nocapture nofree readnone %cfp) #10 !dbg !30 {
vm_get_ep.exit32:
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !41
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !42
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 3
  %4 = load i64, i64* %3, align 8, !tbaa !71
  %stackFrame = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Test.test_known_nil$block_2", align 8
  tail call void @sorbet_setExceptionStackFrame(%struct.rb_execution_context_struct* %0, %struct.rb_control_frame_struct* %2, %struct.rb_iseq_struct* %stackFrame) #16
  %5 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !41
  %6 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %5, i64 0, i32 2
  %7 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %6, align 8, !tbaa !42
  %8 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %7, i64 0, i32 0
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 9), i64** %8, align 8, !tbaa !41
  %9 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !29, !tbaa !41
  %10 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %9, i64 0, i32 2, !dbg !29
  %11 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %10, align 8, !dbg !29, !tbaa !42
  %12 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %11, i64 0, i32 4, !dbg !29
  %13 = load i64*, i64** %12, align 8, !dbg !29
  %14 = getelementptr inbounds i64, i64* %13, i64 -1, !dbg !29
  %15 = load i64, i64* %14, align 8, !dbg !29, !tbaa !14
  %16 = and i64 %15, -4, !dbg !29
  %17 = inttoptr i64 %16 to i64*, !dbg !29
  %18 = getelementptr inbounds i64, i64* %17, i64 -3, !dbg !29
  %19 = load i64, i64* %18, align 8, !dbg !29, !tbaa !14
  %20 = load i64, i64* @rb_eStandardError, align 8, !dbg !29
  %21 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %11, i64 0, i32 1, !dbg !29
  %22 = load i64*, i64** %21, align 8, !dbg !29, !tbaa !61
  %23 = getelementptr inbounds i64, i64* %22, i64 1, !dbg !29
  store i64 %19, i64* %22, align 8, !dbg !29, !tbaa !14
  %24 = getelementptr inbounds i64, i64* %23, i64 1, !dbg !29
  store i64* %24, i64** %21, align 8, !dbg !29, !tbaa !61
  store i64 %20, i64* %23, align 8, !dbg !29, !tbaa !14
  %send = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @"ic_is_a?", i64 0), !dbg !29
  %25 = and i64 %send, -9, !dbg !29
  %26 = icmp ne i64 %25, 0, !dbg !29
  br i1 %26, label %vm_get_ep.exit30, label %vm_get_ep.exit, !dbg !29

blockExit:                                        ; preds = %78, %76, %63, %61
  tail call void @sorbet_popRubyStack()
  ret i64 52

vm_get_ep.exit30:                                 ; preds = %vm_get_ep.exit32
  %27 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !72, !tbaa !41
  %28 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %27, i64 0, i32 2, !dbg !72
  %29 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %28, align 8, !dbg !72, !tbaa !42
  %30 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %29, i64 0, i32 4, !dbg !72
  %31 = load i64*, i64** %30, align 8, !dbg !72
  %32 = getelementptr inbounds i64, i64* %31, i64 -1, !dbg !72
  %33 = load i64, i64* %32, align 8, !dbg !72, !tbaa !14
  %34 = and i64 %33, -4, !dbg !72
  %35 = inttoptr i64 %34 to i64*, !dbg !72
  %36 = load i64, i64* %35, align 8, !dbg !72, !tbaa !14
  %37 = and i64 %36, 8, !dbg !72
  %38 = icmp eq i64 %37, 0, !dbg !72
  br i1 %38, label %39, label %41, !dbg !72, !prof !66

39:                                               ; preds = %vm_get_ep.exit30
  %40 = getelementptr inbounds i64, i64* %35, i64 -3, !dbg !72
  store i64 8, i64* %40, align 8, !dbg !72, !tbaa !14
  br label %vm_get_ep.exit28, !dbg !72

41:                                               ; preds = %vm_get_ep.exit30
  tail call void @sorbet_vm_env_write_slowpath(i64* nonnull align 8 dereferenceable(8) %35, i32 noundef -3, i64 noundef 8) #16, !dbg !72
  br label %vm_get_ep.exit28, !dbg !72

vm_get_ep.exit28:                                 ; preds = %39, %41
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 10), i64** %8, align 8, !dbg !73, !tbaa !41
  %42 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !31, !tbaa !41
  %43 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %42, i64 0, i32 2, !dbg !31
  %44 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %43, align 8, !dbg !31, !tbaa !42
  %45 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %44, i64 0, i32 1, !dbg !31
  %46 = load i64*, i64** %45, align 8, !dbg !31, !tbaa !61
  %47 = getelementptr inbounds i64, i64* %46, i64 1, !dbg !31
  store i64 %4, i64* %46, align 8, !dbg !31, !tbaa !14
  %48 = getelementptr inbounds i64, i64* %47, i64 1, !dbg !31
  store i64* %48, i64** %45, align 8, !dbg !31, !tbaa !61
  store i64 %19, i64* %47, align 8, !dbg !31, !tbaa !14
  %send18 = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_puts, i64 0), !dbg !31
  %49 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !31, !tbaa !41
  %50 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %49, i64 0, i32 2, !dbg !31
  %51 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %50, align 8, !dbg !31, !tbaa !42
  %52 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %51, i64 0, i32 4, !dbg !31
  %53 = load i64*, i64** %52, align 8, !dbg !31
  %54 = getelementptr inbounds i64, i64* %53, i64 -1, !dbg !31
  %55 = load i64, i64* %54, align 8, !dbg !31, !tbaa !14
  %56 = and i64 %55, -4, !dbg !31
  %57 = inttoptr i64 %56 to i64*, !dbg !31
  %58 = load i64, i64* %57, align 8, !dbg !31, !tbaa !14
  %59 = and i64 %58, 8, !dbg !31
  %60 = icmp eq i64 %59, 0, !dbg !31
  br i1 %60, label %61, label %63, !dbg !31, !prof !66

61:                                               ; preds = %vm_get_ep.exit28
  %62 = getelementptr inbounds i64, i64* %57, i64 -5, !dbg !31
  store i64 %send18, i64* %62, align 8, !dbg !31, !tbaa !14
  br label %blockExit, !dbg !31

63:                                               ; preds = %vm_get_ep.exit28
  tail call void @sorbet_vm_env_write_slowpath(i64* nonnull align 8 dereferenceable(8) %57, i32 noundef -5, i64 %send18) #16, !dbg !31
  br label %blockExit, !dbg !31

vm_get_ep.exit:                                   ; preds = %vm_get_ep.exit32
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 8), i64** %8, align 8, !tbaa !41
  %64 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !74, !tbaa !41
  %65 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %64, i64 0, i32 2, !dbg !74
  %66 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %65, align 8, !dbg !74, !tbaa !42
  %67 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %66, i64 0, i32 4, !dbg !74
  %68 = load i64*, i64** %67, align 8, !dbg !74
  %69 = getelementptr inbounds i64, i64* %68, i64 -1, !dbg !74
  %70 = load i64, i64* %69, align 8, !dbg !74, !tbaa !14
  %71 = and i64 %70, -4, !dbg !74
  %72 = inttoptr i64 %71 to i64*, !dbg !74
  %73 = load i64, i64* %72, align 8, !dbg !74, !tbaa !14
  %74 = and i64 %73, 8, !dbg !74
  %75 = icmp eq i64 %74, 0, !dbg !74
  br i1 %75, label %76, label %78, !dbg !74, !prof !66

76:                                               ; preds = %vm_get_ep.exit
  %77 = getelementptr inbounds i64, i64* %72, i64 -6, !dbg !74
  store i64 20, i64* %77, align 8, !dbg !74, !tbaa !14
  br label %blockExit, !dbg !74

78:                                               ; preds = %vm_get_ep.exit
  tail call void @sorbet_vm_env_write_slowpath(i64* nonnull align 8 dereferenceable(8) %72, i32 noundef -6, i64 noundef 20) #16, !dbg !74
  br label %blockExit, !dbg !74
}

; Function Attrs: argmemonly nofree norecurse nosync nounwind ssp willreturn writeonly
define internal noundef i64 @"func_Test.test_known_nil$block_4"(i64** nocapture nofree nonnull writeonly align 8 dereferenceable(8) %pc, i64 %localsOffset, %struct.rb_control_frame_struct* nocapture nofree readnone %cfp) #11 !dbg !75 {
functionEntryInitializers:
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 6), i64** %pc, align 8, !tbaa !41
  ret i64 52
}

; Function Attrs: nounwind sspreq uwtable
define i64 @func_Test.test_nilable_arg(i32 %argc, i64* nocapture readonly %argArray, i64 %selfRaw, %struct.rb_control_frame_struct* nonnull align 8 dereferenceable(8) %cfp) #8 !dbg !34 {
functionEntryInitializers:
  %0 = alloca i64, align 8
  %1 = alloca %struct.ExceptionClosure, align 8
  %2 = alloca i64, align 8
  %3 = alloca %struct.ExceptionClosure, align 8
  %4 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 0
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 14), i64** %4, align 8, !tbaa !41
  %exceptionValue = alloca i64, align 8, !dbg !76
  %tooManyArgs = icmp ugt i32 %argc, 1, !dbg !77
  %tooFewArgs = icmp ult i32 %argc, 1, !dbg !77
  %or.cond = or i1 %tooManyArgs, %tooFewArgs, !dbg !77
  br i1 %or.cond, label %argCountFailBlock, label %fillRequiredArgs, !dbg !77, !prof !78

postProcess:                                      ; preds = %exception-ensure, %sorbet_raiseIfNotNil.exit, %exception-body-return
  %"<returnValue>.sroa.0.0" = phi i64 [ %.lcssa, %exception-body-return ], [ %119, %sorbet_raiseIfNotNil.exit ], [ %.lcssa31, %exception-ensure ], !dbg !79
  ret i64 %"<returnValue>.sroa.0.0"

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call void @sorbet_raiseArity(i32 %argc, i32 noundef 1, i32 noundef 1) #0, !dbg !77
  unreachable, !dbg !77

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %rawArg_arg = load i64, i64* %argArray, align 8, !dbg !77
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 4, !dbg !77
  %6 = load i64*, i64** %5, align 8, !dbg !77, !tbaa !48
  %7 = load i64, i64* %6, align 8, !dbg !77, !tbaa !14
  %8 = and i64 %7, 8, !dbg !77
  %9 = icmp eq i64 %8, 0, !dbg !77
  br i1 %9, label %10, label %12, !dbg !77, !prof !66

10:                                               ; preds = %fillRequiredArgs
  %11 = getelementptr inbounds i64, i64* %6, i64 -4, !dbg !77
  store i64 %rawArg_arg, i64* %11, align 8, !dbg !77, !tbaa !14
  br label %sorbet_writeLocal.exit, !dbg !77

12:                                               ; preds = %fillRequiredArgs
  tail call void @sorbet_vm_env_write_slowpath(i64* nonnull align 8 dereferenceable(8) %6, i32 noundef -4, i64 %rawArg_arg) #16, !dbg !77
  br label %sorbet_writeLocal.exit, !dbg !77

sorbet_writeLocal.exit:                           ; preds = %10, %12
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 16), i64** %4, align 8, !dbg !79, !tbaa !41
  %previousException = tail call i64 @rb_errinfo(), !dbg !76
  %13 = bitcast i64* %0 to i8*
  %14 = bitcast %struct.ExceptionClosure* %1 to i8*
  %15 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 0
  %16 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 1
  %17 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 2
  %18 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 3
  %19 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 4
  %20 = icmp eq i64 %previousException, 8
  %21 = ptrtoint %struct.ExceptionClosure* %1 to i64
  %22 = ptrtoint i64* %exceptionValue to i64
  %23 = bitcast i64* %2 to i8*
  %24 = bitcast %struct.ExceptionClosure* %3 to i8*
  %25 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 0
  %26 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 1
  %27 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 2
  %28 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 3
  %29 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 4
  %30 = ptrtoint %struct.ExceptionClosure* %3 to i64
  br i1 %20, label %exception-entry.us, label %exception-entry, !dbg !76

exception-entry.us:                               ; preds = %sorbet_writeLocal.exit, %sorbet_try.exit.us
  %31 = load i64*, i64** %5, align 8, !dbg !76, !tbaa !48
  %32 = load i64, i64* %31, align 8, !dbg !76, !tbaa !14
  %33 = and i64 %32, 8, !dbg !76
  %34 = icmp eq i64 %33, 0, !dbg !76
  br i1 %34, label %36, label %35, !dbg !76, !prof !66

35:                                               ; preds = %exception-entry.us
  call void @sorbet_vm_env_write_slowpath(i64* nonnull align 8 dereferenceable(8) %31, i32 noundef -3, i64 noundef 8) #16, !dbg !76
  br label %sorbet_writeLocal.exit23.us, !dbg !76

36:                                               ; preds = %exception-entry.us
  %37 = getelementptr inbounds i64, i64* %31, i64 -3, !dbg !76
  store i64 8, i64* %37, align 8, !dbg !76, !tbaa !14
  br label %sorbet_writeLocal.exit23.us, !dbg !76

sorbet_writeLocal.exit23.us:                      ; preds = %36, %35
  call void @llvm.lifetime.start.p0i8(i64 noundef 8, i8* noundef nonnull align 8 %13) #16, !dbg !76
  store i64 52, i64* %0, align 8, !dbg !76, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 noundef 40, i8* noundef nonnull align 8 %14) #16, !dbg !76
  store i64 (i64**, i64, %struct.rb_control_frame_struct*)* @"func_Test.test_nilable_arg$block_1", i64 (i64**, i64, %struct.rb_control_frame_struct*)** %15, align 8, !dbg !76, !tbaa !4
  store i64** %4, i64*** %16, align 8, !dbg !76, !tbaa !10
  store i64 0, i64* %17, align 8, !dbg !76, !tbaa !11
  store %struct.rb_control_frame_struct* %cfp, %struct.rb_control_frame_struct** %18, align 8, !dbg !76, !tbaa !12
  store i64* %0, i64** %19, align 8, !dbg !76, !tbaa !13
  store i64 8, i64* %exceptionValue, align 8, !dbg !76, !tbaa !14
  %38 = load i64, i64* @rb_eException, align 8, !dbg !76, !tbaa !14
  %39 = call i64 (i64 (i64)*, i64, i64 (i64, i64)*, i64, ...) @rb_rescue2(i64 (i64)* noundef nonnull @sorbet_applyExceptionClosure, i64 noundef %21, i64 (i64, i64)* noundef nonnull @sorbet_rescueStoreException, i64 %22, i64 %38, i32 0) #16, !dbg !76
  %40 = load i64, i64* %0, align 8, !dbg !76
  call void @llvm.lifetime.end.p0i8(i64 noundef 40, i8* noundef nonnull %14) #16, !dbg !76
  call void @llvm.lifetime.end.p0i8(i64 noundef 8, i8* noundef nonnull %13) #16, !dbg !76
  %isReturnValue.us = icmp ne i64 %40, 52, !dbg !76
  br i1 %isReturnValue.us, label %exception-body-return, label %exception-body-continue.us, !dbg !76

exception-body-continue.us:                       ; preds = %sorbet_writeLocal.exit23.us
  %41 = load i64, i64* %exceptionValue, align 8, !dbg !76
  %42 = load i64*, i64** %5, align 8, !dbg !76, !tbaa !48
  %43 = load i64, i64* %42, align 8, !dbg !76, !tbaa !14
  %44 = and i64 %43, 8, !dbg !76
  %45 = icmp eq i64 %44, 0, !dbg !76
  br i1 %45, label %47, label %46, !dbg !76, !prof !66

46:                                               ; preds = %exception-body-continue.us
  call void @sorbet_vm_env_write_slowpath(i64* nonnull align 8 dereferenceable(8) %42, i32 noundef -3, i64 %41) #16, !dbg !76
  br label %sorbet_writeLocal.exit24.us, !dbg !76

47:                                               ; preds = %exception-body-continue.us
  %48 = getelementptr inbounds i64, i64* %42, i64 -3, !dbg !76
  store i64 %41, i64* %48, align 8, !dbg !76, !tbaa !14
  br label %sorbet_writeLocal.exit24.us, !dbg !76

sorbet_writeLocal.exit24.us:                      ; preds = %47, %46
  %49 = icmp ne i64 %41, 8, !dbg !76
  %handler.us = select i1 %49, i64 (i64**, i64, %struct.rb_control_frame_struct*)* @"func_Test.test_nilable_arg$block_2", i64 (i64**, i64, %struct.rb_control_frame_struct*)* @"func_Test.test_nilable_arg$block_4", !dbg !76
  call void @llvm.lifetime.start.p0i8(i64 noundef 8, i8* noundef nonnull align 8 %23) #16, !dbg !76
  store i64 52, i64* %2, align 8, !dbg !76, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 noundef 40, i8* noundef nonnull align 8 %24) #16, !dbg !76
  store i64 (i64**, i64, %struct.rb_control_frame_struct*)* %handler.us, i64 (i64**, i64, %struct.rb_control_frame_struct*)** %25, align 8, !dbg !76, !tbaa !4
  store i64** %4, i64*** %26, align 8, !dbg !76, !tbaa !10
  store i64 0, i64* %27, align 8, !dbg !76, !tbaa !11
  store %struct.rb_control_frame_struct* %cfp, %struct.rb_control_frame_struct** %28, align 8, !dbg !76, !tbaa !12
  store i64* %2, i64** %29, align 8, !dbg !76, !tbaa !13
  store i64 8, i64* %exceptionValue, align 8, !dbg !76, !tbaa !14
  %50 = icmp eq i64 %41, 8, !dbg !76
  br i1 %50, label %sorbet_try.exit.us, label %51, !dbg !76

51:                                               ; preds = %sorbet_writeLocal.exit24.us
  call void @rb_set_errinfo(i64 %41) #16, !dbg !76
  br label %sorbet_try.exit.us, !dbg !76

sorbet_try.exit.us:                               ; preds = %51, %sorbet_writeLocal.exit24.us
  %52 = load i64, i64* @rb_eException, align 8, !dbg !76, !tbaa !14
  %53 = call i64 (i64 (i64)*, i64, i64 (i64, i64)*, i64, ...) @rb_rescue2(i64 (i64)* noundef nonnull @sorbet_applyExceptionClosure, i64 noundef %30, i64 (i64, i64)* noundef nonnull @sorbet_rescueStoreException, i64 %22, i64 %52, i32 0) #16, !dbg !76
  %54 = load i64, i64* %2, align 8, !dbg !76
  call void @llvm.lifetime.end.p0i8(i64 noundef 40, i8* noundef nonnull %24) #16, !dbg !76
  call void @llvm.lifetime.end.p0i8(i64 noundef 8, i8* noundef nonnull %23) #16, !dbg !76
  %55 = load i64, i64* %exceptionValue, align 8, !dbg !76
  %56 = icmp ne i64 %55, 8, !dbg !76
  %57 = load i64*, i64** %5, align 8, !dbg !76, !tbaa !48
  %58 = getelementptr inbounds i64, i64* %57, i64 -3, !dbg !76
  %59 = load i64, i64* %58, align 8, !dbg !76, !tbaa !14
  %60 = icmp ne i64 %59, 8, !dbg !76
  %61 = select i1 %60, i64 %59, i64 8, !dbg !76
  %62 = select i1 %56, i64 %55, i64 %61, !dbg !76
  call void @rb_set_errinfo(i64 %62), !dbg !76
  %"<retry-singleton>.us" = load i64, i64* @"<retry-singleton>", align 8, !dbg !76
  %shouldRetry.us = icmp eq i64 %54, %"<retry-singleton>.us", !dbg !76
  %63 = and i1 %49, %shouldRetry.us, !dbg !76
  br i1 %63, label %exception-entry.us, label %exception-ensure, !dbg !76

exception-entry:                                  ; preds = %sorbet_writeLocal.exit, %sorbet_try.exit
  %64 = load i64*, i64** %5, align 8, !dbg !76, !tbaa !48
  %65 = load i64, i64* %64, align 8, !dbg !76, !tbaa !14
  %66 = and i64 %65, 8, !dbg !76
  %67 = icmp eq i64 %66, 0, !dbg !76
  br i1 %67, label %68, label %70, !dbg !76, !prof !66

68:                                               ; preds = %exception-entry
  %69 = getelementptr inbounds i64, i64* %64, i64 -3, !dbg !76
  store i64 8, i64* %69, align 8, !dbg !76, !tbaa !14
  br label %sorbet_writeLocal.exit23, !dbg !76

70:                                               ; preds = %exception-entry
  call void @sorbet_vm_env_write_slowpath(i64* nonnull align 8 dereferenceable(8) %64, i32 noundef -3, i64 noundef 8) #16, !dbg !76
  br label %sorbet_writeLocal.exit23, !dbg !76

sorbet_writeLocal.exit23:                         ; preds = %68, %70
  call void @llvm.lifetime.start.p0i8(i64 noundef 8, i8* noundef nonnull align 8 %13) #16, !dbg !76
  store i64 52, i64* %0, align 8, !dbg !76, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 noundef 40, i8* noundef nonnull align 8 %14) #16, !dbg !76
  store i64 (i64**, i64, %struct.rb_control_frame_struct*)* @"func_Test.test_nilable_arg$block_1", i64 (i64**, i64, %struct.rb_control_frame_struct*)** %15, align 8, !dbg !76, !tbaa !4
  store i64** %4, i64*** %16, align 8, !dbg !76, !tbaa !10
  store i64 0, i64* %17, align 8, !dbg !76, !tbaa !11
  store %struct.rb_control_frame_struct* %cfp, %struct.rb_control_frame_struct** %18, align 8, !dbg !76, !tbaa !12
  store i64* %0, i64** %19, align 8, !dbg !76, !tbaa !13
  store i64 8, i64* %exceptionValue, align 8, !dbg !76, !tbaa !14
  call void @rb_set_errinfo(i64 %previousException) #16, !dbg !76
  %71 = load i64, i64* @rb_eException, align 8, !dbg !76, !tbaa !14
  %72 = call i64 (i64 (i64)*, i64, i64 (i64, i64)*, i64, ...) @rb_rescue2(i64 (i64)* noundef nonnull @sorbet_applyExceptionClosure, i64 noundef %21, i64 (i64, i64)* noundef nonnull @sorbet_rescueStoreException, i64 %22, i64 %71, i32 0) #16, !dbg !76
  %73 = load i64, i64* %0, align 8, !dbg !76
  call void @llvm.lifetime.end.p0i8(i64 noundef 40, i8* noundef nonnull %14) #16, !dbg !76
  call void @llvm.lifetime.end.p0i8(i64 noundef 8, i8* noundef nonnull %13) #16, !dbg !76
  %isReturnValue = icmp ne i64 %73, 52, !dbg !76
  br i1 %isReturnValue, label %exception-body-return, label %exception-body-continue, !dbg !76

exception-body-return:                            ; preds = %sorbet_writeLocal.exit23, %sorbet_writeLocal.exit23.us
  %.lcssa = phi i64 [ %40, %sorbet_writeLocal.exit23.us ], [ %73, %sorbet_writeLocal.exit23 ], !dbg !76
  call void @rb_set_errinfo(i64 %previousException), !dbg !76
  %stackFrame.i28 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Test.test_nilable_arg$block_3", align 8
  %74 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !41
  %75 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %74, i64 0, i32 2
  %76 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %75, align 8, !tbaa !42
  call void @sorbet_setExceptionStackFrame(%struct.rb_execution_context_struct* %74, %struct.rb_control_frame_struct* %76, %struct.rb_iseq_struct* %stackFrame.i28) #16
  %77 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !41
  %78 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %77, i64 0, i32 2
  %79 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %78, align 8, !tbaa !42
  %80 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %79, i64 0, i32 0
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 14), i64** %80, align 8, !tbaa !41
  call void @sorbet_popRubyStack()
  br label %postProcess, !dbg !76

exception-body-continue:                          ; preds = %sorbet_writeLocal.exit23
  %81 = load i64, i64* %exceptionValue, align 8, !dbg !76
  %82 = load i64*, i64** %5, align 8, !dbg !76, !tbaa !48
  %83 = load i64, i64* %82, align 8, !dbg !76, !tbaa !14
  %84 = and i64 %83, 8, !dbg !76
  %85 = icmp eq i64 %84, 0, !dbg !76
  br i1 %85, label %86, label %88, !dbg !76, !prof !66

86:                                               ; preds = %exception-body-continue
  %87 = getelementptr inbounds i64, i64* %82, i64 -3, !dbg !76
  store i64 %81, i64* %87, align 8, !dbg !76, !tbaa !14
  br label %sorbet_writeLocal.exit24, !dbg !76

88:                                               ; preds = %exception-body-continue
  call void @sorbet_vm_env_write_slowpath(i64* nonnull align 8 dereferenceable(8) %82, i32 noundef -3, i64 %81) #16, !dbg !76
  br label %sorbet_writeLocal.exit24, !dbg !76

sorbet_writeLocal.exit24:                         ; preds = %86, %88
  %89 = icmp ne i64 %81, 8, !dbg !76
  %handler = select i1 %89, i64 (i64**, i64, %struct.rb_control_frame_struct*)* @"func_Test.test_nilable_arg$block_2", i64 (i64**, i64, %struct.rb_control_frame_struct*)* @"func_Test.test_nilable_arg$block_4", !dbg !76
  call void @llvm.lifetime.start.p0i8(i64 noundef 8, i8* noundef nonnull align 8 %23) #16, !dbg !76
  store i64 52, i64* %2, align 8, !dbg !76, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 noundef 40, i8* noundef nonnull align 8 %24) #16, !dbg !76
  store i64 (i64**, i64, %struct.rb_control_frame_struct*)* %handler, i64 (i64**, i64, %struct.rb_control_frame_struct*)** %25, align 8, !dbg !76, !tbaa !4
  store i64** %4, i64*** %26, align 8, !dbg !76, !tbaa !10
  store i64 0, i64* %27, align 8, !dbg !76, !tbaa !11
  store %struct.rb_control_frame_struct* %cfp, %struct.rb_control_frame_struct** %28, align 8, !dbg !76, !tbaa !12
  store i64* %2, i64** %29, align 8, !dbg !76, !tbaa !13
  store i64 8, i64* %exceptionValue, align 8, !dbg !76, !tbaa !14
  %90 = icmp eq i64 %81, 8, !dbg !76
  br i1 %90, label %sorbet_try.exit, label %91, !dbg !76

91:                                               ; preds = %sorbet_writeLocal.exit24
  call void @rb_set_errinfo(i64 %81) #16, !dbg !76
  br label %sorbet_try.exit, !dbg !76

sorbet_try.exit:                                  ; preds = %sorbet_writeLocal.exit24, %91
  %92 = load i64, i64* @rb_eException, align 8, !dbg !76, !tbaa !14
  %93 = call i64 (i64 (i64)*, i64, i64 (i64, i64)*, i64, ...) @rb_rescue2(i64 (i64)* noundef nonnull @sorbet_applyExceptionClosure, i64 noundef %30, i64 (i64, i64)* noundef nonnull @sorbet_rescueStoreException, i64 %22, i64 %92, i32 0) #16, !dbg !76
  %94 = load i64, i64* %2, align 8, !dbg !76
  call void @llvm.lifetime.end.p0i8(i64 noundef 40, i8* noundef nonnull %24) #16, !dbg !76
  call void @llvm.lifetime.end.p0i8(i64 noundef 8, i8* noundef nonnull %23) #16, !dbg !76
  %95 = load i64, i64* %exceptionValue, align 8, !dbg !76
  %96 = icmp ne i64 %95, 8, !dbg !76
  %97 = load i64*, i64** %5, align 8, !dbg !76, !tbaa !48
  %98 = getelementptr inbounds i64, i64* %97, i64 -3, !dbg !76
  %99 = load i64, i64* %98, align 8, !dbg !76, !tbaa !14
  %100 = icmp ne i64 %99, 8, !dbg !76
  %101 = select i1 %100, i64 %99, i64 %previousException, !dbg !76
  %102 = select i1 %96, i64 %95, i64 %101, !dbg !76
  call void @rb_set_errinfo(i64 %102), !dbg !76
  %"<retry-singleton>" = load i64, i64* @"<retry-singleton>", align 8, !dbg !76
  %shouldRetry = icmp eq i64 %94, %"<retry-singleton>", !dbg !76
  %103 = and i1 %89, %shouldRetry, !dbg !76
  br i1 %103, label %exception-entry, label %exception-ensure, !dbg !76

exception-ensure:                                 ; preds = %sorbet_try.exit, %sorbet_try.exit.us
  %.lcssa31 = phi i64 [ %54, %sorbet_try.exit.us ], [ %94, %sorbet_try.exit ], !dbg !76
  %.lcssa30 = phi i64 [ %62, %sorbet_try.exit.us ], [ %102, %sorbet_try.exit ], !dbg !76
  %stackFrame.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Test.test_nilable_arg$block_3", align 8
  %104 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !41
  %105 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %104, i64 0, i32 2
  %106 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %105, align 8, !tbaa !42
  call void @sorbet_setExceptionStackFrame(%struct.rb_execution_context_struct* %104, %struct.rb_control_frame_struct* %106, %struct.rb_iseq_struct* %stackFrame.i) #16
  %107 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !41
  %108 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %107, i64 0, i32 2
  %109 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %108, align 8, !tbaa !42
  %110 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %109, i64 0, i32 0
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 14), i64** %110, align 8, !tbaa !41
  call void @sorbet_popRubyStack()
  %isReturnValue13 = icmp ne i64 %.lcssa31, 52, !dbg !76
  br i1 %isReturnValue13, label %postProcess, label %exception-continue, !dbg !76

exception-continue:                               ; preds = %exception-ensure
  %111 = icmp eq i64 %.lcssa30, 8, !dbg !76
  br i1 %111, label %sorbet_raiseIfNotNil.exit22, label %112, !dbg !76

112:                                              ; preds = %exception-continue
  call void @rb_exc_raise(i64 %.lcssa30) #17, !dbg !76
  unreachable, !dbg !76

sorbet_raiseIfNotNil.exit22:                      ; preds = %exception-continue
  %113 = load i64*, i64** %5, align 8, !dbg !76, !tbaa !48
  %114 = getelementptr inbounds i64, i64* %113, i64 -3, !dbg !76
  %115 = load i64, i64* %114, align 8, !dbg !76, !tbaa !14
  %116 = icmp eq i64 %115, 8, !dbg !76
  br i1 %116, label %sorbet_raiseIfNotNil.exit, label %117, !dbg !76

117:                                              ; preds = %sorbet_raiseIfNotNil.exit22
  call void @rb_exc_raise(i64 %115) #17, !dbg !76
  unreachable, !dbg !76

sorbet_raiseIfNotNil.exit:                        ; preds = %sorbet_raiseIfNotNil.exit22
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 21), i64** %4, align 8, !tbaa !41
  %118 = getelementptr inbounds i64, i64* %113, i64 -6, !dbg !80
  %119 = load i64, i64* %118, align 8, !dbg !80, !tbaa !14
  br label %postProcess, !dbg !80
}

; Function Attrs: ssp
define internal noundef i64 @"func_Test.test_nilable_arg$block_1"(i64** nocapture nonnull writeonly align 8 dereferenceable(8) %pc, i64 %localsOffset, %struct.rb_control_frame_struct* nocapture nonnull align 8 dereferenceable(40) %cfp) #10 !dbg !33 {
fastSymCallIntrinsic_T_must:
  %callArgs = alloca [3 x i64], align 8
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !41
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !42
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 3
  %4 = load i64, i64* %3, align 8, !tbaa !71
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 16), i64** %pc, align 8, !tbaa !41
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 4, !dbg !32
  %6 = load i64*, i64** %5, align 8, !dbg !32, !tbaa !48
  %7 = getelementptr inbounds i64, i64* %6, i64 -4, !dbg !32
  %8 = load i64, i64* %7, align 8, !dbg !32, !tbaa !14
  %callArgs0Addr = getelementptr [3 x i64], [3 x i64]* %callArgs, i32 0, i64 0, !dbg !32
  store i64 %8, i64* %callArgs0Addr, align 8, !dbg !32
  %9 = getelementptr [3 x i64], [3 x i64]* %callArgs, i64 0, i64 0, !dbg !32
  tail call void @llvm.experimental.noalias.scope.decl(metadata !81), !dbg !32
  %10 = load i64, i64* %9, align 8, !dbg !32, !tbaa !14, !alias.scope !81
  %11 = icmp eq i64 %10, 8, !dbg !32
  br i1 %11, label %26, label %afterSend, !dbg !32, !prof !64

afterSend:                                        ; preds = %fastSymCallIntrinsic_T_must
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 17), i64** %pc, align 8, !dbg !32, !tbaa !41
  %"rubyStr_ wasn't nil" = load i64, i64* @"rubyStrFrozen_ wasn't nil", align 8, !dbg !84
  %12 = load i64*, i64** %5, align 8, !dbg !85, !tbaa !48
  %13 = getelementptr inbounds i64, i64* %12, i64 -4, !dbg !85
  %14 = load i64, i64* %13, align 8, !dbg !85, !tbaa !14
  store i64 %14, i64* %callArgs0Addr, align 8, !dbg !85
  %callArgs1Addr = getelementptr [3 x i64], [3 x i64]* %callArgs, i32 0, i64 1, !dbg !85
  store i64 %"rubyStr_ wasn't nil", i64* %callArgs1Addr, align 8, !dbg !85
  %"rubyId_<string-interpolate>" = load i64, i64* @"rubyIdPrecomputed_<string-interpolate>", align 8, !dbg !85
  %rawSendResult11 = call i64 @sorbet_stringInterpolate(i64 noundef 8, i64 %"rubyId_<string-interpolate>", i32 noundef 2, i64* noundef nonnull %9, i64 (i64, i64, i32, i64*, i64)* noundef null, i64 noundef 0), !dbg !85
  %15 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %cfp, i64 0, i32 1, !dbg !35
  %16 = load i64*, i64** %15, align 8, !dbg !35, !tbaa !61
  %17 = getelementptr inbounds i64, i64* %16, i64 1, !dbg !35
  store i64 %4, i64* %16, align 8, !dbg !35, !tbaa !14
  %18 = getelementptr inbounds i64, i64* %17, i64 1, !dbg !35
  store i64* %18, i64** %15, align 8, !dbg !35, !tbaa !61
  store i64 %rawSendResult11, i64* %17, align 8, !dbg !35, !tbaa !14
  %send16 = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_puts.4, i64 0), !dbg !35
  %19 = load i64*, i64** %5, align 8, !dbg !35, !tbaa !48
  %20 = load i64, i64* %19, align 8, !dbg !35, !tbaa !14
  %21 = and i64 %20, 8, !dbg !35
  %22 = icmp eq i64 %21, 0, !dbg !35
  br i1 %22, label %23, label %25, !dbg !35, !prof !66

23:                                               ; preds = %afterSend
  %24 = getelementptr inbounds i64, i64* %19, i64 -6, !dbg !35
  store i64 %send16, i64* %24, align 8, !dbg !35, !tbaa !14
  br label %sorbet_writeLocal.exit, !dbg !35

25:                                               ; preds = %afterSend
  call void @sorbet_vm_env_write_slowpath(i64* nonnull align 8 dereferenceable(8) %19, i32 noundef -6, i64 %send16) #16, !dbg !35
  br label %sorbet_writeLocal.exit, !dbg !35

sorbet_writeLocal.exit:                           ; preds = %23, %25
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 16), i64** %pc, align 8, !dbg !35, !tbaa !41
  ret i64 52

26:                                               ; preds = %fastSymCallIntrinsic_T_must
  %27 = load i64, i64* @rb_eTypeError, align 8, !dbg !32, !tbaa !14, !noalias !81
  tail call void (i64, i8*, ...) @rb_raise(i64 %27, i8* noundef getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)) #17, !dbg !32, !noalias !81
  unreachable, !dbg !32
}

; Function Attrs: ssp
define internal noundef i64 @"func_Test.test_nilable_arg$block_2"(i64** nocapture nofree readnone %pc, i64 %localsOffset, %struct.rb_control_frame_struct* nocapture nofree readnone %cfp) #10 !dbg !37 {
vm_get_ep.exit32:
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !41
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !42
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 3
  %4 = load i64, i64* %3, align 8, !tbaa !71
  %stackFrame = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_Test.test_nilable_arg$block_2", align 8
  tail call void @sorbet_setExceptionStackFrame(%struct.rb_execution_context_struct* %0, %struct.rb_control_frame_struct* %2, %struct.rb_iseq_struct* %stackFrame) #16
  %5 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !41
  %6 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %5, i64 0, i32 2
  %7 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %6, align 8, !tbaa !42
  %8 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %7, i64 0, i32 0
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 18), i64** %8, align 8, !tbaa !41
  %9 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !36, !tbaa !41
  %10 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %9, i64 0, i32 2, !dbg !36
  %11 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %10, align 8, !dbg !36, !tbaa !42
  %12 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %11, i64 0, i32 4, !dbg !36
  %13 = load i64*, i64** %12, align 8, !dbg !36
  %14 = getelementptr inbounds i64, i64* %13, i64 -1, !dbg !36
  %15 = load i64, i64* %14, align 8, !dbg !36, !tbaa !14
  %16 = and i64 %15, -4, !dbg !36
  %17 = inttoptr i64 %16 to i64*, !dbg !36
  %18 = getelementptr inbounds i64, i64* %17, i64 -3, !dbg !36
  %19 = load i64, i64* %18, align 8, !dbg !36, !tbaa !14
  %20 = load i64, i64* @rb_eStandardError, align 8, !dbg !36
  %21 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %11, i64 0, i32 1, !dbg !36
  %22 = load i64*, i64** %21, align 8, !dbg !36, !tbaa !61
  %23 = getelementptr inbounds i64, i64* %22, i64 1, !dbg !36
  store i64 %19, i64* %22, align 8, !dbg !36, !tbaa !14
  %24 = getelementptr inbounds i64, i64* %23, i64 1, !dbg !36
  store i64* %24, i64** %21, align 8, !dbg !36, !tbaa !61
  store i64 %20, i64* %23, align 8, !dbg !36, !tbaa !14
  %send = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @"ic_is_a?.5", i64 0), !dbg !36
  %25 = and i64 %send, -9, !dbg !36
  %26 = icmp ne i64 %25, 0, !dbg !36
  br i1 %26, label %vm_get_ep.exit30, label %vm_get_ep.exit, !dbg !36

blockExit:                                        ; preds = %78, %76, %63, %61
  tail call void @sorbet_popRubyStack()
  ret i64 52

vm_get_ep.exit30:                                 ; preds = %vm_get_ep.exit32
  %27 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !86, !tbaa !41
  %28 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %27, i64 0, i32 2, !dbg !86
  %29 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %28, align 8, !dbg !86, !tbaa !42
  %30 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %29, i64 0, i32 4, !dbg !86
  %31 = load i64*, i64** %30, align 8, !dbg !86
  %32 = getelementptr inbounds i64, i64* %31, i64 -1, !dbg !86
  %33 = load i64, i64* %32, align 8, !dbg !86, !tbaa !14
  %34 = and i64 %33, -4, !dbg !86
  %35 = inttoptr i64 %34 to i64*, !dbg !86
  %36 = load i64, i64* %35, align 8, !dbg !86, !tbaa !14
  %37 = and i64 %36, 8, !dbg !86
  %38 = icmp eq i64 %37, 0, !dbg !86
  br i1 %38, label %39, label %41, !dbg !86, !prof !66

39:                                               ; preds = %vm_get_ep.exit30
  %40 = getelementptr inbounds i64, i64* %35, i64 -3, !dbg !86
  store i64 8, i64* %40, align 8, !dbg !86, !tbaa !14
  br label %vm_get_ep.exit28, !dbg !86

41:                                               ; preds = %vm_get_ep.exit30
  tail call void @sorbet_vm_env_write_slowpath(i64* nonnull align 8 dereferenceable(8) %35, i32 noundef -3, i64 noundef 8) #16, !dbg !86
  br label %vm_get_ep.exit28, !dbg !86

vm_get_ep.exit28:                                 ; preds = %39, %41
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 19), i64** %8, align 8, !dbg !87, !tbaa !41
  %42 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !38, !tbaa !41
  %43 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %42, i64 0, i32 2, !dbg !38
  %44 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %43, align 8, !dbg !38, !tbaa !42
  %45 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %44, i64 0, i32 1, !dbg !38
  %46 = load i64*, i64** %45, align 8, !dbg !38, !tbaa !61
  %47 = getelementptr inbounds i64, i64* %46, i64 1, !dbg !38
  store i64 %4, i64* %46, align 8, !dbg !38, !tbaa !14
  %48 = getelementptr inbounds i64, i64* %47, i64 1, !dbg !38
  store i64* %48, i64** %45, align 8, !dbg !38, !tbaa !61
  store i64 %19, i64* %47, align 8, !dbg !38, !tbaa !14
  %send18 = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @ic_puts.6, i64 0), !dbg !38
  %49 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !38, !tbaa !41
  %50 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %49, i64 0, i32 2, !dbg !38
  %51 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %50, align 8, !dbg !38, !tbaa !42
  %52 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %51, i64 0, i32 4, !dbg !38
  %53 = load i64*, i64** %52, align 8, !dbg !38
  %54 = getelementptr inbounds i64, i64* %53, i64 -1, !dbg !38
  %55 = load i64, i64* %54, align 8, !dbg !38, !tbaa !14
  %56 = and i64 %55, -4, !dbg !38
  %57 = inttoptr i64 %56 to i64*, !dbg !38
  %58 = load i64, i64* %57, align 8, !dbg !38, !tbaa !14
  %59 = and i64 %58, 8, !dbg !38
  %60 = icmp eq i64 %59, 0, !dbg !38
  br i1 %60, label %61, label %63, !dbg !38, !prof !66

61:                                               ; preds = %vm_get_ep.exit28
  %62 = getelementptr inbounds i64, i64* %57, i64 -6, !dbg !38
  store i64 %send18, i64* %62, align 8, !dbg !38, !tbaa !14
  br label %blockExit, !dbg !38

63:                                               ; preds = %vm_get_ep.exit28
  tail call void @sorbet_vm_env_write_slowpath(i64* nonnull align 8 dereferenceable(8) %57, i32 noundef -6, i64 %send18) #16, !dbg !38
  br label %blockExit, !dbg !38

vm_get_ep.exit:                                   ; preds = %vm_get_ep.exit32
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 16), i64** %8, align 8, !tbaa !41
  %64 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !88, !tbaa !41
  %65 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %64, i64 0, i32 2, !dbg !88
  %66 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %65, align 8, !dbg !88, !tbaa !42
  %67 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %66, i64 0, i32 4, !dbg !88
  %68 = load i64*, i64** %67, align 8, !dbg !88
  %69 = getelementptr inbounds i64, i64* %68, i64 -1, !dbg !88
  %70 = load i64, i64* %69, align 8, !dbg !88, !tbaa !14
  %71 = and i64 %70, -4, !dbg !88
  %72 = inttoptr i64 %71 to i64*, !dbg !88
  %73 = load i64, i64* %72, align 8, !dbg !88, !tbaa !14
  %74 = and i64 %73, 8, !dbg !88
  %75 = icmp eq i64 %74, 0, !dbg !88
  br i1 %75, label %76, label %78, !dbg !88, !prof !66

76:                                               ; preds = %vm_get_ep.exit
  %77 = getelementptr inbounds i64, i64* %72, i64 -7, !dbg !88
  store i64 20, i64* %77, align 8, !dbg !88, !tbaa !14
  br label %blockExit, !dbg !88

78:                                               ; preds = %vm_get_ep.exit
  tail call void @sorbet_vm_env_write_slowpath(i64* nonnull align 8 dereferenceable(8) %72, i32 noundef -7, i64 noundef 20) #16, !dbg !88
  br label %blockExit, !dbg !88
}

; Function Attrs: argmemonly nofree norecurse nosync nounwind ssp willreturn writeonly
define internal noundef i64 @"func_Test.test_nilable_arg$block_4"(i64** nocapture nofree nonnull writeonly align 8 dereferenceable(8) %pc, i64 %localsOffset, %struct.rb_control_frame_struct* nocapture nofree readnone %cfp) #11 !dbg !89 {
functionEntryInitializers:
  store i64* getelementptr inbounds ([28 x i64], [28 x i64]* @iseqEncodedArray, i64 0, i64 14), i64** %pc, align 8, !tbaa !41
  ret i64 52
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #12

; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn
declare void @llvm.experimental.noalias.scope.decl(metadata) #13

; Function Attrs: nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #14

; Function Attrs: ssp
define linkonce void @const_recompute_Test() local_unnamed_addr #10 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_Test, i64 0, i64 0), i64 4)
  store i64 %1, i64* @guarded_const_Test, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !53
  store i64 %2, i64* @guard_epoch_Test, align 8
  ret void
}

attributes #0 = { noreturn }
attributes #1 = { "addedToSilenceEmptyAttrsError" }
attributes #2 = { argmemonly nofree nosync nounwind willreturn }
attributes #3 = { alwaysinline nounwind ssp uwtable }
attributes #4 = { allocsize(0,1) }
attributes #5 = { nounwind ssp uwtable }
attributes #6 = { nofree norecurse nosync nounwind ssp uwtable willreturn writeonly }
attributes #7 = { sspreq }
attributes #8 = { nounwind sspreq uwtable }
attributes #9 = { nounwind ssp }
attributes #10 = { ssp }
attributes #11 = { argmemonly nofree norecurse nosync nounwind ssp willreturn writeonly }
attributes #12 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #13 = { inaccessiblememonly nofree nosync nounwind willreturn }
attributes #14 = { nofree nosync nounwind willreturn }
attributes #15 = { nounwind allocsize(0,1) }
attributes #16 = { nounwind }
attributes #17 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "Sorbet LLVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "test/testdata/compiler/intrinsics/t_must.rb", directory: ".")
!3 = !{}
!4 = !{!5, !6, i64 0}
!5 = !{!"ExceptionClosure", !6, i64 0, !6, i64 8, !9, i64 16, !6, i64 24, !6, i64 32}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"long", !7, i64 0}
!10 = !{!5, !6, i64 8}
!11 = !{!5, !9, i64 16}
!12 = !{!5, !6, i64 24}
!13 = !{!5, !6, i64 32}
!14 = !{!9, !9, i64 0}
!15 = !DILocation(line: 14, column: 3, scope: !16, inlinedAt: !20)
!16 = distinct !DISubprogram(name: "Test.<static-init>", linkageName: "func_Test.<static-init>L62", scope: null, file: !2, line: 5, type: !17, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!17 = !DISubroutineType(types: !18)
!18 = !{!19}
!19 = !DIBasicType(name: "VALUE", size: 64, encoding: DW_ATE_signed)
!20 = distinct !DILocation(line: 5, column: 1, scope: !21)
!21 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.<static-init>$152", scope: null, file: !2, line: 5, type: !17, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!22 = !DILocation(line: 24, column: 1, scope: !21)
!23 = !DILocation(line: 25, column: 1, scope: !21)
!24 = !DILocation(line: 26, column: 1, scope: !21)
!25 = !DILocation(line: 27, column: 1, scope: !21)
!26 = !DILocation(line: 8, column: 7, scope: !27)
!27 = distinct !DISubprogram(name: "Test.test_known_nil", linkageName: "func_Test.test_known_nil$block_1", scope: !28, file: !2, line: 6, type: !17, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!28 = distinct !DISubprogram(name: "Test.test_known_nil", linkageName: "func_Test.test_known_nil", scope: null, file: !2, line: 6, type: !17, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!29 = !DILocation(line: 9, column: 15, scope: !30)
!30 = distinct !DISubprogram(name: "Test.test_known_nil", linkageName: "func_Test.test_known_nil$block_2", scope: !28, file: !2, line: 6, type: !17, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!31 = !DILocation(line: 10, column: 7, scope: !30)
!32 = !DILocation(line: 16, column: 7, scope: !33)
!33 = distinct !DISubprogram(name: "Test.test_nilable_arg", linkageName: "func_Test.test_nilable_arg$block_1", scope: !34, file: !2, line: 14, type: !17, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!34 = distinct !DISubprogram(name: "Test.test_nilable_arg", linkageName: "func_Test.test_nilable_arg", scope: null, file: !2, line: 14, type: !17, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!35 = !DILocation(line: 17, column: 7, scope: !33)
!36 = !DILocation(line: 18, column: 15, scope: !37)
!37 = distinct !DISubprogram(name: "Test.test_nilable_arg", linkageName: "func_Test.test_nilable_arg$block_2", scope: !34, file: !2, line: 14, type: !17, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!38 = !DILocation(line: 19, column: 7, scope: !37)
!39 = !DILocation(line: 6, column: 3, scope: !16)
!40 = !DILocation(line: 14, column: 3, scope: !16)
!41 = !{!6, !6, i64 0}
!42 = !{!43, !6, i64 16}
!43 = !{!"rb_execution_context_struct", !6, i64 0, !9, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !44, i64 40, !44, i64 44, !6, i64 48, !6, i64 56, !6, i64 64, !9, i64 72, !9, i64 80, !6, i64 88, !9, i64 96, !6, i64 104, !6, i64 112, !9, i64 120, !9, i64 128, !7, i64 136, !7, i64 137, !9, i64 144, !45, i64 152}
!44 = !{!"int", !7, i64 0}
!45 = !{!"", !6, i64 0, !6, i64 8, !9, i64 16, !7, i64 24}
!46 = !{!47, !6, i64 16}
!47 = !{!"rb_control_frame_struct", !6, i64 0, !6, i64 8, !6, i64 16, !9, i64 24, !6, i64 32, !6, i64 40, !6, i64 48}
!48 = !{!47, !6, i64 32}
!49 = !DILocation(line: 0, scope: !21)
!50 = !DILocation(line: 5, column: 1, scope: !21)
!51 = !DILocation(line: 0, scope: !16, inlinedAt: !20)
!52 = !DILocation(line: 6, column: 3, scope: !16, inlinedAt: !20)
!53 = !{!54, !54, i64 0}
!54 = !{!"long long", !7, i64 0}
!55 = !{!"branch_weights", i32 1, i32 10000}
!56 = !{!57, !44, i64 8}
!57 = !{!"rb_sorbet_param_struct", !58, i64 0, !44, i64 4, !44, i64 8, !44, i64 12, !44, i64 16, !44, i64 20, !44, i64 24, !44, i64 28, !6, i64 32, !44, i64 40, !44, i64 44, !44, i64 48, !44, i64 52, !6, i64 56}
!58 = !{!"", !44, i64 0, !44, i64 0, !44, i64 0, !44, i64 0, !44, i64 0, !44, i64 0, !44, i64 0, !44, i64 0, !44, i64 1, !44, i64 1}
!59 = !{!57, !44, i64 4}
!60 = !{!57, !6, i64 32}
!61 = !{!47, !6, i64 8}
!62 = !DILocation(line: 8, column: 7, scope: !28)
!63 = !DILocation(line: 6, column: 3, scope: !28)
!64 = !{!"branch_weights", i32 1, i32 2000}
!65 = !DILocation(line: 0, scope: !28)
!66 = !{!"branch_weights", i32 2000, i32 1}
!67 = !DILocation(line: 12, column: 3, scope: !28)
!68 = !{!69}
!69 = distinct !{!69, !70, !"sorbet_T_must: argument 0"}
!70 = distinct !{!70, !"sorbet_T_must"}
!71 = !{!47, !9, i64 24}
!72 = !DILocation(line: 0, scope: !30)
!73 = !DILocation(line: 9, column: 5, scope: !30)
!74 = !DILocation(line: 8, column: 7, scope: !30)
!75 = distinct !DISubprogram(name: "Test.test_known_nil", linkageName: "func_Test.test_known_nil$block_4", scope: !28, file: !2, line: 6, type: !17, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!76 = !DILocation(line: 16, column: 7, scope: !34)
!77 = !DILocation(line: 14, column: 3, scope: !34)
!78 = !{!"branch_weights", i32 4001, i32 4000000}
!79 = !DILocation(line: 0, scope: !34)
!80 = !DILocation(line: 21, column: 3, scope: !34)
!81 = !{!82}
!82 = distinct !{!82, !83, !"sorbet_T_must: argument 0"}
!83 = distinct !{!83, !"sorbet_T_must"}
!84 = !DILocation(line: 17, column: 19, scope: !33)
!85 = !DILocation(line: 17, column: 12, scope: !33)
!86 = !DILocation(line: 0, scope: !37)
!87 = !DILocation(line: 18, column: 5, scope: !37)
!88 = !DILocation(line: 16, column: 7, scope: !37)
!89 = distinct !DISubprogram(name: "Test.test_nilable_arg", linkageName: "func_Test.test_nilable_arg$block_4", scope: !34, file: !2, line: 14, type: !17, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
