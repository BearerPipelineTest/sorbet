; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.5 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.12 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_data*, %struct.anon.11, i32, i32, i32, i32, i32, i8, i64 }
%struct.anon = type { %struct.anon.0, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.0 = type { i16, [2 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.iseq_insn_info_entry*, i32*, i32, %struct.succ_index_table* }
%struct.iseq_insn_info_entry = type opaque
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, i64 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.rb_scope_visi_struct }
%struct.rb_scope_visi_struct = type { i8, [3 x i8] }
%struct.rb_call_data = type { %struct.rb_call_cache, %struct.rb_call_info }
%struct.rb_call_cache = type { i64, [3 x i64], %struct.rb_callable_method_entry_struct*, i64, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_data*)*, %union.anon.15 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon, i64, i64 }
%union.anon = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64, i32, i64*, i64 (...)*)*, i32 }
%struct.rb_calling_info = type { i64, i64, i32, i32 }
%union.anon.15 = type { i32 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.anon.11 = type { i64, i64, i64, i64* }
%union.anon.12 = type { %struct.anon.13 }
%struct.anon.13 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [5 x i8*], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_fiber_struct = type opaque
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, i64, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %union.pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.8, i32, i64, %struct.rb_fiber_struct*, [5 x i8*], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %union.pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.3, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %union.pthread_mutex_t, i64, i64, i64, i64, i64, i32, %struct.st_table*, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.rb_builtin_function*, i32, %struct.anon.4, [29 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %union.pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32 }
%union.pthread_cond_t = type { %struct.anon.2 }
%struct.anon.2 = type { i32, i32, i64, i64, i64, i8*, i32, i32 }
%struct.anon.3 = type { [65 x i64] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.rb_builtin_function = type opaque
%struct.anon.4 = type { i64, i64, i64, i64 }
%struct.native_thread_data_struct = type { %struct.list_head, %union.anon.7 }
%union.anon.7 = type { %union.pthread_cond_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i64, i64, i32 }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (i64, i64)*, i64 (i64)* }
%struct.st_table_entry = type opaque
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (i64)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.5 = type { i64*, i64*, i64, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.FunctionInlineCache = type { %struct.rb_kwarg_call_data }
%struct.rb_kwarg_call_data = type { %struct.rb_call_cache, %struct.rb_call_info_with_kwarg }
%struct.rb_call_info_with_kwarg = type { %struct.rb_call_info, %struct.rb_call_info_kw_arg* }
%struct.rb_call_info_kw_arg = type { i32, [1 x i64] }
%struct.ExceptionClosure = type { i64 (i64**, i64*, i64)*, i64**, i64*, i64, i64* }

@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@ruby_vm_global_constant_state = external local_unnamed_addr global i64, align 8
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@.str.2 = private unnamed_addr constant [25 x i8] c"Passed `nil` into T.must\00", align 1
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@sorbet_getTRetry.retry = internal constant [25 x i8] c"T::Private::Retry::RETRY\00", align 16
@rb_eException = external local_unnamed_addr global i64, align 8
@.str.8 = private unnamed_addr constant [95 x i8] c"sorbet_getBuildSCMRevision: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@.str.9 = private unnamed_addr constant [93 x i8] c"sorbet_getIsReleaseBuild: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@"stackFramePrecomputed_func_<root>.<static-init>$152" = internal unnamed_addr global i8* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"rubyStrFrozen_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"rubyStrFrozen_test/testdata/compiler/intrinsics/t_must.rb" = internal unnamed_addr global i64 0, align 8
@"str_test/testdata/compiler/intrinsics/t_must.rb" = private unnamed_addr constant [44 x i8] c"test/testdata/compiler/intrinsics/t_must.rb\00", align 1
@str_Test = private unnamed_addr constant [5 x i8] c"Test\00", align 1
@ic_test_known_nil = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_test_known_nil = internal unnamed_addr global i64 0, align 8
@str_test_known_nil = private unnamed_addr constant [15 x i8] c"test_known_nil\00", align 1
@ic_test_nilable_arg = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_test_nilable_arg = internal unnamed_addr global i64 0, align 8
@str_test_nilable_arg = private unnamed_addr constant [17 x i8] c"test_nilable_arg\00", align 1
@ic_test_nilable_arg.1 = internal global %struct.FunctionInlineCache zeroinitializer
@ic_test_nilable_arg.2 = internal global %struct.FunctionInlineCache zeroinitializer
@stackFramePrecomputed_func_Test.test_known_nil = internal unnamed_addr global i8* null, align 8
@"rubyIdPrecomputed_<exceptionValue>" = internal unnamed_addr global i64 0, align 8
@"str_<exceptionValue>" = private unnamed_addr constant [17 x i8] c"<exceptionValue>\00", align 1
@"rubyIdPrecomputed_<magic>" = internal unnamed_addr global i64 0, align 8
@"str_<magic>" = private unnamed_addr constant [8 x i8] c"<magic>\00", align 1
@"rubyIdPrecomputed_<returnMethodTemp>" = internal unnamed_addr global i64 0, align 8
@"str_<returnMethodTemp>" = private unnamed_addr constant [19 x i8] c"<returnMethodTemp>\00", align 1
@"rubyIdPrecomputed_<gotoDeadTemp>" = internal unnamed_addr global i64 0, align 8
@"str_<gotoDeadTemp>" = private unnamed_addr constant [15 x i8] c"<gotoDeadTemp>\00", align 1
@"stackFramePrecomputed_func_Test.test_known_nil$block_2" = internal unnamed_addr global i8* null, align 8
@"rubyIdPrecomputed_rescue for" = internal unnamed_addr global i64 0, align 8
@"str_rescue for" = private unnamed_addr constant [11 x i8] c"rescue for\00", align 1
@"rubyStrFrozen_rescue for" = internal unnamed_addr global i64 0, align 8
@"stackFramePrecomputed_func_Test.test_known_nil$block_3" = internal unnamed_addr global i8* null, align 8
@"rubyIdPrecomputed_ensure for" = internal unnamed_addr global i64 0, align 8
@"str_ensure for" = private unnamed_addr constant [11 x i8] c"ensure for\00", align 1
@"rubyStrFrozen_ensure for" = internal unnamed_addr global i64 0, align 8
@"<retry-singleton>" = internal unnamed_addr global i64 0
@rubyIdPrecomputed_must = internal unnamed_addr global i64 0, align 8
@str_must = private unnamed_addr constant [5 x i8] c"must\00", align 1
@ic_must = internal global %struct.FunctionInlineCache zeroinitializer
@"ic_is_a?" = internal global %struct.FunctionInlineCache zeroinitializer
@"rubyIdPrecomputed_is_a?" = internal unnamed_addr global i64 0, align 8
@"str_is_a?" = private unnamed_addr constant [6 x i8] c"is_a?\00", align 1
@ic_puts = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@stackFramePrecomputed_func_Test.test_nilable_arg = internal unnamed_addr global i8* null, align 8
@rubyIdPrecomputed_arg = internal unnamed_addr global i64 0, align 8
@str_arg = private unnamed_addr constant [4 x i8] c"arg\00", align 1
@"stackFramePrecomputed_func_Test.test_nilable_arg$block_2" = internal unnamed_addr global i8* null, align 8
@"stackFramePrecomputed_func_Test.test_nilable_arg$block_3" = internal unnamed_addr global i8* null, align 8
@ic_must.3 = internal global %struct.FunctionInlineCache zeroinitializer
@"rubyStrFrozen_ wasn't nil" = internal unnamed_addr global i64 0, align 8
@"str_ wasn't nil" = private unnamed_addr constant [12 x i8] c" wasn't nil\00", align 1
@"rubyIdPrecomputed_<string-interpolate>" = internal unnamed_addr global i64 0, align 8
@"str_<string-interpolate>" = private unnamed_addr constant [21 x i8] c"<string-interpolate>\00", align 1
@ic_puts.4 = internal global %struct.FunctionInlineCache zeroinitializer
@"ic_is_a?.5" = internal global %struct.FunctionInlineCache zeroinitializer
@ic_puts.6 = internal global %struct.FunctionInlineCache zeroinitializer
@"stackFramePrecomputed_func_Test.<static-init>" = internal unnamed_addr global i8* null, align 8
@rubyIdPrecomputed_normal = internal unnamed_addr global i64 0, align 8
@str_normal = private unnamed_addr constant [7 x i8] c"normal\00", align 1
@ic_keep_self_def = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_keep_self_def = internal unnamed_addr global i64 0, align 8
@str_keep_self_def = private unnamed_addr constant [14 x i8] c"keep_self_def\00", align 1
@ic_keep_self_def.7 = internal global %struct.FunctionInlineCache zeroinitializer
@guard_epoch_Test = linkonce local_unnamed_addr global i64 0
@guarded_const_Test = linkonce local_unnamed_addr global i64 0
@rb_eStandardError = external local_unnamed_addr constant i64

; Function Attrs: noreturn
declare void @sorbet_raiseArity(i32, i32, i32) local_unnamed_addr #0

declare i8* @sorbet_allocateRubyStackFrame(i64, i64, i64, i64, i8*, i32, i32, i32, i64*, i32, i32) local_unnamed_addr #1

declare i64 @sorbet_getConstant(i8*, i64) local_unnamed_addr #1

declare i64 @sorbet_readRealpath() local_unnamed_addr #1

declare void @sorbet_pushStaticInitFrame(i64) local_unnamed_addr #1

declare void @sorbet_popRubyStack() local_unnamed_addr #1

declare void @sorbet_vm_env_write_slowpath(i64*, i32, i64) local_unnamed_addr #1

declare void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache*, i64, i32, i32, i32, i64*) local_unnamed_addr #1

declare i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache*, i64) local_unnamed_addr #1

declare void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_iseq_struct*) local_unnamed_addr #1

declare void @sorbet_setExceptionStackFrame(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_iseq_struct*) local_unnamed_addr #1

declare i64 @sorbet_stringInterpolate(i64, i64, i32, i64*, i64 (i64, i64, i32, i64*, i64)*, i64) local_unnamed_addr #1

declare i64 @rb_define_module(i8*) local_unnamed_addr #1

declare extern_weak void @rb_define_singleton_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #1

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #1

declare i64 @rb_id2sym(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i64 @rb_fstring_new(i8*, i64) local_unnamed_addr #1

declare void @rb_gc_register_mark_object(i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #0

declare void @rb_set_errinfo(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i64 @sorbet_applyExceptionClosure(i64) #3 {
  %2 = inttoptr i64 %0 to %struct.ExceptionClosure*
  %3 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %2, i64 0, i32 0
  %4 = load i64 (i64**, i64*, i64)*, i64 (i64**, i64*, i64)** %3, align 8, !tbaa !4
  %5 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %2, i64 0, i32 1
  %6 = load i64**, i64*** %5, align 8, !tbaa !10
  %7 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %2, i64 0, i32 2
  %8 = load i64*, i64** %7, align 8, !tbaa !11
  %9 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %2, i64 0, i32 3
  %10 = load i64, i64* %9, align 8, !tbaa !12
  %11 = tail call i64 %4(i64** %6, i64* %8, i64 %10) #10
  %12 = icmp eq i64 %11, 52
  br i1 %12, label %16, label %13

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %2, i64 0, i32 4
  %15 = load i64*, i64** %14, align 8, !tbaa !13
  store i64 %11, i64* %15, align 8, !tbaa !14
  br label %16

16:                                               ; preds = %13, %1
  ret i64 52
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal i64 @sorbet_rescueStoreException(i64, i64) #4 {
  %3 = inttoptr i64 %0 to i64*
  store i64 %1, i64* %3, align 8, !tbaa !14
  ret i64 52
}

declare i64 @rb_rescue2(i64 (i64)*, i64, i64 (i64, i64)*, i64, ...) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @rb_exc_raise(i64) local_unnamed_addr #0

; Function Attrs: nounwind ssp uwtable
define weak i32 @sorbet_getIsReleaseBuild() local_unnamed_addr #3 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !14
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.9, i64 0, i64 0)) #11
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @sorbet_getBuildSCMRevision() local_unnamed_addr #3 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !14
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.8, i64 0, i64 0)) #11
  unreachable
}

declare i64 @rb_errinfo() local_unnamed_addr #1

; Function Attrs: sspreq
define void @Init_t_must() local_unnamed_addr #5 {
entry:
  %locals1.i.i = alloca [0 x i64], align 8
  %locals1.i29.i = alloca [5 x i64], align 8
  %locals1.i23.i = alloca [4 x i64], align 8
  %realpath = tail call i64 @sorbet_readRealpath()
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #10
  store i64 %0, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %1 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str_test_known_nil, i64 0, i64 0), i64 14) #10
  store i64 %1, i64* @rubyIdPrecomputed_test_known_nil, align 8
  %2 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str_test_nilable_arg, i64 0, i64 0), i64 16) #10
  store i64 %2, i64* @rubyIdPrecomputed_test_nilable_arg, align 8
  %3 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<exceptionValue>", i64 0, i64 0), i64 16) #10
  store i64 %3, i64* @"rubyIdPrecomputed_<exceptionValue>", align 8
  %4 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"str_<magic>", i64 0, i64 0), i64 7) #10
  store i64 %4, i64* @"rubyIdPrecomputed_<magic>", align 8
  %5 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"str_<returnMethodTemp>", i64 0, i64 0), i64 18) #10
  store i64 %5, i64* @"rubyIdPrecomputed_<returnMethodTemp>", align 8
  %6 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"str_<gotoDeadTemp>", i64 0, i64 0), i64 14) #10
  store i64 %6, i64* @"rubyIdPrecomputed_<gotoDeadTemp>", align 8
  %7 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"str_rescue for", i64 0, i64 0), i64 10) #10
  store i64 %7, i64* @"rubyIdPrecomputed_rescue for", align 8
  %8 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"str_ensure for", i64 0, i64 0), i64 10) #10
  store i64 %8, i64* @"rubyIdPrecomputed_ensure for", align 8
  %9 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_must, i64 0, i64 0), i64 4) #10
  store i64 %9, i64* @rubyIdPrecomputed_must, align 8
  %10 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"str_is_a?", i64 0, i64 0), i64 5) #10
  store i64 %10, i64* @"rubyIdPrecomputed_is_a?", align 8
  %11 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 4) #10
  store i64 %11, i64* @rubyIdPrecomputed_puts, align 8
  %12 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_arg, i64 0, i64 0), i64 3) #10
  store i64 %12, i64* @rubyIdPrecomputed_arg, align 8
  %13 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"str_<string-interpolate>", i64 0, i64 0), i64 20) #10
  store i64 %13, i64* @"rubyIdPrecomputed_<string-interpolate>", align 8
  %14 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_normal, i64 0, i64 0), i64 6) #10
  store i64 %14, i64* @rubyIdPrecomputed_normal, align 8
  %15 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str_keep_self_def, i64 0, i64 0), i64 13) #10
  store i64 %15, i64* @rubyIdPrecomputed_keep_self_def, align 8
  %16 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #10
  tail call void @rb_gc_register_mark_object(i64 %16) #10
  store i64 %16, i64* @"rubyStrFrozen_<top (required)>", align 8
  %17 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @"str_test/testdata/compiler/intrinsics/t_must.rb", i64 0, i64 0), i64 43) #10
  tail call void @rb_gc_register_mark_object(i64 %17) #10
  store i64 %17, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/t_must.rb", align 8
  %18 = bitcast [0 x i64]* %locals1.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 0, i8* nonnull %18)
  %"rubyId_<top (required)>.i.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %locals1.sub.i.i = getelementptr inbounds [0 x i64], [0 x i64]* %locals1.i.i, i64 0, i64 0
  %19 = call i8* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i.i", i64 %"rubyId_<top (required)>.i.i", i64 %17, i64 %realpath, i8* null, i32 1, i32 1, i32 27, i64* nonnull %locals1.sub.i.i, i32 0, i32 2)
  store i8* %19, i8** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  call void @llvm.lifetime.end.p0i8(i64 0, i8* nonnull %18)
  %rubyId_test_known_nil.i = load i64, i64* @rubyIdPrecomputed_test_known_nil, align 8, !dbg !15
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @ic_test_known_nil, i64 %rubyId_test_known_nil.i, i32 16, i32 0, i32 0, i64* null), !dbg !15
  %rubyId_test_nilable_arg.i = load i64, i64* @rubyIdPrecomputed_test_nilable_arg, align 8, !dbg !20
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @ic_test_nilable_arg, i64 %rubyId_test_nilable_arg.i, i32 16, i32 1, i32 0, i64* null), !dbg !20
  %rubyId_test_nilable_arg2.i = load i64, i64* @rubyIdPrecomputed_test_nilable_arg, align 8, !dbg !21
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @ic_test_nilable_arg.1, i64 %rubyId_test_nilable_arg2.i, i32 16, i32 1, i32 0, i64* null), !dbg !21
  %rubyId_test_nilable_arg4.i = load i64, i64* @rubyIdPrecomputed_test_nilable_arg, align 8, !dbg !22
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @ic_test_nilable_arg.2, i64 %rubyId_test_nilable_arg4.i, i32 16, i32 1, i32 0, i64* null), !dbg !22
  %20 = call i64 @rb_fstring_new(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str_test_known_nil, i64 0, i64 0), i64 14) #10
  call void @rb_gc_register_mark_object(i64 %20) #10
  %21 = bitcast [4 x i64]* %locals1.i23.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21)
  %rubyId_test_known_nil.i.i = load i64, i64* @rubyIdPrecomputed_test_known_nil, align 8
  %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i22.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/t_must.rb", align 8
  %locals1.sub.i24.i = getelementptr inbounds [4 x i64], [4 x i64]* %locals1.i23.i, i64 0, i64 0
  %"rubyId_<exceptionValue>.i.i" = load i64, i64* @"rubyIdPrecomputed_<exceptionValue>", align 8
  store i64 %"rubyId_<exceptionValue>.i.i", i64* %locals1.sub.i24.i, align 8
  %"rubyId_<magic>.i.i" = load i64, i64* @"rubyIdPrecomputed_<magic>", align 8
  %22 = getelementptr inbounds [4 x i64], [4 x i64]* %locals1.i23.i, i64 0, i64 1
  store i64 %"rubyId_<magic>.i.i", i64* %22, align 8
  %"rubyId_<returnMethodTemp>.i.i" = load i64, i64* @"rubyIdPrecomputed_<returnMethodTemp>", align 8
  %23 = getelementptr inbounds [4 x i64], [4 x i64]* %locals1.i23.i, i64 0, i64 2
  store i64 %"rubyId_<returnMethodTemp>.i.i", i64* %23, align 8
  %"rubyId_<gotoDeadTemp>.i.i" = load i64, i64* @"rubyIdPrecomputed_<gotoDeadTemp>", align 8
  %24 = getelementptr inbounds [4 x i64], [4 x i64]* %locals1.i23.i, i64 0, i64 3
  store i64 %"rubyId_<gotoDeadTemp>.i.i", i64* %24, align 8
  %25 = call i8* @sorbet_allocateRubyStackFrame(i64 %20, i64 %rubyId_test_known_nil.i.i, i64 %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i22.i", i64 %realpath, i8* null, i32 1, i32 6, i32 12, i64* nonnull %locals1.sub.i24.i, i32 4, i32 2)
  store i8* %25, i8** @stackFramePrecomputed_func_Test.test_known_nil, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21)
  %26 = call i64 @rb_fstring_new(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"str_rescue for", i64 0, i64 0), i64 10) #10
  call void @rb_gc_register_mark_object(i64 %26) #10
  store i64 %26, i64* @"rubyStrFrozen_rescue for", align 8
  %stackFrame_func_Test.test_known_nil.i.i = load i8*, i8** @stackFramePrecomputed_func_Test.test_known_nil, align 8
  %"rubyId_rescue for.i.i" = load i64, i64* @"rubyIdPrecomputed_rescue for", align 8
  %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i25.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/t_must.rb", align 8
  %27 = call i8* @sorbet_allocateRubyStackFrame(i64 %26, i64 %"rubyId_rescue for.i.i", i64 %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i25.i", i64 %realpath, i8* %stackFrame_func_Test.test_known_nil.i.i, i32 4, i32 6, i32 12, i64* null, i32 0, i32 2)
  store i8* %27, i8** @"stackFramePrecomputed_func_Test.test_known_nil$block_2", align 8
  %28 = call i64 @rb_fstring_new(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"str_ensure for", i64 0, i64 0), i64 10) #10
  call void @rb_gc_register_mark_object(i64 %28) #10
  store i64 %28, i64* @"rubyStrFrozen_ensure for", align 8
  %stackFrame_func_Test.test_known_nil.i26.i = load i8*, i8** @stackFramePrecomputed_func_Test.test_known_nil, align 8
  %"rubyId_ensure for.i.i" = load i64, i64* @"rubyIdPrecomputed_ensure for", align 8
  %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i27.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/t_must.rb", align 8
  %29 = call i8* @sorbet_allocateRubyStackFrame(i64 %28, i64 %"rubyId_ensure for.i.i", i64 %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i27.i", i64 %realpath, i8* %stackFrame_func_Test.test_known_nil.i26.i, i32 5, i32 6, i32 12, i64* null, i32 0, i32 2)
  store i8* %29, i8** @"stackFramePrecomputed_func_Test.test_known_nil$block_3", align 8
  %30 = call i64 @sorbet_getConstant(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @sorbet_getTRetry.retry, i64 0, i64 0), i64 25) #10
  store i64 %30, i64* @"<retry-singleton>", align 8
  %rubyId_must.i = load i64, i64* @rubyIdPrecomputed_must, align 8, !dbg !23
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @ic_must, i64 %rubyId_must.i, i32 16, i32 1, i32 0, i64* null), !dbg !23
  %"rubyId_is_a?.i" = load i64, i64* @"rubyIdPrecomputed_is_a?", align 8, !dbg !26
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @"ic_is_a?", i64 %"rubyId_is_a?.i", i32 16, i32 1, i32 0, i64* null), !dbg !26
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !28
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @ic_puts, i64 %rubyId_puts.i, i32 20, i32 1, i32 0, i64* null), !dbg !28
  %31 = call i64 @rb_fstring_new(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str_test_nilable_arg, i64 0, i64 0), i64 16) #10
  call void @rb_gc_register_mark_object(i64 %31) #10
  %32 = bitcast [5 x i64]* %locals1.i29.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %32)
  %rubyId_test_nilable_arg.i.i = load i64, i64* @rubyIdPrecomputed_test_nilable_arg, align 8
  %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i28.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/t_must.rb", align 8
  %locals1.sub.i30.i = getelementptr inbounds [5 x i64], [5 x i64]* %locals1.i29.i, i64 0, i64 0
  %"rubyId_<exceptionValue>.i31.i" = load i64, i64* @"rubyIdPrecomputed_<exceptionValue>", align 8
  store i64 %"rubyId_<exceptionValue>.i31.i", i64* %locals1.sub.i30.i, align 8
  %rubyId_arg.i.i = load i64, i64* @rubyIdPrecomputed_arg, align 8
  %33 = getelementptr inbounds [5 x i64], [5 x i64]* %locals1.i29.i, i64 0, i64 1
  store i64 %rubyId_arg.i.i, i64* %33, align 8
  %"rubyId_<magic>.i32.i" = load i64, i64* @"rubyIdPrecomputed_<magic>", align 8
  %34 = getelementptr inbounds [5 x i64], [5 x i64]* %locals1.i29.i, i64 0, i64 2
  store i64 %"rubyId_<magic>.i32.i", i64* %34, align 8
  %"rubyId_<returnMethodTemp>.i33.i" = load i64, i64* @"rubyIdPrecomputed_<returnMethodTemp>", align 8
  %35 = getelementptr inbounds [5 x i64], [5 x i64]* %locals1.i29.i, i64 0, i64 3
  store i64 %"rubyId_<returnMethodTemp>.i33.i", i64* %35, align 8
  %"rubyId_<gotoDeadTemp>.i34.i" = load i64, i64* @"rubyIdPrecomputed_<gotoDeadTemp>", align 8
  %36 = getelementptr inbounds [5 x i64], [5 x i64]* %locals1.i29.i, i64 0, i64 4
  store i64 %"rubyId_<gotoDeadTemp>.i34.i", i64* %36, align 8
  %37 = call i8* @sorbet_allocateRubyStackFrame(i64 %31, i64 %rubyId_test_nilable_arg.i.i, i64 %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i28.i", i64 %realpath, i8* null, i32 1, i32 14, i32 21, i64* nonnull %locals1.sub.i30.i, i32 5, i32 3)
  store i8* %37, i8** @stackFramePrecomputed_func_Test.test_nilable_arg, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %32)
  %"rubyId_rescue for.i35.i" = load i64, i64* @"rubyIdPrecomputed_rescue for", align 8
  %"rubyStr_rescue for.i36.i" = load i64, i64* @"rubyStrFrozen_rescue for", align 8
  %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i37.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/t_must.rb", align 8
  %38 = call i8* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_rescue for.i36.i", i64 %"rubyId_rescue for.i35.i", i64 %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i37.i", i64 %realpath, i8* %37, i32 4, i32 14, i32 21, i64* null, i32 0, i32 3)
  store i8* %38, i8** @"stackFramePrecomputed_func_Test.test_nilable_arg$block_2", align 8
  %stackFrame_func_Test.test_nilable_arg.i38.i = load i8*, i8** @stackFramePrecomputed_func_Test.test_nilable_arg, align 8
  %"rubyId_ensure for.i39.i" = load i64, i64* @"rubyIdPrecomputed_ensure for", align 8
  %"rubyStr_ensure for.i40.i" = load i64, i64* @"rubyStrFrozen_ensure for", align 8
  %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i41.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/t_must.rb", align 8
  %39 = call i8* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_ensure for.i40.i", i64 %"rubyId_ensure for.i39.i", i64 %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i41.i", i64 %realpath, i8* %stackFrame_func_Test.test_nilable_arg.i38.i, i32 5, i32 14, i32 21, i64* null, i32 0, i32 3)
  store i8* %39, i8** @"stackFramePrecomputed_func_Test.test_nilable_arg$block_3", align 8
  %rubyId_must9.i = load i64, i64* @rubyIdPrecomputed_must, align 8, !dbg !29
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @ic_must.3, i64 %rubyId_must9.i, i32 16, i32 1, i32 0, i64* null), !dbg !29
  %40 = call i64 @rb_fstring_new(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"str_ wasn't nil", i64 0, i64 0), i64 11) #10
  call void @rb_gc_register_mark_object(i64 %40) #10
  store i64 %40, i64* @"rubyStrFrozen_ wasn't nil", align 8
  %rubyId_puts11.i = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !32
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @ic_puts.4, i64 %rubyId_puts11.i, i32 20, i32 1, i32 0, i64* null), !dbg !32
  %"rubyId_is_a?14.i" = load i64, i64* @"rubyIdPrecomputed_is_a?", align 8, !dbg !33
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @"ic_is_a?.5", i64 %"rubyId_is_a?14.i", i32 16, i32 1, i32 0, i64* null), !dbg !33
  %rubyId_puts16.i = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !35
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @ic_puts.6, i64 %rubyId_puts16.i, i32 20, i32 1, i32 0, i64* null), !dbg !35
  call void @llvm.lifetime.start.p0i8(i64 0, i8* nonnull %18)
  %"rubyId_<top (required)>.i43.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i44.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i45.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/intrinsics/t_must.rb", align 8
  %41 = call i8* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i44.i", i64 %"rubyId_<top (required)>.i43.i", i64 %"rubyStr_test/testdata/compiler/intrinsics/t_must.rb.i45.i", i64 %realpath, i8* null, i32 1, i32 5, i32 5, i64* nonnull %locals1.sub.i.i, i32 0, i32 4)
  store i8* %41, i8** @"stackFramePrecomputed_func_Test.<static-init>", align 8
  call void @llvm.lifetime.end.p0i8(i64 0, i8* nonnull %18)
  %rubyId_keep_self_def.i = load i64, i64* @rubyIdPrecomputed_keep_self_def, align 8, !dbg !36
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @ic_keep_self_def, i64 %rubyId_keep_self_def.i, i32 16, i32 3, i32 0, i64* null), !dbg !36
  %rubyId_keep_self_def20.i = load i64, i64* @rubyIdPrecomputed_keep_self_def, align 8, !dbg !38
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @ic_keep_self_def.7, i64 %rubyId_keep_self_def20.i, i32 16, i32 3, i32 0, i64* null), !dbg !38
  %"stackFrame_func_<root>.<static-init>$152.i" = load i8*, i8** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %42 = bitcast i8* %"stackFrame_func_<root>.<static-init>$152.i" to %struct.rb_iseq_struct*
  %43 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %44 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %43, i64 0, i32 2
  %45 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %44, align 8, !tbaa !40
  %46 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %45, i64 0, i32 2
  %47 = bitcast %struct.rb_iseq_struct** %46 to i8**
  store i8* %"stackFrame_func_<root>.<static-init>$152.i", i8** %47, align 8, !tbaa !44
  %48 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %45, i64 0, i32 4
  %49 = load i64*, i64** %48, align 8, !tbaa !46
  %50 = load i64, i64* %49, align 8, !tbaa !14
  %51 = and i64 %50, -129
  store i64 %51, i64* %49, align 8, !tbaa !14
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %43, %struct.rb_control_frame_struct* nonnull %45, %struct.rb_iseq_struct* %42) #10
  %52 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %45, i64 0, i32 0
  %53 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %46, align 8, !tbaa !44
  %54 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %53, i64 0, i32 2
  %55 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %54, align 8, !tbaa !47
  %56 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %55, i64 0, i32 2
  %57 = load i64*, i64** %56, align 8, !tbaa !49
  %58 = getelementptr inbounds i64, i64* %57, i64 5
  store i64* %58, i64** %52, align 8, !dbg !58, !tbaa !39
  %59 = call i64 @rb_define_module(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_Test, i64 0, i64 0)) #10, !dbg !59
  call void @sorbet_pushStaticInitFrame(i64 %59) #10, !dbg !59
  %"stackFrame_func_Test.<static-init>.i.i" = load i8*, i8** @"stackFramePrecomputed_func_Test.<static-init>", align 8
  %60 = bitcast i8* %"stackFrame_func_Test.<static-init>.i.i" to %struct.rb_iseq_struct*
  %61 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %62 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %61, i64 0, i32 2
  %63 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %62, align 8, !tbaa !40
  %64 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %63, i64 0, i32 2
  %65 = bitcast %struct.rb_iseq_struct** %64 to i8**
  store i8* %"stackFrame_func_Test.<static-init>.i.i", i8** %65, align 8, !tbaa !44
  %66 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %63, i64 0, i32 4
  %67 = load i64*, i64** %66, align 8, !tbaa !46
  %68 = load i64, i64* %67, align 8, !tbaa !14
  %69 = and i64 %68, -129
  store i64 %69, i64* %67, align 8, !tbaa !14
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %61, %struct.rb_control_frame_struct* nonnull %63, %struct.rb_iseq_struct* %60) #10
  %70 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %63, i64 0, i32 0
  %71 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %64, align 8, !tbaa !44
  %72 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %71, i64 0, i32 2
  %73 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %72, align 8, !tbaa !47
  %74 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %73, i64 0, i32 2
  %75 = load i64*, i64** %74, align 8, !tbaa !49
  %76 = getelementptr inbounds i64, i64* %75, i64 2, !dbg !60
  store i64* %76, i64** %70, align 8, !dbg !60, !tbaa !39
  %rubyId_test_known_nil.i.i1 = load i64, i64* @rubyIdPrecomputed_test_known_nil, align 8, !dbg !62
  %rawSym.i.i = call i64 @rb_id2sym(i64 %rubyId_test_known_nil.i.i1) #10, !dbg !62
  %rubyId_normal.i.i = load i64, i64* @rubyIdPrecomputed_normal, align 8, !dbg !62
  %rawSym17.i.i = call i64 @rb_id2sym(i64 %rubyId_normal.i.i) #10, !dbg !62
  %77 = load i64, i64* @guard_epoch_Test, align 8, !dbg !62
  %78 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !62, !tbaa !63
  %needTakeSlowPath = icmp eq i64 %77, %78, !dbg !62
  br i1 %needTakeSlowPath, label %80, label %79, !dbg !62, !prof !65

79:                                               ; preds = %entry
  call void @const_recompute_Test(), !dbg !62
  br label %80, !dbg !62

80:                                               ; preds = %entry, %79
  %81 = load i64, i64* @guarded_const_Test, align 8, !dbg !62
  %82 = load i64, i64* @guard_epoch_Test, align 8, !dbg !62
  %83 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !62, !tbaa !63
  %guardUpdated = icmp eq i64 %82, %83, !dbg !62
  call void @llvm.assume(i1 %guardUpdated), !dbg !62
  call void @rb_define_singleton_method(i64 %81, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str_test_known_nil, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @func_Test.test_known_nil to i64 (...)*), i32 -1) #10, !dbg !62
  %84 = getelementptr inbounds i64, i64* %75, i64 10, !dbg !62
  store i64* %84, i64** %70, align 8, !dbg !62, !tbaa !39
  %rubyId_test_nilable_arg.i.i2 = load i64, i64* @rubyIdPrecomputed_test_nilable_arg, align 8, !dbg !66
  %rawSym22.i.i = call i64 @rb_id2sym(i64 %rubyId_test_nilable_arg.i.i2) #10, !dbg !66
  %rubyId_normal23.i.i = load i64, i64* @rubyIdPrecomputed_normal, align 8, !dbg !66
  %rawSym24.i.i = call i64 @rb_id2sym(i64 %rubyId_normal23.i.i) #10, !dbg !66
  call void @rb_define_singleton_method(i64 %81, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str_test_nilable_arg, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @func_Test.test_nilable_arg to i64 (...)*), i32 -1) #10, !dbg !66
  call void @sorbet_popRubyStack() #10, !dbg !59
  %85 = getelementptr inbounds i64, i64* %57, i64 24, !dbg !58
  store i64* %85, i64** %52, align 8, !dbg !58, !tbaa !39
  %86 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !15, !tbaa !39
  %87 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %86, i64 0, i32 2, !dbg !15
  %88 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %87, align 8, !dbg !15, !tbaa !40
  %89 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %88, i64 0, i32 1, !dbg !15
  %90 = load i64*, i64** %89, align 8, !dbg !15, !tbaa !67
  %91 = getelementptr inbounds i64, i64* %90, i64 1, !dbg !15
  store i64* %91, i64** %89, align 8, !dbg !15, !tbaa !67
  store i64 %81, i64* %90, align 8, !dbg !15, !tbaa !14
  %send.i = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* nonnull @ic_test_known_nil, i64 0) #10, !dbg !15
  %92 = getelementptr inbounds i64, i64* %57, i64 25, !dbg !15
  store i64* %92, i64** %52, align 8, !dbg !15, !tbaa !39
  %93 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !20, !tbaa !39
  %94 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %93, i64 0, i32 2, !dbg !20
  %95 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %94, align 8, !dbg !20, !tbaa !40
  %96 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %95, i64 0, i32 1, !dbg !20
  %97 = load i64*, i64** %96, align 8, !dbg !20, !tbaa !67
  %98 = getelementptr inbounds i64, i64* %97, i64 1, !dbg !20
  store i64 %81, i64* %97, align 8, !dbg !20, !tbaa !14
  %99 = getelementptr inbounds i64, i64* %97, i64 2, !dbg !20
  store i64* %99, i64** %96, align 8, !dbg !20, !tbaa !67
  store i64 21, i64* %98, align 8, !dbg !20, !tbaa !14
  %send42.i = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* nonnull @ic_test_nilable_arg, i64 0) #10, !dbg !20
  %100 = getelementptr inbounds i64, i64* %57, i64 26, !dbg !20
  store i64* %100, i64** %52, align 8, !dbg !20, !tbaa !39
  %101 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !21, !tbaa !39
  %102 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %101, i64 0, i32 2, !dbg !21
  %103 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %102, align 8, !dbg !21, !tbaa !40
  %104 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %103, i64 0, i32 1, !dbg !21
  %105 = load i64*, i64** %104, align 8, !dbg !21, !tbaa !67
  %106 = getelementptr inbounds i64, i64* %105, i64 1, !dbg !21
  store i64 %81, i64* %105, align 8, !dbg !21, !tbaa !14
  %107 = getelementptr inbounds i64, i64* %105, i64 2, !dbg !21
  store i64* %107, i64** %104, align 8, !dbg !21, !tbaa !67
  store i64 0, i64* %106, align 8, !dbg !21, !tbaa !14
  %send47.i = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* nonnull @ic_test_nilable_arg.1, i64 0) #10, !dbg !21
  %108 = getelementptr inbounds i64, i64* %57, i64 27, !dbg !21
  store i64* %108, i64** %52, align 8, !dbg !21, !tbaa !39
  %109 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !22, !tbaa !39
  %110 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %109, i64 0, i32 2, !dbg !22
  %111 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %110, align 8, !dbg !22, !tbaa !40
  %112 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %111, i64 0, i32 1, !dbg !22
  %113 = load i64*, i64** %112, align 8, !dbg !22, !tbaa !67
  %114 = getelementptr inbounds i64, i64* %113, i64 1, !dbg !22
  store i64 %81, i64* %113, align 8, !dbg !22, !tbaa !14
  %115 = getelementptr inbounds i64, i64* %113, i64 2, !dbg !22
  store i64* %115, i64** %112, align 8, !dbg !22, !tbaa !67
  store i64 8, i64* %114, align 8, !dbg !22, !tbaa !14
  %send53.i = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* nonnull @ic_test_nilable_arg.2, i64 0) #10, !dbg !22
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @func_Test.test_known_nil(i32 %argc, i64* nocapture readnone %argArray, i64 %selfRaw) #6 !dbg !25 {
functionEntryInitializers:
  %0 = alloca i64, align 8
  %1 = alloca %struct.ExceptionClosure, align 8
  %2 = alloca i64, align 8
  %3 = alloca %struct.ExceptionClosure, align 8
  %stackFrame_func_Test.test_known_nil = load i8*, i8** @stackFramePrecomputed_func_Test.test_known_nil, align 8
  %4 = bitcast i8* %stackFrame_func_Test.test_known_nil to %struct.rb_iseq_struct*
  %5 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %6 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %5, i64 0, i32 2
  %7 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %6, align 8, !tbaa !40
  %8 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %7, i64 0, i32 2
  %9 = bitcast %struct.rb_iseq_struct** %8 to i8**
  store i8* %stackFrame_func_Test.test_known_nil, i8** %9, align 8, !tbaa !44
  %10 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %7, i64 0, i32 4
  %11 = load i64*, i64** %10, align 8, !tbaa !46
  %12 = load i64, i64* %11, align 8, !tbaa !14
  %13 = and i64 %12, -129
  store i64 %13, i64* %11, align 8, !tbaa !14
  tail call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %5, %struct.rb_control_frame_struct* nonnull %7, %struct.rb_iseq_struct* %4) #10
  %14 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %7, i64 0, i32 0
  %15 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %8, align 8, !tbaa !44
  %16 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %15, i64 0, i32 2
  %17 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %16, align 8, !tbaa !47
  %18 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %17, i64 0, i32 2
  %19 = load i64*, i64** %18, align 8, !tbaa !49
  %20 = getelementptr inbounds i64, i64* %19, i64 1
  store i64* %20, i64** %14, align 8, !tbaa !39
  %exceptionValue = alloca i64, align 8, !dbg !68
  %tooManyArgs = icmp eq i32 %argc, 0, !dbg !69
  br i1 %tooManyArgs, label %fillRequiredArgs, label %argCountFailBlock, !dbg !69, !prof !70

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call void @sorbet_raiseArity(i32 %argc, i32 0, i32 0) #10, !dbg !69
  unreachable, !dbg !69

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %21 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !71
  store i64* %21, i64** %14, align 8, !dbg !71, !tbaa !39
  %previousException = tail call i64 @rb_errinfo() #10, !dbg !68
  %22 = bitcast i64* %0 to i8*, !dbg !71
  %23 = bitcast %struct.ExceptionClosure* %1 to i8*, !dbg !71
  %24 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 0, !dbg !71
  %25 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 1, !dbg !71
  %26 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 2, !dbg !71
  %27 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 3, !dbg !71
  %28 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 4, !dbg !71
  %29 = icmp eq i64 %previousException, 8, !dbg !71
  %30 = ptrtoint %struct.ExceptionClosure* %1 to i64, !dbg !71
  %31 = ptrtoint i64* %exceptionValue to i64, !dbg !71
  %32 = bitcast i64* %2 to i8*, !dbg !71
  %33 = bitcast %struct.ExceptionClosure* %3 to i8*, !dbg !71
  %34 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 0, !dbg !71
  %35 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 1, !dbg !71
  %36 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 2, !dbg !71
  %37 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 3, !dbg !71
  %38 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 4, !dbg !71
  %39 = ptrtoint %struct.ExceptionClosure* %3 to i64, !dbg !71
  br i1 %29, label %exception-entry.us, label %exception-entry, !dbg !68

exception-entry.us:                               ; preds = %fillRequiredArgs, %sorbet_try.exit.us
  %40 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !68, !tbaa !39
  %41 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %40, i64 0, i32 2, !dbg !68
  %42 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %41, align 8, !dbg !68, !tbaa !40
  %43 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %42, i64 0, i32 4, !dbg !68
  %44 = load i64*, i64** %43, align 8, !dbg !68, !tbaa !46
  %45 = load i64, i64* %44, align 8, !dbg !68, !tbaa !14
  %46 = and i64 %45, 8, !dbg !68
  %47 = icmp eq i64 %46, 0, !dbg !68
  br i1 %47, label %49, label %48, !dbg !68, !prof !70

48:                                               ; preds = %exception-entry.us
  call void @sorbet_vm_env_write_slowpath(i64* nonnull %44, i32 -3, i64 8) #10, !dbg !68
  br label %sorbet_writeLocal.exit.us, !dbg !68

49:                                               ; preds = %exception-entry.us
  %50 = getelementptr inbounds i64, i64* %44, i64 -3, !dbg !68
  store i64 8, i64* %50, align 8, !dbg !68, !tbaa !14
  br label %sorbet_writeLocal.exit.us, !dbg !68

sorbet_writeLocal.exit.us:                        ; preds = %49, %48
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #10, !dbg !68
  store i64 52, i64* %0, align 8, !dbg !68, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %23) #10, !dbg !68
  store i64 (i64**, i64*, i64)* @"func_Test.test_known_nil$block_1", i64 (i64**, i64*, i64)** %24, align 8, !dbg !68, !tbaa !4
  store i64** %14, i64*** %25, align 8, !dbg !68, !tbaa !10
  store i64* %19, i64** %26, align 8, !dbg !68, !tbaa !11
  store i64 0, i64* %27, align 8, !dbg !68, !tbaa !12
  store i64* %0, i64** %28, align 8, !dbg !68, !tbaa !13
  store i64 8, i64* %exceptionValue, align 8, !dbg !68, !tbaa !14
  %51 = load i64, i64* @rb_eException, align 8, !dbg !68, !tbaa !14
  %52 = call i64 (i64 (i64)*, i64, i64 (i64, i64)*, i64, ...) @rb_rescue2(i64 (i64)* nonnull @sorbet_applyExceptionClosure, i64 %30, i64 (i64, i64)* nonnull @sorbet_rescueStoreException, i64 %31, i64 %51, i32 0) #10, !dbg !68
  %53 = load i64, i64* %0, align 8, !dbg !68
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %23) #10, !dbg !68
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #10, !dbg !68
  %isReturnValue.us = icmp eq i64 %53, 52, !dbg !68
  br i1 %isReturnValue.us, label %exception-body-continue.us, label %exception-body-return, !dbg !68

exception-body-continue.us:                       ; preds = %sorbet_writeLocal.exit.us
  %54 = load i64, i64* %exceptionValue, align 8, !dbg !68
  %55 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !68, !tbaa !39
  %56 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %55, i64 0, i32 2, !dbg !68
  %57 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %56, align 8, !dbg !68, !tbaa !40
  %58 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %57, i64 0, i32 4, !dbg !68
  %59 = load i64*, i64** %58, align 8, !dbg !68, !tbaa !46
  %60 = load i64, i64* %59, align 8, !dbg !68, !tbaa !14
  %61 = and i64 %60, 8, !dbg !68
  %62 = icmp eq i64 %61, 0, !dbg !68
  br i1 %62, label %64, label %63, !dbg !68, !prof !70

63:                                               ; preds = %exception-body-continue.us
  call void @sorbet_vm_env_write_slowpath(i64* nonnull %59, i32 -3, i64 %54) #10, !dbg !68
  br label %sorbet_writeLocal.exit27.us, !dbg !68

64:                                               ; preds = %exception-body-continue.us
  %65 = getelementptr inbounds i64, i64* %59, i64 -3, !dbg !68
  store i64 %54, i64* %65, align 8, !dbg !68, !tbaa !14
  br label %sorbet_writeLocal.exit27.us, !dbg !68

sorbet_writeLocal.exit27.us:                      ; preds = %64, %63
  %66 = icmp ne i64 %54, 8, !dbg !68
  %handler.us = select i1 %66, i64 (i64**, i64*, i64)* @"func_Test.test_known_nil$block_2", i64 (i64**, i64*, i64)* @"func_Test.test_known_nil$block_4", !dbg !68
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #10, !dbg !68
  store i64 52, i64* %2, align 8, !dbg !68, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %33) #10, !dbg !68
  store i64 (i64**, i64*, i64)* %handler.us, i64 (i64**, i64*, i64)** %34, align 8, !dbg !68, !tbaa !4
  store i64** %14, i64*** %35, align 8, !dbg !68, !tbaa !10
  store i64* %19, i64** %36, align 8, !dbg !68, !tbaa !11
  store i64 0, i64* %37, align 8, !dbg !68, !tbaa !12
  store i64* %2, i64** %38, align 8, !dbg !68, !tbaa !13
  store i64 8, i64* %exceptionValue, align 8, !dbg !68, !tbaa !14
  %67 = icmp eq i64 %54, 8, !dbg !68
  br i1 %67, label %sorbet_try.exit.us, label %68, !dbg !68

68:                                               ; preds = %sorbet_writeLocal.exit27.us
  call void @rb_set_errinfo(i64 %54) #10, !dbg !68
  br label %sorbet_try.exit.us, !dbg !68

sorbet_try.exit.us:                               ; preds = %68, %sorbet_writeLocal.exit27.us
  %69 = load i64, i64* @rb_eException, align 8, !dbg !68, !tbaa !14
  %70 = call i64 (i64 (i64)*, i64, i64 (i64, i64)*, i64, ...) @rb_rescue2(i64 (i64)* nonnull @sorbet_applyExceptionClosure, i64 %39, i64 (i64, i64)* nonnull @sorbet_rescueStoreException, i64 %31, i64 %69, i32 0) #10, !dbg !68
  %71 = load i64, i64* %2, align 8, !dbg !68
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %33) #10, !dbg !68
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #10, !dbg !68
  %72 = load i64, i64* %exceptionValue, align 8, !dbg !68
  %73 = icmp eq i64 %72, 8, !dbg !68
  %74 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !68, !tbaa !39
  %75 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %74, i64 0, i32 2, !dbg !68
  %76 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %75, align 8, !dbg !68, !tbaa !40
  %77 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %76, i64 0, i32 4, !dbg !68
  %78 = load i64*, i64** %77, align 8, !dbg !68, !tbaa !46
  %79 = getelementptr inbounds i64, i64* %78, i64 -3, !dbg !68
  %80 = load i64, i64* %79, align 8, !dbg !68, !tbaa !14
  %81 = select i1 %73, i64 %80, i64 %72, !dbg !68
  call void @rb_set_errinfo(i64 %81) #10, !dbg !68
  %"<retry-singleton>.us" = load i64, i64* @"<retry-singleton>", align 8, !dbg !68
  %shouldRetry.us = icmp eq i64 %71, %"<retry-singleton>.us", !dbg !68
  %82 = and i1 %66, %shouldRetry.us, !dbg !68
  br i1 %82, label %exception-entry.us, label %exception-ensure, !dbg !68

exception-entry:                                  ; preds = %fillRequiredArgs, %sorbet_try.exit
  %83 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !68, !tbaa !39
  %84 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %83, i64 0, i32 2, !dbg !68
  %85 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %84, align 8, !dbg !68, !tbaa !40
  %86 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %85, i64 0, i32 4, !dbg !68
  %87 = load i64*, i64** %86, align 8, !dbg !68, !tbaa !46
  %88 = load i64, i64* %87, align 8, !dbg !68, !tbaa !14
  %89 = and i64 %88, 8, !dbg !68
  %90 = icmp eq i64 %89, 0, !dbg !68
  br i1 %90, label %91, label %93, !dbg !68, !prof !70

91:                                               ; preds = %exception-entry
  %92 = getelementptr inbounds i64, i64* %87, i64 -3, !dbg !68
  store i64 8, i64* %92, align 8, !dbg !68, !tbaa !14
  br label %sorbet_writeLocal.exit, !dbg !68

93:                                               ; preds = %exception-entry
  call void @sorbet_vm_env_write_slowpath(i64* nonnull %87, i32 -3, i64 8) #10, !dbg !68
  br label %sorbet_writeLocal.exit, !dbg !68

sorbet_writeLocal.exit:                           ; preds = %91, %93
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #10, !dbg !68
  store i64 52, i64* %0, align 8, !dbg !68, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %23) #10, !dbg !68
  store i64 (i64**, i64*, i64)* @"func_Test.test_known_nil$block_1", i64 (i64**, i64*, i64)** %24, align 8, !dbg !68, !tbaa !4
  store i64** %14, i64*** %25, align 8, !dbg !68, !tbaa !10
  store i64* %19, i64** %26, align 8, !dbg !68, !tbaa !11
  store i64 0, i64* %27, align 8, !dbg !68, !tbaa !12
  store i64* %0, i64** %28, align 8, !dbg !68, !tbaa !13
  store i64 8, i64* %exceptionValue, align 8, !dbg !68, !tbaa !14
  call void @rb_set_errinfo(i64 %previousException) #10, !dbg !68
  %94 = load i64, i64* @rb_eException, align 8, !dbg !68, !tbaa !14
  %95 = call i64 (i64 (i64)*, i64, i64 (i64, i64)*, i64, ...) @rb_rescue2(i64 (i64)* nonnull @sorbet_applyExceptionClosure, i64 %30, i64 (i64, i64)* nonnull @sorbet_rescueStoreException, i64 %31, i64 %94, i32 0) #10, !dbg !68
  %96 = load i64, i64* %0, align 8, !dbg !68
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %23) #10, !dbg !68
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #10, !dbg !68
  %isReturnValue = icmp eq i64 %96, 52, !dbg !68
  br i1 %isReturnValue, label %exception-body-continue, label %exception-body-return, !dbg !68

exception-body-return:                            ; preds = %sorbet_writeLocal.exit, %sorbet_writeLocal.exit.us
  %.lcssa = phi i64 [ %53, %sorbet_writeLocal.exit.us ], [ %96, %sorbet_writeLocal.exit ], !dbg !68
  call void @rb_set_errinfo(i64 %previousException) #10, !dbg !68
  %"stackFrame_func_Test.test_known_nil$block_31.i31" = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** bitcast (i8** @"stackFramePrecomputed_func_Test.test_known_nil$block_3" to %struct.rb_iseq_struct**), align 8
  %97 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %98 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %97, i64 0, i32 2
  %99 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %98, align 8, !tbaa !40
  call void @sorbet_setExceptionStackFrame(%struct.rb_execution_context_struct* %97, %struct.rb_control_frame_struct* %99, %struct.rb_iseq_struct* %"stackFrame_func_Test.test_known_nil$block_31.i31") #10
  %100 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %99, i64 0, i32 0
  %101 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %99, i64 0, i32 2
  %102 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %101, align 8, !tbaa !44
  %103 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %102, i64 0, i32 2
  %104 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %103, align 8, !tbaa !47
  %105 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %104, i64 0, i32 2
  %106 = load i64*, i64** %105, align 8, !tbaa !49
  %107 = getelementptr inbounds i64, i64* %106, i64 1
  store i64* %107, i64** %100, align 8, !tbaa !39
  call void @sorbet_popRubyStack() #10
  ret i64 %.lcssa, !dbg !68

exception-body-continue:                          ; preds = %sorbet_writeLocal.exit
  %108 = load i64, i64* %exceptionValue, align 8, !dbg !68
  %109 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !68, !tbaa !39
  %110 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %109, i64 0, i32 2, !dbg !68
  %111 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %110, align 8, !dbg !68, !tbaa !40
  %112 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %111, i64 0, i32 4, !dbg !68
  %113 = load i64*, i64** %112, align 8, !dbg !68, !tbaa !46
  %114 = load i64, i64* %113, align 8, !dbg !68, !tbaa !14
  %115 = and i64 %114, 8, !dbg !68
  %116 = icmp eq i64 %115, 0, !dbg !68
  br i1 %116, label %117, label %119, !dbg !68, !prof !70

117:                                              ; preds = %exception-body-continue
  %118 = getelementptr inbounds i64, i64* %113, i64 -3, !dbg !68
  store i64 %108, i64* %118, align 8, !dbg !68, !tbaa !14
  br label %sorbet_writeLocal.exit27, !dbg !68

119:                                              ; preds = %exception-body-continue
  call void @sorbet_vm_env_write_slowpath(i64* nonnull %113, i32 -3, i64 %108) #10, !dbg !68
  br label %sorbet_writeLocal.exit27, !dbg !68

sorbet_writeLocal.exit27:                         ; preds = %117, %119
  %120 = icmp ne i64 %108, 8, !dbg !68
  %handler = select i1 %120, i64 (i64**, i64*, i64)* @"func_Test.test_known_nil$block_2", i64 (i64**, i64*, i64)* @"func_Test.test_known_nil$block_4", !dbg !68
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #10, !dbg !68
  store i64 52, i64* %2, align 8, !dbg !68, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %33) #10, !dbg !68
  store i64 (i64**, i64*, i64)* %handler, i64 (i64**, i64*, i64)** %34, align 8, !dbg !68, !tbaa !4
  store i64** %14, i64*** %35, align 8, !dbg !68, !tbaa !10
  store i64* %19, i64** %36, align 8, !dbg !68, !tbaa !11
  store i64 0, i64* %37, align 8, !dbg !68, !tbaa !12
  store i64* %2, i64** %38, align 8, !dbg !68, !tbaa !13
  store i64 8, i64* %exceptionValue, align 8, !dbg !68, !tbaa !14
  %121 = icmp eq i64 %108, 8, !dbg !68
  br i1 %121, label %sorbet_try.exit, label %122, !dbg !68

122:                                              ; preds = %sorbet_writeLocal.exit27
  call void @rb_set_errinfo(i64 %108) #10, !dbg !68
  br label %sorbet_try.exit, !dbg !68

sorbet_try.exit:                                  ; preds = %sorbet_writeLocal.exit27, %122
  %123 = load i64, i64* @rb_eException, align 8, !dbg !68, !tbaa !14
  %124 = call i64 (i64 (i64)*, i64, i64 (i64, i64)*, i64, ...) @rb_rescue2(i64 (i64)* nonnull @sorbet_applyExceptionClosure, i64 %39, i64 (i64, i64)* nonnull @sorbet_rescueStoreException, i64 %31, i64 %123, i32 0) #10, !dbg !68
  %125 = load i64, i64* %2, align 8, !dbg !68
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %33) #10, !dbg !68
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #10, !dbg !68
  %126 = load i64, i64* %exceptionValue, align 8, !dbg !68
  %127 = icmp eq i64 %126, 8, !dbg !68
  %128 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !68, !tbaa !39
  %129 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %128, i64 0, i32 2, !dbg !68
  %130 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %129, align 8, !dbg !68, !tbaa !40
  %131 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %130, i64 0, i32 4, !dbg !68
  %132 = load i64*, i64** %131, align 8, !dbg !68, !tbaa !46
  %133 = getelementptr inbounds i64, i64* %132, i64 -3, !dbg !68
  %134 = load i64, i64* %133, align 8, !dbg !68, !tbaa !14
  %135 = icmp eq i64 %134, 8, !dbg !68
  %136 = select i1 %135, i64 %previousException, i64 %134, !dbg !68
  %137 = select i1 %127, i64 %136, i64 %126, !dbg !68
  call void @rb_set_errinfo(i64 %137) #10, !dbg !68
  %"<retry-singleton>" = load i64, i64* @"<retry-singleton>", align 8, !dbg !68
  %shouldRetry = icmp eq i64 %125, %"<retry-singleton>", !dbg !68
  %138 = and i1 %120, %shouldRetry, !dbg !68
  br i1 %138, label %exception-entry, label %exception-ensure, !dbg !68

exception-ensure:                                 ; preds = %sorbet_try.exit, %sorbet_try.exit.us
  %.lcssa35 = phi i64 [ %71, %sorbet_try.exit.us ], [ %125, %sorbet_try.exit ], !dbg !68
  %.lcssa34 = phi i64 [ %81, %sorbet_try.exit.us ], [ %137, %sorbet_try.exit ], !dbg !68
  %"stackFrame_func_Test.test_known_nil$block_31.i" = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** bitcast (i8** @"stackFramePrecomputed_func_Test.test_known_nil$block_3" to %struct.rb_iseq_struct**), align 8
  %139 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %140 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %139, i64 0, i32 2
  %141 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %140, align 8, !tbaa !40
  call void @sorbet_setExceptionStackFrame(%struct.rb_execution_context_struct* %139, %struct.rb_control_frame_struct* %141, %struct.rb_iseq_struct* %"stackFrame_func_Test.test_known_nil$block_31.i") #10
  %142 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %141, i64 0, i32 0
  %143 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %141, i64 0, i32 2
  %144 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %143, align 8, !tbaa !44
  %145 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %144, i64 0, i32 2
  %146 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %145, align 8, !tbaa !47
  %147 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %146, i64 0, i32 2
  %148 = load i64*, i64** %147, align 8, !tbaa !49
  %149 = getelementptr inbounds i64, i64* %148, i64 1
  store i64* %149, i64** %142, align 8, !tbaa !39
  call void @sorbet_popRubyStack() #10
  %isReturnValue13 = icmp eq i64 %.lcssa35, 52, !dbg !68
  br i1 %isReturnValue13, label %exception-continue, label %exception-return, !dbg !68

exception-continue:                               ; preds = %exception-ensure
  %150 = icmp eq i64 %.lcssa34, 8, !dbg !68
  br i1 %150, label %sorbet_raiseIfNotNil.exit28, label %151, !dbg !68

151:                                              ; preds = %exception-continue
  call void @rb_exc_raise(i64 %.lcssa34) #11, !dbg !68
  unreachable, !dbg !68

sorbet_raiseIfNotNil.exit28:                      ; preds = %exception-continue
  %152 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !68, !tbaa !39
  %153 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %152, i64 0, i32 2, !dbg !68
  %154 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %153, align 8, !dbg !68, !tbaa !40
  %155 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %154, i64 0, i32 4, !dbg !68
  %156 = load i64*, i64** %155, align 8, !dbg !68, !tbaa !46
  %157 = getelementptr inbounds i64, i64* %156, i64 -3, !dbg !68
  %158 = load i64, i64* %157, align 8, !dbg !68, !tbaa !14
  %159 = icmp eq i64 %158, 8, !dbg !68
  br i1 %159, label %sorbet_raiseIfNotNil.exit, label %160, !dbg !68

160:                                              ; preds = %sorbet_raiseIfNotNil.exit28
  call void @rb_exc_raise(i64 %158) #11, !dbg !68
  unreachable, !dbg !68

sorbet_raiseIfNotNil.exit:                        ; preds = %sorbet_raiseIfNotNil.exit28
  store i64* %20, i64** %14, align 8, !tbaa !39
  %161 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !69, !tbaa !39
  %162 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %161, i64 0, i32 2, !dbg !69
  %163 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %162, align 8, !dbg !69, !tbaa !40
  %164 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %163, i64 0, i32 4, !dbg !69
  %165 = load i64*, i64** %164, align 8, !dbg !69, !tbaa !46
  %166 = getelementptr inbounds i64, i64* %165, i64 -5, !dbg !69
  %167 = load i64, i64* %166, align 8, !dbg !69, !tbaa !14
  ret i64 %167

exception-return:                                 ; preds = %exception-ensure
  ret i64 %.lcssa35, !dbg !68
}

; Function Attrs: noreturn nounwind ssp
define internal i64 @"func_Test.test_known_nil$block_1"(i64** nocapture %pc, i64* %iseq_encoded, i64 %localsOffset) #7 !dbg !24 {
  %1 = getelementptr inbounds i64, i64* %iseq_encoded, i64 3
  store i64* %1, i64** %pc, align 8, !tbaa !39
  %2 = load i64, i64* @rb_eTypeError, align 8, !dbg !23, !tbaa !14, !noalias !72
  tail call void (i64, i8*, ...) @rb_raise(i64 %2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)) #11, !dbg !23, !noalias !72
  unreachable, !dbg !23
}

; Function Attrs: ssp
define internal i64 @"func_Test.test_known_nil$block_2"(i64** nocapture readnone %pc, i64* nocapture readnone %iseq_encoded, i64 %localsOffset) #8 !dbg !27 {
.preheader.i29:
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !40
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 3
  %4 = load i64, i64* %3, align 8, !tbaa !75
  %"stackFrame_func_Test.test_known_nil$block_224" = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** bitcast (i8** @"stackFramePrecomputed_func_Test.test_known_nil$block_2" to %struct.rb_iseq_struct**), align 8
  tail call void @sorbet_setExceptionStackFrame(%struct.rb_execution_context_struct* %0, %struct.rb_control_frame_struct* %2, %struct.rb_iseq_struct* %"stackFrame_func_Test.test_known_nil$block_224") #10
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 0
  %6 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 2
  %7 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %6, align 8, !tbaa !44
  %8 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %7, i64 0, i32 2
  %9 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %8, align 8, !tbaa !47
  %10 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %9, i64 0, i32 2
  %11 = load i64*, i64** %10, align 8, !tbaa !49
  %12 = getelementptr inbounds i64, i64* %11, i64 4
  store i64* %12, i64** %5, align 8, !tbaa !39
  %13 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !26, !tbaa !39
  %14 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %13, i64 0, i32 2, !dbg !26
  %15 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %14, align 8, !dbg !26, !tbaa !40
  %16 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %15, i64 0, i32 4, !dbg !26
  %17 = load i64*, i64** %16, align 8, !dbg !26, !tbaa !46
  %18 = getelementptr inbounds i64, i64* %17, i64 -1, !dbg !26
  %19 = load i64, i64* %18, align 8, !dbg !26, !tbaa !14
  %20 = and i64 %19, -4, !dbg !26
  %21 = inttoptr i64 %20 to i64*, !dbg !26
  %22 = getelementptr inbounds i64, i64* %21, i64 -3, !dbg !26
  %23 = load i64, i64* %22, align 8, !dbg !26, !tbaa !14
  %24 = load i64, i64* @rb_eStandardError, align 8, !dbg !26
  %25 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %15, i64 0, i32 1, !dbg !26
  %26 = load i64*, i64** %25, align 8, !dbg !26, !tbaa !67
  %27 = getelementptr inbounds i64, i64* %26, i64 1, !dbg !26
  store i64 %23, i64* %26, align 8, !dbg !26, !tbaa !14
  %28 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !26
  store i64* %28, i64** %25, align 8, !dbg !26, !tbaa !67
  store i64 %24, i64* %27, align 8, !dbg !26, !tbaa !14
  %send = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* nonnull @"ic_is_a?", i64 0), !dbg !26
  %29 = and i64 %send, -9, !dbg !26
  %30 = icmp eq i64 %29, 0, !dbg !26
  br i1 %30, label %.preheader.i, label %.preheader.i27, !dbg !26

blockExit:                                        ; preds = %84, %82, %68, %66
  tail call void @sorbet_popRubyStack()
  ret i64 52

.preheader.i27:                                   ; preds = %.preheader.i29
  %31 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !76, !tbaa !39
  %32 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %31, i64 0, i32 2, !dbg !76
  %33 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %32, align 8, !dbg !76, !tbaa !40
  %34 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %33, i64 0, i32 4, !dbg !76
  %35 = load i64*, i64** %34, align 8, !dbg !76, !tbaa !46
  %36 = getelementptr inbounds i64, i64* %35, i64 -1, !dbg !76
  %37 = load i64, i64* %36, align 8, !dbg !76, !tbaa !14
  %38 = and i64 %37, -4, !dbg !76
  %39 = inttoptr i64 %38 to i64*, !dbg !76
  %40 = load i64, i64* %39, align 8, !dbg !76, !tbaa !14
  %41 = and i64 %40, 8, !dbg !76
  %42 = icmp eq i64 %41, 0, !dbg !76
  br i1 %42, label %43, label %45, !dbg !76, !prof !70

43:                                               ; preds = %.preheader.i27
  %44 = getelementptr inbounds i64, i64* %39, i64 -3, !dbg !76
  store i64 8, i64* %44, align 8, !dbg !76, !tbaa !14
  br label %.preheader.i25, !dbg !76

45:                                               ; preds = %.preheader.i27
  tail call void @sorbet_vm_env_write_slowpath(i64* nonnull %39, i32 -3, i64 8) #10, !dbg !76
  br label %.preheader.i25, !dbg !76

.preheader.i25:                                   ; preds = %45, %43
  %46 = getelementptr inbounds i64, i64* %11, i64 5, !dbg !77
  store i64* %46, i64** %5, align 8, !dbg !77, !tbaa !39
  %47 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !28, !tbaa !39
  %48 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %47, i64 0, i32 2, !dbg !28
  %49 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %48, align 8, !dbg !28, !tbaa !40
  %50 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %49, i64 0, i32 1, !dbg !28
  %51 = load i64*, i64** %50, align 8, !dbg !28, !tbaa !67
  %52 = getelementptr inbounds i64, i64* %51, i64 1, !dbg !28
  store i64 %4, i64* %51, align 8, !dbg !28, !tbaa !14
  %53 = getelementptr inbounds i64, i64* %51, i64 2, !dbg !28
  store i64* %53, i64** %50, align 8, !dbg !28, !tbaa !67
  store i64 %23, i64* %52, align 8, !dbg !28, !tbaa !14
  %send12 = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* nonnull @ic_puts, i64 0), !dbg !28
  %54 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !28, !tbaa !39
  %55 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %54, i64 0, i32 2, !dbg !28
  %56 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %55, align 8, !dbg !28, !tbaa !40
  %57 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %56, i64 0, i32 4, !dbg !28
  %58 = load i64*, i64** %57, align 8, !dbg !28, !tbaa !46
  %59 = getelementptr inbounds i64, i64* %58, i64 -1, !dbg !28
  %60 = load i64, i64* %59, align 8, !dbg !28, !tbaa !14
  %61 = and i64 %60, -4, !dbg !28
  %62 = inttoptr i64 %61 to i64*, !dbg !28
  %63 = load i64, i64* %62, align 8, !dbg !28, !tbaa !14
  %64 = and i64 %63, 8, !dbg !28
  %65 = icmp eq i64 %64, 0, !dbg !28
  br i1 %65, label %66, label %68, !dbg !28, !prof !70

66:                                               ; preds = %.preheader.i25
  %67 = getelementptr inbounds i64, i64* %62, i64 -5, !dbg !28
  store i64 %send12, i64* %67, align 8, !dbg !28, !tbaa !14
  br label %blockExit, !dbg !28

68:                                               ; preds = %.preheader.i25
  tail call void @sorbet_vm_env_write_slowpath(i64* nonnull %62, i32 -5, i64 %send12) #10, !dbg !28
  br label %blockExit, !dbg !28

.preheader.i:                                     ; preds = %.preheader.i29
  %69 = getelementptr inbounds i64, i64* %11, i64 3
  store i64* %69, i64** %5, align 8, !tbaa !39
  %70 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !78, !tbaa !39
  %71 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %70, i64 0, i32 2, !dbg !78
  %72 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %71, align 8, !dbg !78, !tbaa !40
  %73 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %72, i64 0, i32 4, !dbg !78
  %74 = load i64*, i64** %73, align 8, !dbg !78, !tbaa !46
  %75 = getelementptr inbounds i64, i64* %74, i64 -1, !dbg !78
  %76 = load i64, i64* %75, align 8, !dbg !78, !tbaa !14
  %77 = and i64 %76, -4, !dbg !78
  %78 = inttoptr i64 %77 to i64*, !dbg !78
  %79 = load i64, i64* %78, align 8, !dbg !78, !tbaa !14
  %80 = and i64 %79, 8, !dbg !78
  %81 = icmp eq i64 %80, 0, !dbg !78
  br i1 %81, label %82, label %84, !dbg !78, !prof !70

82:                                               ; preds = %.preheader.i
  %83 = getelementptr inbounds i64, i64* %78, i64 -6, !dbg !78
  store i64 20, i64* %83, align 8, !dbg !78, !tbaa !14
  br label %blockExit, !dbg !78

84:                                               ; preds = %.preheader.i
  tail call void @sorbet_vm_env_write_slowpath(i64* nonnull %78, i32 -6, i64 20) #10, !dbg !78
  br label %blockExit, !dbg !78
}

; Function Attrs: nofree norecurse nounwind ssp writeonly
define internal i64 @"func_Test.test_known_nil$block_4"(i64** nocapture %pc, i64* %iseq_encoded, i64 %localsOffset) #9 !dbg !79 {
functionEntryInitializers:
  %0 = getelementptr inbounds i64, i64* %iseq_encoded, i64 1
  store i64* %0, i64** %pc, align 8, !tbaa !39
  ret i64 52
}

; Function Attrs: nounwind sspreq uwtable
define i64 @func_Test.test_nilable_arg(i32 %argc, i64* nocapture readonly %argArray, i64 %selfRaw) #6 !dbg !31 {
functionEntryInitializers:
  %0 = alloca i64, align 8
  %1 = alloca %struct.ExceptionClosure, align 8
  %2 = alloca i64, align 8
  %3 = alloca %struct.ExceptionClosure, align 8
  %stackFrame_func_Test.test_nilable_arg = load i8*, i8** @stackFramePrecomputed_func_Test.test_nilable_arg, align 8
  %4 = bitcast i8* %stackFrame_func_Test.test_nilable_arg to %struct.rb_iseq_struct*
  %5 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %6 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %5, i64 0, i32 2
  %7 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %6, align 8, !tbaa !40
  %8 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %7, i64 0, i32 2
  %9 = bitcast %struct.rb_iseq_struct** %8 to i8**
  store i8* %stackFrame_func_Test.test_nilable_arg, i8** %9, align 8, !tbaa !44
  %10 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %7, i64 0, i32 4
  %11 = load i64*, i64** %10, align 8, !tbaa !46
  %12 = load i64, i64* %11, align 8, !tbaa !14
  %13 = and i64 %12, -129
  store i64 %13, i64* %11, align 8, !tbaa !14
  tail call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %5, %struct.rb_control_frame_struct* nonnull %7, %struct.rb_iseq_struct* %4) #10
  %14 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %7, i64 0, i32 0
  %15 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %8, align 8, !tbaa !44
  %16 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %15, i64 0, i32 2
  %17 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %16, align 8, !tbaa !47
  %18 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %17, i64 0, i32 2
  %19 = load i64*, i64** %18, align 8, !tbaa !49
  %20 = getelementptr inbounds i64, i64* %19, i64 1
  store i64* %20, i64** %14, align 8, !tbaa !39
  %exceptionValue = alloca i64, align 8, !dbg !80
  %21 = icmp eq i32 %argc, 1, !dbg !81
  br i1 %21, label %fillRequiredArgs, label %argCountFailBlock, !dbg !81, !prof !82

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call void @sorbet_raiseArity(i32 %argc, i32 1, i32 1) #10, !dbg !81
  unreachable, !dbg !81

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %rawArg_arg = load i64, i64* %argArray, align 8, !dbg !81
  %22 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !81, !tbaa !39
  %23 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %22, i64 0, i32 2, !dbg !81
  %24 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %23, align 8, !dbg !81, !tbaa !40
  %25 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %24, i64 0, i32 4, !dbg !81
  %26 = load i64*, i64** %25, align 8, !dbg !81, !tbaa !46
  %27 = load i64, i64* %26, align 8, !dbg !81, !tbaa !14
  %28 = and i64 %27, 8, !dbg !81
  %29 = icmp eq i64 %28, 0, !dbg !81
  br i1 %29, label %30, label %32, !dbg !81, !prof !70

30:                                               ; preds = %fillRequiredArgs
  %31 = getelementptr inbounds i64, i64* %26, i64 -4, !dbg !81
  store i64 %rawArg_arg, i64* %31, align 8, !dbg !81, !tbaa !14
  br label %sorbet_writeLocal.exit, !dbg !81

32:                                               ; preds = %fillRequiredArgs
  tail call void @sorbet_vm_env_write_slowpath(i64* nonnull %26, i32 -4, i64 %rawArg_arg) #10, !dbg !81
  br label %sorbet_writeLocal.exit, !dbg !81

sorbet_writeLocal.exit:                           ; preds = %30, %32
  %33 = getelementptr inbounds i64, i64* %19, i64 3, !dbg !83
  store i64* %33, i64** %14, align 8, !dbg !83, !tbaa !39
  %previousException = tail call i64 @rb_errinfo() #10, !dbg !80
  %34 = bitcast i64* %0 to i8*, !dbg !83
  %35 = bitcast %struct.ExceptionClosure* %1 to i8*, !dbg !83
  %36 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 0, !dbg !83
  %37 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 1, !dbg !83
  %38 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 2, !dbg !83
  %39 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 3, !dbg !83
  %40 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %1, i64 0, i32 4, !dbg !83
  %41 = icmp eq i64 %previousException, 8, !dbg !83
  %42 = ptrtoint %struct.ExceptionClosure* %1 to i64, !dbg !83
  %43 = ptrtoint i64* %exceptionValue to i64, !dbg !83
  %44 = bitcast i64* %2 to i8*, !dbg !83
  %45 = bitcast %struct.ExceptionClosure* %3 to i8*, !dbg !83
  %46 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 0, !dbg !83
  %47 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 1, !dbg !83
  %48 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 2, !dbg !83
  %49 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 3, !dbg !83
  %50 = getelementptr inbounds %struct.ExceptionClosure, %struct.ExceptionClosure* %3, i64 0, i32 4, !dbg !83
  %51 = ptrtoint %struct.ExceptionClosure* %3 to i64, !dbg !83
  br i1 %41, label %exception-entry.us, label %exception-entry, !dbg !80

exception-entry.us:                               ; preds = %sorbet_writeLocal.exit, %sorbet_try.exit.us
  %52 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !80, !tbaa !39
  %53 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %52, i64 0, i32 2, !dbg !80
  %54 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %53, align 8, !dbg !80, !tbaa !40
  %55 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %54, i64 0, i32 4, !dbg !80
  %56 = load i64*, i64** %55, align 8, !dbg !80, !tbaa !46
  %57 = load i64, i64* %56, align 8, !dbg !80, !tbaa !14
  %58 = and i64 %57, 8, !dbg !80
  %59 = icmp eq i64 %58, 0, !dbg !80
  br i1 %59, label %61, label %60, !dbg !80, !prof !70

60:                                               ; preds = %exception-entry.us
  call void @sorbet_vm_env_write_slowpath(i64* nonnull %56, i32 -3, i64 8) #10, !dbg !80
  br label %sorbet_writeLocal.exit29.us, !dbg !80

61:                                               ; preds = %exception-entry.us
  %62 = getelementptr inbounds i64, i64* %56, i64 -3, !dbg !80
  store i64 8, i64* %62, align 8, !dbg !80, !tbaa !14
  br label %sorbet_writeLocal.exit29.us, !dbg !80

sorbet_writeLocal.exit29.us:                      ; preds = %61, %60
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #10, !dbg !80
  store i64 52, i64* %0, align 8, !dbg !80, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %35) #10, !dbg !80
  store i64 (i64**, i64*, i64)* @"func_Test.test_nilable_arg$block_1", i64 (i64**, i64*, i64)** %36, align 8, !dbg !80, !tbaa !4
  store i64** %14, i64*** %37, align 8, !dbg !80, !tbaa !10
  store i64* %19, i64** %38, align 8, !dbg !80, !tbaa !11
  store i64 0, i64* %39, align 8, !dbg !80, !tbaa !12
  store i64* %0, i64** %40, align 8, !dbg !80, !tbaa !13
  store i64 8, i64* %exceptionValue, align 8, !dbg !80, !tbaa !14
  %63 = load i64, i64* @rb_eException, align 8, !dbg !80, !tbaa !14
  %64 = call i64 (i64 (i64)*, i64, i64 (i64, i64)*, i64, ...) @rb_rescue2(i64 (i64)* nonnull @sorbet_applyExceptionClosure, i64 %42, i64 (i64, i64)* nonnull @sorbet_rescueStoreException, i64 %43, i64 %63, i32 0) #10, !dbg !80
  %65 = load i64, i64* %0, align 8, !dbg !80
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %35) #10, !dbg !80
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #10, !dbg !80
  %isReturnValue.us = icmp eq i64 %65, 52, !dbg !80
  br i1 %isReturnValue.us, label %exception-body-continue.us, label %exception-body-return, !dbg !80

exception-body-continue.us:                       ; preds = %sorbet_writeLocal.exit29.us
  %66 = load i64, i64* %exceptionValue, align 8, !dbg !80
  %67 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !80, !tbaa !39
  %68 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %67, i64 0, i32 2, !dbg !80
  %69 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %68, align 8, !dbg !80, !tbaa !40
  %70 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %69, i64 0, i32 4, !dbg !80
  %71 = load i64*, i64** %70, align 8, !dbg !80, !tbaa !46
  %72 = load i64, i64* %71, align 8, !dbg !80, !tbaa !14
  %73 = and i64 %72, 8, !dbg !80
  %74 = icmp eq i64 %73, 0, !dbg !80
  br i1 %74, label %76, label %75, !dbg !80, !prof !70

75:                                               ; preds = %exception-body-continue.us
  call void @sorbet_vm_env_write_slowpath(i64* nonnull %71, i32 -3, i64 %66) #10, !dbg !80
  br label %sorbet_writeLocal.exit30.us, !dbg !80

76:                                               ; preds = %exception-body-continue.us
  %77 = getelementptr inbounds i64, i64* %71, i64 -3, !dbg !80
  store i64 %66, i64* %77, align 8, !dbg !80, !tbaa !14
  br label %sorbet_writeLocal.exit30.us, !dbg !80

sorbet_writeLocal.exit30.us:                      ; preds = %76, %75
  %78 = icmp ne i64 %66, 8, !dbg !80
  %handler.us = select i1 %78, i64 (i64**, i64*, i64)* @"func_Test.test_nilable_arg$block_2", i64 (i64**, i64*, i64)* @"func_Test.test_nilable_arg$block_4", !dbg !80
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #10, !dbg !80
  store i64 52, i64* %2, align 8, !dbg !80, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %45) #10, !dbg !80
  store i64 (i64**, i64*, i64)* %handler.us, i64 (i64**, i64*, i64)** %46, align 8, !dbg !80, !tbaa !4
  store i64** %14, i64*** %47, align 8, !dbg !80, !tbaa !10
  store i64* %19, i64** %48, align 8, !dbg !80, !tbaa !11
  store i64 0, i64* %49, align 8, !dbg !80, !tbaa !12
  store i64* %2, i64** %50, align 8, !dbg !80, !tbaa !13
  store i64 8, i64* %exceptionValue, align 8, !dbg !80, !tbaa !14
  %79 = icmp eq i64 %66, 8, !dbg !80
  br i1 %79, label %sorbet_try.exit.us, label %80, !dbg !80

80:                                               ; preds = %sorbet_writeLocal.exit30.us
  call void @rb_set_errinfo(i64 %66) #10, !dbg !80
  br label %sorbet_try.exit.us, !dbg !80

sorbet_try.exit.us:                               ; preds = %80, %sorbet_writeLocal.exit30.us
  %81 = load i64, i64* @rb_eException, align 8, !dbg !80, !tbaa !14
  %82 = call i64 (i64 (i64)*, i64, i64 (i64, i64)*, i64, ...) @rb_rescue2(i64 (i64)* nonnull @sorbet_applyExceptionClosure, i64 %51, i64 (i64, i64)* nonnull @sorbet_rescueStoreException, i64 %43, i64 %81, i32 0) #10, !dbg !80
  %83 = load i64, i64* %2, align 8, !dbg !80
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %45) #10, !dbg !80
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #10, !dbg !80
  %84 = load i64, i64* %exceptionValue, align 8, !dbg !80
  %85 = icmp eq i64 %84, 8, !dbg !80
  %86 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !80, !tbaa !39
  %87 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %86, i64 0, i32 2, !dbg !80
  %88 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %87, align 8, !dbg !80, !tbaa !40
  %89 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %88, i64 0, i32 4, !dbg !80
  %90 = load i64*, i64** %89, align 8, !dbg !80, !tbaa !46
  %91 = getelementptr inbounds i64, i64* %90, i64 -3, !dbg !80
  %92 = load i64, i64* %91, align 8, !dbg !80, !tbaa !14
  %93 = select i1 %85, i64 %92, i64 %84, !dbg !80
  call void @rb_set_errinfo(i64 %93) #10, !dbg !80
  %"<retry-singleton>.us" = load i64, i64* @"<retry-singleton>", align 8, !dbg !80
  %shouldRetry.us = icmp eq i64 %83, %"<retry-singleton>.us", !dbg !80
  %94 = and i1 %78, %shouldRetry.us, !dbg !80
  br i1 %94, label %exception-entry.us, label %exception-ensure, !dbg !80

exception-entry:                                  ; preds = %sorbet_writeLocal.exit, %sorbet_try.exit
  %95 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !80, !tbaa !39
  %96 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %95, i64 0, i32 2, !dbg !80
  %97 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %96, align 8, !dbg !80, !tbaa !40
  %98 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %97, i64 0, i32 4, !dbg !80
  %99 = load i64*, i64** %98, align 8, !dbg !80, !tbaa !46
  %100 = load i64, i64* %99, align 8, !dbg !80, !tbaa !14
  %101 = and i64 %100, 8, !dbg !80
  %102 = icmp eq i64 %101, 0, !dbg !80
  br i1 %102, label %103, label %105, !dbg !80, !prof !70

103:                                              ; preds = %exception-entry
  %104 = getelementptr inbounds i64, i64* %99, i64 -3, !dbg !80
  store i64 8, i64* %104, align 8, !dbg !80, !tbaa !14
  br label %sorbet_writeLocal.exit29, !dbg !80

105:                                              ; preds = %exception-entry
  call void @sorbet_vm_env_write_slowpath(i64* nonnull %99, i32 -3, i64 8) #10, !dbg !80
  br label %sorbet_writeLocal.exit29, !dbg !80

sorbet_writeLocal.exit29:                         ; preds = %103, %105
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #10, !dbg !80
  store i64 52, i64* %0, align 8, !dbg !80, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %35) #10, !dbg !80
  store i64 (i64**, i64*, i64)* @"func_Test.test_nilable_arg$block_1", i64 (i64**, i64*, i64)** %36, align 8, !dbg !80, !tbaa !4
  store i64** %14, i64*** %37, align 8, !dbg !80, !tbaa !10
  store i64* %19, i64** %38, align 8, !dbg !80, !tbaa !11
  store i64 0, i64* %39, align 8, !dbg !80, !tbaa !12
  store i64* %0, i64** %40, align 8, !dbg !80, !tbaa !13
  store i64 8, i64* %exceptionValue, align 8, !dbg !80, !tbaa !14
  call void @rb_set_errinfo(i64 %previousException) #10, !dbg !80
  %106 = load i64, i64* @rb_eException, align 8, !dbg !80, !tbaa !14
  %107 = call i64 (i64 (i64)*, i64, i64 (i64, i64)*, i64, ...) @rb_rescue2(i64 (i64)* nonnull @sorbet_applyExceptionClosure, i64 %42, i64 (i64, i64)* nonnull @sorbet_rescueStoreException, i64 %43, i64 %106, i32 0) #10, !dbg !80
  %108 = load i64, i64* %0, align 8, !dbg !80
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %35) #10, !dbg !80
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #10, !dbg !80
  %isReturnValue = icmp eq i64 %108, 52, !dbg !80
  br i1 %isReturnValue, label %exception-body-continue, label %exception-body-return, !dbg !80

exception-body-return:                            ; preds = %sorbet_writeLocal.exit29, %sorbet_writeLocal.exit29.us
  %.lcssa = phi i64 [ %65, %sorbet_writeLocal.exit29.us ], [ %108, %sorbet_writeLocal.exit29 ], !dbg !80
  call void @rb_set_errinfo(i64 %previousException) #10, !dbg !80
  %"stackFrame_func_Test.test_nilable_arg$block_31.i34" = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** bitcast (i8** @"stackFramePrecomputed_func_Test.test_nilable_arg$block_3" to %struct.rb_iseq_struct**), align 8
  %109 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %110 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %109, i64 0, i32 2
  %111 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %110, align 8, !tbaa !40
  call void @sorbet_setExceptionStackFrame(%struct.rb_execution_context_struct* %109, %struct.rb_control_frame_struct* %111, %struct.rb_iseq_struct* %"stackFrame_func_Test.test_nilable_arg$block_31.i34") #10
  %112 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %111, i64 0, i32 0
  %113 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %111, i64 0, i32 2
  %114 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %113, align 8, !tbaa !44
  %115 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %114, i64 0, i32 2
  %116 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %115, align 8, !tbaa !47
  %117 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %116, i64 0, i32 2
  %118 = load i64*, i64** %117, align 8, !tbaa !49
  %119 = getelementptr inbounds i64, i64* %118, i64 1
  store i64* %119, i64** %112, align 8, !tbaa !39
  call void @sorbet_popRubyStack() #10
  ret i64 %.lcssa, !dbg !80

exception-body-continue:                          ; preds = %sorbet_writeLocal.exit29
  %120 = load i64, i64* %exceptionValue, align 8, !dbg !80
  %121 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !80, !tbaa !39
  %122 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %121, i64 0, i32 2, !dbg !80
  %123 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %122, align 8, !dbg !80, !tbaa !40
  %124 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %123, i64 0, i32 4, !dbg !80
  %125 = load i64*, i64** %124, align 8, !dbg !80, !tbaa !46
  %126 = load i64, i64* %125, align 8, !dbg !80, !tbaa !14
  %127 = and i64 %126, 8, !dbg !80
  %128 = icmp eq i64 %127, 0, !dbg !80
  br i1 %128, label %129, label %131, !dbg !80, !prof !70

129:                                              ; preds = %exception-body-continue
  %130 = getelementptr inbounds i64, i64* %125, i64 -3, !dbg !80
  store i64 %120, i64* %130, align 8, !dbg !80, !tbaa !14
  br label %sorbet_writeLocal.exit30, !dbg !80

131:                                              ; preds = %exception-body-continue
  call void @sorbet_vm_env_write_slowpath(i64* nonnull %125, i32 -3, i64 %120) #10, !dbg !80
  br label %sorbet_writeLocal.exit30, !dbg !80

sorbet_writeLocal.exit30:                         ; preds = %129, %131
  %132 = icmp ne i64 %120, 8, !dbg !80
  %handler = select i1 %132, i64 (i64**, i64*, i64)* @"func_Test.test_nilable_arg$block_2", i64 (i64**, i64*, i64)* @"func_Test.test_nilable_arg$block_4", !dbg !80
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #10, !dbg !80
  store i64 52, i64* %2, align 8, !dbg !80, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %45) #10, !dbg !80
  store i64 (i64**, i64*, i64)* %handler, i64 (i64**, i64*, i64)** %46, align 8, !dbg !80, !tbaa !4
  store i64** %14, i64*** %47, align 8, !dbg !80, !tbaa !10
  store i64* %19, i64** %48, align 8, !dbg !80, !tbaa !11
  store i64 0, i64* %49, align 8, !dbg !80, !tbaa !12
  store i64* %2, i64** %50, align 8, !dbg !80, !tbaa !13
  store i64 8, i64* %exceptionValue, align 8, !dbg !80, !tbaa !14
  %133 = icmp eq i64 %120, 8, !dbg !80
  br i1 %133, label %sorbet_try.exit, label %134, !dbg !80

134:                                              ; preds = %sorbet_writeLocal.exit30
  call void @rb_set_errinfo(i64 %120) #10, !dbg !80
  br label %sorbet_try.exit, !dbg !80

sorbet_try.exit:                                  ; preds = %sorbet_writeLocal.exit30, %134
  %135 = load i64, i64* @rb_eException, align 8, !dbg !80, !tbaa !14
  %136 = call i64 (i64 (i64)*, i64, i64 (i64, i64)*, i64, ...) @rb_rescue2(i64 (i64)* nonnull @sorbet_applyExceptionClosure, i64 %51, i64 (i64, i64)* nonnull @sorbet_rescueStoreException, i64 %43, i64 %135, i32 0) #10, !dbg !80
  %137 = load i64, i64* %2, align 8, !dbg !80
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %45) #10, !dbg !80
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #10, !dbg !80
  %138 = load i64, i64* %exceptionValue, align 8, !dbg !80
  %139 = icmp eq i64 %138, 8, !dbg !80
  %140 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !80, !tbaa !39
  %141 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %140, i64 0, i32 2, !dbg !80
  %142 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %141, align 8, !dbg !80, !tbaa !40
  %143 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %142, i64 0, i32 4, !dbg !80
  %144 = load i64*, i64** %143, align 8, !dbg !80, !tbaa !46
  %145 = getelementptr inbounds i64, i64* %144, i64 -3, !dbg !80
  %146 = load i64, i64* %145, align 8, !dbg !80, !tbaa !14
  %147 = icmp eq i64 %146, 8, !dbg !80
  %148 = select i1 %147, i64 %previousException, i64 %146, !dbg !80
  %149 = select i1 %139, i64 %148, i64 %138, !dbg !80
  call void @rb_set_errinfo(i64 %149) #10, !dbg !80
  %"<retry-singleton>" = load i64, i64* @"<retry-singleton>", align 8, !dbg !80
  %shouldRetry = icmp eq i64 %137, %"<retry-singleton>", !dbg !80
  %150 = and i1 %132, %shouldRetry, !dbg !80
  br i1 %150, label %exception-entry, label %exception-ensure, !dbg !80

exception-ensure:                                 ; preds = %sorbet_try.exit, %sorbet_try.exit.us
  %.lcssa38 = phi i64 [ %83, %sorbet_try.exit.us ], [ %137, %sorbet_try.exit ], !dbg !80
  %.lcssa37 = phi i64 [ %93, %sorbet_try.exit.us ], [ %149, %sorbet_try.exit ], !dbg !80
  %"stackFrame_func_Test.test_nilable_arg$block_31.i" = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** bitcast (i8** @"stackFramePrecomputed_func_Test.test_nilable_arg$block_3" to %struct.rb_iseq_struct**), align 8
  %151 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %152 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %151, i64 0, i32 2
  %153 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %152, align 8, !tbaa !40
  call void @sorbet_setExceptionStackFrame(%struct.rb_execution_context_struct* %151, %struct.rb_control_frame_struct* %153, %struct.rb_iseq_struct* %"stackFrame_func_Test.test_nilable_arg$block_31.i") #10
  %154 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %153, i64 0, i32 0
  %155 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %153, i64 0, i32 2
  %156 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %155, align 8, !tbaa !44
  %157 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %156, i64 0, i32 2
  %158 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %157, align 8, !tbaa !47
  %159 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %158, i64 0, i32 2
  %160 = load i64*, i64** %159, align 8, !tbaa !49
  %161 = getelementptr inbounds i64, i64* %160, i64 1
  store i64* %161, i64** %154, align 8, !tbaa !39
  call void @sorbet_popRubyStack() #10
  %isReturnValue13 = icmp eq i64 %.lcssa38, 52, !dbg !80
  br i1 %isReturnValue13, label %exception-continue, label %exception-return, !dbg !80

exception-continue:                               ; preds = %exception-ensure
  %162 = icmp eq i64 %.lcssa37, 8, !dbg !80
  br i1 %162, label %sorbet_raiseIfNotNil.exit, label %163, !dbg !80

163:                                              ; preds = %exception-continue
  call void @rb_exc_raise(i64 %.lcssa37) #11, !dbg !80
  unreachable, !dbg !80

sorbet_raiseIfNotNil.exit:                        ; preds = %exception-continue
  %164 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !80, !tbaa !39
  %165 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %164, i64 0, i32 2, !dbg !80
  %166 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %165, align 8, !dbg !80, !tbaa !40
  %167 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %166, i64 0, i32 4, !dbg !80
  %168 = load i64*, i64** %167, align 8, !dbg !80, !tbaa !46
  %169 = getelementptr inbounds i64, i64* %168, i64 -3, !dbg !80
  %170 = load i64, i64* %169, align 8, !dbg !80, !tbaa !14
  %171 = icmp eq i64 %170, 8, !dbg !80
  br i1 %171, label %sorbet_raiseIfNotNil.exit31, label %172, !dbg !80

172:                                              ; preds = %sorbet_raiseIfNotNil.exit
  call void @rb_exc_raise(i64 %170) #11, !dbg !80
  unreachable, !dbg !80

sorbet_raiseIfNotNil.exit31:                      ; preds = %sorbet_raiseIfNotNil.exit
  store i64* %20, i64** %14, align 8, !tbaa !39
  %173 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !81, !tbaa !39
  %174 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %173, i64 0, i32 2, !dbg !81
  %175 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %174, align 8, !dbg !81, !tbaa !40
  %176 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %175, i64 0, i32 4, !dbg !81
  %177 = load i64*, i64** %176, align 8, !dbg !81, !tbaa !46
  %178 = getelementptr inbounds i64, i64* %177, i64 -6, !dbg !81
  %179 = load i64, i64* %178, align 8, !dbg !81, !tbaa !14
  ret i64 %179

exception-return:                                 ; preds = %exception-ensure
  ret i64 %.lcssa38, !dbg !80
}

; Function Attrs: ssp
define internal i64 @"func_Test.test_nilable_arg$block_1"(i64** nocapture %pc, i64* %iseq_encoded, i64 %localsOffset) #8 !dbg !30 {
fastSymCallIntrinsic_T_must:
  %callArgs = alloca [3 x i64], align 8
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !40
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 3
  %4 = load i64, i64* %3, align 8, !tbaa !75
  %5 = getelementptr inbounds i64, i64* %iseq_encoded, i64 3
  store i64* %5, i64** %pc, align 8, !tbaa !39
  %6 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !29, !tbaa !39
  %7 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %6, i64 0, i32 2, !dbg !29
  %8 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %7, align 8, !dbg !29, !tbaa !40
  %9 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %8, i64 0, i32 4, !dbg !29
  %10 = load i64*, i64** %9, align 8, !dbg !29, !tbaa !46
  %11 = getelementptr inbounds i64, i64* %10, i64 -4, !dbg !29
  %12 = load i64, i64* %11, align 8, !dbg !29, !tbaa !14
  %callArgs0Addr = getelementptr inbounds [3 x i64], [3 x i64]* %callArgs, i64 0, i64 0, !dbg !29
  store i64 %12, i64* %callArgs0Addr, align 8, !dbg !29
  %13 = icmp eq i64 %12, 8, !dbg !29
  br i1 %13, label %40, label %afterSend, !dbg !29, !prof !84

afterSend:                                        ; preds = %fastSymCallIntrinsic_T_must
  %14 = getelementptr inbounds i64, i64* %iseq_encoded, i64 4, !dbg !29
  store i64* %14, i64** %pc, align 8, !dbg !29, !tbaa !39
  %"rubyStr_ wasn't nil" = load i64, i64* @"rubyStrFrozen_ wasn't nil", align 8, !dbg !85
  %15 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !86, !tbaa !39
  %16 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %15, i64 0, i32 2, !dbg !86
  %17 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %16, align 8, !dbg !86, !tbaa !40
  %18 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %17, i64 0, i32 4, !dbg !86
  %19 = load i64*, i64** %18, align 8, !dbg !86, !tbaa !46
  %20 = getelementptr inbounds i64, i64* %19, i64 -4, !dbg !86
  %21 = load i64, i64* %20, align 8, !dbg !86, !tbaa !14
  store i64 %21, i64* %callArgs0Addr, align 8, !dbg !86
  %callArgs1Addr = getelementptr inbounds [3 x i64], [3 x i64]* %callArgs, i64 0, i64 1, !dbg !86
  store i64 %"rubyStr_ wasn't nil", i64* %callArgs1Addr, align 8, !dbg !86
  %"rubyId_<string-interpolate>" = load i64, i64* @"rubyIdPrecomputed_<string-interpolate>", align 8, !dbg !86
  %rawSendResult11 = call i64 @sorbet_stringInterpolate(i64 8, i64 %"rubyId_<string-interpolate>", i32 2, i64* nonnull %callArgs0Addr, i64 (i64, i64, i32, i64*, i64)* null, i64 0), !dbg !86
  %22 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !32, !tbaa !39
  %23 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %22, i64 0, i32 2, !dbg !32
  %24 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %23, align 8, !dbg !32, !tbaa !40
  %25 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %24, i64 0, i32 1, !dbg !32
  %26 = load i64*, i64** %25, align 8, !dbg !32, !tbaa !67
  %27 = getelementptr inbounds i64, i64* %26, i64 1, !dbg !32
  store i64 %4, i64* %26, align 8, !dbg !32, !tbaa !14
  %28 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !32
  store i64* %28, i64** %25, align 8, !dbg !32, !tbaa !67
  store i64 %rawSendResult11, i64* %27, align 8, !dbg !32, !tbaa !14
  %send16 = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* nonnull @ic_puts.4, i64 0), !dbg !32
  %29 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !32, !tbaa !39
  %30 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %29, i64 0, i32 2, !dbg !32
  %31 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %30, align 8, !dbg !32, !tbaa !40
  %32 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %31, i64 0, i32 4, !dbg !32
  %33 = load i64*, i64** %32, align 8, !dbg !32, !tbaa !46
  %34 = load i64, i64* %33, align 8, !dbg !32, !tbaa !14
  %35 = and i64 %34, 8, !dbg !32
  %36 = icmp eq i64 %35, 0, !dbg !32
  br i1 %36, label %37, label %39, !dbg !32, !prof !70

37:                                               ; preds = %afterSend
  %38 = getelementptr inbounds i64, i64* %33, i64 -6, !dbg !32
  store i64 %send16, i64* %38, align 8, !dbg !32, !tbaa !14
  br label %sorbet_writeLocal.exit, !dbg !32

39:                                               ; preds = %afterSend
  call void @sorbet_vm_env_write_slowpath(i64* nonnull %33, i32 -6, i64 %send16) #10, !dbg !32
  br label %sorbet_writeLocal.exit, !dbg !32

sorbet_writeLocal.exit:                           ; preds = %37, %39
  store i64* %5, i64** %pc, align 8, !dbg !32, !tbaa !39
  ret i64 52

40:                                               ; preds = %fastSymCallIntrinsic_T_must
  %41 = load i64, i64* @rb_eTypeError, align 8, !dbg !29, !tbaa !14, !noalias !87
  tail call void (i64, i8*, ...) @rb_raise(i64 %41, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)) #11, !dbg !29, !noalias !87
  unreachable, !dbg !29
}

; Function Attrs: ssp
define internal i64 @"func_Test.test_nilable_arg$block_2"(i64** nocapture readnone %pc, i64* nocapture readnone %iseq_encoded, i64 %localsOffset) #8 !dbg !34 {
.preheader.i29:
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !40
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 3
  %4 = load i64, i64* %3, align 8, !tbaa !75
  %"stackFrame_func_Test.test_nilable_arg$block_224" = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** bitcast (i8** @"stackFramePrecomputed_func_Test.test_nilable_arg$block_2" to %struct.rb_iseq_struct**), align 8
  tail call void @sorbet_setExceptionStackFrame(%struct.rb_execution_context_struct* %0, %struct.rb_control_frame_struct* %2, %struct.rb_iseq_struct* %"stackFrame_func_Test.test_nilable_arg$block_224") #10
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 0
  %6 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 2
  %7 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %6, align 8, !tbaa !44
  %8 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %7, i64 0, i32 2
  %9 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %8, align 8, !tbaa !47
  %10 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %9, i64 0, i32 2
  %11 = load i64*, i64** %10, align 8, !tbaa !49
  %12 = getelementptr inbounds i64, i64* %11, i64 5
  store i64* %12, i64** %5, align 8, !tbaa !39
  %13 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !33, !tbaa !39
  %14 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %13, i64 0, i32 2, !dbg !33
  %15 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %14, align 8, !dbg !33, !tbaa !40
  %16 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %15, i64 0, i32 4, !dbg !33
  %17 = load i64*, i64** %16, align 8, !dbg !33, !tbaa !46
  %18 = getelementptr inbounds i64, i64* %17, i64 -1, !dbg !33
  %19 = load i64, i64* %18, align 8, !dbg !33, !tbaa !14
  %20 = and i64 %19, -4, !dbg !33
  %21 = inttoptr i64 %20 to i64*, !dbg !33
  %22 = getelementptr inbounds i64, i64* %21, i64 -3, !dbg !33
  %23 = load i64, i64* %22, align 8, !dbg !33, !tbaa !14
  %24 = load i64, i64* @rb_eStandardError, align 8, !dbg !33
  %25 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %15, i64 0, i32 1, !dbg !33
  %26 = load i64*, i64** %25, align 8, !dbg !33, !tbaa !67
  %27 = getelementptr inbounds i64, i64* %26, i64 1, !dbg !33
  store i64 %23, i64* %26, align 8, !dbg !33, !tbaa !14
  %28 = getelementptr inbounds i64, i64* %26, i64 2, !dbg !33
  store i64* %28, i64** %25, align 8, !dbg !33, !tbaa !67
  store i64 %24, i64* %27, align 8, !dbg !33, !tbaa !14
  %send = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* nonnull @"ic_is_a?.5", i64 0), !dbg !33
  %29 = and i64 %send, -9, !dbg !33
  %30 = icmp eq i64 %29, 0, !dbg !33
  br i1 %30, label %.preheader.i, label %.preheader.i27, !dbg !33

blockExit:                                        ; preds = %84, %82, %68, %66
  tail call void @sorbet_popRubyStack()
  ret i64 52

.preheader.i27:                                   ; preds = %.preheader.i29
  %31 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !90, !tbaa !39
  %32 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %31, i64 0, i32 2, !dbg !90
  %33 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %32, align 8, !dbg !90, !tbaa !40
  %34 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %33, i64 0, i32 4, !dbg !90
  %35 = load i64*, i64** %34, align 8, !dbg !90, !tbaa !46
  %36 = getelementptr inbounds i64, i64* %35, i64 -1, !dbg !90
  %37 = load i64, i64* %36, align 8, !dbg !90, !tbaa !14
  %38 = and i64 %37, -4, !dbg !90
  %39 = inttoptr i64 %38 to i64*, !dbg !90
  %40 = load i64, i64* %39, align 8, !dbg !90, !tbaa !14
  %41 = and i64 %40, 8, !dbg !90
  %42 = icmp eq i64 %41, 0, !dbg !90
  br i1 %42, label %43, label %45, !dbg !90, !prof !70

43:                                               ; preds = %.preheader.i27
  %44 = getelementptr inbounds i64, i64* %39, i64 -3, !dbg !90
  store i64 8, i64* %44, align 8, !dbg !90, !tbaa !14
  br label %.preheader.i25, !dbg !90

45:                                               ; preds = %.preheader.i27
  tail call void @sorbet_vm_env_write_slowpath(i64* nonnull %39, i32 -3, i64 8) #10, !dbg !90
  br label %.preheader.i25, !dbg !90

.preheader.i25:                                   ; preds = %45, %43
  %46 = getelementptr inbounds i64, i64* %11, i64 6, !dbg !91
  store i64* %46, i64** %5, align 8, !dbg !91, !tbaa !39
  %47 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !35, !tbaa !39
  %48 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %47, i64 0, i32 2, !dbg !35
  %49 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %48, align 8, !dbg !35, !tbaa !40
  %50 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %49, i64 0, i32 1, !dbg !35
  %51 = load i64*, i64** %50, align 8, !dbg !35, !tbaa !67
  %52 = getelementptr inbounds i64, i64* %51, i64 1, !dbg !35
  store i64 %4, i64* %51, align 8, !dbg !35, !tbaa !14
  %53 = getelementptr inbounds i64, i64* %51, i64 2, !dbg !35
  store i64* %53, i64** %50, align 8, !dbg !35, !tbaa !67
  store i64 %23, i64* %52, align 8, !dbg !35, !tbaa !14
  %send12 = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* nonnull @ic_puts.6, i64 0), !dbg !35
  %54 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !35, !tbaa !39
  %55 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %54, i64 0, i32 2, !dbg !35
  %56 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %55, align 8, !dbg !35, !tbaa !40
  %57 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %56, i64 0, i32 4, !dbg !35
  %58 = load i64*, i64** %57, align 8, !dbg !35, !tbaa !46
  %59 = getelementptr inbounds i64, i64* %58, i64 -1, !dbg !35
  %60 = load i64, i64* %59, align 8, !dbg !35, !tbaa !14
  %61 = and i64 %60, -4, !dbg !35
  %62 = inttoptr i64 %61 to i64*, !dbg !35
  %63 = load i64, i64* %62, align 8, !dbg !35, !tbaa !14
  %64 = and i64 %63, 8, !dbg !35
  %65 = icmp eq i64 %64, 0, !dbg !35
  br i1 %65, label %66, label %68, !dbg !35, !prof !70

66:                                               ; preds = %.preheader.i25
  %67 = getelementptr inbounds i64, i64* %62, i64 -6, !dbg !35
  store i64 %send12, i64* %67, align 8, !dbg !35, !tbaa !14
  br label %blockExit, !dbg !35

68:                                               ; preds = %.preheader.i25
  tail call void @sorbet_vm_env_write_slowpath(i64* nonnull %62, i32 -6, i64 %send12) #10, !dbg !35
  br label %blockExit, !dbg !35

.preheader.i:                                     ; preds = %.preheader.i29
  %69 = getelementptr inbounds i64, i64* %11, i64 3
  store i64* %69, i64** %5, align 8, !tbaa !39
  %70 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !92, !tbaa !39
  %71 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %70, i64 0, i32 2, !dbg !92
  %72 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %71, align 8, !dbg !92, !tbaa !40
  %73 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %72, i64 0, i32 4, !dbg !92
  %74 = load i64*, i64** %73, align 8, !dbg !92, !tbaa !46
  %75 = getelementptr inbounds i64, i64* %74, i64 -1, !dbg !92
  %76 = load i64, i64* %75, align 8, !dbg !92, !tbaa !14
  %77 = and i64 %76, -4, !dbg !92
  %78 = inttoptr i64 %77 to i64*, !dbg !92
  %79 = load i64, i64* %78, align 8, !dbg !92, !tbaa !14
  %80 = and i64 %79, 8, !dbg !92
  %81 = icmp eq i64 %80, 0, !dbg !92
  br i1 %81, label %82, label %84, !dbg !92, !prof !70

82:                                               ; preds = %.preheader.i
  %83 = getelementptr inbounds i64, i64* %78, i64 -7, !dbg !92
  store i64 20, i64* %83, align 8, !dbg !92, !tbaa !14
  br label %blockExit, !dbg !92

84:                                               ; preds = %.preheader.i
  tail call void @sorbet_vm_env_write_slowpath(i64* nonnull %78, i32 -7, i64 20) #10, !dbg !92
  br label %blockExit, !dbg !92
}

; Function Attrs: nofree norecurse nounwind ssp writeonly
define internal i64 @"func_Test.test_nilable_arg$block_4"(i64** nocapture, i64*, i64) #9 {
  %4 = getelementptr inbounds i64, i64* %1, i64 1
  store i64* %4, i64** %0, align 8, !tbaa !39
  ret i64 52
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #10

; Function Attrs: ssp
define linkonce void @const_recompute_Test() local_unnamed_addr #8 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_Test, i64 0, i64 0), i64 4)
  store i64 %1, i64* @guarded_const_Test, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !63
  store i64 %2, i64* @guard_epoch_Test, align 8
  ret void
}

attributes #0 = { noreturn }
attributes #1 = { "addedToSilenceEmptyAttrsError" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly }
attributes #5 = { sspreq }
attributes #6 = { nounwind sspreq uwtable }
attributes #7 = { noreturn nounwind ssp }
attributes #8 = { ssp }
attributes #9 = { nofree norecurse nounwind ssp writeonly }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "Sorbet LLVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "test/testdata/compiler/intrinsics/t_must.rb", directory: ".")
!3 = !{}
!4 = !{!5, !6, i64 0}
!5 = !{!"ExceptionClosure", !6, i64 0, !6, i64 8, !6, i64 16, !9, i64 24, !6, i64 32}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"long", !7, i64 0}
!10 = !{!5, !6, i64 8}
!11 = !{!5, !6, i64 16}
!12 = !{!5, !9, i64 24}
!13 = !{!5, !6, i64 32}
!14 = !{!9, !9, i64 0}
!15 = !DILocation(line: 24, column: 1, scope: !16)
!16 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.<static-init>$152", scope: null, file: !2, line: 5, type: !17, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!17 = !DISubroutineType(types: !18)
!18 = !{!19}
!19 = !DIBasicType(name: "VALUE", size: 64, encoding: DW_ATE_signed)
!20 = !DILocation(line: 25, column: 1, scope: !16)
!21 = !DILocation(line: 26, column: 1, scope: !16)
!22 = !DILocation(line: 27, column: 1, scope: !16)
!23 = !DILocation(line: 8, column: 7, scope: !24)
!24 = distinct !DISubprogram(name: "Test.test_known_nil", linkageName: "func_Test.test_known_nil$block_1", scope: !25, file: !2, line: 6, type: !17, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!25 = distinct !DISubprogram(name: "Test.test_known_nil", linkageName: "func_Test.test_known_nil", scope: null, file: !2, line: 6, type: !17, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!26 = !DILocation(line: 9, column: 15, scope: !27)
!27 = distinct !DISubprogram(name: "Test.test_known_nil", linkageName: "func_Test.test_known_nil$block_2", scope: !25, file: !2, line: 6, type: !17, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!28 = !DILocation(line: 10, column: 7, scope: !27)
!29 = !DILocation(line: 16, column: 7, scope: !30)
!30 = distinct !DISubprogram(name: "Test.test_nilable_arg", linkageName: "func_Test.test_nilable_arg$block_1", scope: !31, file: !2, line: 14, type: !17, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!31 = distinct !DISubprogram(name: "Test.test_nilable_arg", linkageName: "func_Test.test_nilable_arg", scope: null, file: !2, line: 14, type: !17, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!32 = !DILocation(line: 17, column: 7, scope: !30)
!33 = !DILocation(line: 18, column: 15, scope: !34)
!34 = distinct !DISubprogram(name: "Test.test_nilable_arg", linkageName: "func_Test.test_nilable_arg$block_2", scope: !31, file: !2, line: 14, type: !17, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!35 = !DILocation(line: 19, column: 7, scope: !34)
!36 = !DILocation(line: 6, column: 3, scope: !37)
!37 = distinct !DISubprogram(name: "Test.<static-init>", linkageName: "func_Test.<static-init>L62", scope: null, file: !2, line: 5, type: !17, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!38 = !DILocation(line: 14, column: 3, scope: !37)
!39 = !{!6, !6, i64 0}
!40 = !{!41, !6, i64 16}
!41 = !{!"rb_execution_context_struct", !6, i64 0, !9, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !42, i64 40, !42, i64 44, !6, i64 48, !6, i64 56, !6, i64 64, !9, i64 72, !9, i64 80, !6, i64 88, !9, i64 96, !6, i64 104, !6, i64 112, !9, i64 120, !9, i64 128, !7, i64 136, !7, i64 137, !9, i64 144, !43, i64 152}
!42 = !{!"int", !7, i64 0}
!43 = !{!"", !6, i64 0, !6, i64 8, !9, i64 16, !7, i64 24}
!44 = !{!45, !6, i64 16}
!45 = !{!"rb_control_frame_struct", !6, i64 0, !6, i64 8, !6, i64 16, !9, i64 24, !6, i64 32, !6, i64 40, !6, i64 48}
!46 = !{!45, !6, i64 32}
!47 = !{!48, !6, i64 16}
!48 = !{!"rb_iseq_struct", !9, i64 0, !9, i64 8, !6, i64 16, !7, i64 24}
!49 = !{!50, !6, i64 8}
!50 = !{!"rb_iseq_constant_body", !7, i64 0, !42, i64 4, !6, i64 8, !51, i64 16, !53, i64 64, !56, i64 120, !6, i64 152, !6, i64 160, !6, i64 168, !6, i64 176, !6, i64 184, !6, i64 192, !57, i64 200, !42, i64 232, !42, i64 236, !42, i64 240, !42, i64 244, !42, i64 248, !7, i64 252, !9, i64 256}
!51 = !{!"", !52, i64 0, !42, i64 4, !42, i64 8, !42, i64 12, !42, i64 16, !42, i64 20, !42, i64 24, !42, i64 28, !6, i64 32, !6, i64 40}
!52 = !{!"", !42, i64 0, !42, i64 0, !42, i64 0, !42, i64 0, !42, i64 0, !42, i64 0, !42, i64 0, !42, i64 0, !42, i64 1, !42, i64 1}
!53 = !{!"rb_iseq_location_struct", !9, i64 0, !9, i64 8, !9, i64 16, !9, i64 24, !42, i64 32, !54, i64 36}
!54 = !{!"rb_code_location_struct", !55, i64 0, !55, i64 8}
!55 = !{!"rb_code_position_struct", !42, i64 0, !42, i64 4}
!56 = !{!"iseq_insn_info", !6, i64 0, !6, i64 8, !42, i64 16, !6, i64 24}
!57 = !{!"", !9, i64 0, !9, i64 8, !9, i64 16, !6, i64 24}
!58 = !DILocation(line: 0, scope: !16)
!59 = !DILocation(line: 5, column: 1, scope: !16)
!60 = !DILocation(line: 0, scope: !37, inlinedAt: !61)
!61 = distinct !DILocation(line: 5, column: 1, scope: !16)
!62 = !DILocation(line: 6, column: 3, scope: !37, inlinedAt: !61)
!63 = !{!64, !64, i64 0}
!64 = !{!"long long", !7, i64 0}
!65 = !{!"branch_weights", i32 10000, i32 1}
!66 = !DILocation(line: 14, column: 3, scope: !37, inlinedAt: !61)
!67 = !{!45, !6, i64 8}
!68 = !DILocation(line: 8, column: 7, scope: !25)
!69 = !DILocation(line: 6, column: 3, scope: !25)
!70 = !{!"branch_weights", i32 2000, i32 1}
!71 = !DILocation(line: 0, scope: !25)
!72 = !{!73}
!73 = distinct !{!73, !74, !"sorbet_T_must: argument 0"}
!74 = distinct !{!74, !"sorbet_T_must"}
!75 = !{!45, !9, i64 24}
!76 = !DILocation(line: 0, scope: !27)
!77 = !DILocation(line: 9, column: 5, scope: !27)
!78 = !DILocation(line: 8, column: 7, scope: !27)
!79 = distinct !DISubprogram(name: "Test.test_known_nil", linkageName: "func_Test.test_known_nil$block_4", scope: !25, file: !2, line: 6, type: !17, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!80 = !DILocation(line: 16, column: 7, scope: !31)
!81 = !DILocation(line: 14, column: 3, scope: !31)
!82 = !{!"branch_weights", i32 4000000, i32 4001}
!83 = !DILocation(line: 0, scope: !31)
!84 = !{!"branch_weights", i32 1, i32 2000}
!85 = !DILocation(line: 17, column: 19, scope: !30)
!86 = !DILocation(line: 17, column: 12, scope: !30)
!87 = !{!88}
!88 = distinct !{!88, !89, !"sorbet_T_must: argument 0"}
!89 = distinct !{!89, !"sorbet_T_must"}
!90 = !DILocation(line: 0, scope: !34)
!91 = !DILocation(line: 18, column: 5, scope: !34)
!92 = !DILocation(line: 16, column: 7, scope: !34)
