; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %union.pthread_mutex_t, %union.anon.12, %union.anon.12, %union.anon.12, %union.anon.12, i64, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.18, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %union.anon.12, %union.pthread_mutex_t, i64, i64, i64, i64, i64, i32, i64, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.anon.19, [28 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %union.pthread_mutex_t, %union.anon.12, %struct.rb_thread_struct*, i32, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32 }
%union.pthread_cond_t = type { %struct.anon.14 }
%struct.anon.14 = type { i32, i32, i64, i64, i64, i8*, i32, i32 }
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, i64, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %union.pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.15, i32, i64, %struct.rb_fiber_struct*, [1 x %struct.__jmp_buf_tag], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.11 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.8 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon.1, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_info*, %struct.rb_call_cache*, %struct.anon.7, i32, i32, i32, i32, i32, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*)*, i64, %struct.rb_mjit_unit*, i8 }
%struct.anon.1 = type { %struct.anon.2, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.2 = type { i8, [3 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.rb_code_position_struct*, i32*, i32, %struct.succ_index_table* }
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, %union.anon.0 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.anon.2 }
%union.anon.0 = type { i64 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.rb_call_cache = type { i64, i64, %struct.rb_callable_method_entry_struct*, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_info*, %struct.rb_call_cache*)*, %union.anon.6 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon.5, i64 }
%union.anon.5 = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64 (...)*, i64, i32, i64*)*, i32 }
%union.anon.6 = type { i32 }
%struct.anon.7 = type { i64, i64, i64, i64* }
%struct.rb_mjit_unit = type opaque
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [1 x %struct.__jmp_buf_tag], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (...)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.11 = type { i64*, i64*, i64, [1 x %struct.__jmp_buf_tag] }
%struct.rb_calling_info = type { i64, i64, i32 }
%struct.native_thread_data_struct = type { %union.anon.12, %union.anon.13 }
%union.anon.13 = type { %union.pthread_cond_t }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.15 = type { %struct.RBasic }
%struct.RBasic = type { i64, i64 }
%struct.rb_fiber_struct = type opaque
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.anon.18 = type { [65 x i64], [65 x i8] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%union.anon.12 = type { %struct.list_node }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (...)*, i64 (...)* }
%struct.st_table_entry = type opaque
%struct.anon.19 = type { i64, i64, i64, i64 }
%struct.FunctionInlineCache = type { %struct.rb_callable_method_entry_struct*, i64, i64 }

@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.1 = private unnamed_addr constant [95 x i8] c"sorbet_getBuildSCMRevision: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@.str.2 = private unnamed_addr constant [93 x i8] c"sorbet_getIsReleaseBuild: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@ruby_current_vm_ptr = external local_unnamed_addr global %struct.rb_vm_struct*, align 8
@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@.str.17 = private unnamed_addr constant [24 x i8] c"$__sorbet_ruby_realpath\00", align 1
@.str.18 = private unnamed_addr constant [63 x i8] c"Invalid '$__sorbet_ruby_realpath' when loading compiled module\00", align 1
@"stackFramePrecomputed_func_Object#doubleCast" = internal unnamed_addr global i8* null, align 8
@rubyIdPrecomputed_doubleCast = internal unnamed_addr global i64 0, align 8
@str_doubleCast = private unnamed_addr constant [11 x i8] c"doubleCast\00", align 1
@rubyStrFrozen_doubleCast = internal unnamed_addr global i64 0, align 8
@"rubyStrFrozen_test/testdata/compiler/repeated_casts.rb" = internal unnamed_addr global i64 0, align 8
@"str_test/testdata/compiler/repeated_casts.rb" = private unnamed_addr constant [41 x i8] c"test/testdata/compiler/repeated_casts.rb\00", align 1
@str_Object = private unnamed_addr constant [7 x i8] c"Object\00", align 1
@str_cast = private unnamed_addr constant [5 x i8] c"cast\00", align 1
@str_A = private unnamed_addr constant [2 x i8] c"A\00", align 1
@ic_call_via_vm_foo = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_foo = internal unnamed_addr global i64 0, align 8
@str_foo = private unnamed_addr constant [4 x i8] c"foo\00", align 1
@ic_call_via_vm_foo.1 = internal global %struct.FunctionInlineCache zeroinitializer
@"stackFramePrecomputed_func_<root>.<static-init>$153" = internal unnamed_addr global i8* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"rubyStrFrozen_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_T.class_of(<root>)" = private unnamed_addr constant [19 x i8] c"T.class_of(<root>)\00", align 1
@str_keep_def = private unnamed_addr constant [9 x i8] c"keep_def\00", align 1
@"stackFramePrecomputed_func_A#foo" = internal unnamed_addr global i8* null, align 8
@"stackFramePrecomputed_func_A.<static-init>" = internal unnamed_addr global i8* null, align 8
@"<static-init-locals-storage>.2" = internal global [0 x i64] zeroinitializer
@rb_cObject = external local_unnamed_addr constant i64
@guard_epoch_A = linkonce local_unnamed_addr global i64 0
@guarded_const_A = linkonce local_unnamed_addr global i64 0

; Function Attrs: nounwind ssp uwtable
define weak i8* @sorbet_getBuildSCMRevision() local_unnamed_addr #0 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.1, i64 0, i64 0)) #14
  unreachable
}

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define weak i32 @sorbet_getIsReleaseBuild() local_unnamed_addr #0 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.2, i64 0, i64 0)) #14
  unreachable
}

declare i64 @rb_fstring_new(i8*, i64) local_unnamed_addr #2

declare void @rb_gc_register_mark_object(i64) local_unnamed_addr #2

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #2

declare i64 @rb_id2sym(i64) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
declare i64 @sorbet_getConstant(i8*, i64) local_unnamed_addr #3

declare i64 @rb_define_class(i8*, i64) local_unnamed_addr #2

declare void @rb_define_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind optsize ssp uwtable
declare void @sorbet_cast_failure(i64, i8*, i8*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind ssp uwtable
declare void @sorbet_raiseArity(i32, i32, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
declare i8* @sorbet_allocateRubyStackFrame(i64, i64, i64, i64, i8*, i32, i32, i32, i64* nocapture readonly, i32) local_unnamed_addr #0

declare i64 @rb_gv_get(i8*) local_unnamed_addr #2

declare i64 @rb_gv_set(i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
declare %struct.rb_control_frame_struct* @sorbet_setRubyStackFrame(i1 zeroext, i32, i8*) local_unnamed_addr #0

; Function Attrs: nounwind readnone
declare i64 @rb_obj_is_kind_of(i64, i64) local_unnamed_addr #6

; Function Attrs: alwaysinline norecurse nounwind readonly ssp uwtable
declare i64 @sorbet_getConstantEpoch() local_unnamed_addr #7

; Function Attrs: noinline nounwind ssp uwtable
declare i64 @sorbet_callFunc(i64, i64, i32, i64* noalias nocapture, %struct.FunctionInlineCache* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_Object#doubleCast"(i32 %argc, i64* nocapture readonly %argArray, i64 %selfRaw) #8 !dbg !8 {
functionEntryInitializers:
  %"stackFrame_func_Object#doubleCast" = load i8*, i8** @"stackFramePrecomputed_func_Object#doubleCast", align 8
  %0 = tail call %struct.rb_control_frame_struct* @sorbet_setRubyStackFrame(i1 false, i32 1, i8* %"stackFrame_func_Object#doubleCast")
  %1 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %0, i64 0, i32 0
  %2 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %0, i64 0, i32 2
  %3 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %2, align 8, !tbaa !12
  %4 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %3, i64 0, i32 2
  %5 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %4, align 8, !tbaa !15
  %6 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %5, i64 0, i32 2
  %7 = load i64*, i64** %6, align 8, !tbaa !17
  %8 = getelementptr inbounds i64, i64* %7, i64 1
  store i64* %8, i64** %1, align 8, !tbaa !27
  %rubyId_foo = load i64, i64* @rubyIdPrecomputed_foo, align 8, !dbg !28
  %9 = icmp eq i32 %argc, 1, !dbg !29
  br i1 %9, label %fillRequiredArgs, label %argCountFailBlock, !dbg !29, !prof !30

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call void @sorbet_raiseArity(i32 %argc, i32 1, i32 1), !dbg !29
  unreachable, !dbg !29

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %rawArg_a = load i64, i64* %argArray, align 8, !dbg !29
  %10 = load i64, i64* @rb_cObject, align 8, !dbg !29
  %11 = tail call i64 @rb_obj_is_kind_of(i64 %selfRaw, i64 %10) #6, !dbg !29
  %12 = icmp eq i64 %11, 20, !dbg !29
  br i1 %12, label %typeTestSuccess, label %codeRepl54, !dbg !29, !prof !31

typeTestSuccess:                                  ; preds = %fillRequiredArgs
  %13 = getelementptr inbounds i64, i64* %7, i64 2
  store i64* %13, i64** %1, align 8, !tbaa !27
  %14 = load i64, i64* @guard_epoch_A, align 8, !dbg !28
  %15 = tail call i64 @sorbet_getConstantEpoch(), !dbg !28
  %needTakeSlowPath = icmp eq i64 %14, %15, !dbg !28
  br i1 %needTakeSlowPath, label %17, label %16, !dbg !28, !prof !32

16:                                               ; preds = %typeTestSuccess
  tail call void @const_recompute_A() #13, !dbg !28
  br label %17, !dbg !28

17:                                               ; preds = %typeTestSuccess, %16
  %18 = load i64, i64* @guarded_const_A, align 8, !dbg !28
  %19 = load i64, i64* @guard_epoch_A, align 8, !dbg !28
  %20 = tail call i64 @sorbet_getConstantEpoch(), !dbg !28
  %guardUpdated = icmp eq i64 %19, %20, !dbg !28
  tail call void @llvm.assume(i1 %guardUpdated), !dbg !28
  %21 = tail call i64 @rb_obj_is_kind_of(i64 %rawArg_a, i64 %18) #6, !dbg !28
  %22 = icmp eq i64 %21, 20, !dbg !28
  br i1 %22, label %typeTestSuccess28, label %codeRepl, !dbg !28, !prof !31

codeRepl54:                                       ; preds = %fillRequiredArgs
  tail call fastcc void @"func_Object#doubleCast.cold.2"(i64 %selfRaw) #15, !dbg !29
  unreachable

typeTestSuccess28:                                ; preds = %17
  %call_via_vm_foo = tail call i64 @sorbet_callFunc(i64 %rawArg_a, i64 %rubyId_foo, i32 0, i64* null, %struct.FunctionInlineCache* nonnull @ic_call_via_vm_foo), !dbg !28
  %23 = getelementptr inbounds i64, i64* %7, i64 3
  store i64* %23, i64** %1, align 8, !tbaa !27
  %call_via_vm_foo43 = tail call i64 @sorbet_callFunc(i64 %rawArg_a, i64 %rubyId_foo, i32 0, i64* null, %struct.FunctionInlineCache* nonnull @ic_call_via_vm_foo.1), !dbg !33
  ret i64 %call_via_vm_foo43

codeRepl:                                         ; preds = %17
  tail call void @sorbet_cast_failure(i64 %rawArg_a, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_A, i64 0, i64 0)) #13, !dbg !34
  unreachable, !dbg !34
}

; Function Attrs: nounwind sspreq
define void @Init_repeated_casts() local_unnamed_addr #9 {
entry:
  %locals1.i.i = alloca [0 x i64], align 8
  %0 = tail call i64 @rb_gv_get(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.17, i64 0, i64 0)) #13
  %1 = and i64 %0, 7
  %2 = icmp ne i64 %1, 0
  %3 = and i64 %0, -9
  %4 = icmp eq i64 %3, 0
  %5 = or i1 %2, %4
  br i1 %5, label %12, label %6

6:                                                ; preds = %entry
  %7 = inttoptr i64 %0 to %struct.RBasic*
  %8 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %7, i64 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !37
  %10 = and i64 %9, 31
  %11 = icmp eq i64 %10, 5
  br i1 %11, label %sorbet_readRealpath.exit, label %12

12:                                               ; preds = %6, %entry
  %13 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %13, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.18, i64 0, i64 0)) #14
  unreachable

sorbet_readRealpath.exit:                         ; preds = %6
  %14 = tail call i64 @rb_gv_set(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.17, i64 0, i64 0), i64 8) #13
  %15 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str_doubleCast, i64 0, i64 0), i64 10) #13
  store i64 %15, i64* @rubyIdPrecomputed_doubleCast, align 8
  %16 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_foo, i64 0, i64 0), i64 3) #13
  store i64 %16, i64* @rubyIdPrecomputed_foo, align 8
  %17 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #13
  store i64 %17, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %18 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str_keep_def, i64 0, i64 0), i64 8) #13
  %19 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str_doubleCast, i64 0, i64 0), i64 10) #13
  tail call void @rb_gc_register_mark_object(i64 %19) #13
  store i64 %19, i64* @rubyStrFrozen_doubleCast, align 8
  %20 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"str_test/testdata/compiler/repeated_casts.rb", i64 0, i64 0), i64 40) #13
  tail call void @rb_gc_register_mark_object(i64 %20) #13
  store i64 %20, i64* @"rubyStrFrozen_test/testdata/compiler/repeated_casts.rb", align 8
  %21 = bitcast [0 x i64]* %locals1.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 0, i8* nonnull %21) #13
  %rubyId_doubleCast.i.i = load i64, i64* @rubyIdPrecomputed_doubleCast, align 8
  %rubyStr_doubleCast.i.i = load i64, i64* @rubyStrFrozen_doubleCast, align 8
  %locals1.sub.i.i = getelementptr inbounds [0 x i64], [0 x i64]* %locals1.i.i, i64 0, i64 0
  %22 = call i8* @sorbet_allocateRubyStackFrame(i64 %rubyStr_doubleCast.i.i, i64 %rubyId_doubleCast.i.i, i64 %20, i64 %0, i8* null, i32 1, i32 8, i32 11, i64* nonnull %locals1.sub.i.i, i32 0) #13
  store i8* %22, i8** @"stackFramePrecomputed_func_Object#doubleCast", align 8
  call void @llvm.lifetime.end.p0i8(i64 0, i8* nonnull %21) #13
  %23 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #13
  tail call void @rb_gc_register_mark_object(i64 %23) #13
  store i64 %23, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyId_<top (required)>.i.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_test/testdata/compiler/repeated_casts.rb.i2.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/repeated_casts.rb", align 8
  %24 = tail call i8* @sorbet_allocateRubyStackFrame(i64 %23, i64 %"rubyId_<top (required)>.i.i", i64 %"rubyStr_test/testdata/compiler/repeated_casts.rb.i2.i", i64 %0, i8* null, i32 1, i32 1, i32 11, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @"<static-init-locals-storage>.2", i64 0, i64 0), i32 0) #13
  store i8* %24, i8** @"stackFramePrecomputed_func_<root>.<static-init>$153", align 8
  %25 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_foo, i64 0, i64 0), i64 3) #13
  tail call void @rb_gc_register_mark_object(i64 %25) #13
  call void @llvm.lifetime.start.p0i8(i64 0, i8* nonnull %21) #13
  %rubyId_foo.i.i = load i64, i64* @rubyIdPrecomputed_foo, align 8
  %"rubyStr_test/testdata/compiler/repeated_casts.rb.i4.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/repeated_casts.rb", align 8
  %26 = call i8* @sorbet_allocateRubyStackFrame(i64 %25, i64 %rubyId_foo.i.i, i64 %"rubyStr_test/testdata/compiler/repeated_casts.rb.i4.i", i64 %0, i8* null, i32 1, i32 5, i32 6, i64* nonnull %locals1.sub.i.i, i32 0) #13
  store i8* %26, i8** @"stackFramePrecomputed_func_A#foo", align 8
  call void @llvm.lifetime.end.p0i8(i64 0, i8* nonnull %21) #13
  %"rubyId_<top (required)>.i6.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i7.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/compiler/repeated_casts.rb.i8.i" = load i64, i64* @"rubyStrFrozen_test/testdata/compiler/repeated_casts.rb", align 8
  %27 = tail call i8* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i7.i", i64 %"rubyId_<top (required)>.i6.i", i64 %"rubyStr_test/testdata/compiler/repeated_casts.rb.i8.i", i64 %0, i8* null, i32 1, i32 1, i32 4, i64* null, i32 0) #13
  store i8* %27, i8** @"stackFramePrecomputed_func_A.<static-init>", align 8
  %28 = load %struct.rb_vm_struct*, %struct.rb_vm_struct** @ruby_current_vm_ptr, align 8, !tbaa !27
  %29 = getelementptr inbounds %struct.rb_vm_struct, %struct.rb_vm_struct* %28, i64 0, i32 17
  %30 = load i64, i64* %29, align 8, !tbaa !39
  %"stackFrame_func_<root>.<static-init>$153.i" = load i8*, i8** @"stackFramePrecomputed_func_<root>.<static-init>$153", align 8
  %31 = tail call %struct.rb_control_frame_struct* @sorbet_setRubyStackFrame(i1 false, i32 1, i8* %"stackFrame_func_<root>.<static-init>$153.i") #13
  %32 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %31, i64 0, i32 0
  %33 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %31, i64 0, i32 2
  %34 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %33, align 8, !tbaa !12
  %35 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %34, i64 0, i32 2
  %36 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %35, align 8, !tbaa !15
  %37 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %36, i64 0, i32 2
  %38 = load i64*, i64** %37, align 8, !tbaa !17
  %39 = getelementptr inbounds i64, i64* %38, i64 4
  store i64* %39, i64** %32, align 8, !tbaa !27
  %40 = load %struct.rb_vm_struct*, %struct.rb_vm_struct** @ruby_current_vm_ptr, align 8, !dbg !48, !tbaa !27
  %41 = getelementptr inbounds %struct.rb_vm_struct, %struct.rb_vm_struct* %40, i64 0, i32 17, !dbg !48
  %42 = load i64, i64* %41, align 8, !dbg !48, !tbaa !39
  %43 = icmp eq i64 %42, %30, !dbg !48
  br i1 %43, label %"func_<root>.<static-init>$153.exit", label %codeRepl, !dbg !48, !prof !31

codeRepl:                                         ; preds = %sorbet_readRealpath.exit
  tail call fastcc void @Init_repeated_casts.cold.1(i64 %30) #15
  unreachable

"func_<root>.<static-init>$153.exit":             ; preds = %sorbet_readRealpath.exit
  %rubyId_doubleCast.i = load i64, i64* @rubyIdPrecomputed_doubleCast, align 8, !dbg !50
  %44 = load i64, i64* @rb_cObject, align 8, !dbg !48
  %45 = tail call i64 @rb_define_class(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_A, i64 0, i64 0), i64 %44) #13, !dbg !48
  %46 = load i64, i64* @guard_epoch_A, align 8, !dbg !48
  %47 = tail call i64 @sorbet_getConstantEpoch(), !dbg !48
  %needTakeSlowPath = icmp eq i64 %46, %47, !dbg !48
  br i1 %needTakeSlowPath, label %49, label %48, !dbg !48, !prof !32

48:                                               ; preds = %"func_<root>.<static-init>$153.exit"
  tail call void @const_recompute_A() #13, !dbg !48
  br label %49, !dbg !48

49:                                               ; preds = %"func_<root>.<static-init>$153.exit", %48
  %50 = load i64, i64* @guarded_const_A, align 8, !dbg !48
  %51 = load i64, i64* @guard_epoch_A, align 8, !dbg !48
  %52 = tail call i64 @sorbet_getConstantEpoch(), !dbg !48
  %guardUpdated = icmp eq i64 %51, %52, !dbg !48
  tail call void @llvm.assume(i1 %guardUpdated), !dbg !48
  %53 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !27
  %54 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %53, i64 0, i32 2
  %55 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %54, align 8, !tbaa !51
  %56 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %55, i64 0, i32 0
  %57 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %55, i64 0, i32 2
  %58 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %57, align 8, !tbaa !12
  %59 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %58, i64 0, i32 2
  %60 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %59, align 8, !tbaa !15
  %61 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %60, i64 0, i32 2
  %62 = load i64*, i64** %61, align 8, !tbaa !17
  %rubyId_foo.i.i1 = load i64, i64* @rubyIdPrecomputed_foo, align 8, !dbg !54
  %63 = getelementptr inbounds i64, i64* %62, i64 5, !dbg !57
  store i64* %63, i64** %56, align 8, !dbg !57, !tbaa !27
  %rawSym.i.i = tail call i64 @rb_id2sym(i64 %rubyId_foo.i.i1) #13, !dbg !54
  tail call void @rb_define_method(i64 %50, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_foo, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"func_A#foo" to i64 (...)*), i32 -1) #13, !dbg !54
  %64 = getelementptr inbounds i64, i64* %38, i64 8
  store i64* %64, i64** %32, align 8, !tbaa !27
  %rawSym.i = tail call i64 @rb_id2sym(i64 %rubyId_doubleCast.i) #13, !dbg !50
  tail call void @rb_define_method(i64 %44, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str_doubleCast, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"func_Object#doubleCast" to i64 (...)*), i32 -1) #13, !dbg !50
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_A#foo"(i32 %argc, i64* nocapture readnone %argArray, i64 %selfRaw) #8 !dbg !35 {
functionEntryInitializers:
  %"stackFrame_func_A#foo" = load i8*, i8** @"stackFramePrecomputed_func_A#foo", align 8
  %0 = tail call %struct.rb_control_frame_struct* @sorbet_setRubyStackFrame(i1 false, i32 1, i8* %"stackFrame_func_A#foo")
  %1 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %0, i64 0, i32 0
  %2 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %0, i64 0, i32 2
  %3 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %2, align 8, !tbaa !12
  %4 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %3, i64 0, i32 2
  %5 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %4, align 8, !tbaa !15
  %6 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %5, i64 0, i32 2
  %7 = load i64*, i64** %6, align 8, !tbaa !17
  %8 = getelementptr inbounds i64, i64* %7, i64 1
  store i64* %8, i64** %1, align 8, !tbaa !27
  %tooManyArgs = icmp eq i32 %argc, 0, !dbg !58
  br i1 %tooManyArgs, label %fillRequiredArgs, label %argCountFailBlock, !dbg !58, !prof !31

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call void @sorbet_raiseArity(i32 %argc, i32 0, i32 0), !dbg !58
  unreachable, !dbg !58

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %9 = load i64, i64* @guard_epoch_A, align 8, !dbg !58
  %10 = tail call i64 @sorbet_getConstantEpoch(), !dbg !58
  %needTakeSlowPath = icmp eq i64 %9, %10, !dbg !58
  br i1 %needTakeSlowPath, label %12, label %11, !dbg !58, !prof !32

11:                                               ; preds = %fillRequiredArgs
  tail call void @const_recompute_A() #13, !dbg !58
  br label %12, !dbg !58

12:                                               ; preds = %fillRequiredArgs, %11
  %13 = load i64, i64* @guarded_const_A, align 8, !dbg !58
  %14 = load i64, i64* @guard_epoch_A, align 8, !dbg !58
  %15 = tail call i64 @sorbet_getConstantEpoch(), !dbg !58
  %guardUpdated = icmp eq i64 %14, %15, !dbg !58
  tail call void @llvm.assume(i1 %guardUpdated), !dbg !58
  %16 = tail call i64 @rb_obj_is_kind_of(i64 %selfRaw, i64 %13) #6, !dbg !58
  %17 = icmp eq i64 %16, 20, !dbg !58
  br i1 %17, label %typeTestSuccess, label %codeRepl, !dbg !58, !prof !31

typeTestSuccess:                                  ; preds = %12
  ret i64 8

codeRepl:                                         ; preds = %12
  tail call fastcc void @"func_A#foo.cold.1"(i64 %selfRaw) #15, !dbg !58
  unreachable
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #10

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #10

; Function Attrs: cold minsize noreturn nounwind sspreq uwtable
define internal fastcc void @"func_Object#doubleCast.cold.2"(i64 %selfRaw) unnamed_addr #11 {
newFuncRoot:
  tail call void @sorbet_cast_failure(i64 %selfRaw, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Object, i64 0, i64 0)), !dbg !29
  unreachable, !dbg !29
}

; Function Attrs: cold minsize noreturn nounwind sspreq
define internal fastcc void @Init_repeated_casts.cold.1(i64) unnamed_addr #12 {
newFuncRoot:
  tail call void @sorbet_cast_failure(i64 %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"str_T.class_of(<root>)", i64 0, i64 0)) #13, !dbg !48
  unreachable, !dbg !48
}

; Function Attrs: cold minsize noreturn nounwind sspreq uwtable
define internal fastcc void @"func_A#foo.cold.1"(i64 %selfRaw) unnamed_addr #11 {
newFuncRoot:
  tail call void @sorbet_cast_failure(i64 %selfRaw, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_A, i64 0, i64 0)), !dbg !58
  unreachable, !dbg !58
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #13

define linkonce void @const_recompute_A() local_unnamed_addr {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_A, i64 0, i64 0), i64 1)
  store i64 %1, i64* @guarded_const_A, align 8
  %2 = tail call i64 @sorbet_getConstantEpoch()
  store i64 %2, i64* @guard_epoch_A, align 8
  ret void
}

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { noreturn }
attributes #2 = { "addedToSilenceEmptyAttrsError" }
attributes #3 = { noinline nounwind ssp uwtable }
attributes #4 = { cold noreturn nounwind optsize ssp uwtable }
attributes #5 = { noreturn nounwind ssp uwtable }
attributes #6 = { nounwind readnone }
attributes #7 = { alwaysinline norecurse nounwind readonly ssp uwtable }
attributes #8 = { nounwind sspreq uwtable }
attributes #9 = { nounwind sspreq }
attributes #10 = { argmemonly nounwind }
attributes #11 = { cold minsize noreturn nounwind sspreq uwtable }
attributes #12 = { cold minsize noreturn nounwind sspreq }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }
attributes #15 = { noinline }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "Sorbet LLVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "test/testdata/compiler/repeated_casts.rb", directory: ".")
!3 = !{}
!4 = !{!5, !5, i64 0}
!5 = !{!"long", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = distinct !DISubprogram(name: "Object#doubleCast", linkageName: "func_Object#doubleCast", scope: null, file: !2, line: 8, type: !9, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!9 = !DISubroutineType(types: !10)
!10 = !{!11}
!11 = !DIBasicType(name: "VALUE", size: 64, encoding: DW_ATE_signed)
!12 = !{!13, !14, i64 16}
!13 = !{!"rb_control_frame_struct", !14, i64 0, !14, i64 8, !14, i64 16, !5, i64 24, !14, i64 32, !14, i64 40, !14, i64 48}
!14 = !{!"any pointer", !6, i64 0}
!15 = !{!16, !14, i64 16}
!16 = !{!"rb_iseq_struct", !5, i64 0, !5, i64 8, !14, i64 16, !6, i64 24}
!17 = !{!18, !14, i64 8}
!18 = !{!"rb_iseq_constant_body", !6, i64 0, !19, i64 4, !14, i64 8, !20, i64 16, !22, i64 64, !25, i64 120, !14, i64 152, !14, i64 160, !14, i64 168, !14, i64 176, !14, i64 184, !14, i64 192, !14, i64 200, !26, i64 208, !19, i64 240, !19, i64 244, !19, i64 248, !19, i64 252, !19, i64 256, !14, i64 264, !5, i64 272, !14, i64 280, !6, i64 288}
!19 = !{!"int", !6, i64 0}
!20 = !{!"", !21, i64 0, !19, i64 4, !19, i64 8, !19, i64 12, !19, i64 16, !19, i64 20, !19, i64 24, !19, i64 28, !14, i64 32, !14, i64 40}
!21 = !{!"", !19, i64 0, !19, i64 0, !19, i64 0, !19, i64 0, !19, i64 0, !19, i64 0, !19, i64 0, !19, i64 0}
!22 = !{!"rb_iseq_location_struct", !5, i64 0, !5, i64 8, !5, i64 16, !5, i64 24, !19, i64 32, !23, i64 36}
!23 = !{!"rb_code_location_struct", !24, i64 0, !24, i64 8}
!24 = !{!"rb_code_position_struct", !19, i64 0, !19, i64 4}
!25 = !{!"iseq_insn_info", !14, i64 0, !14, i64 8, !19, i64 16, !14, i64 24}
!26 = !{!"", !5, i64 0, !5, i64 8, !5, i64 16, !14, i64 24}
!27 = !{!14, !14, i64 0}
!28 = !DILocation(line: 9, column: 3, scope: !8)
!29 = !DILocation(line: 8, column: 1, scope: !8)
!30 = !{!"branch_weights", i32 4000000, i32 4001}
!31 = !{!"branch_weights", i32 2000, i32 1}
!32 = !{!"branch_weights", i32 10000, i32 1}
!33 = !DILocation(line: 10, column: 3, scope: !8)
!34 = !DILocation(line: 5, column: 3, scope: !35, inlinedAt: !36)
!35 = distinct !DISubprogram(name: "A#foo", linkageName: "func_A#foo", scope: null, file: !2, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!36 = distinct !DILocation(line: 9, column: 3, scope: !8)
!37 = !{!38, !5, i64 0}
!38 = !{!"RBasic", !5, i64 0, !5, i64 8}
!39 = !{!40, !5, i64 400}
!40 = !{!"rb_vm_struct", !5, i64 0, !41, i64 8, !14, i64 192, !14, i64 200, !14, i64 208, !44, i64 216, !6, i64 224, !42, i64 264, !42, i64 280, !42, i64 296, !42, i64 312, !5, i64 328, !19, i64 336, !19, i64 340, !19, i64 340, !19, i64 340, !19, i64 340, !19, i64 344, !5, i64 352, !6, i64 360, !5, i64 400, !5, i64 408, !5, i64 416, !5, i64 424, !5, i64 432, !5, i64 440, !5, i64 448, !14, i64 456, !14, i64 464, !45, i64 472, !46, i64 1064, !14, i64 1088, !14, i64 1096, !19, i64 1104, !19, i64 1108, !42, i64 1112, !6, i64 1128, !5, i64 1168, !5, i64 1176, !5, i64 1184, !5, i64 1192, !5, i64 1200, !19, i64 1208, !5, i64 1216, !14, i64 1224, !14, i64 1232, !14, i64 1240, !14, i64 1248, !47, i64 1256, !6, i64 1288}
!41 = !{!"rb_global_vm_lock_struct", !14, i64 0, !6, i64 8, !42, i64 48, !14, i64 64, !19, i64 72, !6, i64 80, !6, i64 128, !19, i64 176, !19, i64 180}
!42 = !{!"list_head", !43, i64 0}
!43 = !{!"list_node", !14, i64 0, !14, i64 8}
!44 = !{!"long long", !6, i64 0}
!45 = !{!"", !6, i64 0, !6, i64 520}
!46 = !{!"rb_hook_list_struct", !14, i64 0, !19, i64 8, !19, i64 12, !19, i64 16}
!47 = !{!"", !5, i64 0, !5, i64 8, !5, i64 16, !5, i64 24}
!48 = !DILocation(line: 4, column: 1, scope: !49)
!49 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.<static-init>$153", scope: null, file: !2, line: 4, type: !9, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!50 = !DILocation(line: 8, column: 1, scope: !49)
!51 = !{!52, !14, i64 16}
!52 = !{!"rb_execution_context_struct", !14, i64 0, !5, i64 8, !14, i64 16, !14, i64 24, !14, i64 32, !19, i64 40, !19, i64 44, !14, i64 48, !14, i64 56, !14, i64 64, !5, i64 72, !5, i64 80, !14, i64 88, !5, i64 96, !14, i64 104, !14, i64 112, !5, i64 120, !5, i64 128, !6, i64 136, !6, i64 137, !5, i64 144, !53, i64 152}
!53 = !{!"", !14, i64 0, !14, i64 8, !5, i64 16, !6, i64 24}
!54 = !DILocation(line: 5, column: 3, scope: !55, inlinedAt: !56)
!55 = distinct !DISubprogram(name: "A.<static-init>", linkageName: "func_A.<static-init>L61", scope: null, file: !2, line: 4, type: !9, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!56 = distinct !DILocation(line: 4, column: 1, scope: !49)
!57 = !DILocation(line: 4, column: 1, scope: !55, inlinedAt: !56)
!58 = !DILocation(line: 5, column: 3, scope: !35)
