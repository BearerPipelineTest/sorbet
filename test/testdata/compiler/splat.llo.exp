; ModuleID = 'payload'
source_filename = "compiler/Payload/payload.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_data_type_struct = type { i8*, %struct.anon.1, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.1 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.RBasic = type { i64, i64 }
%struct.RString = type { %struct.RBasic, %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { i64, i8*, %union.anon.0 }
%union.anon.0 = type { i64 }
%struct.RArray = type { %struct.RBasic, %union.anon.4 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i64, %union.anon.6, i64* }
%union.anon.6 = type { i64 }

@.str = private unnamed_addr constant [5 x i8] c"%li\0B\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@.str.7 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@closureInfo = local_unnamed_addr constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i32 0, i32 0), %struct.anon.1 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@"rubyIdPrecomputed_<static-init>" = internal unnamed_addr global i64 0, align 8
@"str_<static-init>" = private unnamed_addr constant [14 x i8] c"<static-init>\00", align 1
@"rubyIdPrecomputed_[]" = internal unnamed_addr global i64 0, align 8
@"str_[]" = private unnamed_addr constant [3 x i8] c"[]\00", align 1
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@llvm.global_ctors = appending global [3 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_<static-init>", i8* bitcast (i64* @"rubyIdPrecomputed_<static-init>" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_[]", i8* bitcast (i64* @"rubyIdPrecomputed_[]" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_puts, i8* bitcast (i64* @rubyIdPrecomputed_puts to i8*) }]

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_pi(i64 %0) local_unnamed_addr #0 {
  %2 = tail call i8* @rb_id2name(i64 %0) #6
  ret i8* %2
}

declare i8* @rb_id2name(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_p(i64 %0) local_unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 %0) #6
  %3 = inttoptr i64 %2 to %struct.RBasic*
  %4 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !0
  %6 = and i64 %5, 8192
  %7 = icmp eq i64 %6, 0
  %8 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 %0) #6
  %9 = inttoptr i64 %8 to %struct.RString*
  br i1 %7, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !5
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i8* [ %12, %10 ], [ %15, %13 ]
  ret i8* %17
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i64 @rb_ary_new_from_values(i64, i64*) local_unnamed_addr #1

declare i64 @rb_ary_push(i64, i64) local_unnamed_addr #1

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #1

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8* %0) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !6
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #6
  ret void
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly %0) #3 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !6
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

declare i64 @rb_ary_new() local_unnamed_addr #1

declare i64 @rb_ary_dup(i64) local_unnamed_addr #1

declare i64 @rb_ary_entry(i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_<static-init>"() #4 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"str_<static-init>", i64 0, i64 0), i64 13) #6
  store i64 %0, i64* @"rubyIdPrecomputed_<static-init>", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_[]"() #4 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"str_[]", i64 0, i64 0), i64 2) #6
  store i64 %0, i64* @"rubyIdPrecomputed_[]", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_puts() #4 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 4) #6
  store i64 %0, i64* @rubyIdPrecomputed_puts, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_test_testdata_compiler_splat() local_unnamed_addr #5 {
typeTestSuccess.i:
  %callArgs.i = alloca [7 x i64], align 16
  %0 = load i64, i64* @rb_cObject, align 8
  %1 = bitcast [7 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %1)
  %"rubyId_[].i" = load i64, i64* @"rubyIdPrecomputed_[]", align 8
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8
  %callArgsAddr.i = getelementptr inbounds [7 x i64], [7 x i64]* %callArgs.i, i64 0, i64 0
  %callArgsAddr103.i = getelementptr inbounds [7 x i64], [7 x i64]* %callArgs.i, i64 0, i64 1
  %callArgsAddr105.i = getelementptr inbounds [7 x i64], [7 x i64]* %callArgs.i, i64 0, i64 2
  %2 = bitcast [7 x i64]* %callArgs.i to <4 x i64>*
  store <4 x i64> <i64 3, i64 5, i64 7, i64 9>, <4 x i64>* %2, align 16
  %callArgsAddr109.i = getelementptr inbounds [7 x i64], [7 x i64]* %callArgs.i, i64 0, i64 4
  %3 = bitcast i64* %callArgsAddr109.i to <2 x i64>*
  store <2 x i64> <i64 11, i64 13>, <2 x i64>* %3, align 16
  %callArgsAddr113.i = getelementptr inbounds [7 x i64], [7 x i64]* %callArgs.i, i64 0, i64 6
  store i64 15, i64* %callArgsAddr113.i, align 16
  %4 = call i64 @rb_ary_new_from_values(i64 7, i64* nonnull %callArgsAddr.i) #6
  store i64 %4, i64* %callArgsAddr.i, align 16
  %5 = bitcast i64* %callArgsAddr103.i to <2 x i64>*
  store <2 x i64> <i64 3, i64 5>, <2 x i64>* %5, align 8
  %6 = inttoptr i64 %4 to %struct.RBasic*
  %7 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %6, i64 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !0, !noalias !8
  %9 = and i64 %8, 8192
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %typeTestSuccess.i
  %12 = lshr i64 %8, 15
  %13 = and i64 %12, 3
  br label %rb_array_len.exit.i.i

14:                                               ; preds = %typeTestSuccess.i
  %15 = inttoptr i64 %4 to %struct.RArray*
  %16 = getelementptr inbounds %struct.RArray, %struct.RArray* %15, i64 0, i32 1, i32 0, i32 0
  %17 = load i64, i64* %16, align 8, !tbaa !5, !noalias !8
  br label %rb_array_len.exit.i.i

rb_array_len.exit.i.i:                            ; preds = %14, %11
  %18 = phi i64 [ %13, %11 ], [ %17, %14 ]
  %19 = trunc i64 %18 to i32
  %20 = sub i32 3, %19
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %sorbet_splatIntrinsic.exit.i

22:                                               ; preds = %rb_array_len.exit.i.i
  %23 = call i64 @rb_ary_dup(i64 %4) #6, !noalias !8
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i32 [ 0, %22 ], [ %27, %24 ]
  %26 = call i64 @rb_ary_push(i64 %23, i64 8) #6, !noalias !8
  %27 = add nuw nsw i32 %25, 1
  %28 = icmp eq i32 %27, %20
  br i1 %28, label %sorbet_splatIntrinsic.exit.i, label %24

sorbet_splatIntrinsic.exit.i:                     ; preds = %24, %rb_array_len.exit.i.i
  %29 = phi i64 [ %4, %rb_array_len.exit.i.i ], [ %23, %24 ]
  %30 = and i64 %29, 7
  %31 = icmp ne i64 %30, 0
  %32 = and i64 %29, -9
  %33 = icmp eq i64 %32, 0
  %34 = or i1 %31, %33
  br i1 %34, label %sorbet_isa_Array.exit.thread.i, label %sorbet_isa_Array.exit.i, !prof !11

sorbet_isa_Array.exit.thread.i:                   ; preds = %sorbet_splatIntrinsic.exit.i
  store i64 1, i64* %callArgsAddr.i, align 16
  br label %"slowSymCallIntrinsic_[]153.i"

sorbet_isa_Array.exit.i:                          ; preds = %sorbet_splatIntrinsic.exit.i
  %35 = inttoptr i64 %29 to %struct.RBasic*
  %36 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %35, i64 0, i32 0
  %37 = load i64, i64* %36, align 8, !tbaa !0
  %38 = and i64 %37, 31
  %39 = icmp eq i64 %38, 7
  store i64 1, i64* %callArgsAddr.i, align 16
  br i1 %39, label %"fastSymCallIntrinsic_[]154.i", label %"slowSymCallIntrinsic_[]153.i", !prof !12, !misexpect !13

"afterSymCallIntrinsic_[]152.i":                  ; preds = %"fastSymCallIntrinsic_[]154.i", %"slowSymCallIntrinsic_[]153.i"
  %"symIntrinsicRawPhi_[]14915.i" = phi i64 [ %82, %"fastSymCallIntrinsic_[]154.i" ], [ %79, %"slowSymCallIntrinsic_[]153.i" ]
  %"symIntrinsicRawPhi_[]913.i" = phi i64 [ %81, %"fastSymCallIntrinsic_[]154.i" ], [ %78, %"slowSymCallIntrinsic_[]153.i" ]
  %"symIntrinsicRawPhi_[]164.i" = phi i64 [ %83, %"fastSymCallIntrinsic_[]154.i" ], [ %80, %"slowSymCallIntrinsic_[]153.i" ]
  store i64 %"symIntrinsicRawPhi_[]913.i", i64* %callArgsAddr.i, align 16
  store i64 %"symIntrinsicRawPhi_[]14915.i", i64* %callArgsAddr103.i, align 8
  store i64 %"symIntrinsicRawPhi_[]164.i", i64* %callArgsAddr105.i, align 16
  %40 = call i64 @rb_ary_new_from_values(i64 3, i64* nonnull %callArgsAddr.i) #6
  store i64 %40, i64* %callArgsAddr.i, align 16
  %41 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #6
  %42 = bitcast [7 x i64]* %callArgs.i to <2 x i64>*
  store <2 x i64> <i64 3, i64 5>, <2 x i64>* %42, align 16
  %43 = call i64 @rb_ary_new_from_values(i64 2, i64* nonnull %callArgsAddr.i) #6
  store i64 %43, i64* %callArgsAddr.i, align 16
  store <2 x i64> <i64 3, i64 5>, <2 x i64>* %5, align 8
  %44 = inttoptr i64 %43 to %struct.RBasic*
  %45 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %44, i64 0, i32 0
  %46 = load i64, i64* %45, align 8, !tbaa !0, !noalias !14
  %47 = and i64 %46, 8192
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %52, label %49

49:                                               ; preds = %"afterSymCallIntrinsic_[]152.i"
  %50 = lshr i64 %46, 15
  %51 = and i64 %50, 3
  br label %rb_array_len.exit.i1.i

52:                                               ; preds = %"afterSymCallIntrinsic_[]152.i"
  %53 = inttoptr i64 %43 to %struct.RArray*
  %54 = getelementptr inbounds %struct.RArray, %struct.RArray* %53, i64 0, i32 1, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !5, !noalias !14
  br label %rb_array_len.exit.i1.i

rb_array_len.exit.i1.i:                           ; preds = %52, %49
  %56 = phi i64 [ %51, %49 ], [ %55, %52 ]
  %57 = trunc i64 %56 to i32
  %58 = sub i32 3, %57
  %59 = icmp sgt i32 %58, 0
  br i1 %59, label %60, label %sorbet_splatIntrinsic.exit2.i

60:                                               ; preds = %rb_array_len.exit.i1.i
  %61 = call i64 @rb_ary_dup(i64 %43) #6, !noalias !14
  br label %62

62:                                               ; preds = %62, %60
  %63 = phi i32 [ 0, %60 ], [ %65, %62 ]
  %64 = call i64 @rb_ary_push(i64 %61, i64 8) #6, !noalias !14
  %65 = add nuw nsw i32 %63, 1
  %66 = icmp eq i32 %65, %58
  br i1 %66, label %sorbet_splatIntrinsic.exit2.i, label %62

sorbet_splatIntrinsic.exit2.i:                    ; preds = %62, %rb_array_len.exit.i1.i
  %67 = phi i64 [ %43, %rb_array_len.exit.i1.i ], [ %61, %62 ]
  %68 = and i64 %67, 7
  %69 = icmp ne i64 %68, 0
  %70 = and i64 %67, -9
  %71 = icmp eq i64 %70, 0
  %72 = or i1 %69, %71
  br i1 %72, label %sorbet_isa_Array.exit3.thread.i, label %sorbet_isa_Array.exit3.i, !prof !11

sorbet_isa_Array.exit3.thread.i:                  ; preds = %sorbet_splatIntrinsic.exit2.i
  store i64 1, i64* %callArgsAddr.i, align 16
  br label %"slowSymCallIntrinsic_[]228.i"

sorbet_isa_Array.exit3.i:                         ; preds = %sorbet_splatIntrinsic.exit2.i
  %73 = inttoptr i64 %67 to %struct.RBasic*
  %74 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %73, i64 0, i32 0
  %75 = load i64, i64* %74, align 8, !tbaa !0
  %76 = and i64 %75, 31
  %77 = icmp eq i64 %76, 7
  store i64 1, i64* %callArgsAddr.i, align 16
  br i1 %77, label %"fastSymCallIntrinsic_[]229.i", label %"slowSymCallIntrinsic_[]228.i", !prof !12, !misexpect !13

"slowSymCallIntrinsic_[]153.i":                   ; preds = %sorbet_isa_Array.exit.i, %sorbet_isa_Array.exit.thread.i
  %78 = call i64 @rb_funcallv(i64 %29, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #6
  store i64 -3, i64* %callArgsAddr.i, align 16
  %79 = call i64 @rb_funcallv(i64 %29, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #6
  store i64 -1, i64* %callArgsAddr.i, align 16
  %80 = call i64 @rb_funcallv(i64 %29, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #6
  br label %"afterSymCallIntrinsic_[]152.i"

"fastSymCallIntrinsic_[]154.i":                   ; preds = %sorbet_isa_Array.exit.i
  %81 = call i64 @rb_ary_entry(i64 %29, i64 0) #6
  store i64 -3, i64* %callArgsAddr.i, align 16
  %82 = call i64 @rb_ary_entry(i64 %29, i64 -2) #6
  store i64 -1, i64* %callArgsAddr.i, align 16
  %83 = call i64 @rb_ary_entry(i64 %29, i64 -1) #6
  br label %"afterSymCallIntrinsic_[]152.i"

"afterSymCallIntrinsic_[]227.i":                  ; preds = %"fastSymCallIntrinsic_[]229.i", %"slowSymCallIntrinsic_[]228.i"
  %"symIntrinsicRawPhi_[]22424.i" = phi i64 [ %125, %"fastSymCallIntrinsic_[]229.i" ], [ %122, %"slowSymCallIntrinsic_[]228.i" ]
  %"symIntrinsicRawPhi_[]2091822.i" = phi i64 [ %124, %"fastSymCallIntrinsic_[]229.i" ], [ %121, %"slowSymCallIntrinsic_[]228.i" ]
  %"symIntrinsicRawPhi_[]239.i" = phi i64 [ %126, %"fastSymCallIntrinsic_[]229.i" ], [ %123, %"slowSymCallIntrinsic_[]228.i" ]
  store i64 %"symIntrinsicRawPhi_[]2091822.i", i64* %callArgsAddr.i, align 16
  store i64 %"symIntrinsicRawPhi_[]22424.i", i64* %callArgsAddr103.i, align 8
  store i64 %"symIntrinsicRawPhi_[]239.i", i64* %callArgsAddr105.i, align 16
  %84 = call i64 @rb_ary_new_from_values(i64 3, i64* nonnull %callArgsAddr.i) #6
  store i64 %84, i64* %callArgsAddr.i, align 16
  %85 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #6
  %86 = call i64 @rb_ary_new() #6
  store i64 %86, i64* %callArgsAddr.i, align 16
  store <2 x i64> <i64 3, i64 5>, <2 x i64>* %5, align 8
  %87 = inttoptr i64 %86 to %struct.RBasic*
  %88 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %87, i64 0, i32 0
  %89 = load i64, i64* %88, align 8, !tbaa !0, !noalias !17
  %90 = and i64 %89, 8192
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %95, label %92

92:                                               ; preds = %"afterSymCallIntrinsic_[]227.i"
  %93 = lshr i64 %89, 15
  %94 = and i64 %93, 3
  br label %rb_array_len.exit.i4.i

95:                                               ; preds = %"afterSymCallIntrinsic_[]227.i"
  %96 = inttoptr i64 %86 to %struct.RArray*
  %97 = getelementptr inbounds %struct.RArray, %struct.RArray* %96, i64 0, i32 1, i32 0, i32 0
  %98 = load i64, i64* %97, align 8, !tbaa !5, !noalias !17
  br label %rb_array_len.exit.i4.i

rb_array_len.exit.i4.i:                           ; preds = %95, %92
  %99 = phi i64 [ %94, %92 ], [ %98, %95 ]
  %100 = trunc i64 %99 to i32
  %101 = sub i32 3, %100
  %102 = icmp sgt i32 %101, 0
  br i1 %102, label %103, label %sorbet_splatIntrinsic.exit5.i

103:                                              ; preds = %rb_array_len.exit.i4.i
  %104 = call i64 @rb_ary_dup(i64 %86) #6, !noalias !17
  br label %105

105:                                              ; preds = %105, %103
  %106 = phi i32 [ 0, %103 ], [ %108, %105 ]
  %107 = call i64 @rb_ary_push(i64 %104, i64 8) #6, !noalias !17
  %108 = add nuw nsw i32 %106, 1
  %109 = icmp eq i32 %108, %101
  br i1 %109, label %sorbet_splatIntrinsic.exit5.i, label %105

sorbet_splatIntrinsic.exit5.i:                    ; preds = %105, %rb_array_len.exit.i4.i
  %110 = phi i64 [ %86, %rb_array_len.exit.i4.i ], [ %104, %105 ]
  %111 = and i64 %110, 7
  %112 = icmp ne i64 %111, 0
  %113 = and i64 %110, -9
  %114 = icmp eq i64 %113, 0
  %115 = or i1 %112, %114
  br i1 %115, label %sorbet_isa_Array.exit6.thread.i, label %sorbet_isa_Array.exit6.i, !prof !11

sorbet_isa_Array.exit6.thread.i:                  ; preds = %sorbet_splatIntrinsic.exit5.i
  store i64 1, i64* %callArgsAddr.i, align 16
  br label %"slowSymCallIntrinsic_[]298.i"

sorbet_isa_Array.exit6.i:                         ; preds = %sorbet_splatIntrinsic.exit5.i
  %116 = inttoptr i64 %110 to %struct.RBasic*
  %117 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %116, i64 0, i32 0
  %118 = load i64, i64* %117, align 8, !tbaa !0
  %119 = and i64 %118, 31
  %120 = icmp eq i64 %119, 7
  store i64 1, i64* %callArgsAddr.i, align 16
  br i1 %120, label %"fastSymCallIntrinsic_[]299.i", label %"slowSymCallIntrinsic_[]298.i", !prof !12, !misexpect !13

"slowSymCallIntrinsic_[]228.i":                   ; preds = %sorbet_isa_Array.exit3.i, %sorbet_isa_Array.exit3.thread.i
  %121 = call i64 @rb_funcallv(i64 %67, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #6
  store i64 -3, i64* %callArgsAddr.i, align 16
  %122 = call i64 @rb_funcallv(i64 %67, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #6
  store i64 -1, i64* %callArgsAddr.i, align 16
  %123 = call i64 @rb_funcallv(i64 %67, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #6
  br label %"afterSymCallIntrinsic_[]227.i"

"fastSymCallIntrinsic_[]229.i":                   ; preds = %sorbet_isa_Array.exit3.i
  %124 = call i64 @rb_ary_entry(i64 %67, i64 0) #6
  store i64 -3, i64* %callArgsAddr.i, align 16
  %125 = call i64 @rb_ary_entry(i64 %67, i64 -2) #6
  store i64 -1, i64* %callArgsAddr.i, align 16
  %126 = call i64 @rb_ary_entry(i64 %67, i64 -1) #6
  br label %"afterSymCallIntrinsic_[]227.i"

"slowSymCallIntrinsic_[]298.i":                   ; preds = %sorbet_isa_Array.exit6.i, %sorbet_isa_Array.exit6.thread.i
  %127 = call i64 @rb_funcallv(i64 %110, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #6
  store i64 -3, i64* %callArgsAddr.i, align 16
  %128 = call i64 @rb_funcallv(i64 %110, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #6
  store i64 -1, i64* %callArgsAddr.i, align 16
  %129 = call i64 @rb_funcallv(i64 %110, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #6
  br label %"func_<root>.<static-init>$111.exit"

"fastSymCallIntrinsic_[]299.i":                   ; preds = %sorbet_isa_Array.exit6.i
  %130 = call i64 @rb_ary_entry(i64 %110, i64 0) #6
  store i64 -3, i64* %callArgsAddr.i, align 16
  %131 = call i64 @rb_ary_entry(i64 %110, i64 -2) #6
  store i64 -1, i64* %callArgsAddr.i, align 16
  %132 = call i64 @rb_ary_entry(i64 %110, i64 -1) #6
  br label %"func_<root>.<static-init>$111.exit"

"func_<root>.<static-init>$111.exit":             ; preds = %"slowSymCallIntrinsic_[]298.i", %"fastSymCallIntrinsic_[]299.i"
  %"symIntrinsicRawPhi_[]29433.i" = phi i64 [ %131, %"fastSymCallIntrinsic_[]299.i" ], [ %128, %"slowSymCallIntrinsic_[]298.i" ]
  %"symIntrinsicRawPhi_[]2792731.i" = phi i64 [ %130, %"fastSymCallIntrinsic_[]299.i" ], [ %127, %"slowSymCallIntrinsic_[]298.i" ]
  %"symIntrinsicRawPhi_[]309.i" = phi i64 [ %132, %"fastSymCallIntrinsic_[]299.i" ], [ %129, %"slowSymCallIntrinsic_[]298.i" ]
  store i64 %"symIntrinsicRawPhi_[]2792731.i", i64* %callArgsAddr.i, align 16
  store i64 %"symIntrinsicRawPhi_[]29433.i", i64* %callArgsAddr103.i, align 8
  store i64 %"symIntrinsicRawPhi_[]309.i", i64* %callArgsAddr105.i, align 16
  %133 = call i64 @rb_ary_new_from_values(i64 3, i64* nonnull %callArgsAddr.i) #6
  store i64 %133, i64* %callArgsAddr.i, align 16
  %134 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #6
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %1)
  ret void
}

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { "addedToSilenceEmptyAttrsError" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { norecurse nounwind readnone ssp uwtable }
attributes #4 = { nounwind ssp }
attributes #5 = { nounwind sspreq }
attributes #6 = { nounwind }

!0 = !{!1, !2, i64 0}
!1 = !{!"RBasic", !2, i64 0, !2, i64 8}
!2 = !{!"long", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!3, !3, i64 0}
!6 = !{!7, !7, i64 0}
!7 = !{!"int", !3, i64 0}
!8 = !{!9}
!9 = distinct !{!9, !10, !"sorbet_splatIntrinsic: argument 0"}
!10 = distinct !{!10, !"sorbet_splatIntrinsic"}
!11 = !{!"branch_weights", i32 1073205, i32 2146410443}
!12 = !{!"branch_weights", i32 2000, i32 1}
!13 = !{!"misexpect", i64 0, i64 2000, i64 1}
!14 = !{!15}
!15 = distinct !{!15, !16, !"sorbet_splatIntrinsic: argument 0"}
!16 = distinct !{!16, !"sorbet_splatIntrinsic"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"sorbet_splatIntrinsic: argument 0"}
!19 = distinct !{!19, !"sorbet_splatIntrinsic"}
