begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        ::<Magic>.<define-top-class-or-module>(::OpEq)
        ::Sorbet::Private::Static.keep_for_ide(::OpEq)
        <emptyTree>
      end
    end
  end
  class ::OpEq<<C OpEq>> < (::<todo sym>)
    def b(<blk>)
      <emptyTree>
    end

    def b=(_, <blk>)
      <emptyTree>
    end

    def y(<blk>)
      <emptyTree>
    end

    def z(<blk>)
      <emptyTree>
    end

    def example(a, <blk>)
      begin
        begin
          a$2 = a
          a$3 = if a$2
            :a
          else
            a$2
          end
          a = a$3
        end
        begin
          b$4 = <self>
          b$5 = b$4.b()
          if b$5
            b$4.b=(:b)
          else
            b$5
          end
        end
        begin
          []$6 = a
          []$7 = <self>.y()
          []$8 = <self>.z()
          []$9 = []$6.[]([]$7, []$8)
          if []$9
            []$6.[]=([]$7, []$8, 1)
          else
            []$9
          end
        end
        begin
          a$10 = a
          a$11 = if a$10
            a$10
          else
            :a
          end
          a = a$11
        end
        begin
          b$12 = <self>
          b$13 = b$12.b()
          if b$13
            b$13
          else
            b$12.b=(:b)
          end
        end
        begin
          []$14 = a
          []$15 = <self>.y()
          []$16 = <self>.z()
          []$17 = []$14.[]([]$15, []$16)
          if []$17
            []$17
          else
            []$14.[]=([]$15, []$16, 1)
          end
        end
      end
    end

    def self.<static-init>(<blk>)
      begin
        ::Sorbet::Private::Static.keep_def(<self>, :b, :normal)
        ::Sorbet::Private::Static.keep_def(<self>, :b=, :normal)
        ::Sorbet::Private::Static.keep_def(<self>, :y, :normal)
        ::Sorbet::Private::Static.keep_def(<self>, :z, :normal)
        ::Sorbet::Private::Static.keep_def(<self>, :example, :normal)
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
