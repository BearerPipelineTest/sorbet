source_filename = "compiler/IRHelpers/payload.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin18.2.0"

%struct.rb_data_type_struct = type { i8*, %struct.anon.1, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.1 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.RBasic = type { i64, i64 }
%struct.RString = type { %struct.RBasic, %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { i64, i8*, %union.anon.0 }
%union.anon.0 = type { i64 }
%struct.RTypedData = type { %struct.RBasic, %struct.rb_data_type_struct*, i64, i8* }
%struct.sorbet_Closure = type { i32, [0 x i64] }

@.str = private unnamed_addr constant [16 x i8] c"ERROR: %s is 0\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%li\0B\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@.str.6 = private unnamed_addr constant [5 x i8] c"func\00", align 1
@.str.10 = private unnamed_addr constant [45 x i8] c"%s: Expected type %s, got %s with value %li\0B\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@closureInfo = constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i32 0, i32 0), %struct.anon.1 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@rb_cData = external local_unnamed_addr constant i64, align 8
@rb_cModule = external local_unnamed_addr constant i64, align 8
@str_cast = private unnamed_addr constant [5 x i8] c"cast\00", align 1
@"str_T.class_of(<root>)" = private unnamed_addr constant [19 x i8] c"T.class_of(<root>)\00", align 1
@rubyIdPrecomputed_each = internal unnamed_addr global i64 0, align 8
@str_each = private unnamed_addr constant [5 x i8] c"each\00", align 1
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@llvm.global_ctors = appending global [2 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_each, i8* bitcast (i64* @rubyIdPrecomputed_each to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_puts, i8* bitcast (i64* @rubyIdPrecomputed_puts to i8*) }]

; Function Attrs: nounwind ssp uwtable
define weak void @dbg_sorbet_validate_id(i64, i8*) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6, !prof !0

4:                                                ; preds = %2
  %5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %1)
  tail call void @abort() #11
  unreachable

6:                                                ; preds = %2
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @abort() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_pi(i64) local_unnamed_addr #0 {
  %2 = tail call i8* @rb_id2name(i64 %0) #12
  ret i8* %2
}

declare i8* @rb_id2name(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_p(i64) local_unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #12
  %3 = inttoptr i64 %2 to %struct.RBasic*
  %4 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1
  %6 = and i64 %5, 8192
  %7 = icmp eq i64 %6, 0
  %8 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #12
  %9 = inttoptr i64 %8 to %struct.RString*
  br i1 %7, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !6
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i8* [ %12, %10 ], [ %15, %13 ]
  ret i8* %17
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #3

declare i64 @rb_ary_new_capa(i64) local_unnamed_addr #3

declare i64 @rb_ary_push(i64, i64) local_unnamed_addr #3

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #3

declare i8* @rb_obj_classname(i64) local_unnamed_addr #3

declare i32 @rb_block_given_p() local_unnamed_addr #3

declare i64 @rb_block_proc() local_unnamed_addr #3

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #4

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #3

declare i64 @rb_block_call(i64, i64, i32, i64*, i64 (...)*, i64) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind optsize ssp uwtable
define internal fastcc void @sorbet_cast_failure(i64) unnamed_addr #5 {
  %2 = load i64, i64* @rb_eTypeError, align 8, !tbaa !7
  %3 = tail call i8* @rb_obj_classname(i64 %0) #12
  tail call void (i64, i8*, ...) @rb_raise(i64 %2, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"str_T.class_of(<root>)", i64 0, i64 0), i8* %3, i64 %0) #13
  unreachable
}

declare i8* @ruby_xmalloc(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8*) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !8
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #12
  ret void
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly) #6 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !8
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

declare i64 @rb_data_typed_object_wrap(i64, i8*, %struct.rb_data_type_struct*) local_unnamed_addr #3

declare i64 @rb_obj_is_kind_of(i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind readonly
declare i64 @rb_class_inherited_p(i64, i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp
define internal i64 @"func_<S <C <U <root>>> $1><N <U <static-init>> $110>$block_1"(i64 %firstYieldArgRaw, i64 %captures, i32 %argc, i64* nocapture readonly %argArray, i64 %blockArg) #8 {
functionEntryInitializers:
  %callArgs = alloca [2 x i64], align 8
  %rubyId_puts = load i64, i64* @rubyIdPrecomputed_puts, align 8
  %default0 = icmp eq i32 %argc, 0
  br i1 %default0, label %fillFromDefaultBlockDone, label %fillFromArgBlock0, !prof !0

fillFromArgBlock0:                                ; preds = %functionEntryInitializers
  %rawArg_x = load i64, i64* %argArray, align 8
  br label %fillFromDefaultBlockDone

fillFromDefaultBlockDone:                         ; preds = %functionEntryInitializers, %fillFromArgBlock0
  %x.sroa.0.0 = phi i64 [ %rawArg_x, %fillFromArgBlock0 ], [ 8, %functionEntryInitializers ]
  %callArgsAddr = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs, i64 0, i64 0
  store i64 %x.sroa.0.0, i64* %callArgsAddr, align 8
  %0 = inttoptr i64 %captures to %struct.RTypedData*
  %1 = getelementptr inbounds %struct.RTypedData, %struct.RTypedData* %0, i64 0, i32 3
  %2 = bitcast i8** %1 to %struct.sorbet_Closure**
  %3 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %2, align 8, !tbaa !10
  %4 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %3, i64 0, i32 1, i64 0
  %5 = load i64, i64* %4, align 8
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_puts, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #12, !noalias !13
  %6 = call i64 @rb_funcallv(i64 %5, i64 %rubyId_puts, i32 1, i64* nonnull %callArgsAddr) #12
  ret i64 %6
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_each() #8 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_each, i64 0, i64 0), i64 4) #12
  store i64 %0, i64* @rubyIdPrecomputed_each, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_puts() #8 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 4) #12
  store i64 %0, i64* @rubyIdPrecomputed_puts, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_test_testdata_llvm_block_args() local_unnamed_addr #9 {
entry:
  %callArgs.i = alloca [2 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8
  %1 = bitcast [2 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1)
  %2 = tail call i8* @ruby_xmalloc(i64 16) #12
  %3 = load i64, i64* @rb_cData, align 8, !tbaa !7
  %4 = tail call i64 @rb_data_typed_object_wrap(i64 %3, i8* %2, %struct.rb_data_type_struct* nonnull @closureInfo) #12
  %5 = inttoptr i64 %4 to %struct.RTypedData*
  %6 = getelementptr inbounds %struct.RTypedData, %struct.RTypedData* %5, i64 0, i32 3
  %7 = bitcast i8** %6 to %struct.sorbet_Closure**
  %8 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %7, align 8, !tbaa !10
  %9 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %8, i64 0, i32 1, i64 0
  store i64 8, i64* %9, align 8
  %rubyId_each.i = load i64, i64* @rubyIdPrecomputed_each, align 8
  %10 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %7, align 8, !tbaa !10
  %11 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %10, i64 0, i32 1, i64 0
  store i64 %0, i64* %11, align 8
  %12 = tail call i32 @rb_block_given_p() #12
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %sorbet_getMethodBlockAsProc.exit.i, label %14

14:                                               ; preds = %entry
  %15 = tail call i64 @rb_block_proc() #12
  br label %sorbet_getMethodBlockAsProc.exit.i

sorbet_getMethodBlockAsProc.exit.i:               ; preds = %14, %entry
  %16 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %7, align 8, !tbaa !10
  %17 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %16, i64 0, i32 1, i64 0
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %18, %0
  br i1 %19, label %"func_<S <C <U <root>>> $1><N <U <static-init>> $110>.exit", label %20

20:                                               ; preds = %sorbet_getMethodBlockAsProc.exit.i
  %21 = load i64, i64* @rb_cModule, align 8, !tbaa !7
  %22 = tail call i64 @rb_obj_is_kind_of(i64 %18, i64 %21) #12
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %typeTestFail.i, label %sorbet_isa_class_of.exit.i, !prof !16

sorbet_isa_class_of.exit.i:                       ; preds = %20
  %24 = tail call i64 @rb_class_inherited_p(i64 %18, i64 %0) #7
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %typeTestFail.i, label %"func_<S <C <U <root>>> $1><N <U <static-init>> $110>.exit", !prof !0

typeTestFail.i:                                   ; preds = %sorbet_isa_class_of.exit.i, %20
  tail call fastcc void @sorbet_cast_failure(i64 %18) #12
  unreachable

"func_<S <C <U <root>>> $1><N <U <static-init>> $110>.exit": ; preds = %sorbet_getMethodBlockAsProc.exit.i, %sorbet_isa_class_of.exit.i
  %26 = tail call i64 @rb_ary_new_capa(i64 2) #12
  %27 = tail call i64 @rb_ary_push(i64 %26, i64 3) #12
  %28 = tail call i64 @rb_ary_push(i64 %26, i64 5) #12
  %29 = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs.i, i64 0, i64 0
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_each.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #12, !noalias !17
  %30 = call i64 @rb_block_call(i64 %26, i64 %rubyId_each.i, i32 0, i64* nonnull %29, i64 (...)* bitcast (i64 (i64, i64, i32, i64*, i64)* @"func_<S <C <U <root>>> $1><N <U <static-init>> $110>$block_1" to i64 (...)*), i64 %4) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #10

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #10

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { nofree nounwind }
attributes #2 = { cold noreturn }
attributes #3 = { "addedToSilenceEmptyAttrsError" }
attributes #4 = { noreturn }
attributes #5 = { cold noreturn nounwind optsize ssp uwtable }
attributes #6 = { norecurse nounwind readnone ssp uwtable }
attributes #7 = { nounwind readonly }
attributes #8 = { nounwind ssp }
attributes #9 = { nounwind sspreq }
attributes #10 = { argmemonly nounwind }
attributes #11 = { cold noreturn nounwind }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }

!0 = !{!"branch_weights", i32 1, i32 2000}
!1 = !{!2, !3, i64 0}
!2 = !{!"RBasic", !3, i64 0, !3, i64 8}
!3 = !{!"long", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
!7 = !{!3, !3, i64 0}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !4, i64 0}
!10 = !{!11, !12, i64 32}
!11 = !{!"RTypedData", !2, i64 0, !12, i64 16, !3, i64 24, !12, i64 32}
!12 = !{!"any pointer", !4, i64 0}
!13 = !{!14}
!14 = distinct !{!14, !15, !"sorbet_callFunc: argument 0"}
!15 = distinct !{!15, !"sorbet_callFunc"}
!16 = !{!"branch_weights", i32 1073205, i32 2146410443}
!17 = !{!18}
!18 = distinct !{!18, !19, !"sorbet_callFuncBlock: argument 0"}
!19 = distinct !{!19, !"sorbet_callFuncBlock"}
