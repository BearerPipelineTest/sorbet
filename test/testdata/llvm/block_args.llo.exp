; ModuleID = 'payload'
source_filename = "compiler/IRHelpers/payload.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_data_type_struct = type { i8*, %struct.anon.1, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.1 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.RBasic = type { i64, i64 }
%struct.RString = type { %struct.RBasic, %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { i64, i8*, %union.anon.0 }
%union.anon.0 = type { i64 }
%struct.RTypedData = type { %struct.RBasic, %struct.rb_data_type_struct*, i64, i8* }
%struct.sorbet_Closure = type { i32, [0 x i64] }

@.str = private unnamed_addr constant [16 x i8] c"ERROR: %s is 0\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%li\0B\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@.str.6 = private unnamed_addr constant [5 x i8] c"func\00", align 1
@.str.10 = private unnamed_addr constant [45 x i8] c"%s: Expected type %s, got %s with value %li\0B\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@closureInfo = constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i32 0, i32 0), %struct.anon.1 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@rb_cData = external local_unnamed_addr constant i64, align 8
@rb_cModule = external local_unnamed_addr constant i64, align 8
@str_cast = private unnamed_addr constant [5 x i8] c"cast\00", align 1
@"str_T.class_of(<root>)" = private unnamed_addr constant [19 x i8] c"T.class_of(<root>)\00", align 1
@rubyIdPrecomputed_map = internal unnamed_addr global i64 0, align 8
@str_map = private unnamed_addr constant [4 x i8] c"map\00", align 1
@"rubyIdPrecomputed_+" = internal unnamed_addr global i64 0, align 8
@"str_+" = private unnamed_addr constant [2 x i8] c"+\00", align 1
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@llvm.global_ctors = appending global [3 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_map, i8* bitcast (i64* @rubyIdPrecomputed_map to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_+", i8* bitcast (i64* @"rubyIdPrecomputed_+" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_puts, i8* bitcast (i64* @rubyIdPrecomputed_puts to i8*) }]

; Function Attrs: nounwind ssp uwtable
define weak void @dbg_sorbet_validate_id(i64 %0, i8* %1) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6, !prof !0

4:                                                ; preds = %2
  %5 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %1)
  tail call void @abort() #12
  unreachable

6:                                                ; preds = %2
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @abort() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_pi(i64 %0) local_unnamed_addr #0 {
  %2 = tail call i8* @rb_id2name(i64 %0) #13
  ret i8* %2
}

declare i8* @rb_id2name(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_p(i64 %0) local_unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #13
  %3 = inttoptr i64 %2 to %struct.RBasic*
  %4 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1
  %6 = and i64 %5, 8192
  %7 = icmp eq i64 %6, 0
  %8 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #13
  %9 = inttoptr i64 %8 to %struct.RString*
  br i1 %7, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !6
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i8* [ %12, %10 ], [ %15, %13 ]
  ret i8* %17
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #3

declare i64 @rb_ary_new_capa(i64) local_unnamed_addr #3

declare i64 @rb_ary_push(i64, i64) local_unnamed_addr #3

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #3

declare i8* @rb_obj_classname(i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #4

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #3

declare i64 @rb_block_call(i64, i64, i32, i64*, i64 (...)*, i64) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind optsize ssp uwtable
define internal fastcc void @sorbet_cast_failure(i64 %0) unnamed_addr #5 {
  %2 = load i64, i64* @rb_eTypeError, align 8, !tbaa !7
  %3 = tail call i8* @rb_obj_classname(i64 %0) #13
  tail call void (i64, i8*, ...) @rb_raise(i64 %2, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"str_T.class_of(<root>)", i64 0, i64 0), i8* %3, i64 %0) #14
  unreachable
}

declare i8* @ruby_xmalloc(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8* %0) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !8
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #13
  ret void
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly %0) #6 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !8
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

declare i64 @rb_data_typed_object_wrap(i64, i8*, %struct.rb_data_type_struct*) local_unnamed_addr #3

declare i64 @rb_obj_is_kind_of(i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind readonly
declare i64 @rb_class_inherited_p(i64, i64) local_unnamed_addr #7

declare i64 @rb_int2big(i64) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #8

; Function Attrs: nounwind ssp
define internal i64 @"func_<root>.<static-init>$111$block_1"(i64 %firstYieldArgRaw, i64 %captures, i32 %argc, i64* nocapture readonly %argArray, i64 %blockArg) #9 {
functionEntryInitializers:
  %callArgs = alloca [2 x i64], align 8
  %"rubyId_+" = load i64, i64* @"rubyIdPrecomputed_+", align 8
  %default0 = icmp eq i32 %argc, 0
  br i1 %default0, label %fillFromDefaultBlockDone.thread, label %fillFromDefaultBlockDone, !prof !0, !misexpect !10

fillFromDefaultBlockDone.thread:                  ; preds = %functionEntryInitializers
  %callArgsAddr21 = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs, i64 0, i64 0
  store i64 3, i64* %callArgsAddr21, align 8
  br label %"slowSymCallIntrinsic_+"

fillFromDefaultBlockDone:                         ; preds = %functionEntryInitializers
  %rawArg_x = load i64, i64* %argArray, align 8
  %0 = and i64 %rawArg_x, 1
  %1 = icmp eq i64 %0, 0
  %callArgsAddr = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs, i64 0, i64 0
  store i64 3, i64* %callArgsAddr, align 8
  br i1 %1, label %"slowSymCallIntrinsic_+", label %"fastSymCallIntrinsic_+", !prof !0, !misexpect !11

"afterSymCallIntrinsic_+":                        ; preds = %6, %"fastSymCallIntrinsic_+", %"slowSymCallIntrinsic_+"
  %"symIntrinsicRawPhi_+" = phi i64 [ %2, %"slowSymCallIntrinsic_+" ], [ %9, %6 ], [ %5, %"fastSymCallIntrinsic_+" ]
  ret i64 %"symIntrinsicRawPhi_+"

"slowSymCallIntrinsic_+":                         ; preds = %fillFromDefaultBlockDone, %fillFromDefaultBlockDone.thread
  %callArgsAddr26 = phi i64* [ %callArgsAddr21, %fillFromDefaultBlockDone.thread ], [ %callArgsAddr, %fillFromDefaultBlockDone ]
  %x.sroa.0.025 = phi i64 [ 8, %fillFromDefaultBlockDone.thread ], [ %rawArg_x, %fillFromDefaultBlockDone ]
  tail call void @dbg_sorbet_validate_id(i64 %"rubyId_+", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !12
  %2 = call i64 @rb_funcallv(i64 %x.sroa.0.025, i64 %"rubyId_+", i32 1, i64* nonnull %callArgsAddr26) #13
  br label %"afterSymCallIntrinsic_+"

"fastSymCallIntrinsic_+":                         ; preds = %fillFromDefaultBlockDone
  %3 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %rawArg_x, i64 2) #13
  %4 = extractvalue { i64, i1 } %3, 1
  %5 = extractvalue { i64, i1 } %3, 0
  br i1 %4, label %6, label %"afterSymCallIntrinsic_+"

6:                                                ; preds = %"fastSymCallIntrinsic_+"
  %7 = ashr i64 %5, 1
  %8 = xor i64 %7, -9223372036854775808
  %9 = tail call i64 @rb_int2big(i64 %8) #13, !noalias !15
  br label %"afterSymCallIntrinsic_+"
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_map() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_map, i64 0, i64 0), i64 3) #13
  store i64 %0, i64* @rubyIdPrecomputed_map, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_+"() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_+", i64 0, i64 0), i64 1) #13
  store i64 %0, i64* @"rubyIdPrecomputed_+", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_puts() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 4) #13
  store i64 %0, i64* @rubyIdPrecomputed_puts, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_test_testdata_llvm_block_args() local_unnamed_addr #10 {
entry:
  %callArgs.i = alloca [2 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8
  %1 = bitcast [2 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1)
  %2 = tail call i8* @ruby_xmalloc(i64 16) #13
  %3 = bitcast i8* %2 to i32*
  store i32 1, i32* %3, align 8, !tbaa !8
  %4 = load i64, i64* @rb_cData, align 8, !tbaa !7
  %5 = tail call i64 @rb_data_typed_object_wrap(i64 %4, i8* %2, %struct.rb_data_type_struct* nonnull @closureInfo) #13
  %6 = inttoptr i64 %5 to %struct.RTypedData*
  %7 = getelementptr inbounds %struct.RTypedData, %struct.RTypedData* %6, i64 0, i32 3
  %8 = bitcast i8** %7 to %struct.sorbet_Closure**
  %9 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %8, align 8, !tbaa !18
  %10 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %9, i64 0, i32 1, i64 0
  store i64 8, i64* %10, align 8
  %rubyId_map.i = load i64, i64* @rubyIdPrecomputed_map, align 8
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8
  %11 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %8, align 8, !tbaa !18
  %12 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %11, i64 0, i32 1, i64 0
  store i64 %0, i64* %12, align 8
  %13 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %8, align 8, !tbaa !18
  %14 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %13, i64 0, i32 1, i64 0
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, %0
  br i1 %16, label %"func_<root>.<static-init>$111.exit", label %17

17:                                               ; preds = %entry
  %18 = load i64, i64* @rb_cModule, align 8, !tbaa !7
  %19 = tail call i64 @rb_obj_is_kind_of(i64 %15, i64 %18) #13
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %typeTestFail.i, label %sorbet_isa_class_of.exit.i, !prof !21

sorbet_isa_class_of.exit.i:                       ; preds = %17
  %21 = tail call i64 @rb_class_inherited_p(i64 %15, i64 %0) #7
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %typeTestFail.i, label %"func_<root>.<static-init>$111.exit", !prof !0, !misexpect !11

typeTestFail.i:                                   ; preds = %sorbet_isa_class_of.exit.i, %17
  tail call fastcc void @sorbet_cast_failure(i64 %15) #13
  unreachable

"func_<root>.<static-init>$111.exit":             ; preds = %entry, %sorbet_isa_class_of.exit.i
  %23 = tail call i64 @rb_ary_new_capa(i64 2) #13
  %24 = tail call i64 @rb_ary_push(i64 %23, i64 3) #13
  %25 = tail call i64 @rb_ary_push(i64 %23, i64 5) #13
  %26 = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs.i, i64 0, i64 0
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_map.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !22
  %27 = call i64 @rb_block_call(i64 %23, i64 %rubyId_map.i, i32 0, i64* nonnull %26, i64 (...)* bitcast (i64 (i64, i64, i32, i64*, i64)* @"func_<root>.<static-init>$111$block_1" to i64 (...)*), i64 %5) #13
  store i64 %27, i64* %26, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !25
  %28 = call i64 @rb_funcallv(i64 %15, i64 %rubyId_puts.i, i32 1, i64* nonnull %26) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #11

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #11

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { nofree nounwind }
attributes #2 = { cold noreturn }
attributes #3 = { "addedToSilenceEmptyAttrsError" }
attributes #4 = { noreturn }
attributes #5 = { cold noreturn nounwind optsize ssp uwtable }
attributes #6 = { norecurse nounwind readnone ssp uwtable }
attributes #7 = { nounwind readonly }
attributes #8 = { nounwind readnone speculatable willreturn }
attributes #9 = { nounwind ssp }
attributes #10 = { nounwind sspreq }
attributes #11 = { argmemonly nounwind willreturn }
attributes #12 = { cold noreturn nounwind }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }

!0 = !{!"branch_weights", i32 1, i32 2000}
!1 = !{!2, !3, i64 0}
!2 = !{!"RBasic", !3, i64 0, !3, i64 8}
!3 = !{!"long", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
!7 = !{!3, !3, i64 0}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !4, i64 0}
!10 = !{!"misexpect", i64 1, i64 2000, i64 1}
!11 = !{!"misexpect", i64 0, i64 2000, i64 1}
!12 = !{!13}
!13 = distinct !{!13, !14, !"sorbet_callFunc: argument 0"}
!14 = distinct !{!14, !"sorbet_callFunc"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"sorbet_rb_int_plus: argument 0"}
!17 = distinct !{!17, !"sorbet_rb_int_plus"}
!18 = !{!19, !20, i64 32}
!19 = !{!"RTypedData", !2, i64 0, !20, i64 16, !3, i64 24, !20, i64 32}
!20 = !{!"any pointer", !4, i64 0}
!21 = !{!"branch_weights", i32 1073205, i32 2146410443}
!22 = !{!23}
!23 = distinct !{!23, !24, !"sorbet_callFuncBlock: argument 0"}
!24 = distinct !{!24, !"sorbet_callFuncBlock"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"sorbet_callFunc: argument 0"}
!27 = distinct !{!27, !"sorbet_callFunc"}
