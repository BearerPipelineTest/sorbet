source_filename = "compiler/IRHelpers/payload.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin18.2.0"

%struct.rb_data_type_struct = type { i8*, %struct.anon.1, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.1 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.OnigEncodingTypeST = type { i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i8*, i32, i32, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8**, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i32 (i32, i32*, i32, i8*)*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, i8*, %struct.OnigCaseFoldCodeItem*, %struct.OnigEncodingTypeST*)*, i32 (%struct.OnigEncodingTypeST*, i8*, i8*)*, i32 (i32, i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i32*, i32**, %struct.OnigEncodingTypeST*)*, i8* (i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32*, i8**, i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32, i32 }
%struct.OnigCaseFoldCodeItem = type { i32, i32, [3 x i32] }
%struct.RBasic = type { i64, i64 }
%struct.RTypedData = type { %struct.RBasic, %struct.rb_data_type_struct*, i64, i8* }
%struct.sorbet_Closure = type { i32, [0 x i64] }

@.str = private unnamed_addr constant [16 x i8] c"ERROR: %s is 0\0A\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@wrong_constant_name = internal constant [25 x i8] c"wrong constant name %1$s\00", align 16
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@.str.3 = private unnamed_addr constant [36 x i8] c"%li\0B does not refer to class/module\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"func\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@closureInfo = constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i32 0, i32 0), %struct.anon.1 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@rb_cData = external local_unnamed_addr constant i64, align 8
@userStr_hi = private unnamed_addr constant [3 x i8] c"hi\00", align 1
@rubyIdPrecomputed_times = internal unnamed_addr global i64 0, align 8
@str_times = private unnamed_addr constant [6 x i8] c"times\00", align 1
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@llvm.global_ctors = appending global [2 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_times, i8* bitcast (i64* @rubyIdPrecomputed_times to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_puts, i8* bitcast (i64* @rubyIdPrecomputed_puts to i8*) }]
@str_Kernel = private unnamed_addr constant [7 x i8] c"Kernel\00", align 1

; Function Attrs: nounwind ssp uwtable
define weak void @dbg_sorbet_validate_id(i64, i8*) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6, !prof !0

4:                                                ; preds = %2
  %5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %1)
  tail call void @abort() #11
  unreachable

6:                                                ; preds = %2
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @abort() local_unnamed_addr #2

declare i64 @rb_str_new(i8*, i64) local_unnamed_addr #3

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #3

declare i64 @rb_id2sym(i64) local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @sorbet_getConstant() unnamed_addr #4 {
  %1 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Kernel, i64 0, i64 0), i64 6) #12
  %2 = tail call i64 @rb_id2sym(i64 %1) #12
  %3 = load i64, i64* @rb_cObject, align 8, !tbaa !1
  %4 = tail call %struct.OnigEncodingTypeST* @rb_enc_get(i64 %2) #12
  br label %8

.loopexit1:                                       ; preds = %rb_obj_freeze_inline.exit, %39, %36, %23, %97
  %5 = phi i64 [ %98, %97 ], [ %2, %23 ], [ %2, %39 ], [ %2, %36 ], [ %62, %rb_obj_freeze_inline.exit ]
  %6 = tail call i64 @rb_fstring_cstr(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @wrong_constant_name, i64 0, i64 0)) #12
  %7 = tail call i64 @rb_name_err_new(i64 %6, i64 %9, i64 %5) #12
  tail call void @rb_exc_raise(i64 %7) #13
  unreachable

8:                                                ; preds = %105, %0
  %9 = phi i64 [ %3, %0 ], [ %106, %105 ]
  %10 = phi i8* [ getelementptr inbounds ([7 x i8], [7 x i8]* @str_Kernel, i64 0, i64 0), %0 ], [ %45, %105 ]
  %11 = phi i8* [ getelementptr inbounds ([7 x i8], [7 x i8]* @str_Kernel, i64 0, i64 0), %0 ], [ %44, %105 ]
  %12 = icmp ult i8* %11, getelementptr inbounds ([7 x i8], [7 x i8]* @str_Kernel, i64 0, i64 6)
  br i1 %12, label %13, label %23

13:                                               ; preds = %8
  %14 = load i8, i8* %11, align 1, !tbaa !5
  %15 = icmp eq i8 %14, 58
  br i1 %15, label %23, label %.preheader

16:                                               ; preds = %.preheader
  %17 = load i8, i8* %20, align 1, !tbaa !5
  %18 = icmp eq i8 %17, 58
  br i1 %18, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %13, %16
  %19 = phi i8* [ %20, %16 ], [ %11, %13 ]
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  %21 = icmp eq i8* %20, getelementptr inbounds ([7 x i8], [7 x i8]* @str_Kernel, i64 0, i64 6)
  br i1 %21, label %.loopexit, label %16

.loopexit:                                        ; preds = %16, %.preheader
  %.lcssa = phi i8* [ %20, %16 ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @str_Kernel, i64 0, i64 6), %.preheader ]
  %22 = icmp ult i8* %.lcssa, getelementptr inbounds ([7 x i8], [7 x i8]* @str_Kernel, i64 0, i64 6)
  br label %23

23:                                               ; preds = %.loopexit, %13, %8
  %24 = phi i8* [ %11, %8 ], [ %11, %13 ], [ %.lcssa, %.loopexit ]
  %25 = phi i1 [ false, %8 ], [ true, %13 ], [ %22, %.loopexit ]
  %26 = icmp eq i8* %10, %24
  br i1 %26, label %.loopexit1, label %27

27:                                               ; preds = %23
  %28 = ptrtoint i8* %24 to i64
  %29 = ptrtoint i8* %10 to i64
  %30 = sub i64 %28, %29
  %31 = tail call i64 @rb_check_id_cstr(i8* %10, i64 %30, %struct.OnigEncodingTypeST* %4) #12
  %32 = sub i64 %29, ptrtoint ([7 x i8]* @str_Kernel to i64)
  br i1 %25, label %33, label %43

33:                                               ; preds = %27
  %34 = load i8, i8* %24, align 1, !tbaa !5
  %35 = icmp eq i8 %34, 58
  br i1 %35, label %36, label %43

36:                                               ; preds = %33
  %37 = getelementptr inbounds i8, i8* %24, i64 2
  %38 = icmp ult i8* %37, getelementptr inbounds ([7 x i8], [7 x i8]* @str_Kernel, i64 0, i64 6)
  br i1 %38, label %39, label %.loopexit1

39:                                               ; preds = %36
  %40 = getelementptr inbounds i8, i8* %24, i64 1
  %41 = load i8, i8* %40, align 1, !tbaa !5
  %42 = icmp eq i8 %41, 58
  br i1 %42, label %43, label %.loopexit1

43:                                               ; preds = %39, %33, %27
  %44 = phi i8* [ %24, %33 ], [ %24, %27 ], [ %37, %39 ]
  %45 = phi i8* [ %10, %33 ], [ %10, %27 ], [ %37, %39 ]
  %46 = and i64 %9, 7
  %47 = icmp ne i64 %46, 0
  %48 = and i64 %9, -9
  %49 = icmp eq i64 %48, 0
  %50 = or i1 %47, %49
  br i1 %50, label %56, label %51

51:                                               ; preds = %43
  %52 = inttoptr i64 %9 to %struct.RBasic*
  %53 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %52, i64 0, i32 0
  %54 = load i64, i64* %53, align 8, !tbaa !6
  %55 = and i64 %54, 30
  %switch = icmp eq i64 %55, 2
  br i1 %switch, label %59, label %56

56:                                               ; preds = %51, %43
  %57 = load i64, i64* @rb_eTypeError, align 8, !tbaa !1
  %58 = tail call i64 @rb_str_quote_unprintable(i64 %2) #12
  tail call void (i64, i8*, ...) @rb_raise(i64 %57, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0), i64 %58) #13
  unreachable

59:                                               ; preds = %51
  %60 = icmp eq i64 %31, 0
  br i1 %60, label %61, label %94

61:                                               ; preds = %59
  %62 = tail call i64 @rb_str_subseq(i64 %2, i64 %32, i64 %30) #12
  %63 = and i64 %62, 7
  %64 = icmp ne i64 %63, 0
  %65 = and i64 %62, -9
  %66 = icmp eq i64 %65, 0
  %67 = or i1 %64, %66
  br i1 %67, label %rb_obj_freeze_inline.exit, label %68

68:                                               ; preds = %61
  %69 = inttoptr i64 %62 to %struct.RBasic*
  %70 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %69, i64 0, i32 0
  %71 = load i64, i64* %70, align 8, !tbaa !6
  %72 = and i64 %71, 31
  %73 = icmp eq i64 %72, 27
  br i1 %73, label %rb_obj_freeze_inline.exit, label %74

74:                                               ; preds = %68
  %75 = or i64 %71, 2048
  store i64 %75, i64* %70, align 8, !tbaa !6
  %76 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %69, i64 0, i32 1
  %77 = load i64, i64* %76, align 8, !tbaa !8
  %78 = icmp ne i64 %77, 0
  %79 = and i64 %71, 4096
  %80 = icmp eq i64 %79, 0
  %81 = and i1 %80, %78
  br i1 %81, label %82, label %rb_obj_freeze_inline.exit

82:                                               ; preds = %74
  tail call void @rb_freeze_singleton_class(i64 %62) #12
  br label %rb_obj_freeze_inline.exit

rb_obj_freeze_inline.exit:                        ; preds = %61, %68, %74, %82
  %83 = tail call i32 @rb_is_const_name(i64 %62) #12
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %.loopexit1, label %rb_class_of.exit

rb_class_of.exit:                                 ; preds = %rb_obj_freeze_inline.exit
  %85 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %52, i64 0, i32 1
  %86 = load i64, i64* %85, align 8, !tbaa !1
  %87 = tail call i32 @rb_method_basic_definition_p(i64 %86, i64 2817) #12
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %92

89:                                               ; preds = %rb_class_of.exit
  %90 = tail call i64 @rb_str_intern(i64 %62) #12
  %91 = tail call i64 @rb_const_missing(i64 %9, i64 %90) #12
  br label %105

92:                                               ; preds = %rb_class_of.exit
  %93 = tail call i64 @rb_mod_const_missing(i64 %9, i64 %62) #13
  unreachable

94:                                               ; preds = %59
  %95 = tail call i32 @rb_is_const_id(i64 %31) #6
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %99

97:                                               ; preds = %94
  %98 = tail call i64 @rb_id2sym(i64 %31) #12
  br label %.loopexit1

99:                                               ; preds = %94
  %100 = icmp eq i64 %32, 0
  br i1 %100, label %101, label %103

101:                                              ; preds = %99
  %102 = tail call i64 @rb_const_get(i64 %9, i64 %31) #12
  br label %105

103:                                              ; preds = %99
  %104 = tail call i64 @rb_const_get_from(i64 %9, i64 %31) #12
  br label %105

105:                                              ; preds = %103, %101, %89
  %106 = phi i64 [ %91, %89 ], [ %102, %101 ], [ %104, %103 ]
  %107 = icmp ult i8* %44, getelementptr inbounds ([7 x i8], [7 x i8]* @str_Kernel, i64 0, i64 6)
  br i1 %107, label %8, label %108

108:                                              ; preds = %105
  ret i64 %106
}

declare %struct.OnigEncodingTypeST* @rb_enc_get(i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @rb_exc_raise(i64) local_unnamed_addr #5

declare i64 @rb_name_err_new(i64, i64, i64) local_unnamed_addr #3

declare i64 @rb_fstring_cstr(i8*) local_unnamed_addr #3

declare i64 @rb_check_id_cstr(i8*, i64, %struct.OnigEncodingTypeST*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #5

declare i64 @rb_str_quote_unprintable(i64) local_unnamed_addr #3

declare i64 @rb_str_subseq(i64, i64, i64) local_unnamed_addr #3

declare i32 @rb_is_const_name(i64) local_unnamed_addr #3

declare i32 @rb_method_basic_definition_p(i64, i64) local_unnamed_addr #3

declare i64 @rb_str_intern(i64) local_unnamed_addr #3

declare i64 @rb_const_missing(i64, i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare i64 @rb_mod_const_missing(i64, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @rb_is_const_id(i64) local_unnamed_addr #6

declare i64 @rb_const_get(i64, i64) local_unnamed_addr #3

declare i64 @rb_const_get_from(i64, i64) local_unnamed_addr #3

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #3

declare i64 @rb_block_call(i64, i64, i32, i64*, i64 (...)*, i64) local_unnamed_addr #3

declare i8* @ruby_xmalloc(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8*) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !9
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #12
  ret void
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly) #7 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !9
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

declare i64 @rb_data_typed_object_wrap(i64, i8*, %struct.rb_data_type_struct*) local_unnamed_addr #3

declare void @rb_freeze_singleton_class(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp
define internal i64 @"<S <C <U <root>>> $1><N <U <static-init>> $110>$block_1"(i64 %firstYieldArgRaw, i64 %captures, i32 %argc, i64* nocapture readnone %argArray, i64 %blockArg) #8 {
functionEntryInitializers:
  %callArgs = alloca [1 x i64], align 8
  %rubyId_puts = load i64, i64* @rubyIdPrecomputed_puts, align 8
  %0 = inttoptr i64 %captures to %struct.RTypedData*
  %1 = getelementptr inbounds %struct.RTypedData, %struct.RTypedData* %0, i64 0, i32 3
  %2 = bitcast i8** %1 to %struct.sorbet_Closure**
  %3 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %2, align 8, !tbaa !11
  %4 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %3, i64 0, i32 1, i64 1
  %5 = load i64, i64* %4, align 8
  %callArgsAddr = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs, i64 0, i64 0
  store i64 %5, i64* %callArgsAddr, align 8
  %6 = tail call fastcc i64 @sorbet_getConstant()
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_puts, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #12, !noalias !14
  %7 = call i64 @rb_funcallv(i64 %6, i64 %rubyId_puts, i32 1, i64* nonnull %callArgsAddr) #12
  ret i64 %7
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_times() #8 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_times, i64 0, i64 0), i64 5) #12
  store i64 %0, i64* @rubyIdPrecomputed_times, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_puts() #8 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 4) #12
  store i64 %0, i64* @rubyIdPrecomputed_puts, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_block_no_args_capture() local_unnamed_addr #9 {
entry:
  %callArgs.i = alloca [1 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8, !tbaa !1
  %1 = bitcast [1 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1)
  %2 = tail call i8* @ruby_xmalloc(i64 24) #12
  %3 = load i64, i64* @rb_cData, align 8, !tbaa !1
  %4 = tail call i64 @rb_data_typed_object_wrap(i64 %3, i8* %2, %struct.rb_data_type_struct* nonnull @closureInfo) #12
  %5 = inttoptr i64 %4 to %struct.RTypedData*
  %6 = getelementptr inbounds %struct.RTypedData, %struct.RTypedData* %5, i64 0, i32 3
  %7 = bitcast i8** %6 to %struct.sorbet_Closure**
  %8 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %7, align 8, !tbaa !11
  %9 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %8, i64 0, i32 1, i64 0
  store i64 8, i64* %9, align 8
  %10 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %7, align 8, !tbaa !11
  %11 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %10, i64 0, i32 1, i64 1
  store i64 8, i64* %11, align 8
  %rubyId_times.i = load i64, i64* @rubyIdPrecomputed_times, align 8
  %12 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %7, align 8, !tbaa !11
  %13 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %12, i64 0, i32 1, i64 0
  store i64 %0, i64* %13, align 8
  %14 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @userStr_hi, i64 0, i64 0), i64 2) #12
  %15 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %7, align 8, !tbaa !11
  %16 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %15, i64 0, i32 1, i64 1
  store i64 %14, i64* %16, align 8
  %17 = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs.i, i64 0, i64 0
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_times.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #12, !noalias !17
  %18 = call i64 @rb_block_call(i64 21, i64 %rubyId_times.i, i32 0, i64* nonnull %17, i64 (...)* bitcast (i64 (i64, i64, i32, i64*, i64)* @"<S <C <U <root>>> $1><N <U <static-init>> $110>$block_1" to i64 (...)*), i64 %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #10

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #10

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { nofree nounwind }
attributes #2 = { cold noreturn }
attributes #3 = { "addedToSilenceEmptyAttrsError" }
attributes #4 = { noinline nounwind ssp uwtable }
attributes #5 = { noreturn }
attributes #6 = { nounwind readnone }
attributes #7 = { norecurse nounwind readonly ssp uwtable }
attributes #8 = { nounwind ssp }
attributes #9 = { nounwind sspreq }
attributes #10 = { argmemonly nounwind }
attributes #11 = { cold noreturn nounwind }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }

!0 = !{!"branch_weights", i32 1, i32 2000}
!1 = !{!2, !2, i64 0}
!2 = !{!"long", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!3, !3, i64 0}
!6 = !{!7, !2, i64 0}
!7 = !{!"RBasic", !2, i64 0, !2, i64 8}
!8 = !{!7, !2, i64 8}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !3, i64 0}
!11 = !{!12, !13, i64 32}
!12 = !{!"RTypedData", !7, i64 0, !13, i64 16, !2, i64 24, !13, i64 32}
!13 = !{!"any pointer", !3, i64 0}
!14 = !{!15}
!15 = distinct !{!15, !16, !"sorbet_callFunc: argument 0"}
!16 = distinct !{!16, !"sorbet_callFunc"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"sorbet_callFuncBlock: argument 0"}
!19 = distinct !{!19, !"sorbet_callFuncBlock"}
