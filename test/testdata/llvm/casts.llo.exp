source_filename = "compiler/IRHelpers/payload.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin18.2.0"

%struct.rb_data_type_struct = type { i8*, %struct.anon.1, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.1 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.RBasic = type { i64, i64 }
%struct.RString = type { %struct.RBasic, %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { i64, i8*, %union.anon.0 }
%union.anon.0 = type { i64 }

@.str = private unnamed_addr constant [16 x i8] c"ERROR: %s is 0\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%li\0B\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@.str.6 = private unnamed_addr constant [5 x i8] c"func\00", align 1
@.str.7 = private unnamed_addr constant [50 x i8] c"wrong number of arguments (given %d, expected %d)\00", align 1
@rb_eArgError = external local_unnamed_addr global i64, align 8
@.str.10 = private unnamed_addr constant [45 x i8] c"%s: Expected type %s, got %s with value %li\0B\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@closureInfo = local_unnamed_addr constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i32 0, i32 0), %struct.anon.1 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@rubyIdPrecomputed_all = internal unnamed_addr global i64 0, align 8
@str_all = private unnamed_addr constant [4 x i8] c"all\00", align 1
@rb_mKernel = external local_unnamed_addr constant i64
@str_Kernel = private unnamed_addr constant [7 x i8] c"Kernel\00", align 1
@rubyIdPrecomputed_any = internal unnamed_addr global i64 0, align 8
@str_any = private unnamed_addr constant [4 x i8] c"any\00", align 1
@"str_T.any(Integer, Float)" = private unnamed_addr constant [22 x i8] c"T.any(Integer, Float)\00", align 1
@"str_T.any(Float, Integer)" = private unnamed_addr constant [22 x i8] c"T.any(Float, Integer)\00", align 1
@str_Integer = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@"rubyIdPrecomputed_+" = internal unnamed_addr global i64 0, align 8
@"str_+" = private unnamed_addr constant [2 x i8] c"+\00", align 1
@str_Object.14 = private unnamed_addr constant [7 x i8] c"Object\00", align 1
@"rubyIdPrecomputed_[]" = internal unnamed_addr global i64 0, align 8
@"str_[]" = private unnamed_addr constant [3 x i8] c"[]\00", align 1
@str_cast.15 = private unnamed_addr constant [5 x i8] c"cast\00", align 1
@"str_T::Array[Integer]" = private unnamed_addr constant [18 x i8] c"T::Array[Integer]\00", align 1
@rubyIdPrecomputed_unsafe = internal unnamed_addr global i64 0, align 8
@str_unsafe = private unnamed_addr constant [7 x i8] c"unsafe\00", align 1
@rubyIdPrecomputed_fooAll = internal unnamed_addr global i64 0, align 8
@str_fooAll.17 = private unnamed_addr constant [7 x i8] c"fooAll\00", align 1
@rubyIdPrecomputed_fooAny1 = internal unnamed_addr global i64 0, align 8
@str_fooAny1.18 = private unnamed_addr constant [8 x i8] c"fooAny1\00", align 1
@rubyIdPrecomputed_fooAny2 = internal unnamed_addr global i64 0, align 8
@str_fooAny2.19 = private unnamed_addr constant [8 x i8] c"fooAny2\00", align 1
@rubyIdPrecomputed_fooInt = internal unnamed_addr global i64 0, align 8
@str_fooInt.20 = private unnamed_addr constant [7 x i8] c"fooInt\00", align 1
@rubyIdPrecomputed_fooArray = internal unnamed_addr global i64 0, align 8
@str_fooArray.21 = private unnamed_addr constant [9 x i8] c"fooArray\00", align 1
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@llvm.global_ctors = appending global [11 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_all, i8* bitcast (i64* @rubyIdPrecomputed_all to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_any, i8* bitcast (i64* @rubyIdPrecomputed_any to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_+", i8* bitcast (i64* @"rubyIdPrecomputed_+" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_[]", i8* bitcast (i64* @"rubyIdPrecomputed_[]" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_unsafe, i8* bitcast (i64* @rubyIdPrecomputed_unsafe to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_fooAll, i8* bitcast (i64* @rubyIdPrecomputed_fooAll to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_fooAny1, i8* bitcast (i64* @rubyIdPrecomputed_fooAny1 to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_fooAny2, i8* bitcast (i64* @rubyIdPrecomputed_fooAny2 to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_fooInt, i8* bitcast (i64* @rubyIdPrecomputed_fooInt to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_fooArray, i8* bitcast (i64* @rubyIdPrecomputed_fooArray to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_puts, i8* bitcast (i64* @rubyIdPrecomputed_puts to i8*) }]

; Function Attrs: nounwind ssp uwtable
define weak void @dbg_sorbet_validate_id(i64, i8*) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6, !prof !0

4:                                                ; preds = %2
  %5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %1)
  tail call void @abort() #12
  unreachable

6:                                                ; preds = %2
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @abort() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_pi(i64) local_unnamed_addr #0 {
  %2 = tail call i8* @rb_id2name(i64 %0) #13
  ret i8* %2
}

declare i8* @rb_id2name(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_p(i64) local_unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #13
  %3 = inttoptr i64 %2 to %struct.RBasic*
  %4 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1
  %6 = and i64 %5, 8192
  %7 = icmp eq i64 %6, 0
  %8 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #13
  %9 = inttoptr i64 %8 to %struct.RString*
  br i1 %7, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !6
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i8* [ %12, %10 ], [ %15, %13 ]
  ret i8* %17
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #3

declare i64 @rb_ary_new_capa(i64) local_unnamed_addr #3

declare i64 @rb_ary_push(i64, i64) local_unnamed_addr #3

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #3

declare i64 @rb_id2sym(i64) local_unnamed_addr #3

declare i8* @rb_obj_classname(i64) local_unnamed_addr #3

declare i32 @rb_block_given_p() local_unnamed_addr #3

declare i64 @rb_block_proc() local_unnamed_addr #3

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #4

declare void @rb_define_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #3

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @sorbet_rb_arity_error_new(i32) unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.7, i64 0, i64 0), i32 %0, i32 1) #13
  %3 = load i64, i64* @rb_eArgError, align 8, !tbaa !7
  %4 = tail call i64 @rb_exc_new_str(i64 %3, i64 %2) #13
  ret i64 %4
}

declare i64 @rb_exc_new_str(i64, i64) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind optsize ssp uwtable
define internal fastcc void @sorbet_cast_failure(i64, i8*) unnamed_addr #5 {
  %3 = load i64, i64* @rb_eTypeError, align 8, !tbaa !7
  %4 = tail call i8* @rb_obj_classname(i64 %0) #13
  tail call void (i64, i8*, ...) @rb_raise(i64 %3, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast.15, i64 0, i64 0), i8* %1, i8* %4, i64 %0) #14
  unreachable
}

; Function Attrs: noreturn nounwind ssp uwtable
define internal fastcc void @sorbet_rb_error_arity(i32) unnamed_addr #6 {
  %2 = tail call fastcc i64 @sorbet_rb_arity_error_new(i32 %0)
  tail call void @rb_exc_raise(i64 %2) #14
  unreachable
}

; Function Attrs: noreturn
declare void @rb_exc_raise(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8*) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !8
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #13
  ret void
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly) #7 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !8
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

declare i64 @rb_obj_is_kind_of(i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_<C <U Object>><U fooAll>"(i32 %argc, i64* nocapture readonly %argArray, i64 %selfRaw) #8 {
functionEntryInitializers:
  %callArgs = alloca <2 x i64>, align 16
  %rubyId_all = load i64, i64* @rubyIdPrecomputed_all, align 8
  %0 = icmp eq i32 %argc, 1
  br i1 %0, label %fillRequiredArgs, label %argCountFailBlock, !prof !10

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_rb_error_arity(i32 %argc)
  unreachable

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %rawArg_arg = load i64, i64* %argArray, align 8
  %1 = tail call i32 @rb_block_given_p() #13
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %sorbet_getMethodBlockAsProc.exit, label %3

3:                                                ; preds = %fillRequiredArgs
  %4 = tail call i64 @rb_block_proc() #13
  br label %sorbet_getMethodBlockAsProc.exit

sorbet_getMethodBlockAsProc.exit:                 ; preds = %fillRequiredArgs, %3
  %5 = load i64, i64* @rb_cObject, align 8
  %6 = tail call i64 @rb_obj_is_kind_of(i64 %selfRaw, i64 %5) #13
  %7 = icmp eq i64 %6, 20
  br i1 %7, label %typeTestSuccess, label %typeTestFail, !prof !11

typeTestSuccess:                                  ; preds = %sorbet_getMethodBlockAsProc.exit
  %callArgsAddr = getelementptr inbounds <2 x i64>, <2 x i64>* %callArgs, i64 0, i64 0
  store <2 x i64> <i64 8, i64 8>, <2 x i64>* %callArgs, align 16
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_all, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !12
  %8 = call i64 @rb_funcallv(i64 8, i64 %rubyId_all, i32 2, i64* nonnull %callArgsAddr) #13
  %9 = load i64, i64* @rb_mKernel, align 8
  %10 = call i64 @rb_obj_is_kind_of(i64 %rawArg_arg, i64 %9) #13
  %11 = icmp eq i64 %10, 20
  br i1 %11, label %typeTestSuccess24, label %typeTestFail25, !prof !11

typeTestFail:                                     ; preds = %sorbet_getMethodBlockAsProc.exit
  tail call fastcc void @sorbet_cast_failure(i64 %selfRaw, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Object.14, i64 0, i64 0))
  unreachable

typeTestSuccess24:                                ; preds = %typeTestSuccess
  ret i64 %rawArg_arg

typeTestFail25:                                   ; preds = %typeTestSuccess
  call fastcc void @sorbet_cast_failure(i64 %rawArg_arg, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Kernel, i64 0, i64 0))
  unreachable
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_all() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_all, i64 0, i64 0), i64 3) #13
  store i64 %0, i64* @rubyIdPrecomputed_all, align 8
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_<C <U Object>><U fooAny1>"(i32 %argc, i64* nocapture readonly %argArray, i64 %selfRaw) #8 {
functionEntryInitializers:
  %callArgs = alloca <2 x i64>, align 16
  %rubyId_any = load i64, i64* @rubyIdPrecomputed_any, align 8
  %0 = icmp eq i32 %argc, 1
  br i1 %0, label %fillRequiredArgs, label %argCountFailBlock, !prof !10

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_rb_error_arity(i32 %argc)
  unreachable

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %rawArg_arg = load i64, i64* %argArray, align 8
  %1 = tail call i32 @rb_block_given_p() #13
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %sorbet_getMethodBlockAsProc.exit, label %3

3:                                                ; preds = %fillRequiredArgs
  %4 = tail call i64 @rb_block_proc() #13
  br label %sorbet_getMethodBlockAsProc.exit

sorbet_getMethodBlockAsProc.exit:                 ; preds = %fillRequiredArgs, %3
  %5 = load i64, i64* @rb_cObject, align 8
  %6 = tail call i64 @rb_obj_is_kind_of(i64 %selfRaw, i64 %5) #13
  %7 = icmp eq i64 %6, 20
  br i1 %7, label %typeTestSuccess, label %typeTestFail, !prof !11

typeTestSuccess:                                  ; preds = %sorbet_getMethodBlockAsProc.exit
  %callArgsAddr = getelementptr inbounds <2 x i64>, <2 x i64>* %callArgs, i64 0, i64 0
  store <2 x i64> <i64 8, i64 8>, <2 x i64>* %callArgs, align 16
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_any, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !15
  %8 = call i64 @rb_funcallv(i64 8, i64 %rubyId_any, i32 2, i64* nonnull %callArgsAddr) #13
  %9 = and i64 %rawArg_arg, 1
  %10 = icmp ne i64 %9, 0
  %11 = and i64 %rawArg_arg, 3
  %12 = icmp eq i64 %11, 2
  %or.cond32 = or i1 %10, %12
  br i1 %or.cond32, label %typeTestSuccess24, label %13

typeTestFail:                                     ; preds = %sorbet_getMethodBlockAsProc.exit
  tail call fastcc void @sorbet_cast_failure(i64 %selfRaw, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Object.14, i64 0, i64 0))
  unreachable

13:                                               ; preds = %typeTestSuccess
  %14 = and i64 %rawArg_arg, 7
  %15 = icmp ne i64 %14, 0
  %16 = and i64 %rawArg_arg, -9
  %17 = icmp eq i64 %16, 0
  %18 = or i1 %15, %17
  br i1 %18, label %typeTestFail25, label %orContinue, !prof !18

orContinue:                                       ; preds = %13
  %19 = inttoptr i64 %rawArg_arg to %struct.RBasic*
  %20 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %19, i64 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !1
  %22 = and i64 %21, 31
  %23 = icmp eq i64 %22, 4
  br i1 %23, label %typeTestSuccess24, label %typeTestFail25, !prof !11

typeTestSuccess24:                                ; preds = %typeTestSuccess, %orContinue
  ret i64 %rawArg_arg

typeTestFail25:                                   ; preds = %13, %orContinue
  call fastcc void @sorbet_cast_failure(i64 %rawArg_arg, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"str_T.any(Integer, Float)", i64 0, i64 0))
  unreachable
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_any() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_any, i64 0, i64 0), i64 3) #13
  store i64 %0, i64* @rubyIdPrecomputed_any, align 8
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_<C <U Object>><U fooAny2>"(i32 %argc, i64* nocapture readonly %argArray, i64 %selfRaw) #8 {
functionEntryInitializers:
  %callArgs = alloca <2 x i64>, align 16
  %rubyId_any = load i64, i64* @rubyIdPrecomputed_any, align 8
  %0 = icmp eq i32 %argc, 1
  br i1 %0, label %fillRequiredArgs, label %argCountFailBlock, !prof !10

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_rb_error_arity(i32 %argc)
  unreachable

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %rawArg_arg = load i64, i64* %argArray, align 8
  %1 = tail call i32 @rb_block_given_p() #13
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %sorbet_getMethodBlockAsProc.exit, label %3

3:                                                ; preds = %fillRequiredArgs
  %4 = tail call i64 @rb_block_proc() #13
  br label %sorbet_getMethodBlockAsProc.exit

sorbet_getMethodBlockAsProc.exit:                 ; preds = %fillRequiredArgs, %3
  %5 = load i64, i64* @rb_cObject, align 8
  %6 = tail call i64 @rb_obj_is_kind_of(i64 %selfRaw, i64 %5) #13
  %7 = icmp eq i64 %6, 20
  br i1 %7, label %typeTestSuccess, label %typeTestFail, !prof !11

typeTestSuccess:                                  ; preds = %sorbet_getMethodBlockAsProc.exit
  %callArgsAddr = getelementptr inbounds <2 x i64>, <2 x i64>* %callArgs, i64 0, i64 0
  store <2 x i64> <i64 8, i64 8>, <2 x i64>* %callArgs, align 16
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_any, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !19
  %8 = call i64 @rb_funcallv(i64 8, i64 %rubyId_any, i32 2, i64* nonnull %callArgsAddr) #13
  %9 = and i64 %rawArg_arg, 3
  %10 = icmp eq i64 %9, 2
  br i1 %10, label %typeTestSuccess24, label %11

11:                                               ; preds = %typeTestSuccess
  %12 = and i64 %rawArg_arg, 7
  %13 = icmp ne i64 %12, 0
  %14 = and i64 %rawArg_arg, -9
  %15 = icmp eq i64 %14, 0
  %16 = or i1 %13, %15
  br i1 %16, label %orContinue, label %sorbet_isa_Float.exit

sorbet_isa_Float.exit:                            ; preds = %11
  %17 = inttoptr i64 %rawArg_arg to %struct.RBasic*
  %18 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %17, i64 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !1
  %20 = and i64 %19, 31
  %21 = icmp eq i64 %20, 4
  br i1 %21, label %typeTestSuccess24, label %orContinue

typeTestFail:                                     ; preds = %sorbet_getMethodBlockAsProc.exit
  tail call fastcc void @sorbet_cast_failure(i64 %selfRaw, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Object.14, i64 0, i64 0))
  unreachable

orContinue:                                       ; preds = %11, %sorbet_isa_Float.exit
  %22 = and i64 %rawArg_arg, 1
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %typeTestFail25, label %typeTestSuccess24, !prof !0

typeTestSuccess24:                                ; preds = %orContinue, %typeTestSuccess, %sorbet_isa_Float.exit
  ret i64 %rawArg_arg

typeTestFail25:                                   ; preds = %orContinue
  call fastcc void @sorbet_cast_failure(i64 %rawArg_arg, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"str_T.any(Float, Integer)", i64 0, i64 0))
  unreachable
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_<C <U Object>><U fooInt>"(i32 %argc, i64* nocapture readonly %argArray, i64 %selfRaw) #8 {
functionEntryInitializers:
  %callArgs = alloca [1 x i64], align 8
  %"rubyId_+" = load i64, i64* @"rubyIdPrecomputed_+", align 8
  %0 = icmp eq i32 %argc, 1
  br i1 %0, label %fillRequiredArgs, label %argCountFailBlock, !prof !10

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_rb_error_arity(i32 %argc)
  unreachable

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %rawArg_arg = load i64, i64* %argArray, align 8
  %1 = tail call i32 @rb_block_given_p() #13
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %sorbet_getMethodBlockAsProc.exit, label %3

3:                                                ; preds = %fillRequiredArgs
  %4 = tail call i64 @rb_block_proc() #13
  br label %sorbet_getMethodBlockAsProc.exit

sorbet_getMethodBlockAsProc.exit:                 ; preds = %fillRequiredArgs, %3
  %5 = load i64, i64* @rb_cObject, align 8
  %6 = tail call i64 @rb_obj_is_kind_of(i64 %selfRaw, i64 %5) #13
  %7 = icmp eq i64 %6, 20
  br i1 %7, label %typeTestSuccess, label %typeTestFail, !prof !11

typeTestSuccess:                                  ; preds = %sorbet_getMethodBlockAsProc.exit
  %8 = and i64 %rawArg_arg, 1
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %typeTestFail27, label %typeTestSuccess30, !prof !0

typeTestFail:                                     ; preds = %sorbet_getMethodBlockAsProc.exit
  tail call fastcc void @sorbet_cast_failure(i64 %selfRaw, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Object.14, i64 0, i64 0))
  unreachable

typeTestFail27:                                   ; preds = %typeTestSuccess
  tail call fastcc void @sorbet_cast_failure(i64 %rawArg_arg, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_Integer, i64 0, i64 0))
  unreachable

typeTestSuccess30:                                ; preds = %typeTestSuccess
  %callArgsAddr = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs, i64 0, i64 0
  store i64 %rawArg_arg, i64* %callArgsAddr, align 8
  tail call void @dbg_sorbet_validate_id(i64 %"rubyId_+", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !22
  %10 = call i64 @rb_funcallv(i64 %rawArg_arg, i64 %"rubyId_+", i32 1, i64* nonnull %callArgsAddr) #13
  ret i64 %10
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_+"() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_+", i64 0, i64 0), i64 1) #13
  store i64 %0, i64* @"rubyIdPrecomputed_+", align 8
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_<C <U Object>><U fooArray>"(i32 %argc, i64* nocapture readonly %argArray, i64 %selfRaw) #8 {
functionEntryInitializers:
  %callArgs = alloca [1 x i64], align 8
  %"rubyId_[]" = load i64, i64* @"rubyIdPrecomputed_[]", align 8
  %0 = icmp eq i32 %argc, 1
  br i1 %0, label %fillRequiredArgs, label %argCountFailBlock, !prof !10

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_rb_error_arity(i32 %argc)
  unreachable

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %rawArg_arg = load i64, i64* %argArray, align 8
  %1 = tail call i32 @rb_block_given_p() #13
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %sorbet_getMethodBlockAsProc.exit, label %3

3:                                                ; preds = %fillRequiredArgs
  %4 = tail call i64 @rb_block_proc() #13
  br label %sorbet_getMethodBlockAsProc.exit

sorbet_getMethodBlockAsProc.exit:                 ; preds = %fillRequiredArgs, %3
  %5 = load i64, i64* @rb_cObject, align 8
  %6 = tail call i64 @rb_obj_is_kind_of(i64 %selfRaw, i64 %5) #13
  %7 = icmp eq i64 %6, 20
  br i1 %7, label %typeTestSuccess, label %typeTestFail, !prof !11

typeTestSuccess:                                  ; preds = %sorbet_getMethodBlockAsProc.exit
  %callArgsAddr = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs, i64 0, i64 0
  store i64 8, i64* %callArgsAddr, align 8
  tail call void @dbg_sorbet_validate_id(i64 %"rubyId_[]", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !25
  %8 = call i64 @rb_funcallv(i64 8, i64 %"rubyId_[]", i32 1, i64* nonnull %callArgsAddr) #13
  %9 = and i64 %rawArg_arg, 7
  %10 = icmp ne i64 %9, 0
  %11 = and i64 %rawArg_arg, -9
  %12 = icmp eq i64 %11, 0
  %13 = or i1 %10, %12
  br i1 %13, label %typeTestFail22, label %sorbet_isa_Array.exit, !prof !18

sorbet_isa_Array.exit:                            ; preds = %typeTestSuccess
  %14 = inttoptr i64 %rawArg_arg to %struct.RBasic*
  %15 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %14, i64 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !1
  %17 = and i64 %16, 31
  %18 = icmp eq i64 %17, 7
  br i1 %18, label %typeTestSuccess21, label %typeTestFail22, !prof !11

typeTestFail:                                     ; preds = %sorbet_getMethodBlockAsProc.exit
  tail call fastcc void @sorbet_cast_failure(i64 %selfRaw, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Object.14, i64 0, i64 0))
  unreachable

typeTestSuccess21:                                ; preds = %sorbet_isa_Array.exit
  ret i64 %rawArg_arg

typeTestFail22:                                   ; preds = %typeTestSuccess, %sorbet_isa_Array.exit
  call fastcc void @sorbet_cast_failure(i64 %rawArg_arg, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"str_T::Array[Integer]", i64 0, i64 0))
  unreachable
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_[]"() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"str_[]", i64 0, i64 0), i64 2) #13
  store i64 %0, i64* @"rubyIdPrecomputed_[]", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_unsafe() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_unsafe, i64 0, i64 0), i64 6) #13
  store i64 %0, i64* @rubyIdPrecomputed_unsafe, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_fooAll() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_fooAll.17, i64 0, i64 0), i64 6) #13
  store i64 %0, i64* @rubyIdPrecomputed_fooAll, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_fooAny1() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_fooAny1.18, i64 0, i64 0), i64 7) #13
  store i64 %0, i64* @rubyIdPrecomputed_fooAny1, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_fooAny2() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_fooAny2.19, i64 0, i64 0), i64 7) #13
  store i64 %0, i64* @rubyIdPrecomputed_fooAny2, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_fooInt() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_fooInt.20, i64 0, i64 0), i64 6) #13
  store i64 %0, i64* @rubyIdPrecomputed_fooInt, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_fooArray() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str_fooArray.21, i64 0, i64 0), i64 8) #13
  store i64 %0, i64* @rubyIdPrecomputed_fooArray, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_puts() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 4) #13
  store i64 %0, i64* @rubyIdPrecomputed_puts, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_test_testdata_llvm_casts() local_unnamed_addr #10 {
entry:
  %callArgs.i = alloca [2 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8
  %1 = bitcast [2 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1)
  %rubyId_unsafe.i = load i64, i64* @rubyIdPrecomputed_unsafe, align 8
  %rubyId_fooAll.i = load i64, i64* @rubyIdPrecomputed_fooAll, align 8
  %rubyId_fooAny1.i = load i64, i64* @rubyIdPrecomputed_fooAny1, align 8
  %rubyId_fooAny2.i = load i64, i64* @rubyIdPrecomputed_fooAny2, align 8
  %rubyId_fooInt.i = load i64, i64* @rubyIdPrecomputed_fooInt, align 8
  %rubyId_fooArray.i = load i64, i64* @rubyIdPrecomputed_fooArray, align 8
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8
  %2 = tail call i32 @rb_block_given_p() #13
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %"func_<S <C <U <root>>> $1><N <U <static-init>> $111>.exit", label %4

4:                                                ; preds = %entry
  %5 = tail call i64 @rb_block_proc() #13
  br label %"func_<S <C <U <root>>> $1><N <U <static-init>> $111>.exit"

"func_<S <C <U <root>>> $1><N <U <static-init>> $111>.exit": ; preds = %entry, %4
  %callArgsAddr.i = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs.i, i64 0, i64 0
  store i64 8, i64* %callArgsAddr.i, align 8
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_unsafe.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !28
  %6 = call i64 @rb_funcallv(i64 8, i64 %rubyId_unsafe.i, i32 1, i64* nonnull %callArgsAddr.i) #13
  %rawSym.i = call i64 @rb_id2sym(i64 %rubyId_fooAll.i) #13
  call void @rb_define_method(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_fooAll.17, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"func_<C <U Object>><U fooAll>" to i64 (...)*), i32 -1) #13
  store i64 8, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_unsafe.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !31
  %7 = call i64 @rb_funcallv(i64 8, i64 %rubyId_unsafe.i, i32 1, i64* nonnull %callArgsAddr.i) #13
  %rawSym93.i = call i64 @rb_id2sym(i64 %rubyId_fooAny1.i) #13
  call void @rb_define_method(i64 %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_fooAny1.18, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"func_<C <U Object>><U fooAny1>" to i64 (...)*), i32 -1) #13
  store i64 8, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_unsafe.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !34
  %8 = call i64 @rb_funcallv(i64 8, i64 %rubyId_unsafe.i, i32 1, i64* nonnull %callArgsAddr.i) #13
  %rawSym99.i = call i64 @rb_id2sym(i64 %rubyId_fooAny2.i) #13
  call void @rb_define_method(i64 %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_fooAny2.19, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"func_<C <U Object>><U fooAny2>" to i64 (...)*), i32 -1) #13
  store i64 8, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_unsafe.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !37
  %9 = call i64 @rb_funcallv(i64 8, i64 %rubyId_unsafe.i, i32 1, i64* nonnull %callArgsAddr.i) #13
  %rawSym105.i = call i64 @rb_id2sym(i64 %rubyId_fooInt.i) #13
  call void @rb_define_method(i64 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_fooInt.20, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"func_<C <U Object>><U fooInt>" to i64 (...)*), i32 -1) #13
  store i64 8, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_unsafe.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !40
  %10 = call i64 @rb_funcallv(i64 8, i64 %rubyId_unsafe.i, i32 1, i64* nonnull %callArgsAddr.i) #13
  %rawSym111.i = call i64 @rb_id2sym(i64 %rubyId_fooArray.i) #13
  call void @rb_define_method(i64 %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str_fooArray.21, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"func_<C <U Object>><U fooArray>" to i64 (...)*), i32 -1) #13
  store i64 5, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_fooInt.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !43
  %11 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_fooInt.i, i32 1, i64* nonnull %callArgsAddr.i) #13
  store i64 %11, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !46
  %12 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #13
  store i64 5, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_fooAny1.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !49
  %13 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_fooAny1.i, i32 1, i64* nonnull %callArgsAddr.i) #13
  store i64 %13, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !52
  %14 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #13
  store i64 5, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_fooAny2.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !55
  %15 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_fooAny2.i, i32 1, i64* nonnull %callArgsAddr.i) #13
  store i64 %15, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !58
  %16 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #13
  store i64 5, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_fooAll.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !61
  %17 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_fooAll.i, i32 1, i64* nonnull %callArgsAddr.i) #13
  store i64 %17, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !64
  %18 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #13
  %19 = call i64 @rb_ary_new_capa(i64 1) #13
  %20 = call i64 @rb_ary_push(i64 %19, i64 5) #13
  store i64 %19, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_fooArray.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !67
  %21 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_fooArray.i, i32 1, i64* nonnull %callArgsAddr.i) #13
  store i64 %21, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !70
  %22 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #11

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #11

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { nofree nounwind }
attributes #2 = { cold noreturn }
attributes #3 = { "addedToSilenceEmptyAttrsError" }
attributes #4 = { noreturn }
attributes #5 = { cold noreturn nounwind optsize ssp uwtable }
attributes #6 = { noreturn nounwind ssp uwtable }
attributes #7 = { norecurse nounwind readnone ssp uwtable }
attributes #8 = { nounwind sspreq uwtable }
attributes #9 = { nounwind ssp }
attributes #10 = { nounwind sspreq }
attributes #11 = { argmemonly nounwind }
attributes #12 = { cold noreturn nounwind }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }

!0 = !{!"branch_weights", i32 1, i32 2000}
!1 = !{!2, !3, i64 0}
!2 = !{!"RBasic", !3, i64 0, !3, i64 8}
!3 = !{!"long", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
!7 = !{!3, !3, i64 0}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !4, i64 0}
!10 = !{!"branch_weights", i32 4000000, i32 4001}
!11 = !{!"branch_weights", i32 2000, i32 1}
!12 = !{!13}
!13 = distinct !{!13, !14, !"sorbet_callFunc: argument 0"}
!14 = distinct !{!14, !"sorbet_callFunc"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"sorbet_callFunc: argument 0"}
!17 = distinct !{!17, !"sorbet_callFunc"}
!18 = !{!"branch_weights", i32 1073205, i32 2146410443}
!19 = !{!20}
!20 = distinct !{!20, !21, !"sorbet_callFunc: argument 0"}
!21 = distinct !{!21, !"sorbet_callFunc"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"sorbet_callFunc: argument 0"}
!24 = distinct !{!24, !"sorbet_callFunc"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"sorbet_callFunc: argument 0"}
!27 = distinct !{!27, !"sorbet_callFunc"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"sorbet_callFunc: argument 0"}
!30 = distinct !{!30, !"sorbet_callFunc"}
!31 = !{!32}
!32 = distinct !{!32, !33, !"sorbet_callFunc: argument 0"}
!33 = distinct !{!33, !"sorbet_callFunc"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"sorbet_callFunc: argument 0"}
!36 = distinct !{!36, !"sorbet_callFunc"}
!37 = !{!38}
!38 = distinct !{!38, !39, !"sorbet_callFunc: argument 0"}
!39 = distinct !{!39, !"sorbet_callFunc"}
!40 = !{!41}
!41 = distinct !{!41, !42, !"sorbet_callFunc: argument 0"}
!42 = distinct !{!42, !"sorbet_callFunc"}
!43 = !{!44}
!44 = distinct !{!44, !45, !"sorbet_callFunc: argument 0"}
!45 = distinct !{!45, !"sorbet_callFunc"}
!46 = !{!47}
!47 = distinct !{!47, !48, !"sorbet_callFunc: argument 0"}
!48 = distinct !{!48, !"sorbet_callFunc"}
!49 = !{!50}
!50 = distinct !{!50, !51, !"sorbet_callFunc: argument 0"}
!51 = distinct !{!51, !"sorbet_callFunc"}
!52 = !{!53}
!53 = distinct !{!53, !54, !"sorbet_callFunc: argument 0"}
!54 = distinct !{!54, !"sorbet_callFunc"}
!55 = !{!56}
!56 = distinct !{!56, !57, !"sorbet_callFunc: argument 0"}
!57 = distinct !{!57, !"sorbet_callFunc"}
!58 = !{!59}
!59 = distinct !{!59, !60, !"sorbet_callFunc: argument 0"}
!60 = distinct !{!60, !"sorbet_callFunc"}
!61 = !{!62}
!62 = distinct !{!62, !63, !"sorbet_callFunc: argument 0"}
!63 = distinct !{!63, !"sorbet_callFunc"}
!64 = !{!65}
!65 = distinct !{!65, !66, !"sorbet_callFunc: argument 0"}
!66 = distinct !{!66, !"sorbet_callFunc"}
!67 = !{!68}
!68 = distinct !{!68, !69, !"sorbet_callFunc: argument 0"}
!69 = distinct !{!69, !"sorbet_callFunc"}
!70 = !{!71}
!71 = distinct !{!71, !72, !"sorbet_callFunc: argument 0"}
!72 = distinct !{!72, !"sorbet_callFunc"}
