source_filename = "compiler/IRHelpers/payload.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin18.2.0"

%struct.rb_data_type_struct = type { i8*, %struct.anon.1, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.1 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.RBasic = type { i64, i64 }
%struct.RString = type { %struct.RBasic, %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { i64, i8*, %union.anon.0 }
%union.anon.0 = type { i64 }
%struct.OnigEncodingTypeST = type { i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i8*, i32, i32, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8**, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i32 (i32, i32*, i32, i8*)*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, i8*, %struct.OnigCaseFoldCodeItem*, %struct.OnigEncodingTypeST*)*, i32 (%struct.OnigEncodingTypeST*, i8*, i8*)*, i32 (i32, i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i32*, i32**, %struct.OnigEncodingTypeST*)*, i8* (i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32*, i8**, i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32, i32 }
%struct.OnigCaseFoldCodeItem = type { i32, i32, [3 x i32] }

@.str = private unnamed_addr constant [16 x i8] c"ERROR: %s is 0\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%li\0B\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@ruby_vm_global_constant_state = external local_unnamed_addr global i64, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.4 = private unnamed_addr constant [29 x i8] c"wrong constant name %li\0B%li\0B\00", align 1
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@.str.5 = private unnamed_addr constant [36 x i8] c"%li\0B does not refer to class/module\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"func\00", align 1
@.str.10 = private unnamed_addr constant [45 x i8] c"%s: Expected type %s, got %s with value %li\0B\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@closureInfo = local_unnamed_addr constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i32 0, i32 0), %struct.anon.1 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@rb_cModule = external local_unnamed_addr constant i64, align 8
@rubyIdPrecomputed_unsafe = internal unnamed_addr global i64 0, align 8
@str_unsafe = private unnamed_addr constant [7 x i8] c"unsafe\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_unsafe, i8* bitcast (i64* @rubyIdPrecomputed_unsafe to i8*) }]
@guard_epoch_T = linkonce local_unnamed_addr global i64 0
@guarded_const_T = linkonce local_unnamed_addr global i64 0
@str_T = private unnamed_addr constant [2 x i8] c"T\00", align 1
@guard_epoch_Object = linkonce local_unnamed_addr global i64 0
@guarded_const_Object = linkonce local_unnamed_addr global i64 0
@str_Object = private unnamed_addr constant [7 x i8] c"Object\00", align 1
@guard_epoch_Foo = linkonce local_unnamed_addr global i64 0
@guarded_const_Foo = linkonce local_unnamed_addr global i64 0
@str_Foo.1 = private unnamed_addr constant [4 x i8] c"Foo\00", align 1
@"str_T.class_of(Foo)" = private unnamed_addr constant [16 x i8] c"T.class_of(Foo)\00", align 1
@str_Bar = private unnamed_addr constant [4 x i8] c"Bar\00", align 1
@"guard_epoch_Foo::Bar" = linkonce local_unnamed_addr global i64 0
@"guarded_const_Foo::Bar" = linkonce local_unnamed_addr global i64 0
@"str_Foo::Bar" = private unnamed_addr constant [9 x i8] c"Foo::Bar\00", align 1
@"str_T.class_of(Foo::Bar)" = private unnamed_addr constant [21 x i8] c"T.class_of(Foo::Bar)\00", align 1
@guard_epoch_Baz = linkonce local_unnamed_addr global i64 0
@guarded_const_Baz = linkonce local_unnamed_addr global i64 0
@str_Baz.4 = private unnamed_addr constant [4 x i8] c"Baz\00", align 1
@str_cast.5 = private unnamed_addr constant [5 x i8] c"cast\00", align 1
@"str_T.class_of(Baz)" = private unnamed_addr constant [16 x i8] c"T.class_of(Baz)\00", align 1

; Function Attrs: nounwind ssp uwtable
define weak void @dbg_sorbet_validate_id(i64, i8*) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6, !prof !0

4:                                                ; preds = %2
  %5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %1)
  tail call void @abort() #14
  unreachable

6:                                                ; preds = %2
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @abort() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_pi(i64) local_unnamed_addr #0 {
  %2 = tail call i8* @rb_id2name(i64 %0) #15
  ret i8* %2
}

declare i8* @rb_id2name(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_p(i64) local_unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #15
  %3 = inttoptr i64 %2 to %struct.RBasic*
  %4 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1
  %6 = and i64 %5, 8192
  %7 = icmp eq i64 %6, 0
  %8 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #15
  %9 = inttoptr i64 %8 to %struct.RString*
  br i1 %7, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !6
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i8* [ %12, %10 ], [ %15, %13 ]
  ret i8* %17
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #3

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #3

declare i64 @rb_id2sym(i64) local_unnamed_addr #3

declare i8* @rb_obj_classname(i64) local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @sorbet_getConstant(i8*, i64) unnamed_addr #4 {
  %3 = tail call i64 @rb_intern2(i8* %0, i64 %1) #15
  %4 = tail call i64 @rb_id2sym(i64 %3) #15
  %5 = load i64, i64* @rb_cObject, align 8, !tbaa !7
  %6 = tail call %struct.OnigEncodingTypeST* @rb_enc_get(i64 %4) #15
  %7 = getelementptr inbounds i8, i8* %0, i64 %1
  %8 = ptrtoint i8* %0 to i64
  br label %11

.loopexit10:                                      ; preds = %rb_obj_freeze_inline.exit, %42, %39, %26, %99
  %9 = phi i64 [ %100, %99 ], [ %4, %26 ], [ %4, %42 ], [ %4, %39 ], [ %64, %rb_obj_freeze_inline.exit ]
  %10 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !7
  tail call void (i64, i8*, ...) @rb_raise(i64 %10, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i64 %12, i64 %9) #16
  unreachable

11:                                               ; preds = %107, %2
  %12 = phi i64 [ %5, %2 ], [ %108, %107 ]
  %13 = phi i8* [ %0, %2 ], [ %48, %107 ]
  %14 = phi i8* [ %0, %2 ], [ %47, %107 ]
  %15 = icmp ult i8* %14, %7
  br i1 %15, label %16, label %26

16:                                               ; preds = %11
  %17 = load i8, i8* %14, align 1, !tbaa !6
  %18 = icmp eq i8 %17, 58
  br i1 %18, label %26, label %.preheader

19:                                               ; preds = %.preheader
  %20 = load i8, i8* %23, align 1, !tbaa !6
  %21 = icmp eq i8 %20, 58
  br i1 %21, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %16, %19
  %22 = phi i8* [ %23, %19 ], [ %14, %16 ]
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  %24 = icmp eq i8* %23, %7
  br i1 %24, label %.loopexit, label %19

.loopexit:                                        ; preds = %19, %.preheader
  %.lcssa = phi i8* [ %23, %19 ], [ %7, %.preheader ]
  %25 = icmp ult i8* %.lcssa, %7
  br label %26

26:                                               ; preds = %.loopexit, %16, %11
  %27 = phi i8* [ %14, %11 ], [ %14, %16 ], [ %.lcssa, %.loopexit ]
  %28 = phi i1 [ false, %11 ], [ true, %16 ], [ %25, %.loopexit ]
  %29 = icmp eq i8* %13, %27
  br i1 %29, label %.loopexit10, label %30

30:                                               ; preds = %26
  %31 = ptrtoint i8* %27 to i64
  %32 = ptrtoint i8* %13 to i64
  %33 = sub i64 %31, %32
  %34 = tail call i64 @rb_check_id_cstr(i8* %13, i64 %33, %struct.OnigEncodingTypeST* %6) #15
  %35 = sub i64 %32, %8
  br i1 %28, label %36, label %46

36:                                               ; preds = %30
  %37 = load i8, i8* %27, align 1, !tbaa !6
  %38 = icmp eq i8 %37, 58
  br i1 %38, label %39, label %46

39:                                               ; preds = %36
  %40 = getelementptr inbounds i8, i8* %27, i64 2
  %41 = icmp ult i8* %40, %7
  br i1 %41, label %42, label %.loopexit10

42:                                               ; preds = %39
  %43 = getelementptr inbounds i8, i8* %27, i64 1
  %44 = load i8, i8* %43, align 1, !tbaa !6
  %45 = icmp eq i8 %44, 58
  br i1 %45, label %46, label %.loopexit10

46:                                               ; preds = %42, %36, %30
  %47 = phi i8* [ %27, %36 ], [ %27, %30 ], [ %40, %42 ]
  %48 = phi i8* [ %13, %36 ], [ %13, %30 ], [ %40, %42 ]
  %49 = and i64 %12, 7
  %50 = icmp ne i64 %49, 0
  %51 = and i64 %12, -9
  %52 = icmp eq i64 %51, 0
  %53 = or i1 %50, %52
  br i1 %53, label %59, label %54

54:                                               ; preds = %46
  %55 = inttoptr i64 %12 to %struct.RBasic*
  %56 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %55, i64 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !1
  %58 = and i64 %57, 30
  %switch = icmp eq i64 %58, 2
  br i1 %switch, label %61, label %59

59:                                               ; preds = %54, %46
  %60 = load i64, i64* @rb_eTypeError, align 8, !tbaa !7
  tail call void (i64, i8*, ...) @rb_raise(i64 %60, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0), i64 %4) #16
  unreachable

61:                                               ; preds = %54
  %62 = icmp eq i64 %34, 0
  br i1 %62, label %63, label %96

63:                                               ; preds = %61
  %64 = tail call i64 @rb_str_subseq(i64 %4, i64 %35, i64 %33) #15
  %65 = and i64 %64, 7
  %66 = icmp ne i64 %65, 0
  %67 = and i64 %64, -9
  %68 = icmp eq i64 %67, 0
  %69 = or i1 %66, %68
  br i1 %69, label %rb_obj_freeze_inline.exit, label %70

70:                                               ; preds = %63
  %71 = inttoptr i64 %64 to %struct.RBasic*
  %72 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %71, i64 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !1
  %74 = and i64 %73, 31
  %75 = icmp eq i64 %74, 27
  br i1 %75, label %rb_obj_freeze_inline.exit, label %76

76:                                               ; preds = %70
  %77 = or i64 %73, 2048
  store i64 %77, i64* %72, align 8, !tbaa !1
  %78 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %71, i64 0, i32 1
  %79 = load i64, i64* %78, align 8, !tbaa !8
  %80 = icmp ne i64 %79, 0
  %81 = and i64 %73, 4096
  %82 = icmp eq i64 %81, 0
  %83 = and i1 %82, %80
  br i1 %83, label %84, label %rb_obj_freeze_inline.exit

84:                                               ; preds = %76
  tail call void @rb_freeze_singleton_class(i64 %64) #15
  br label %rb_obj_freeze_inline.exit

rb_obj_freeze_inline.exit:                        ; preds = %63, %70, %76, %84
  %85 = tail call i32 @rb_is_const_name(i64 %64) #15
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %.loopexit10, label %rb_class_of.exit

rb_class_of.exit:                                 ; preds = %rb_obj_freeze_inline.exit
  %87 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %55, i64 0, i32 1
  %88 = load i64, i64* %87, align 8, !tbaa !7
  %89 = tail call i32 @rb_method_basic_definition_p(i64 %88, i64 2737) #15
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %94

91:                                               ; preds = %rb_class_of.exit
  %92 = tail call i64 @rb_str_intern(i64 %64) #15
  %93 = tail call i64 @rb_const_missing(i64 %12, i64 %92) #15
  br label %107

94:                                               ; preds = %rb_class_of.exit
  %95 = tail call i64 @rb_mod_const_missing(i64 %12, i64 %64) #16
  unreachable

96:                                               ; preds = %61
  %97 = tail call i32 @rb_is_const_id(i64 %34) #6
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %101

99:                                               ; preds = %96
  %100 = tail call i64 @rb_id2sym(i64 %34) #15
  br label %.loopexit10

101:                                              ; preds = %96
  %102 = icmp eq i64 %35, 0
  br i1 %102, label %103, label %105

103:                                              ; preds = %101
  %104 = tail call i64 @rb_const_get(i64 %12, i64 %34) #15
  br label %107

105:                                              ; preds = %101
  %106 = tail call i64 @rb_const_get_from(i64 %12, i64 %34) #15
  br label %107

107:                                              ; preds = %105, %103, %91
  %108 = phi i64 [ %93, %91 ], [ %104, %103 ], [ %106, %105 ]
  %109 = icmp ult i8* %47, %7
  br i1 %109, label %11, label %110

110:                                              ; preds = %107
  ret i64 %108
}

declare %struct.OnigEncodingTypeST* @rb_enc_get(i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #5

declare i64 @rb_check_id_cstr(i8*, i64, %struct.OnigEncodingTypeST*) local_unnamed_addr #3

declare i64 @rb_str_subseq(i64, i64, i64) local_unnamed_addr #3

declare i32 @rb_is_const_name(i64) local_unnamed_addr #3

declare i32 @rb_method_basic_definition_p(i64, i64) local_unnamed_addr #3

declare i64 @rb_str_intern(i64) local_unnamed_addr #3

declare i64 @rb_const_missing(i64, i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare i64 @rb_mod_const_missing(i64, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @rb_is_const_id(i64) local_unnamed_addr #6

declare i64 @rb_const_get(i64, i64) local_unnamed_addr #3

declare i64 @rb_const_get_from(i64, i64) local_unnamed_addr #3

declare i64 @rb_define_module(i8*) local_unnamed_addr #3

declare i64 @rb_define_class(i8*, i64) local_unnamed_addr #3

declare i64 @rb_define_class_under(i64, i8*, i64) local_unnamed_addr #3

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind optsize ssp uwtable
define internal fastcc void @sorbet_cast_failure(i64, i8*) unnamed_addr #7 {
  %3 = load i64, i64* @rb_eTypeError, align 8, !tbaa !7
  %4 = tail call i8* @rb_obj_classname(i64 %0) #15
  tail call void (i64, i8*, ...) @rb_raise(i64 %3, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast.5, i64 0, i64 0), i8* %1, i8* %4, i64 %0) #16
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8*) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !9
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #15
  ret void
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly) #8 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !9
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

declare i64 @rb_obj_is_kind_of(i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind readonly
declare i64 @rb_class_inherited_p(i64, i64) local_unnamed_addr #9

declare void @rb_freeze_singleton_class(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_unsafe() #10 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_unsafe, i64 0, i64 0), i64 6) #15
  store i64 %0, i64* @rubyIdPrecomputed_unsafe, align 8
  ret void
}

; Function Attrs: cold ssp
define linkonce void @const_recompute_T() local_unnamed_addr #11 {
  %1 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_T, i64 0, i64 0), i64 1)
  store i64 %1, i64* @guarded_const_T, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  store i64 %2, i64* @guard_epoch_T, align 8
  ret void
}

; Function Attrs: cold ssp
define linkonce void @const_recompute_Object() local_unnamed_addr #11 {
  %1 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Object, i64 0, i64 0), i64 6)
  store i64 %1, i64* @guarded_const_Object, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  store i64 %2, i64* @guard_epoch_Object, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_test_testdata_llvm_class() local_unnamed_addr #12 {
typeTestSuccess.i:
  %callArgs.i.i.i = alloca [1 x i64], align 8
  %callArgs.i = alloca [1 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8
  %1 = bitcast [1 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1)
  %rubyId_unsafe.i = load i64, i64* @rubyIdPrecomputed_unsafe, align 8
  %callArgsAddr.i = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs.i, i64 0, i64 0
  store i64 %0, i64* %callArgsAddr.i, align 8
  %2 = load i64, i64* @guard_epoch_T, align 8
  %3 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  %canTakeFastPath.i = icmp eq i64 %2, %3
  br i1 %canTakeFastPath.i, label %const_continue.i, label %const_slowPath.i, !prof !13

const_continue.i:                                 ; preds = %const_slowPath.i, %typeTestSuccess.i
  %4 = load i64, i64* @guarded_const_T, align 8
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_unsafe.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #15, !noalias !14
  %5 = call i64 @rb_funcallv(i64 %4, i64 %rubyId_unsafe.i, i32 1, i64* nonnull %callArgsAddr.i) #15
  %6 = call i64 @rb_define_module(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 0)) #15
  %7 = load i64, i64* @guard_epoch_Foo, align 8
  %8 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  %canTakeFastPath.i.i = icmp eq i64 %7, %8
  br i1 %canTakeFastPath.i.i, label %const_continue.thread.i.i, label %const_continue.i.i, !prof !13

const_continue.thread.i.i:                        ; preds = %const_continue.i
  %9 = bitcast [1 x i64]* %callArgs.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #15
  %rubyId_unsafe.i3.i.i = load i64, i64* @rubyIdPrecomputed_unsafe, align 8
  br label %typeTestSuccess.i.i.i

const_continue.i.i:                               ; preds = %const_continue.i
  call void @const_recompute_Foo() #15
  %.pre.i.i = load i64, i64* @guard_epoch_Foo, align 8
  %.pre1.i.i = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  %10 = load i64, i64* @guarded_const_Foo, align 8
  %11 = bitcast [1 x i64]* %callArgs.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #15
  %rubyId_unsafe.i.i.i = load i64, i64* @rubyIdPrecomputed_unsafe, align 8
  %canTakeFastPath.i.i.i = icmp eq i64 %.pre.i.i, %.pre1.i.i
  br i1 %canTakeFastPath.i.i.i, label %typeTestSuccess.i.i.i, label %const_continue.i.i.i, !prof !13

const_continue.i.i.i:                             ; preds = %const_continue.i.i
  call void @const_recompute_Foo() #15
  %.pre2.i.i = load i64, i64* @guarded_const_Foo, align 8
  %12 = icmp eq i64 %.pre2.i.i, %10
  br i1 %12, label %typeTestSuccess.i.i.i, label %13

13:                                               ; preds = %const_continue.i.i.i
  %14 = load i64, i64* @rb_cModule, align 8, !tbaa !7
  %15 = call i64 @rb_obj_is_kind_of(i64 %10, i64 %14) #15
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %typeTestFail.i.i.i, label %sorbet_isa_class_of.exit.i.i.i, !prof !17

sorbet_isa_class_of.exit.i.i.i:                   ; preds = %13
  %17 = call i64 @rb_class_inherited_p(i64 %10, i64 %.pre2.i.i) #9
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %typeTestFail.i.i.i, label %typeTestSuccess.i.i.i, !prof !0

typeTestSuccess.i.i.i:                            ; preds = %sorbet_isa_class_of.exit.i.i.i, %const_continue.i.i.i, %const_continue.i.i, %const_continue.thread.i.i
  %19 = phi i8* [ %11, %sorbet_isa_class_of.exit.i.i.i ], [ %11, %const_continue.i.i.i ], [ %9, %const_continue.thread.i.i ], [ %11, %const_continue.i.i ]
  %rubyId_unsafe.i59.i.i = phi i64 [ %rubyId_unsafe.i.i.i, %sorbet_isa_class_of.exit.i.i.i ], [ %rubyId_unsafe.i.i.i, %const_continue.i.i.i ], [ %rubyId_unsafe.i3.i.i, %const_continue.thread.i.i ], [ %rubyId_unsafe.i.i.i, %const_continue.i.i ]
  %callArgsAddr.i.i.i = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs.i.i.i, i64 0, i64 0
  store i64 %0, i64* %callArgsAddr.i.i.i, align 8
  %20 = load i64, i64* @guard_epoch_T, align 8
  %21 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  %canTakeFastPath22.i.i.i = icmp eq i64 %20, %21
  br i1 %canTakeFastPath22.i.i.i, label %const_continue20.i.i.i, label %const_slowPath21.i.i.i, !prof !13

typeTestFail.i.i.i:                               ; preds = %sorbet_isa_class_of.exit.i.i.i, %13
  call fastcc void @sorbet_cast_failure(i64 %10, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"str_T.class_of(Foo)", i64 0, i64 0)) #15
  unreachable

const_continue20.i.i.i:                           ; preds = %const_slowPath21.i.i.i, %typeTestSuccess.i.i.i
  %22 = load i64, i64* @guarded_const_T, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_unsafe.i59.i.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #15, !noalias !18
  %23 = call i64 @rb_funcallv(i64 %22, i64 %rubyId_unsafe.i59.i.i, i32 1, i64* nonnull %callArgsAddr.i.i.i) #15
  %24 = load i64, i64* @guard_epoch_Foo, align 8
  %25 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  %canTakeFastPath25.i.i.i = icmp eq i64 %24, %25
  br i1 %canTakeFastPath25.i.i.i, label %const_continue23.i.i.i, label %const_slowPath24.i.i.i, !prof !13

const_slowPath21.i.i.i:                           ; preds = %typeTestSuccess.i.i.i
  call void @const_recompute_T() #15
  br label %const_continue20.i.i.i

const_continue23.i.i.i:                           ; preds = %const_slowPath24.i.i.i, %const_continue20.i.i.i
  %26 = phi i64 [ %.pre.i.i.i, %const_slowPath24.i.i.i ], [ %24, %const_continue20.i.i.i ]
  %27 = load i64, i64* @guarded_const_Foo, align 8
  %28 = load i64, i64* @guard_epoch_Object, align 8
  %canTakeFastPath28.i.i.i = icmp eq i64 %28, %26
  br i1 %canTakeFastPath28.i.i.i, label %const_continue26.i.i.i, label %const_slowPath27.i.i.i, !prof !13

const_slowPath24.i.i.i:                           ; preds = %const_continue20.i.i.i
  call void @const_recompute_Foo() #15
  %.pre.i.i.i = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  br label %const_continue23.i.i.i

const_continue26.i.i.i:                           ; preds = %const_slowPath27.i.i.i, %const_continue23.i.i.i
  %29 = load i64, i64* @guarded_const_Object, align 8
  %30 = call i64 @rb_define_class_under(i64 %27, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Bar, i64 0, i64 0), i64 %29) #15
  %31 = load i64, i64* @"guard_epoch_Foo::Bar", align 8
  %32 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  %canTakeFastPath.i.i.i.i = icmp eq i64 %31, %32
  br i1 %canTakeFastPath.i.i.i.i, label %"Init_func_<S <C <U Foo>> $1><U <static-init>>.exit.i", label %const_continue.i.i.i.i, !prof !13

const_continue.i.i.i.i:                           ; preds = %const_continue26.i.i.i
  call void @"const_recompute_Foo::Bar"() #15
  %.pre.i.i.i.i = load i64, i64* @"guard_epoch_Foo::Bar", align 8
  %.pre1.i.i.i.i = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  %33 = load i64, i64* @"guarded_const_Foo::Bar", align 8
  %canTakeFastPath.i.i.i.i.i = icmp eq i64 %.pre.i.i.i.i, %.pre1.i.i.i.i
  br i1 %canTakeFastPath.i.i.i.i.i, label %"Init_func_<S <C <U Foo>> $1><U <static-init>>.exit.i", label %const_continue.i.i.i.i.i, !prof !13

const_continue.i.i.i.i.i:                         ; preds = %const_continue.i.i.i.i
  call void @"const_recompute_Foo::Bar"() #15
  %.pre2.i.i.i.i = load i64, i64* @"guarded_const_Foo::Bar", align 8
  %34 = icmp eq i64 %.pre2.i.i.i.i, %33
  br i1 %34, label %"Init_func_<S <C <U Foo>> $1><U <static-init>>.exit.i", label %35

35:                                               ; preds = %const_continue.i.i.i.i.i
  %36 = load i64, i64* @rb_cModule, align 8, !tbaa !7
  %37 = call i64 @rb_obj_is_kind_of(i64 %33, i64 %36) #15
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %typeTestFail.i.i.i.i.i, label %sorbet_isa_class_of.exit.i.i.i.i.i, !prof !17

sorbet_isa_class_of.exit.i.i.i.i.i:               ; preds = %35
  %39 = call i64 @rb_class_inherited_p(i64 %33, i64 %.pre2.i.i.i.i) #9
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %typeTestFail.i.i.i.i.i, label %"Init_func_<S <C <U Foo>> $1><U <static-init>>.exit.i", !prof !0

typeTestFail.i.i.i.i.i:                           ; preds = %sorbet_isa_class_of.exit.i.i.i.i.i, %35
  call fastcc void @sorbet_cast_failure(i64 %33, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"str_T.class_of(Foo::Bar)", i64 0, i64 0)) #15
  unreachable

const_slowPath27.i.i.i:                           ; preds = %const_continue23.i.i.i
  call void @const_recompute_Object() #15
  br label %const_continue26.i.i.i

"Init_func_<S <C <U Foo>> $1><U <static-init>>.exit.i": ; preds = %sorbet_isa_class_of.exit.i.i.i.i.i, %const_continue.i.i.i.i.i, %const_continue.i.i.i.i, %const_continue26.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #15
  store i64 %0, i64* %callArgsAddr.i, align 8
  %41 = load i64, i64* @guard_epoch_T, align 8
  %42 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  %canTakeFastPath40.i = icmp eq i64 %41, %42
  br i1 %canTakeFastPath40.i, label %const_continue38.i, label %const_slowPath39.i, !prof !13

const_slowPath.i:                                 ; preds = %typeTestSuccess.i
  tail call void @const_recompute_T() #15
  br label %const_continue.i

const_continue38.i:                               ; preds = %const_slowPath39.i, %"Init_func_<S <C <U Foo>> $1><U <static-init>>.exit.i"
  %43 = load i64, i64* @guarded_const_T, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_unsafe.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #15, !noalias !21
  %44 = call i64 @rb_funcallv(i64 %43, i64 %rubyId_unsafe.i, i32 1, i64* nonnull %callArgsAddr.i) #15
  %45 = load i64, i64* @guard_epoch_Object, align 8
  %46 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  %canTakeFastPath44.i = icmp eq i64 %45, %46
  br i1 %canTakeFastPath44.i, label %const_continue42.i, label %const_slowPath43.i, !prof !13

const_slowPath39.i:                               ; preds = %"Init_func_<S <C <U Foo>> $1><U <static-init>>.exit.i"
  call void @const_recompute_T() #15
  br label %const_continue38.i

const_continue42.i:                               ; preds = %const_slowPath43.i, %const_continue38.i
  %47 = load i64, i64* @guarded_const_Object, align 8
  %48 = call i64 @rb_define_class(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Baz.4, i64 0, i64 0), i64 %47) #15
  %49 = load i64, i64* @guard_epoch_Baz, align 8
  %50 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  %canTakeFastPath.i1.i = icmp eq i64 %49, %50
  br i1 %canTakeFastPath.i1.i, label %"func_<S <C <U <root>>> $1><N <U <static-init>> $110>.exit", label %const_continue.i5.i, !prof !13

const_continue.i5.i:                              ; preds = %const_continue42.i
  call void @const_recompute_Baz() #15
  %.pre.i2.i = load i64, i64* @guard_epoch_Baz, align 8
  %.pre1.i3.i = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  %51 = load i64, i64* @guarded_const_Baz, align 8
  %canTakeFastPath.i.i4.i = icmp eq i64 %.pre.i2.i, %.pre1.i3.i
  br i1 %canTakeFastPath.i.i4.i, label %"func_<S <C <U <root>>> $1><N <U <static-init>> $110>.exit", label %const_continue.i.i7.i, !prof !13

const_continue.i.i7.i:                            ; preds = %const_continue.i5.i
  call void @const_recompute_Baz() #15
  %.pre2.i6.i = load i64, i64* @guarded_const_Baz, align 8
  %52 = icmp eq i64 %.pre2.i6.i, %51
  br i1 %52, label %"func_<S <C <U <root>>> $1><N <U <static-init>> $110>.exit", label %53

53:                                               ; preds = %const_continue.i.i7.i
  %54 = load i64, i64* @rb_cModule, align 8, !tbaa !7
  %55 = call i64 @rb_obj_is_kind_of(i64 %51, i64 %54) #15
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %typeTestFail.i.i9.i, label %sorbet_isa_class_of.exit.i.i8.i, !prof !17

sorbet_isa_class_of.exit.i.i8.i:                  ; preds = %53
  %57 = call i64 @rb_class_inherited_p(i64 %51, i64 %.pre2.i6.i) #9
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %typeTestFail.i.i9.i, label %"func_<S <C <U <root>>> $1><N <U <static-init>> $110>.exit", !prof !0

typeTestFail.i.i9.i:                              ; preds = %sorbet_isa_class_of.exit.i.i8.i, %53
  call fastcc void @sorbet_cast_failure(i64 %51, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"str_T.class_of(Baz)", i64 0, i64 0)) #15
  unreachable

const_slowPath43.i:                               ; preds = %const_continue38.i
  call void @const_recompute_Object() #15
  br label %const_continue42.i

"func_<S <C <U <root>>> $1><N <U <static-init>> $110>.exit": ; preds = %const_continue42.i, %const_continue.i5.i, %const_continue.i.i7.i, %sorbet_isa_class_of.exit.i.i8.i
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1)
  ret void
}

; Function Attrs: cold ssp
define linkonce void @const_recompute_Foo() local_unnamed_addr #11 {
  %1 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 0), i64 3)
  store i64 %1, i64* @guarded_const_Foo, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  store i64 %2, i64* @guard_epoch_Foo, align 8
  ret void
}

; Function Attrs: cold ssp
define linkonce void @"const_recompute_Foo::Bar"() local_unnamed_addr #11 {
  %1 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"str_Foo::Bar", i64 0, i64 0), i64 8)
  store i64 %1, i64* @"guarded_const_Foo::Bar", align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  store i64 %2, i64* @"guard_epoch_Foo::Bar", align 8
  ret void
}

; Function Attrs: cold ssp
define linkonce void @const_recompute_Baz() local_unnamed_addr #11 {
  %1 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Baz.4, i64 0, i64 0), i64 3)
  store i64 %1, i64* @guarded_const_Baz, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  store i64 %2, i64* @guard_epoch_Baz, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #13

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #13

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { nofree nounwind }
attributes #2 = { cold noreturn }
attributes #3 = { "addedToSilenceEmptyAttrsError" }
attributes #4 = { noinline nounwind ssp uwtable }
attributes #5 = { noreturn }
attributes #6 = { nounwind readnone }
attributes #7 = { cold noreturn nounwind optsize ssp uwtable }
attributes #8 = { norecurse nounwind readnone ssp uwtable }
attributes #9 = { nounwind readonly }
attributes #10 = { nounwind ssp }
attributes #11 = { cold ssp }
attributes #12 = { nounwind sspreq }
attributes #13 = { argmemonly nounwind }
attributes #14 = { cold noreturn nounwind }
attributes #15 = { nounwind }
attributes #16 = { noreturn nounwind }

!0 = !{!"branch_weights", i32 1, i32 2000}
!1 = !{!2, !3, i64 0}
!2 = !{!"RBasic", !3, i64 0, !3, i64 8}
!3 = !{!"long", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
!7 = !{!3, !3, i64 0}
!8 = !{!2, !3, i64 8}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !4, i64 0}
!11 = !{!12, !12, i64 0}
!12 = !{!"long long", !4, i64 0}
!13 = !{!"branch_weights", i32 2000, i32 1}
!14 = !{!15}
!15 = distinct !{!15, !16, !"sorbet_callFunc: argument 0"}
!16 = distinct !{!16, !"sorbet_callFunc"}
!17 = !{!"branch_weights", i32 1073205, i32 2146410443}
!18 = !{!19}
!19 = distinct !{!19, !20, !"sorbet_callFunc: argument 0"}
!20 = distinct !{!20, !"sorbet_callFunc"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"sorbet_callFunc: argument 0"}
!23 = distinct !{!23, !"sorbet_callFunc"}
