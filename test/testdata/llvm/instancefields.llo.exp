; ModuleID = 'payload'
source_filename = "compiler/IRHelpers/payload.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_data_type_struct = type { i8*, %struct.anon.1, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.1 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.RBasic = type { i64, i64 }
%struct.RString = type { %struct.RBasic, %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { i64, i8*, %union.anon.0 }
%union.anon.0 = type { i64 }
%struct.OnigEncodingTypeST = type { i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i8*, i32, i32, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8**, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i32 (i32, i32*, i32, i8*)*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, i8*, %struct.OnigCaseFoldCodeItem*, %struct.OnigEncodingTypeST*)*, i32 (%struct.OnigEncodingTypeST*, i8*, i8*)*, i32 (i32, i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i32*, i32**, %struct.OnigEncodingTypeST*)*, i8* (i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32*, i8**, i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32, i32 }
%struct.OnigCaseFoldCodeItem = type { i32, i32, [3 x i32] }

@.str = private unnamed_addr constant [16 x i8] c"ERROR: %s is 0\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%li\0B\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@ruby_vm_global_constant_state = external local_unnamed_addr global i64, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.4 = private unnamed_addr constant [29 x i8] c"wrong constant name %li\0B%li\0B\00", align 1
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@.str.5 = private unnamed_addr constant [36 x i8] c"%li\0B does not refer to class/module\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"func\00", align 1
@.str.7 = private unnamed_addr constant [50 x i8] c"wrong number of arguments (given %d, expected %d)\00", align 1
@.str.8 = private unnamed_addr constant [51 x i8] c"wrong number of arguments (given %d, expected %d+)\00", align 1
@.str.9 = private unnamed_addr constant [54 x i8] c"wrong number of arguments (given %d, expected %d..%d)\00", align 1
@rb_eArgError = external local_unnamed_addr global i64, align 8
@.str.10 = private unnamed_addr constant [45 x i8] c"%s: Expected type %s, got %s with value %li\0B\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@closureInfo = local_unnamed_addr constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i32 0, i32 0), %struct.anon.1 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@str_cast = private unnamed_addr constant [5 x i8] c"cast\00", align 1
@rubyIdPrecomputed_unsafe = internal unnamed_addr global i64 0, align 8
@str_unsafe = private unnamed_addr constant [7 x i8] c"unsafe\00", align 1
@rubyIdPrecomputed_new = internal unnamed_addr global i64 0, align 8
@str_new = private unnamed_addr constant [4 x i8] c"new\00", align 1
@rubyIdPrecomputed_read = internal unnamed_addr global i64 0, align 8
@str_read = private unnamed_addr constant [5 x i8] c"read\00", align 1
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@str_value = private unnamed_addr constant [6 x i8] c"value\00", align 1
@rubyIdPrecomputed_write = internal unnamed_addr global i64 0, align 8
@str_write = private unnamed_addr constant [6 x i8] c"write\00", align 1
@"rubyIdPrecomputed_@f" = internal unnamed_addr global i64 0, align 8
@"str_@f" = private unnamed_addr constant [3 x i8] c"@f\00", align 1
@llvm.global_ctors = appending global [6 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_unsafe, i8* bitcast (i64* @rubyIdPrecomputed_unsafe to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_new, i8* bitcast (i64* @rubyIdPrecomputed_new to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_read, i8* bitcast (i64* @rubyIdPrecomputed_read to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_puts, i8* bitcast (i64* @rubyIdPrecomputed_puts to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_write, i8* bitcast (i64* @rubyIdPrecomputed_write to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_@f", i8* bitcast (i64* @"rubyIdPrecomputed_@f" to i8*) }]
@guard_epoch_T = linkonce local_unnamed_addr global i64 0
@guarded_const_T = linkonce local_unnamed_addr global i64 0
@str_T.1 = private unnamed_addr constant [2 x i8] c"T\00", align 1
@guard_epoch_A = linkonce local_unnamed_addr global i64 0
@guarded_const_A = linkonce local_unnamed_addr global i64 0
@str_A.2 = private unnamed_addr constant [2 x i8] c"A\00", align 1

; Function Attrs: nounwind ssp uwtable
define weak void @dbg_sorbet_validate_id(i64 %0, i8* %1) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6, !prof !0

4:                                                ; preds = %2
  %5 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %1)
  tail call void @abort() #15
  unreachable

6:                                                ; preds = %2
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @abort() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_pi(i64 %0) local_unnamed_addr #0 {
  %2 = tail call i8* @rb_id2name(i64 %0) #16
  ret i8* %2
}

declare i8* @rb_id2name(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_p(i64 %0) local_unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #16
  %3 = inttoptr i64 %2 to %struct.RBasic*
  %4 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1
  %6 = and i64 %5, 8192
  %7 = icmp eq i64 %6, 0
  %8 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #16
  %9 = inttoptr i64 %8 to %struct.RString*
  br i1 %7, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !6
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i8* [ %12, %10 ], [ %15, %13 ]
  ret i8* %17
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #3

declare i64 @rb_str_new(i8*, i64) local_unnamed_addr #3

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #3

declare i64 @rb_id2sym(i64) local_unnamed_addr #3

declare i8* @rb_obj_classname(i64) local_unnamed_addr #3

declare i64 @rb_ivar_get(i64, i64) local_unnamed_addr #3

declare i64 @rb_ivar_set(i64, i64, i64) local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @sorbet_getConstantAt(i64 %0, i64 %1) unnamed_addr #4 {
  %3 = tail call i64 @rb_id2sym(i64 %1) #16
  %4 = tail call %struct.OnigEncodingTypeST* @rb_enc_get(i64 %3) #16
  %5 = tail call i8* @rb_id2name(i64 %1) #16
  %6 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %5)
  %7 = getelementptr inbounds i8, i8* %5, i64 %6
  %8 = icmp sgt i64 %6, 0
  br i1 %8, label %9, label %.loopexit11

9:                                                ; preds = %2
  %10 = ptrtoint i8* %5 to i64
  br label %13

.loopexit10:                                      ; preds = %rb_obj_freeze_inline.exit, %44, %41, %28, %101
  %11 = phi i64 [ %102, %101 ], [ %3, %28 ], [ %3, %44 ], [ %3, %41 ], [ %66, %rb_obj_freeze_inline.exit ]
  %12 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !7
  tail call void (i64, i8*, ...) @rb_raise(i64 %12, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i64 %14, i64 %11) #17
  unreachable

13:                                               ; preds = %109, %9
  %14 = phi i64 [ %0, %9 ], [ %110, %109 ]
  %15 = phi i8* [ %5, %9 ], [ %50, %109 ]
  %16 = phi i8* [ %5, %9 ], [ %49, %109 ]
  %17 = icmp ult i8* %16, %7
  br i1 %17, label %18, label %28

18:                                               ; preds = %13
  %19 = load i8, i8* %16, align 1, !tbaa !6
  %20 = icmp eq i8 %19, 58
  br i1 %20, label %28, label %.preheader

21:                                               ; preds = %.preheader
  %22 = load i8, i8* %25, align 1, !tbaa !6
  %23 = icmp eq i8 %22, 58
  br i1 %23, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %18, %21
  %24 = phi i8* [ %25, %21 ], [ %16, %18 ]
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  %26 = icmp eq i8* %25, %7
  br i1 %26, label %.loopexit, label %21

.loopexit:                                        ; preds = %21, %.preheader
  %.lcssa = phi i8* [ %25, %21 ], [ %7, %.preheader ]
  %27 = icmp ult i8* %.lcssa, %7
  br label %28

28:                                               ; preds = %.loopexit, %18, %13
  %29 = phi i8* [ %16, %13 ], [ %16, %18 ], [ %.lcssa, %.loopexit ]
  %30 = phi i1 [ false, %13 ], [ true, %18 ], [ %27, %.loopexit ]
  %31 = icmp eq i8* %15, %29
  br i1 %31, label %.loopexit10, label %32

32:                                               ; preds = %28
  %33 = ptrtoint i8* %29 to i64
  %34 = ptrtoint i8* %15 to i64
  %35 = sub i64 %33, %34
  %36 = tail call i64 @rb_check_id_cstr(i8* %15, i64 %35, %struct.OnigEncodingTypeST* %4) #16
  %37 = sub i64 %34, %10
  br i1 %30, label %38, label %48

38:                                               ; preds = %32
  %39 = load i8, i8* %29, align 1, !tbaa !6
  %40 = icmp eq i8 %39, 58
  br i1 %40, label %41, label %48

41:                                               ; preds = %38
  %42 = getelementptr inbounds i8, i8* %29, i64 2
  %43 = icmp ult i8* %42, %7
  br i1 %43, label %44, label %.loopexit10

44:                                               ; preds = %41
  %45 = getelementptr inbounds i8, i8* %29, i64 1
  %46 = load i8, i8* %45, align 1, !tbaa !6
  %47 = icmp eq i8 %46, 58
  br i1 %47, label %48, label %.loopexit10

48:                                               ; preds = %44, %38, %32
  %49 = phi i8* [ %29, %38 ], [ %29, %32 ], [ %42, %44 ]
  %50 = phi i8* [ %15, %38 ], [ %15, %32 ], [ %42, %44 ]
  %51 = and i64 %14, 7
  %52 = icmp ne i64 %51, 0
  %53 = and i64 %14, -9
  %54 = icmp eq i64 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %61, label %56

56:                                               ; preds = %48
  %57 = inttoptr i64 %14 to %struct.RBasic*
  %58 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %57, i64 0, i32 0
  %59 = load i64, i64* %58, align 8, !tbaa !1
  %60 = and i64 %59, 30
  %switch = icmp eq i64 %60, 2
  br i1 %switch, label %63, label %61

61:                                               ; preds = %56, %48
  %62 = load i64, i64* @rb_eTypeError, align 8, !tbaa !7
  tail call void (i64, i8*, ...) @rb_raise(i64 %62, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0), i64 %3) #17
  unreachable

63:                                               ; preds = %56
  %64 = icmp eq i64 %36, 0
  br i1 %64, label %65, label %98

65:                                               ; preds = %63
  %66 = tail call i64 @rb_str_subseq(i64 %3, i64 %37, i64 %35) #16
  %67 = and i64 %66, 7
  %68 = icmp ne i64 %67, 0
  %69 = and i64 %66, -9
  %70 = icmp eq i64 %69, 0
  %71 = or i1 %68, %70
  br i1 %71, label %rb_obj_freeze_inline.exit, label %72

72:                                               ; preds = %65
  %73 = inttoptr i64 %66 to %struct.RBasic*
  %74 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %73, i64 0, i32 0
  %75 = load i64, i64* %74, align 8, !tbaa !1
  %76 = and i64 %75, 31
  %77 = icmp eq i64 %76, 27
  br i1 %77, label %rb_obj_freeze_inline.exit, label %78

78:                                               ; preds = %72
  %79 = or i64 %75, 2048
  store i64 %79, i64* %74, align 8, !tbaa !1
  %80 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %73, i64 0, i32 1
  %81 = load i64, i64* %80, align 8, !tbaa !8
  %82 = icmp ne i64 %81, 0
  %83 = and i64 %75, 4096
  %84 = icmp eq i64 %83, 0
  %85 = and i1 %84, %82
  br i1 %85, label %86, label %rb_obj_freeze_inline.exit

86:                                               ; preds = %78
  tail call void @rb_freeze_singleton_class(i64 %66) #16
  br label %rb_obj_freeze_inline.exit

rb_obj_freeze_inline.exit:                        ; preds = %65, %72, %78, %86
  %87 = tail call i32 @rb_is_const_name(i64 %66) #16
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %.loopexit10, label %rb_class_of.exit

rb_class_of.exit:                                 ; preds = %rb_obj_freeze_inline.exit
  %89 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %57, i64 0, i32 1
  %90 = load i64, i64* %89, align 8, !tbaa !7
  %91 = tail call i32 @rb_method_basic_definition_p(i64 %90, i64 2737) #16
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %96

93:                                               ; preds = %rb_class_of.exit
  %94 = tail call i64 @rb_str_intern(i64 %66) #16
  %95 = tail call i64 @rb_const_missing(i64 %14, i64 %94) #16
  br label %109

96:                                               ; preds = %rb_class_of.exit
  %97 = tail call i64 @rb_mod_const_missing(i64 %14, i64 %66) #17
  unreachable

98:                                               ; preds = %63
  %99 = tail call i32 @rb_is_const_id(i64 %36) #7
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %103

101:                                              ; preds = %98
  %102 = tail call i64 @rb_id2sym(i64 %36) #16
  br label %.loopexit10

103:                                              ; preds = %98
  %104 = icmp eq i64 %37, 0
  br i1 %104, label %105, label %107

105:                                              ; preds = %103
  %106 = tail call i64 @rb_const_get(i64 %14, i64 %36) #16
  br label %109

107:                                              ; preds = %103
  %108 = tail call i64 @rb_const_get_from(i64 %14, i64 %36) #16
  br label %109

109:                                              ; preds = %107, %105, %93
  %110 = phi i64 [ %95, %93 ], [ %106, %105 ], [ %108, %107 ]
  %111 = icmp ult i8* %49, %7
  br i1 %111, label %13, label %.loopexit11

.loopexit11:                                      ; preds = %109, %2
  %112 = phi i64 [ %0, %2 ], [ %110, %109 ]
  ret i64 %112
}

declare %struct.OnigEncodingTypeST* @rb_enc_get(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #6

declare i64 @rb_check_id_cstr(i8*, i64, %struct.OnigEncodingTypeST*) local_unnamed_addr #3

declare i64 @rb_str_subseq(i64, i64, i64) local_unnamed_addr #3

declare i32 @rb_is_const_name(i64) local_unnamed_addr #3

declare i32 @rb_method_basic_definition_p(i64, i64) local_unnamed_addr #3

declare i64 @rb_str_intern(i64) local_unnamed_addr #3

declare i64 @rb_const_missing(i64, i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare i64 @rb_mod_const_missing(i64, i64) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @rb_is_const_id(i64) local_unnamed_addr #7

declare i64 @rb_const_get(i64, i64) local_unnamed_addr #3

declare i64 @rb_const_get_from(i64, i64) local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @sorbet_getConstant(i8* %0) unnamed_addr #4 {
  %2 = load i64, i64* @rb_cObject, align 8, !tbaa !7
  %3 = tail call i64 @rb_intern2(i8* %0, i64 1) #16
  %4 = tail call fastcc i64 @sorbet_getConstantAt(i64 %2, i64 %3)
  ret i64 %4
}

declare i64 @rb_define_class(i8*, i64) local_unnamed_addr #3

declare void @rb_define_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #3

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @sorbet_rb_arity_error_new(i32 %0, i32 %1, i32 %2) unnamed_addr #0 {
  %4 = icmp eq i32 %1, %2
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  %6 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.7, i64 0, i64 0), i32 %0, i32 %1) #16
  br label %13

7:                                                ; preds = %3
  %8 = icmp eq i32 %2, -1
  br i1 %8, label %9, label %11

9:                                                ; preds = %7
  %10 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.8, i64 0, i64 0), i32 %0, i32 %1) #16
  br label %13

11:                                               ; preds = %7
  %12 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.9, i64 0, i64 0), i32 %0, i32 %1, i32 %2) #16
  br label %13

13:                                               ; preds = %11, %9, %5
  %14 = phi i64 [ %6, %5 ], [ %10, %9 ], [ %12, %11 ]
  %15 = load i64, i64* @rb_eArgError, align 8, !tbaa !7
  %16 = tail call i64 @rb_exc_new_str(i64 %15, i64 %14) #16
  ret i64 %16
}

declare i64 @rb_exc_new_str(i64, i64) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind optsize ssp uwtable
define internal fastcc void @sorbet_cast_failure(i64 %0) unnamed_addr #8 {
  %2 = load i64, i64* @rb_eTypeError, align 8, !tbaa !7
  %3 = tail call i8* @rb_obj_classname(i64 %0) #16
  tail call void (i64, i8*, ...) @rb_raise(i64 %2, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_A.2, i64 0, i64 0), i8* %3, i64 %0) #17
  unreachable
}

; Function Attrs: noreturn nounwind ssp uwtable
define internal fastcc void @sorbet_rb_error_arity(i32 %0, i32 %1, i32 %2) unnamed_addr #9 {
  %4 = tail call fastcc i64 @sorbet_rb_arity_error_new(i32 %0, i32 %1, i32 %2)
  tail call void @rb_exc_raise(i64 %4) #17
  unreachable
}

; Function Attrs: noreturn
declare void @rb_exc_raise(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8* %0) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !9
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #16
  ret void
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly %0) #10 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !9
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

declare i64 @rb_obj_is_kind_of(i64, i64) local_unnamed_addr #3

declare void @rb_freeze_singleton_class(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_unsafe() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_unsafe, i64 0, i64 0), i64 6) #16
  store i64 %0, i64* @rubyIdPrecomputed_unsafe, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_new() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_new, i64 0, i64 0), i64 3) #16
  store i64 %0, i64* @rubyIdPrecomputed_new, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_read() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_read, i64 0, i64 0), i64 4) #16
  store i64 %0, i64* @rubyIdPrecomputed_read, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_puts() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 4) #16
  store i64 %0, i64* @rubyIdPrecomputed_puts, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_write() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_write, i64 0, i64 0), i64 5) #16
  store i64 %0, i64* @rubyIdPrecomputed_write, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_test_testdata_llvm_instancefields() local_unnamed_addr #12 {
typeTestSuccess.i:
  %callArgs.i = alloca [1 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8
  %1 = bitcast [1 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1)
  %rubyId_new.i = load i64, i64* @rubyIdPrecomputed_new, align 8
  %rubyId_read.i = load i64, i64* @rubyIdPrecomputed_read, align 8
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8
  %rubyId_write.i = load i64, i64* @rubyIdPrecomputed_write, align 8
  %2 = load i64, i64* @guard_epoch_T, align 8
  %3 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  %needTakeSlowPath.i = icmp eq i64 %2, %3
  br i1 %needTakeSlowPath.i, label %afterSymCallIntrinsic_unsafe.i, label %4, !prof !13

4:                                                ; preds = %typeTestSuccess.i
  %5 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_T.1, i64 0, i64 0)) #16
  store i64 %5, i64* @guarded_const_T, align 8
  %6 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  store i64 %6, i64* @guard_epoch_T, align 8
  br label %afterSymCallIntrinsic_unsafe.i

afterSymCallIntrinsic_unsafe.i:                   ; preds = %4, %typeTestSuccess.i
  %callArgsAddr.i = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs.i, i64 0, i64 0
  store i64 %0, i64* %callArgsAddr.i, align 8
  %7 = tail call i64 @rb_define_class(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_A.2, i64 0, i64 0), i64 %0) #16
  %8 = load i64, i64* @guard_epoch_A, align 8
  %9 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  %needTakeSlowPath.i.i = icmp eq i64 %8, %9
  br i1 %needTakeSlowPath.i.i, label %entry._crit_edge.i.i, label %10, !prof !13

entry._crit_edge.i.i:                             ; preds = %afterSymCallIntrinsic_unsafe.i
  %.pre.i.i = load i64, i64* @guarded_const_A, align 8
  br label %typeTestSuccess.i.i.i

10:                                               ; preds = %afterSymCallIntrinsic_unsafe.i
  %11 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_A.2, i64 0, i64 0)) #16
  store i64 %11, i64* @guarded_const_A, align 8
  %12 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  store i64 %12, i64* @guard_epoch_A, align 8
  br label %typeTestSuccess.i.i.i

typeTestSuccess.i.i.i:                            ; preds = %10, %entry._crit_edge.i.i
  %13 = phi i64 [ %8, %entry._crit_edge.i.i ], [ %12, %10 ]
  %14 = phi i64 [ %.pre.i.i, %entry._crit_edge.i.i ], [ %11, %10 ]
  %rubyId_write.i.i.i = load i64, i64* @rubyIdPrecomputed_write, align 8
  %rubyId_read.i.i.i = load i64, i64* @rubyIdPrecomputed_read, align 8
  %15 = load i64, i64* @guard_epoch_T, align 8
  %needTakeSlowPath41.i.i.i = icmp eq i64 %15, %13
  br i1 %needTakeSlowPath41.i.i.i, label %"Init_func_A.<static-init>.exit.i", label %16, !prof !13

16:                                               ; preds = %typeTestSuccess.i.i.i
  %17 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_T.1, i64 0, i64 0)) #16
  store i64 %17, i64* @guarded_const_T, align 8
  %18 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  store i64 %18, i64* @guard_epoch_T, align 8
  br label %"Init_func_A.<static-init>.exit.i"

"Init_func_A.<static-init>.exit.i":               ; preds = %16, %typeTestSuccess.i.i.i
  %rawSym.i.i.i = tail call i64 @rb_id2sym(i64 %rubyId_write.i.i.i) #16
  tail call void @rb_define_method(i64 %14, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_write, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"func_A#write" to i64 (...)*), i32 -1) #16
  %rawSym37.i.i.i = tail call i64 @rb_id2sym(i64 %rubyId_read.i.i.i) #16
  tail call void @rb_define_method(i64 %14, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_read, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"func_A#read" to i64 (...)*), i32 -1) #16
  %19 = load i64, i64* @guard_epoch_A, align 8
  %20 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  %needTakeSlowPath83.i = icmp eq i64 %19, %20
  br i1 %needTakeSlowPath83.i, label %"Init_func_A.<static-init>.exit._crit_edge.i", label %21, !prof !13

"Init_func_A.<static-init>.exit._crit_edge.i":    ; preds = %"Init_func_A.<static-init>.exit.i"
  %.pre.i = load i64, i64* @guarded_const_A, align 8
  br label %"func_<root>.<static-init>$111.exit"

21:                                               ; preds = %"Init_func_A.<static-init>.exit.i"
  %22 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_A.2, i64 0, i64 0)) #16
  store i64 %22, i64* @guarded_const_A, align 8
  %23 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  store i64 %23, i64* @guard_epoch_A, align 8
  br label %"func_<root>.<static-init>$111.exit"

"func_<root>.<static-init>$111.exit":             ; preds = %"Init_func_A.<static-init>.exit._crit_edge.i", %21
  %24 = phi i64 [ %.pre.i, %"Init_func_A.<static-init>.exit._crit_edge.i" ], [ %22, %21 ]
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_new.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #16, !noalias !14
  %25 = call i64 @rb_funcallv(i64 %24, i64 %rubyId_new.i, i32 0, i64* nonnull %callArgsAddr.i) #16
  call void @dbg_sorbet_validate_id(i64 %rubyId_new.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #16, !noalias !17
  %26 = call i64 @rb_funcallv(i64 %24, i64 %rubyId_new.i, i32 0, i64* nonnull %callArgsAddr.i) #16
  call void @dbg_sorbet_validate_id(i64 %rubyId_read.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #16, !noalias !20
  %27 = call i64 @rb_funcallv(i64 %25, i64 %rubyId_read.i, i32 0, i64* nonnull %callArgsAddr.i) #16
  store i64 %27, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #16, !noalias !23
  %28 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #16
  %29 = call i64 @rb_str_new(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_value, i64 0, i64 0), i64 5) #16
  store i64 %29, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_write.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #16, !noalias !26
  %30 = call i64 @rb_funcallv(i64 %25, i64 %rubyId_write.i, i32 1, i64* nonnull %callArgsAddr.i) #16
  call void @dbg_sorbet_validate_id(i64 %rubyId_read.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #16, !noalias !29
  %31 = call i64 @rb_funcallv(i64 %25, i64 %rubyId_read.i, i32 0, i64* nonnull %callArgsAddr.i) #16
  store i64 %31, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #16, !noalias !32
  %32 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #16
  call void @dbg_sorbet_validate_id(i64 %rubyId_read.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #16, !noalias !35
  %33 = call i64 @rb_funcallv(i64 %26, i64 %rubyId_read.i, i32 0, i64* nonnull %callArgsAddr.i) #16
  store i64 %33, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #16, !noalias !38
  %34 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1)
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_A#write"(i32 %argc, i64* nocapture readonly %argArray, i64 %selfRaw) #13 {
functionEntryInitializers:
  %"rubyId_@f" = load i64, i64* @"rubyIdPrecomputed_@f", align 8
  %0 = icmp eq i32 %argc, 1
  br i1 %0, label %fillRequiredArgs, label %argCountFailBlock, !prof !41, !misexpect !42

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_rb_error_arity(i32 %argc, i32 1, i32 1)
  unreachable

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %rawArg_v = load i64, i64* %argArray, align 8
  %1 = load i64, i64* @guard_epoch_A, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  %needTakeSlowPath = icmp eq i64 %1, %2
  br i1 %needTakeSlowPath, label %fillRequiredArgs._crit_edge, label %3, !prof !13

fillRequiredArgs._crit_edge:                      ; preds = %fillRequiredArgs
  %.pre = load i64, i64* @guarded_const_A, align 8
  br label %6

3:                                                ; preds = %fillRequiredArgs
  %4 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_A.2, i64 0, i64 0)) #16
  store i64 %4, i64* @guarded_const_A, align 8
  %5 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  store i64 %5, i64* @guard_epoch_A, align 8
  br label %6

6:                                                ; preds = %fillRequiredArgs._crit_edge, %3
  %7 = phi i64 [ %.pre, %fillRequiredArgs._crit_edge ], [ %4, %3 ]
  %8 = tail call i64 @rb_obj_is_kind_of(i64 %selfRaw, i64 %7) #16
  %9 = icmp eq i64 %8, 20
  br i1 %9, label %typeTestSuccess, label %typeTestFail, !prof !43, !misexpect !44

typeTestSuccess:                                  ; preds = %6
  tail call void @dbg_sorbet_validate_id(i64 %"rubyId_@f", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0)) #16
  %10 = tail call i64 @rb_ivar_set(i64 %selfRaw, i64 %"rubyId_@f", i64 %rawArg_v) #16
  tail call void @dbg_sorbet_validate_id(i64 %"rubyId_@f", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0)) #16
  %11 = tail call i64 @rb_ivar_get(i64 %selfRaw, i64 %"rubyId_@f") #16
  ret i64 %11

typeTestFail:                                     ; preds = %6
  tail call fastcc void @sorbet_cast_failure(i64 %selfRaw)
  unreachable
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_@f"() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"str_@f", i64 0, i64 0), i64 2) #16
  store i64 %0, i64* @"rubyIdPrecomputed_@f", align 8
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_A#read"(i32 %argc, i64* nocapture readnone %argArray, i64 %selfRaw) #13 {
functionEntryInitializers:
  %"rubyId_@f" = load i64, i64* @"rubyIdPrecomputed_@f", align 8
  %tooManyArgs = icmp eq i32 %argc, 0
  br i1 %tooManyArgs, label %fillRequiredArgs, label %argCountFailBlock, !prof !43, !misexpect !42

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_rb_error_arity(i32 %argc, i32 0, i32 0)
  unreachable

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %0 = load i64, i64* @guard_epoch_A, align 8
  %1 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  %needTakeSlowPath = icmp eq i64 %0, %1
  br i1 %needTakeSlowPath, label %fillRequiredArgs._crit_edge, label %2, !prof !13

fillRequiredArgs._crit_edge:                      ; preds = %fillRequiredArgs
  %.pre = load i64, i64* @guarded_const_A, align 8
  br label %5

2:                                                ; preds = %fillRequiredArgs
  %3 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_A.2, i64 0, i64 0)) #16
  store i64 %3, i64* @guarded_const_A, align 8
  %4 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !11
  store i64 %4, i64* @guard_epoch_A, align 8
  br label %5

5:                                                ; preds = %fillRequiredArgs._crit_edge, %2
  %6 = phi i64 [ %.pre, %fillRequiredArgs._crit_edge ], [ %3, %2 ]
  %7 = tail call i64 @rb_obj_is_kind_of(i64 %selfRaw, i64 %6) #16
  %8 = icmp eq i64 %7, 20
  br i1 %8, label %typeTestSuccess, label %typeTestFail, !prof !43, !misexpect !44

typeTestSuccess:                                  ; preds = %5
  tail call void @dbg_sorbet_validate_id(i64 %"rubyId_@f", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0)) #16
  %9 = tail call i64 @rb_ivar_get(i64 %selfRaw, i64 %"rubyId_@f") #16
  ret i64 %9

typeTestFail:                                     ; preds = %5
  tail call fastcc void @sorbet_cast_failure(i64 %selfRaw)
  unreachable
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #14

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #14

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { nofree nounwind }
attributes #2 = { cold noreturn }
attributes #3 = { "addedToSilenceEmptyAttrsError" }
attributes #4 = { noinline nounwind ssp uwtable }
attributes #5 = { argmemonly nofree nounwind readonly }
attributes #6 = { noreturn }
attributes #7 = { nounwind readnone }
attributes #8 = { cold noreturn nounwind optsize ssp uwtable }
attributes #9 = { noreturn nounwind ssp uwtable }
attributes #10 = { norecurse nounwind readnone ssp uwtable }
attributes #11 = { nounwind ssp }
attributes #12 = { nounwind sspreq }
attributes #13 = { nounwind sspreq uwtable }
attributes #14 = { argmemonly nounwind willreturn }
attributes #15 = { cold noreturn nounwind }
attributes #16 = { nounwind }
attributes #17 = { noreturn nounwind }

!0 = !{!"branch_weights", i32 1, i32 2000}
!1 = !{!2, !3, i64 0}
!2 = !{!"RBasic", !3, i64 0, !3, i64 8}
!3 = !{!"long", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
!7 = !{!3, !3, i64 0}
!8 = !{!2, !3, i64 8}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !4, i64 0}
!11 = !{!12, !12, i64 0}
!12 = !{!"long long", !4, i64 0}
!13 = !{!"branch_weights", i32 10000, i32 1}
!14 = !{!15}
!15 = distinct !{!15, !16, !"sorbet_callFunc: argument 0"}
!16 = distinct !{!16, !"sorbet_callFunc"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"sorbet_callFunc: argument 0"}
!19 = distinct !{!19, !"sorbet_callFunc"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"sorbet_callFunc: argument 0"}
!22 = distinct !{!22, !"sorbet_callFunc"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"sorbet_callFunc: argument 0"}
!25 = distinct !{!25, !"sorbet_callFunc"}
!26 = !{!27}
!27 = distinct !{!27, !28, !"sorbet_callFunc: argument 0"}
!28 = distinct !{!28, !"sorbet_callFunc"}
!29 = !{!30}
!30 = distinct !{!30, !31, !"sorbet_callFunc: argument 0"}
!31 = distinct !{!31, !"sorbet_callFunc"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"sorbet_callFunc: argument 0"}
!34 = distinct !{!34, !"sorbet_callFunc"}
!35 = !{!36}
!36 = distinct !{!36, !37, !"sorbet_callFunc: argument 0"}
!37 = distinct !{!37, !"sorbet_callFunc"}
!38 = !{!39}
!39 = distinct !{!39, !40, !"sorbet_callFunc: argument 0"}
!40 = distinct !{!40, !"sorbet_callFunc"}
!41 = !{!"branch_weights", i32 4000000, i32 4001}
!42 = !{!"misexpect", i64 1, i64 2000, i64 1}
!43 = !{!"branch_weights", i32 2000, i32 1}
!44 = !{!"misexpect", i64 0, i64 2000, i64 1}
