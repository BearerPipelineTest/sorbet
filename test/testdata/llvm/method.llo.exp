source_filename = "compiler/IRHelpers/payload.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin18.2.0"

%struct.rb_data_type_struct = type { i8*, %struct.anon.1, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.1 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.RBasic = type { i64, i64 }
%struct.RString = type { %struct.RBasic, %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { i64, i8*, %union.anon.0 }
%union.anon.0 = type { i64 }

@.str = private unnamed_addr constant [16 x i8] c"ERROR: %s is 0\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%li\0B\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@.str.6 = private unnamed_addr constant [5 x i8] c"func\00", align 1
@.str.7 = private unnamed_addr constant [50 x i8] c"wrong number of arguments (given %d, expected %d)\00", align 1
@rb_eArgError = external local_unnamed_addr global i64, align 8
@.str.10 = private unnamed_addr constant [45 x i8] c"%s: Expected type %s, got %s with value %li\0B\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@closureInfo = local_unnamed_addr constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i32 0, i32 0), %struct.anon.1 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@str_cast = private unnamed_addr constant [5 x i8] c"cast\00", align 1
@str_Object = private unnamed_addr constant [7 x i8] c"Object\00", align 1
@"rubyIdPrecomputed_<" = internal unnamed_addr global i64 0, align 8
@"str_<" = private unnamed_addr constant [2 x i8] c"<\00", align 1
@"userStr_hello " = private unnamed_addr constant [7 x i8] c"hello \00", align 1
@"rubyIdPrecomputed_+" = internal unnamed_addr global i64 0, align 8
@"str_+" = private unnamed_addr constant [2 x i8] c"+\00", align 1
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@rubyIdPrecomputed_unsafe = internal unnamed_addr global i64 0, align 8
@str_unsafe = private unnamed_addr constant [7 x i8] c"unsafe\00", align 1
@rubyIdPrecomputed_hello = internal unnamed_addr global i64 0, align 8
@llvm.global_ctors = appending global [5 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_<", i8* bitcast (i64* @"rubyIdPrecomputed_<" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_+", i8* bitcast (i64* @"rubyIdPrecomputed_+" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_puts, i8* bitcast (i64* @rubyIdPrecomputed_puts to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_unsafe, i8* bitcast (i64* @rubyIdPrecomputed_unsafe to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_hello, i8* bitcast (i64* @rubyIdPrecomputed_hello to i8*) }]
@str_hello.2 = private unnamed_addr constant [6 x i8] c"hello\00", align 1
@userStr_sorbet = private unnamed_addr constant [7 x i8] c"sorbet\00", align 1

; Function Attrs: nounwind ssp uwtable
define weak void @dbg_sorbet_validate_id(i64, i8*) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6, !prof !0

4:                                                ; preds = %2
  %5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %1)
  tail call void @abort() #12
  unreachable

6:                                                ; preds = %2
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @abort() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_pi(i64) local_unnamed_addr #0 {
  %2 = tail call i8* @rb_id2name(i64 %0) #13
  ret i8* %2
}

declare i8* @rb_id2name(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_p(i64) local_unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #13
  %3 = inttoptr i64 %2 to %struct.RBasic*
  %4 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1
  %6 = and i64 %5, 8192
  %7 = icmp eq i64 %6, 0
  %8 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #13
  %9 = inttoptr i64 %8 to %struct.RString*
  br i1 %7, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !6
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i8* [ %12, %10 ], [ %15, %13 ]
  ret i8* %17
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #3

declare i64 @rb_str_new(i8*, i64) local_unnamed_addr #3

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #3

declare i64 @rb_id2sym(i64) local_unnamed_addr #3

declare i8* @rb_obj_classname(i64) local_unnamed_addr #3

declare i32 @rb_block_given_p() local_unnamed_addr #3

declare i64 @rb_block_proc() local_unnamed_addr #3

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #4

declare void @rb_define_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #3

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @sorbet_rb_arity_error_new(i32) unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.7, i64 0, i64 0), i32 %0, i32 1) #13
  %3 = load i64, i64* @rb_eArgError, align 8, !tbaa !7
  %4 = tail call i64 @rb_exc_new_str(i64 %3, i64 %2) #13
  ret i64 %4
}

declare i64 @rb_exc_new_str(i64, i64) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind optsize ssp uwtable
define internal fastcc void @sorbet_cast_failure(i64) unnamed_addr #5 {
  %2 = load i64, i64* @rb_eTypeError, align 8, !tbaa !7
  %3 = tail call i8* @rb_obj_classname(i64 %0) #13
  tail call void (i64, i8*, ...) @rb_raise(i64 %2, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Object, i64 0, i64 0), i8* %3, i64 %0) #14
  unreachable
}

; Function Attrs: noreturn nounwind ssp uwtable
define internal fastcc void @sorbet_rb_error_arity(i32) unnamed_addr #6 {
  %2 = tail call fastcc i64 @sorbet_rb_arity_error_new(i32 %0)
  tail call void @rb_exc_raise(i64 %2) #14
  unreachable
}

; Function Attrs: noreturn
declare void @rb_exc_raise(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8*) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !8
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #13
  ret void
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly) #7 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !8
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

declare i64 @rb_obj_is_kind_of(i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_<C <U Object>><U hello>"(i32 %argc, i64* nocapture readonly %argArray, i64 %selfRaw) #8 {
functionEntryInitializers:
  %callArgs = alloca [1 x i64], align 8
  %"rubyId_<" = load i64, i64* @"rubyIdPrecomputed_<", align 8
  %"rubyId_+" = load i64, i64* @"rubyIdPrecomputed_+", align 8
  %rubyId_puts = load i64, i64* @rubyIdPrecomputed_puts, align 8
  %0 = icmp eq i32 %argc, 1
  br i1 %0, label %fillRequiredArgs, label %argCountFailBlock, !prof !10

BB3:                                              ; preds = %BB5, %BB2.preheader
  ret i64 8

BB5:                                              ; preds = %BB2.preheader, %BB5
  %i.sroa.0.043 = phi i64 [ %4, %BB5 ], [ 1, %BB2.preheader ]
  %1 = call i64 @rb_str_new(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"userStr_hello ", i64 0, i64 0), i64 6) #13
  store i64 %rawArg_name, i64* %callArgsAddr, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_+", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !11
  %2 = call i64 @rb_funcallv(i64 %1, i64 %"rubyId_+", i32 1, i64* nonnull %callArgsAddr) #13
  store i64 %2, i64* %callArgsAddr, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !14
  %3 = call i64 @rb_funcallv(i64 %selfRaw, i64 %rubyId_puts, i32 1, i64* nonnull %callArgsAddr) #13
  store i64 3, i64* %callArgsAddr, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_+", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !17
  %4 = call i64 @rb_funcallv(i64 %i.sroa.0.043, i64 %"rubyId_+", i32 1, i64* nonnull %callArgsAddr) #13
  store i64 21, i64* %callArgsAddr, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_<", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !20
  %5 = call i64 @rb_funcallv(i64 %4, i64 %"rubyId_<", i32 1, i64* nonnull %callArgsAddr) #13
  %6 = and i64 %5, -9
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %BB3, label %BB5

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_rb_error_arity(i32 %argc)
  unreachable

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %rawArg_name = load i64, i64* %argArray, align 8
  %8 = tail call i32 @rb_block_given_p() #13
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %sorbet_getMethodBlockAsProc.exit, label %10

10:                                               ; preds = %fillRequiredArgs
  %11 = tail call i64 @rb_block_proc() #13
  br label %sorbet_getMethodBlockAsProc.exit

sorbet_getMethodBlockAsProc.exit:                 ; preds = %fillRequiredArgs, %10
  %12 = load i64, i64* @rb_cObject, align 8
  %13 = tail call i64 @rb_obj_is_kind_of(i64 %selfRaw, i64 %12) #13
  %14 = icmp eq i64 %13, 20
  br i1 %14, label %BB2.preheader, label %typeTestFail, !prof !23

BB2.preheader:                                    ; preds = %sorbet_getMethodBlockAsProc.exit
  %callArgsAddr = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs, i64 0, i64 0
  store i64 21, i64* %callArgsAddr, align 8
  tail call void @dbg_sorbet_validate_id(i64 %"rubyId_<", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !20
  %15 = call i64 @rb_funcallv(i64 1, i64 %"rubyId_<", i32 1, i64* nonnull %callArgsAddr) #13
  %16 = and i64 %15, -9
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %BB3, label %BB5

typeTestFail:                                     ; preds = %sorbet_getMethodBlockAsProc.exit
  tail call fastcc void @sorbet_cast_failure(i64 %selfRaw)
  unreachable
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_<"() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_<", i64 0, i64 0), i64 1) #13
  store i64 %0, i64* @"rubyIdPrecomputed_<", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_+"() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_+", i64 0, i64 0), i64 1) #13
  store i64 %0, i64* @"rubyIdPrecomputed_+", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_puts() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 4) #13
  store i64 %0, i64* @rubyIdPrecomputed_puts, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_unsafe() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_unsafe, i64 0, i64 0), i64 6) #13
  store i64 %0, i64* @rubyIdPrecomputed_unsafe, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_hello() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_hello.2, i64 0, i64 0), i64 5) #13
  store i64 %0, i64* @rubyIdPrecomputed_hello, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_test_testdata_llvm_method() local_unnamed_addr #10 {
entry:
  %callArgs.i = alloca [2 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8
  %1 = bitcast [2 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1)
  %rubyId_unsafe.i = load i64, i64* @rubyIdPrecomputed_unsafe, align 8
  %rubyId_hello.i = load i64, i64* @rubyIdPrecomputed_hello, align 8
  %2 = tail call i32 @rb_block_given_p() #13
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %"func_<S <C <U <root>>> $1><N <U <static-init>> $111>.exit", label %4

4:                                                ; preds = %entry
  %5 = tail call i64 @rb_block_proc() #13
  br label %"func_<S <C <U <root>>> $1><N <U <static-init>> $111>.exit"

"func_<S <C <U <root>>> $1><N <U <static-init>> $111>.exit": ; preds = %entry, %4
  %callArgsAddr.i = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs.i, i64 0, i64 0
  store i64 8, i64* %callArgsAddr.i, align 8
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_unsafe.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !24
  %6 = call i64 @rb_funcallv(i64 8, i64 %rubyId_unsafe.i, i32 1, i64* nonnull %callArgsAddr.i) #13
  %rawSym.i = call i64 @rb_id2sym(i64 %rubyId_hello.i) #13
  call void @rb_define_method(i64 %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_hello.2, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"func_<C <U Object>><U hello>" to i64 (...)*), i32 -1) #13
  %7 = call i64 @rb_str_new(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @userStr_sorbet, i64 0, i64 0), i64 6) #13
  store i64 %7, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_hello.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13, !noalias !27
  %8 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_hello.i, i32 1, i64* nonnull %callArgsAddr.i) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #11

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #11

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { nofree nounwind }
attributes #2 = { cold noreturn }
attributes #3 = { "addedToSilenceEmptyAttrsError" }
attributes #4 = { noreturn }
attributes #5 = { cold noreturn nounwind optsize ssp uwtable }
attributes #6 = { noreturn nounwind ssp uwtable }
attributes #7 = { norecurse nounwind readnone ssp uwtable }
attributes #8 = { nounwind sspreq uwtable }
attributes #9 = { nounwind ssp }
attributes #10 = { nounwind sspreq }
attributes #11 = { argmemonly nounwind }
attributes #12 = { cold noreturn nounwind }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }

!0 = !{!"branch_weights", i32 1, i32 2000}
!1 = !{!2, !3, i64 0}
!2 = !{!"RBasic", !3, i64 0, !3, i64 8}
!3 = !{!"long", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
!7 = !{!3, !3, i64 0}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !4, i64 0}
!10 = !{!"branch_weights", i32 4000000, i32 4001}
!11 = !{!12}
!12 = distinct !{!12, !13, !"sorbet_callFunc: argument 0"}
!13 = distinct !{!13, !"sorbet_callFunc"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"sorbet_callFunc: argument 0"}
!16 = distinct !{!16, !"sorbet_callFunc"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"sorbet_callFunc: argument 0"}
!19 = distinct !{!19, !"sorbet_callFunc"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"sorbet_callFunc: argument 0"}
!22 = distinct !{!22, !"sorbet_callFunc"}
!23 = !{!"branch_weights", i32 2000, i32 1}
!24 = !{!25}
!25 = distinct !{!25, !26, !"sorbet_callFunc: argument 0"}
!26 = distinct !{!26, !"sorbet_callFunc"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"sorbet_callFunc: argument 0"}
!29 = distinct !{!29, !"sorbet_callFunc"}
