source_filename = "compiler/IRHelpers/payload.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin18.2.0"

@.str = private unnamed_addr constant [16 x i8] c"ERROR: %s is 0\0A\00", align 1
@rb_cObject = external local_unnamed_addr global i64, align 8
@.str.3 = private unnamed_addr constant [5 x i8] c"func\00", align 1
@.str.4 = private unnamed_addr constant [50 x i8] c"wrong number of arguments (given %d, expected %d)\00", align 1
@rb_eArgError = external local_unnamed_addr global i64, align 8
@"str_<" = internal unnamed_addr global i64 0, align 8
@"str_<.1" = private unnamed_addr constant [2 x i8] c"<\00", align 1
@"userStr_hello " = private unnamed_addr constant [7 x i8] c"hello \00", align 1
@"str_+" = internal unnamed_addr global i64 0, align 8
@"str_+.2" = private unnamed_addr constant [2 x i8] c"+\00", align 1
@str_puts = internal unnamed_addr global i64 0, align 8
@str_puts.3 = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@str_Object = private unnamed_addr constant [7 x i8] c"Object\00", align 1
@userStr_sorbet = private unnamed_addr constant [7 x i8] c"sorbet\00", align 1
@str_hello = internal unnamed_addr global i64 0, align 8
@str_hello.4 = private unnamed_addr constant [6 x i8] c"hello\00", align 1
@llvm.global_ctors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @"Constr_str_<", i8* bitcast (i64* @"str_<" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_str_+", i8* bitcast (i64* @"str_+" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_str_puts, i8* bitcast (i64* @str_puts to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_str_hello, i8* bitcast (i64* @str_hello to i8*) }]

; Function Attrs: nounwind ssp uwtable
define weak void @dbg_sorbet_validate_id(i64, i8*) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6, !prof !0

; <label>:4:                                      ; preds = %2
  %5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %1)
  tail call void @abort() #10
  unreachable

; <label>:6:                                      ; preds = %2
  ret void
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @abort() local_unnamed_addr #2

declare i64 @rb_str_new(i8*, i64) local_unnamed_addr #3

declare i64 @rb_intern(i8*) local_unnamed_addr #3

declare i64 @rb_const_get_at(i64, i64) local_unnamed_addr #3

declare void @rb_define_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #3

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @sorbet_rb_arity_error_new(i32) unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.4, i64 0, i64 0), i32 %0, i32 1) #1
  %3 = load i64, i64* @rb_eArgError, align 8, !tbaa !1
  %4 = tail call i64 @rb_exc_new_str(i64 %3, i64 %2) #1
  ret i64 %4
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #3

declare i64 @rb_exc_new_str(i64, i64) local_unnamed_addr #3

; Function Attrs: noreturn nounwind ssp uwtable
define internal fastcc void @sorbet_rb_error_arity(i32) unnamed_addr #4 {
  %2 = tail call fastcc i64 @sorbet_rb_arity_error_new(i32 %0)
  tail call void @rb_exc_raise(i64 %2) #11
  unreachable
}

; Function Attrs: noreturn
declare void @rb_exc_raise(i64) local_unnamed_addr #5

; Function Attrs: nounwind sspreq uwtable
define i64 @"<C <U Object>><U hello>"(i32, i64* nocapture readonly, i64) #6 {
functionEntryInitializers:
  %callArgs = alloca [1 x i64], align 8
  %"rubyId_<" = load i64, i64* @"str_<", align 8
  %"rubyId_+" = load i64, i64* @"str_+", align 8
  %rubyId_puts = load i64, i64* @str_puts, align 8
  %isWrongArgCount = icmp eq i32 %0, 1
  br i1 %isWrongArgCount, label %argCountSuccess, label %argCountFailBlock

argCountSuccess:                                  ; preds = %functionEntryInitializers
  %rawArgValue = load i64, i64* %1, align 8
  %callArgsAddr = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs, i64 0, i64 0
  store i64 21, i64* %callArgsAddr, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_<", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0)) #1, !noalias !5
  %3 = call i64 @rb_funcallv(i64 1, i64 %"rubyId_<", i32 1, i64* nonnull %callArgsAddr) #1
  %4 = and i64 %3, -9
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %BB3, label %BB5

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_rb_error_arity(i32 %0)
  unreachable

BB3:                                              ; preds = %BB5, %argCountSuccess
  ret i64 8

BB5:                                              ; preds = %argCountSuccess, %BB5
  %i.sroa.0.033 = phi i64 [ %9, %BB5 ], [ 1, %argCountSuccess ]
  %6 = call i64 @rb_str_new(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"userStr_hello ", i64 0, i64 0), i64 6) #1
  store i64 %rawArgValue, i64* %callArgsAddr, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_+", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0)) #1, !noalias !8
  %7 = call i64 @rb_funcallv(i64 %6, i64 %"rubyId_+", i32 1, i64* nonnull %callArgsAddr) #1
  store i64 %7, i64* %callArgsAddr, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0)) #1, !noalias !11
  %8 = call i64 @rb_funcallv(i64 %2, i64 %rubyId_puts, i32 1, i64* nonnull %callArgsAddr) #1
  store i64 3, i64* %callArgsAddr, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_+", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0)) #1, !noalias !14
  %9 = call i64 @rb_funcallv(i64 %i.sroa.0.033, i64 %"rubyId_+", i32 1, i64* nonnull %callArgsAddr) #1
  store i64 21, i64* %callArgsAddr, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_<", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0)) #1, !noalias !5
  %10 = call i64 @rb_funcallv(i64 %9, i64 %"rubyId_<", i32 1, i64* nonnull %callArgsAddr) #1
  %11 = and i64 %10, -9
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %BB3, label %BB5
}

; Function Attrs: nounwind ssp
define internal void @"Constr_str_<"() #7 {
constr:
  %0 = tail call i64 @rb_intern(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_<.1", i64 0, i64 0)) #1
  store i64 %0, i64* @"str_<", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @"Constr_str_+"() #7 {
constr:
  %0 = tail call i64 @rb_intern(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_+.2", i64 0, i64 0)) #1
  store i64 %0, i64* @"str_+", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_str_puts() #7 {
constr:
  %0 = tail call i64 @rb_intern(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts.3, i64 0, i64 0)) #1
  store i64 %0, i64* @str_puts, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_str_hello() #7 {
constr:
  %0 = tail call i64 @rb_intern(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_hello.4, i64 0, i64 0)) #1
  store i64 %0, i64* @str_hello, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_method() local_unnamed_addr #8 {
entry:
  %callArgs.i = alloca [2 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8, !tbaa !1
  %1 = bitcast [2 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1)
  %rubyId_hello.i = load i64, i64* @str_hello, align 8
  %2 = tail call i64 @rb_intern(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Object, i64 0, i64 0)) #1
  %3 = load i64, i64* @rb_cObject, align 8, !tbaa !1
  %4 = tail call i64 @rb_const_get_at(i64 %3, i64 %2) #1
  tail call void @rb_define_method(i64 %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_hello.4, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"<C <U Object>><U hello>" to i64 (...)*), i32 -1) #1
  %5 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @userStr_sorbet, i64 0, i64 0), i64 6) #1
  %callArgsAddr.i = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs.i, i64 0, i64 0
  store i64 %5, i64* %callArgsAddr.i, align 8
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_hello.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0)) #1, !noalias !17
  %6 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_hello.i, i32 1, i64* nonnull %callArgsAddr.i) #1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #9

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #9

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { nounwind }
attributes #2 = { cold noreturn }
attributes #3 = { "addedToSilenceEmptyAttrsError" }
attributes #4 = { noreturn nounwind ssp uwtable }
attributes #5 = { noreturn }
attributes #6 = { nounwind sspreq uwtable }
attributes #7 = { nounwind ssp }
attributes #8 = { nounwind sspreq }
attributes #9 = { argmemonly nounwind }
attributes #10 = { cold noreturn nounwind }
attributes #11 = { noreturn nounwind }

!0 = !{!"branch_weights", i32 1, i32 2000}
!1 = !{!2, !2, i64 0}
!2 = !{!"long", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"sorbet_callFunc: argument 0"}
!7 = distinct !{!7, !"sorbet_callFunc"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"sorbet_callFunc: argument 0"}
!10 = distinct !{!10, !"sorbet_callFunc"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"sorbet_callFunc: argument 0"}
!13 = distinct !{!13, !"sorbet_callFunc"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"sorbet_callFunc: argument 0"}
!16 = distinct !{!16, !"sorbet_callFunc"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"sorbet_callFunc: argument 0"}
!19 = distinct !{!19, !"sorbet_callFunc"}
