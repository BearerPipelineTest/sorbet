source_filename = "compiler/IRHelpers/payload.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin18.2.0"

%struct.rb_data_type_struct = type { i8*, %struct.anon.1, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.1 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.RBasic = type { i64, i64 }
%struct.RString = type { %struct.RBasic, %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { i64, i8*, %union.anon.0 }
%union.anon.0 = type { i64 }
%struct.OnigEncodingTypeST = type { i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i8*, i32, i32, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8**, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i32 (i32, i32*, i32, i8*)*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, i8*, %struct.OnigCaseFoldCodeItem*, %struct.OnigEncodingTypeST*)*, i32 (%struct.OnigEncodingTypeST*, i8*, i8*)*, i32 (i32, i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i32*, i32**, %struct.OnigEncodingTypeST*)*, i8* (i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32*, i8**, i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32, i32 }
%struct.OnigCaseFoldCodeItem = type { i32, i32, [3 x i32] }
%struct.RTypedData = type { %struct.RBasic, %struct.rb_data_type_struct*, i64, i8* }
%struct.sorbet_Closure = type { i32, [0 x i64] }

@.str = private unnamed_addr constant [16 x i8] c"ERROR: %s is 0\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%li\0B\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@ruby_vm_global_constant_state = external local_unnamed_addr global i64, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.4 = private unnamed_addr constant [29 x i8] c"wrong constant name %li\0B%li\0B\00", align 1
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@.str.5 = private unnamed_addr constant [36 x i8] c"%li\0B does not refer to class/module\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"func\00", align 1
@.str.7 = private unnamed_addr constant [50 x i8] c"wrong number of arguments (given %d, expected %d)\00", align 1
@rb_eArgError = external local_unnamed_addr global i64, align 8
@.str.10 = private unnamed_addr constant [45 x i8] c"%s: Expected type %s, got %s with value %li\0B\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@closureInfo = constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i32 0, i32 0), %struct.anon.1 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@rb_cData = external local_unnamed_addr constant i64, align 8
@rb_cModule = external local_unnamed_addr constant i64, align 8
@rubyIdPrecomputed_call = internal unnamed_addr global i64 0, align 8
@str_call = private unnamed_addr constant [5 x i8] c"call\00", align 1
@str_Object.2 = private unnamed_addr constant [7 x i8] c"Object\00", align 1
@str_cast.3 = private unnamed_addr constant [5 x i8] c"cast\00", align 1
@"str_T.class_of(<root>)" = private unnamed_addr constant [19 x i8] c"T.class_of(<root>)\00", align 1
@rubyIdPrecomputed_unsafe = internal unnamed_addr global i64 0, align 8
@str_unsafe = private unnamed_addr constant [7 x i8] c"unsafe\00", align 1
@guard_epoch_T = linkonce local_unnamed_addr global i64 0
@guarded_const_T = linkonce local_unnamed_addr global i64 0
@str_T = private unnamed_addr constant [2 x i8] c"T\00", align 1
@rubyIdPrecomputed_foo = internal unnamed_addr global i64 0, align 8
@str_foo.4 = private unnamed_addr constant [4 x i8] c"foo\00", align 1
@rubyIdPrecomputed_boo = internal unnamed_addr global i64 0, align 8
@str_boo.5 = private unnamed_addr constant [4 x i8] c"boo\00", align 1
@userStr_heey = private unnamed_addr constant [5 x i8] c"heey\00", align 1
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@llvm.global_ctors = appending global [5 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_call, i8* bitcast (i64* @rubyIdPrecomputed_call to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_unsafe, i8* bitcast (i64* @rubyIdPrecomputed_unsafe to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_foo, i8* bitcast (i64* @rubyIdPrecomputed_foo to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_boo, i8* bitcast (i64* @rubyIdPrecomputed_boo to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_puts, i8* bitcast (i64* @rubyIdPrecomputed_puts to i8*) }]
@userStr_boohey = private unnamed_addr constant [7 x i8] c"boohey\00", align 1

; Function Attrs: nounwind ssp uwtable
define weak void @dbg_sorbet_validate_id(i64, i8*) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6, !prof !0

4:                                                ; preds = %2
  %5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %1)
  tail call void @abort() #16
  unreachable

6:                                                ; preds = %2
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @abort() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_pi(i64) local_unnamed_addr #0 {
  %2 = tail call i8* @rb_id2name(i64 %0) #17
  ret i8* %2
}

declare i8* @rb_id2name(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_p(i64) local_unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #17
  %3 = inttoptr i64 %2 to %struct.RBasic*
  %4 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1
  %6 = and i64 %5, 8192
  %7 = icmp eq i64 %6, 0
  %8 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #17
  %9 = inttoptr i64 %8 to %struct.RString*
  br i1 %7, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !6
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i8* [ %12, %10 ], [ %15, %13 ]
  ret i8* %17
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #3

declare i64 @rb_str_new(i8*, i64) local_unnamed_addr #3

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #3

declare i64 @rb_id2sym(i64) local_unnamed_addr #3

declare i8* @rb_obj_classname(i64) local_unnamed_addr #3

declare i32 @rb_block_given_p() local_unnamed_addr #3

declare i64 @rb_block_proc() local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @sorbet_getConstant() unnamed_addr #4 {
  %1 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_T, i64 0, i64 0), i64 1) #17
  %2 = tail call i64 @rb_id2sym(i64 %1) #17
  %3 = load i64, i64* @rb_cObject, align 8, !tbaa !7
  %4 = tail call %struct.OnigEncodingTypeST* @rb_enc_get(i64 %2) #17
  %5 = tail call i64 @rb_check_id_cstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_T, i64 0, i64 0), i64 1, %struct.OnigEncodingTypeST* %4) #17
  %6 = and i64 %3, 7
  %7 = icmp ne i64 %6, 0
  %8 = and i64 %3, -9
  %9 = icmp eq i64 %8, 0
  %10 = or i1 %7, %9
  br i1 %10, label %19, label %14

11:                                               ; preds = %59, %rb_obj_freeze_inline.exit
  %12 = phi i64 [ %60, %59 ], [ %24, %rb_obj_freeze_inline.exit ]
  %13 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !7
  tail call void (i64, i8*, ...) @rb_raise(i64 %13, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i64 %3, i64 %12) #18
  unreachable

14:                                               ; preds = %0
  %15 = inttoptr i64 %3 to %struct.RBasic*
  %16 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %15, i64 0, i32 0
  %17 = load i64, i64* %16, align 8, !tbaa !1
  %18 = and i64 %17, 30
  %switch = icmp eq i64 %18, 2
  br i1 %switch, label %21, label %19

19:                                               ; preds = %14, %0
  %20 = load i64, i64* @rb_eTypeError, align 8, !tbaa !7
  tail call void (i64, i8*, ...) @rb_raise(i64 %20, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0), i64 %2) #18
  unreachable

21:                                               ; preds = %14
  %22 = icmp eq i64 %5, 0
  br i1 %22, label %23, label %56

23:                                               ; preds = %21
  %24 = tail call i64 @rb_str_subseq(i64 %2, i64 0, i64 1) #17
  %25 = and i64 %24, 7
  %26 = icmp ne i64 %25, 0
  %27 = and i64 %24, -9
  %28 = icmp eq i64 %27, 0
  %29 = or i1 %26, %28
  br i1 %29, label %rb_obj_freeze_inline.exit, label %30

30:                                               ; preds = %23
  %31 = inttoptr i64 %24 to %struct.RBasic*
  %32 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %31, i64 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !1
  %34 = and i64 %33, 31
  %35 = icmp eq i64 %34, 27
  br i1 %35, label %rb_obj_freeze_inline.exit, label %36

36:                                               ; preds = %30
  %37 = or i64 %33, 2048
  store i64 %37, i64* %32, align 8, !tbaa !1
  %38 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %31, i64 0, i32 1
  %39 = load i64, i64* %38, align 8, !tbaa !8
  %40 = icmp ne i64 %39, 0
  %41 = and i64 %33, 4096
  %42 = icmp eq i64 %41, 0
  %43 = and i1 %42, %40
  br i1 %43, label %44, label %rb_obj_freeze_inline.exit

44:                                               ; preds = %36
  tail call void @rb_freeze_singleton_class(i64 %24) #17
  br label %rb_obj_freeze_inline.exit

rb_obj_freeze_inline.exit:                        ; preds = %23, %30, %36, %44
  %45 = tail call i32 @rb_is_const_name(i64 %24) #17
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %11, label %rb_class_of.exit

rb_class_of.exit:                                 ; preds = %rb_obj_freeze_inline.exit
  %47 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %15, i64 0, i32 1
  %48 = load i64, i64* %47, align 8, !tbaa !7
  %49 = tail call i32 @rb_method_basic_definition_p(i64 %48, i64 2737) #17
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %rb_class_of.exit
  %52 = tail call i64 @rb_str_intern(i64 %24) #17
  %53 = tail call i64 @rb_const_missing(i64 %3, i64 %52) #17
  br label %63

54:                                               ; preds = %rb_class_of.exit
  %55 = tail call i64 @rb_mod_const_missing(i64 %3, i64 %24) #18
  unreachable

56:                                               ; preds = %21
  %57 = tail call i32 @rb_is_const_id(i64 %5) #6
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = tail call i64 @rb_id2sym(i64 %5) #17
  br label %11

61:                                               ; preds = %56
  %62 = tail call i64 @rb_const_get(i64 %3, i64 %5) #17
  br label %63

63:                                               ; preds = %51, %61
  %64 = phi i64 [ %53, %51 ], [ %62, %61 ]
  ret i64 %64
}

declare %struct.OnigEncodingTypeST* @rb_enc_get(i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #5

declare i64 @rb_check_id_cstr(i8*, i64, %struct.OnigEncodingTypeST*) local_unnamed_addr #3

declare i64 @rb_str_subseq(i64, i64, i64) local_unnamed_addr #3

declare i32 @rb_is_const_name(i64) local_unnamed_addr #3

declare i32 @rb_method_basic_definition_p(i64, i64) local_unnamed_addr #3

declare i64 @rb_str_intern(i64) local_unnamed_addr #3

declare i64 @rb_const_missing(i64, i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare i64 @rb_mod_const_missing(i64, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @rb_is_const_id(i64) local_unnamed_addr #6

declare i64 @rb_const_get(i64, i64) local_unnamed_addr #3

declare void @rb_define_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #3

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #3

declare i64 @rb_block_call(i64, i64, i32, i64*, i64 (...)*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @sorbet_rb_arity_error_new(i32) unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.7, i64 0, i64 0), i32 %0, i32 0) #17
  %3 = load i64, i64* @rb_eArgError, align 8, !tbaa !7
  %4 = tail call i64 @rb_exc_new_str(i64 %3, i64 %2) #17
  ret i64 %4
}

declare i64 @rb_exc_new_str(i64, i64) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind optsize ssp uwtable
define internal fastcc void @sorbet_cast_failure(i64, i8*) unnamed_addr #7 {
  %3 = load i64, i64* @rb_eTypeError, align 8, !tbaa !7
  %4 = tail call i8* @rb_obj_classname(i64 %0) #17
  tail call void (i64, i8*, ...) @rb_raise(i64 %3, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast.3, i64 0, i64 0), i8* %1, i8* %4, i64 %0) #18
  unreachable
}

; Function Attrs: noreturn nounwind ssp uwtable
define internal fastcc void @sorbet_rb_error_arity(i32) unnamed_addr #8 {
  %2 = tail call fastcc i64 @sorbet_rb_arity_error_new(i32 %0)
  tail call void @rb_exc_raise(i64 %2) #18
  unreachable
}

; Function Attrs: noreturn
declare void @rb_exc_raise(i64) local_unnamed_addr #5

declare i8* @ruby_xmalloc(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8*) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !9
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #17
  ret void
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly) #9 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !9
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

declare i64 @rb_data_typed_object_wrap(i64, i8*, %struct.rb_data_type_struct*) local_unnamed_addr #3

declare i64 @rb_obj_is_kind_of(i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind readonly
declare i64 @rb_class_inherited_p(i64, i64) local_unnamed_addr #10

declare void @rb_freeze_singleton_class(i64) local_unnamed_addr #3

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_<C <U Object>><U foo>"(i32 %argc, i64* nocapture readnone %argArray, i64 %selfRaw) #11 {
functionEntryInitializers:
  %callArgs = alloca [0 x i64], align 8
  %rubyId_call = load i64, i64* @rubyIdPrecomputed_call, align 8
  %tooManyArgs = icmp eq i32 %argc, 0
  br i1 %tooManyArgs, label %fillRequiredArgs, label %argCountFailBlock, !prof !11

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_rb_error_arity(i32 %argc)
  unreachable

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %0 = tail call i32 @rb_block_given_p() #17
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %sorbet_getMethodBlockAsProc.exit, label %2

2:                                                ; preds = %fillRequiredArgs
  %3 = tail call i64 @rb_block_proc() #17
  br label %sorbet_getMethodBlockAsProc.exit

sorbet_getMethodBlockAsProc.exit:                 ; preds = %fillRequiredArgs, %2
  %4 = phi i64 [ %3, %2 ], [ 8, %fillRequiredArgs ]
  %5 = load i64, i64* @rb_cObject, align 8
  %6 = tail call i64 @rb_obj_is_kind_of(i64 %selfRaw, i64 %5) #17
  %7 = icmp eq i64 %6, 20
  br i1 %7, label %typeTestSuccess, label %typeTestFail, !prof !11

typeTestSuccess:                                  ; preds = %sorbet_getMethodBlockAsProc.exit
  %8 = getelementptr inbounds [0 x i64], [0 x i64]* %callArgs, i64 0, i64 0
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_call, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #17, !noalias !12
  %9 = call i64 @rb_funcallv(i64 %4, i64 %rubyId_call, i32 0, i64* nonnull %8) #17
  ret i64 %9

typeTestFail:                                     ; preds = %sorbet_getMethodBlockAsProc.exit
  tail call fastcc void @sorbet_cast_failure(i64 %selfRaw, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Object.2, i64 0, i64 0))
  unreachable
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_call() #12 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_call, i64 0, i64 0), i64 4) #17
  store i64 %0, i64* @rubyIdPrecomputed_call, align 8
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_<C <U Object>><U boo>"(i32 %argc, i64* nocapture readnone %argArray, i64 %selfRaw) #11 {
functionEntryInitializers:
  %callArgs = alloca [0 x i64], align 8
  %rubyId_call = load i64, i64* @rubyIdPrecomputed_call, align 8
  %tooManyArgs = icmp eq i32 %argc, 0
  br i1 %tooManyArgs, label %fillRequiredArgs, label %argCountFailBlock, !prof !11

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_rb_error_arity(i32 %argc)
  unreachable

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %0 = tail call i32 @rb_block_given_p() #17
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %sorbet_getMethodBlockAsProc.exit, label %2

2:                                                ; preds = %fillRequiredArgs
  %3 = tail call i64 @rb_block_proc() #17
  br label %sorbet_getMethodBlockAsProc.exit

sorbet_getMethodBlockAsProc.exit:                 ; preds = %fillRequiredArgs, %2
  %4 = phi i64 [ %3, %2 ], [ 8, %fillRequiredArgs ]
  %5 = load i64, i64* @rb_cObject, align 8
  %6 = tail call i64 @rb_obj_is_kind_of(i64 %selfRaw, i64 %5) #17
  %7 = icmp eq i64 %6, 20
  br i1 %7, label %typeTestSuccess, label %typeTestFail, !prof !11

typeTestSuccess:                                  ; preds = %sorbet_getMethodBlockAsProc.exit
  %8 = getelementptr inbounds [0 x i64], [0 x i64]* %callArgs, i64 0, i64 0
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_call, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #17, !noalias !15
  %9 = call i64 @rb_funcallv(i64 %4, i64 %rubyId_call, i32 0, i64* nonnull %8) #17
  ret i64 %9

typeTestFail:                                     ; preds = %sorbet_getMethodBlockAsProc.exit
  tail call fastcc void @sorbet_cast_failure(i64 %selfRaw, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Object.2, i64 0, i64 0))
  unreachable
}

; Function Attrs: nounwind ssp
define internal i64 @"func_<S <C <U <root>>> $1><N <U <static-init>> $110>$block_1"(i64 %firstYieldArgRaw, i64 %captures, i32 %argc, i64* nocapture readnone %argArray, i64 %blockArg) #12 {
functionEntryInitializers:
  %callArgs = alloca [2 x i64], align 8
  %rubyId_puts = load i64, i64* @rubyIdPrecomputed_puts, align 8
  %0 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @userStr_heey, i64 0, i64 0), i64 4) #17
  %callArgsAddr = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs, i64 0, i64 0
  store i64 %0, i64* %callArgsAddr, align 8
  %1 = inttoptr i64 %captures to %struct.RTypedData*
  %2 = getelementptr inbounds %struct.RTypedData, %struct.RTypedData* %1, i64 0, i32 3
  %3 = bitcast i8** %2 to %struct.sorbet_Closure**
  %4 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %3, align 8, !tbaa !18
  %5 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %4, i64 0, i32 1, i64 0
  %6 = load i64, i64* %5, align 8
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_puts, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #17, !noalias !21
  %7 = call i64 @rb_funcallv(i64 %6, i64 %rubyId_puts, i32 1, i64* nonnull %callArgsAddr) #17
  ret i64 %7
}

; Function Attrs: nounwind ssp
define internal i64 @"func_<S <C <U <root>>> $1><N <U <static-init>> $110>$block_2"(i64 %firstYieldArgRaw, i64 %captures, i32 %argc, i64* nocapture readnone %argArray, i64 %blockArg) #12 {
functionEntryInitializers:
  %callArgs = alloca [2 x i64], align 8
  %rubyId_puts = load i64, i64* @rubyIdPrecomputed_puts, align 8
  %0 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @userStr_boohey, i64 0, i64 0), i64 6) #17
  %callArgsAddr = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs, i64 0, i64 0
  store i64 %0, i64* %callArgsAddr, align 8
  %1 = inttoptr i64 %captures to %struct.RTypedData*
  %2 = getelementptr inbounds %struct.RTypedData, %struct.RTypedData* %1, i64 0, i32 3
  %3 = bitcast i8** %2 to %struct.sorbet_Closure**
  %4 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %3, align 8, !tbaa !18
  %5 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %4, i64 0, i32 1, i64 0
  %6 = load i64, i64* %5, align 8
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_puts, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #17, !noalias !24
  %7 = call i64 @rb_funcallv(i64 %6, i64 %rubyId_puts, i32 1, i64* nonnull %callArgsAddr) #17
  ret i64 %7
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_unsafe() #12 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_unsafe, i64 0, i64 0), i64 6) #17
  store i64 %0, i64* @rubyIdPrecomputed_unsafe, align 8
  ret void
}

; Function Attrs: cold ssp
define linkonce void @const_recompute_T() local_unnamed_addr #13 {
  %1 = tail call fastcc i64 @sorbet_getConstant()
  store i64 %1, i64* @guarded_const_T, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !27
  store i64 %2, i64* @guard_epoch_T, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_foo() #12 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_foo.4, i64 0, i64 0), i64 3) #17
  store i64 %0, i64* @rubyIdPrecomputed_foo, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_boo() #12 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_boo.5, i64 0, i64 0), i64 3) #17
  store i64 %0, i64* @rubyIdPrecomputed_boo, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_puts() #12 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 4) #17
  store i64 %0, i64* @rubyIdPrecomputed_puts, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_test_testdata_llvm_method_with_block() local_unnamed_addr #14 {
entry:
  %callArgs.i = alloca [2 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8
  %1 = bitcast [2 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1)
  %2 = tail call i8* @ruby_xmalloc(i64 16) #17
  %3 = load i64, i64* @rb_cData, align 8, !tbaa !7
  %4 = tail call i64 @rb_data_typed_object_wrap(i64 %3, i8* %2, %struct.rb_data_type_struct* nonnull @closureInfo) #17
  %5 = inttoptr i64 %4 to %struct.RTypedData*
  %6 = getelementptr inbounds %struct.RTypedData, %struct.RTypedData* %5, i64 0, i32 3
  %7 = bitcast i8** %6 to %struct.sorbet_Closure**
  %8 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %7, align 8, !tbaa !18
  %9 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %8, i64 0, i32 1, i64 0
  store i64 8, i64* %9, align 8
  %rubyId_unsafe.i = load i64, i64* @rubyIdPrecomputed_unsafe, align 8
  %rubyId_foo.i = load i64, i64* @rubyIdPrecomputed_foo, align 8
  %rubyId_boo.i = load i64, i64* @rubyIdPrecomputed_boo, align 8
  %10 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %7, align 8, !tbaa !18
  %11 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %10, i64 0, i32 1, i64 0
  store i64 %0, i64* %11, align 8
  %12 = tail call i32 @rb_block_given_p() #17
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %sorbet_getMethodBlockAsProc.exit.i, label %14

14:                                               ; preds = %entry
  %15 = tail call i64 @rb_block_proc() #17
  br label %sorbet_getMethodBlockAsProc.exit.i

sorbet_getMethodBlockAsProc.exit.i:               ; preds = %14, %entry
  %16 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %7, align 8, !tbaa !18
  %17 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %16, i64 0, i32 1, i64 0
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %18, %0
  br i1 %19, label %typeTestSuccess.i, label %20

20:                                               ; preds = %sorbet_getMethodBlockAsProc.exit.i
  %21 = load i64, i64* @rb_cModule, align 8, !tbaa !7
  %22 = tail call i64 @rb_obj_is_kind_of(i64 %18, i64 %21) #17
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %typeTestFail.i, label %sorbet_isa_class_of.exit.i, !prof !29

sorbet_isa_class_of.exit.i:                       ; preds = %20
  %24 = tail call i64 @rb_class_inherited_p(i64 %18, i64 %0) #10
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %typeTestFail.i, label %typeTestSuccess.i, !prof !0

typeTestSuccess.i:                                ; preds = %sorbet_isa_class_of.exit.i, %sorbet_getMethodBlockAsProc.exit.i
  %callArgsAddr.i = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs.i, i64 0, i64 0
  store i64 %0, i64* %callArgsAddr.i, align 8
  %26 = load i64, i64* @guard_epoch_T, align 8
  %27 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !27
  %canTakeFastPath.i = icmp eq i64 %26, %27
  br i1 %canTakeFastPath.i, label %const_continue.i, label %const_slowPath.i, !prof !11

typeTestFail.i:                                   ; preds = %sorbet_isa_class_of.exit.i, %20
  tail call fastcc void @sorbet_cast_failure(i64 %18, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"str_T.class_of(<root>)", i64 0, i64 0)) #17
  unreachable

const_continue.i:                                 ; preds = %const_slowPath.i, %typeTestSuccess.i
  %28 = load i64, i64* @guarded_const_T, align 8
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_unsafe.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #17, !noalias !30
  %29 = call i64 @rb_funcallv(i64 %28, i64 %rubyId_unsafe.i, i32 1, i64* nonnull %callArgsAddr.i) #17
  %rawSym.i = call i64 @rb_id2sym(i64 %rubyId_foo.i) #17
  call void @rb_define_method(i64 %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_foo.4, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"func_<C <U Object>><U foo>" to i64 (...)*), i32 -1) #17
  store i64 %0, i64* %callArgsAddr.i, align 8
  %30 = load i64, i64* @guard_epoch_T, align 8
  %31 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !27
  %canTakeFastPath37.i = icmp eq i64 %30, %31
  br i1 %canTakeFastPath37.i, label %"func_<S <C <U <root>>> $1><N <U <static-init>> $110>.exit", label %const_slowPath36.i, !prof !11

const_slowPath.i:                                 ; preds = %typeTestSuccess.i
  tail call void @const_recompute_T() #17
  br label %const_continue.i

const_slowPath36.i:                               ; preds = %const_continue.i
  call void @const_recompute_T() #17
  br label %"func_<S <C <U <root>>> $1><N <U <static-init>> $110>.exit"

"func_<S <C <U <root>>> $1><N <U <static-init>> $110>.exit": ; preds = %const_continue.i, %const_slowPath36.i
  %32 = load i64, i64* @guarded_const_T, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_unsafe.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #17, !noalias !33
  %33 = call i64 @rb_funcallv(i64 %32, i64 %rubyId_unsafe.i, i32 1, i64* nonnull %callArgsAddr.i) #17
  %rawSym39.i = call i64 @rb_id2sym(i64 %rubyId_boo.i) #17
  call void @rb_define_method(i64 %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_boo.5, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"func_<C <U Object>><U boo>" to i64 (...)*), i32 -1) #17
  %34 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %7, align 8, !tbaa !18
  %35 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %34, i64 0, i32 1, i64 0
  %36 = load i64, i64* %35, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_foo.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #17, !noalias !36
  %37 = call i64 @rb_block_call(i64 %36, i64 %rubyId_foo.i, i32 0, i64* nonnull %callArgsAddr.i, i64 (...)* bitcast (i64 (i64, i64, i32, i64*, i64)* @"func_<S <C <U <root>>> $1><N <U <static-init>> $110>$block_1" to i64 (...)*), i64 %4) #17
  %38 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %7, align 8, !tbaa !18
  %39 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %38, i64 0, i32 1, i64 0
  %40 = load i64, i64* %39, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_boo.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #17, !noalias !39
  %41 = call i64 @rb_block_call(i64 %40, i64 %rubyId_boo.i, i32 0, i64* nonnull %callArgsAddr.i, i64 (...)* bitcast (i64 (i64, i64, i32, i64*, i64)* @"func_<S <C <U <root>>> $1><N <U <static-init>> $110>$block_2" to i64 (...)*), i64 %4) #17
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #15

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #15

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { nofree nounwind }
attributes #2 = { cold noreturn }
attributes #3 = { "addedToSilenceEmptyAttrsError" }
attributes #4 = { noinline nounwind ssp uwtable }
attributes #5 = { noreturn }
attributes #6 = { nounwind readnone }
attributes #7 = { cold noreturn nounwind optsize ssp uwtable }
attributes #8 = { noreturn nounwind ssp uwtable }
attributes #9 = { norecurse nounwind readnone ssp uwtable }
attributes #10 = { nounwind readonly }
attributes #11 = { nounwind sspreq uwtable }
attributes #12 = { nounwind ssp }
attributes #13 = { cold ssp }
attributes #14 = { nounwind sspreq }
attributes #15 = { argmemonly nounwind }
attributes #16 = { cold noreturn nounwind }
attributes #17 = { nounwind }
attributes #18 = { noreturn nounwind }

!0 = !{!"branch_weights", i32 1, i32 2000}
!1 = !{!2, !3, i64 0}
!2 = !{!"RBasic", !3, i64 0, !3, i64 8}
!3 = !{!"long", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
!7 = !{!3, !3, i64 0}
!8 = !{!2, !3, i64 8}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !4, i64 0}
!11 = !{!"branch_weights", i32 2000, i32 1}
!12 = !{!13}
!13 = distinct !{!13, !14, !"sorbet_callFunc: argument 0"}
!14 = distinct !{!14, !"sorbet_callFunc"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"sorbet_callFunc: argument 0"}
!17 = distinct !{!17, !"sorbet_callFunc"}
!18 = !{!19, !20, i64 32}
!19 = !{!"RTypedData", !2, i64 0, !20, i64 16, !3, i64 24, !20, i64 32}
!20 = !{!"any pointer", !4, i64 0}
!21 = !{!22}
!22 = distinct !{!22, !23, !"sorbet_callFunc: argument 0"}
!23 = distinct !{!23, !"sorbet_callFunc"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"sorbet_callFunc: argument 0"}
!26 = distinct !{!26, !"sorbet_callFunc"}
!27 = !{!28, !28, i64 0}
!28 = !{!"long long", !4, i64 0}
!29 = !{!"branch_weights", i32 1073205, i32 2146410443}
!30 = !{!31}
!31 = distinct !{!31, !32, !"sorbet_callFunc: argument 0"}
!32 = distinct !{!32, !"sorbet_callFunc"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"sorbet_callFunc: argument 0"}
!35 = distinct !{!35, !"sorbet_callFunc"}
!36 = !{!37}
!37 = distinct !{!37, !38, !"sorbet_callFuncBlock: argument 0"}
!38 = distinct !{!38, !"sorbet_callFuncBlock"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"sorbet_callFuncBlock: argument 0"}
!41 = distinct !{!41, !"sorbet_callFuncBlock"}
