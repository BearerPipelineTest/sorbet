source_filename = "compiler/IRHelpers/payload.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_data_type_struct = type { i8*, %struct.anon.1, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.1 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.RBasic = type { i64, i64 }
%struct.RString = type { %struct.RBasic, %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { i64, i8*, %union.anon.0 }
%union.anon.0 = type { i64 }
%struct.RArray = type { %struct.RBasic, %union.anon.4 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i64, %union.anon.6, i64* }
%union.anon.6 = type { i64 }

@.str = private unnamed_addr constant [16 x i8] c"ERROR: %s is 0\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%li\0B\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@.str.6 = private unnamed_addr constant [5 x i8] c"func\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@closureInfo = local_unnamed_addr constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i32 0, i32 0), %struct.anon.1 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@rubyIdPrecomputed_map = internal unnamed_addr global i64 0, align 8
@str_map = private unnamed_addr constant [4 x i8] c"map\00", align 1
@rubyIdPrecomputed_to_proc = internal unnamed_addr global i64 0, align 8
@str_to_proc = private unnamed_addr constant [8 x i8] c"to_proc\00", align 1
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@llvm.global_ctors = appending global [3 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_map, i8* bitcast (i64* @rubyIdPrecomputed_map to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_to_proc, i8* bitcast (i64* @rubyIdPrecomputed_to_proc to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_puts, i8* bitcast (i64* @rubyIdPrecomputed_puts to i8*) }]

; Function Attrs: nounwind ssp uwtable
define weak void @dbg_sorbet_validate_id(i64, i8*) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6, !prof !0

4:                                                ; preds = %2
  %5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %1)
  tail call void @abort() #10
  unreachable

6:                                                ; preds = %2
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @abort() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_pi(i64) local_unnamed_addr #0 {
  %2 = tail call i8* @rb_id2name(i64 %0) #11
  ret i8* %2
}

declare i8* @rb_id2name(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_p(i64) local_unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #11
  %3 = inttoptr i64 %2 to %struct.RBasic*
  %4 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1
  %6 = and i64 %5, 8192
  %7 = icmp eq i64 %6, 0
  %8 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #11
  %9 = inttoptr i64 %8 to %struct.RString*
  br i1 %7, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !6
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i8* [ %12, %10 ], [ %15, %13 ]
  ret i8* %17
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #3

; Function Attrs: alwaysinline norecurse nounwind readonly ssp uwtable
define i32 @sorbet_rubyArrayLen(i64) local_unnamed_addr #4 {
  %2 = inttoptr i64 %0 to %struct.RBasic*
  %3 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %2, i64 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !1
  %5 = and i64 %4, 8192
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %1
  %8 = lshr i64 %4, 15
  %9 = and i64 %8, 3
  br label %rb_array_len.exit

10:                                               ; preds = %1
  %11 = inttoptr i64 %0 to %struct.RArray*
  %12 = getelementptr inbounds %struct.RArray, %struct.RArray* %11, i64 0, i32 1, i32 0, i32 0
  %13 = load i64, i64* %12, align 8, !tbaa !6
  br label %rb_array_len.exit

rb_array_len.exit:                                ; preds = %7, %10
  %14 = phi i64 [ %9, %7 ], [ %13, %10 ]
  %15 = trunc i64 %14 to i32
  ret i32 %15
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define i64* @sorbet_rubyArrayInnerPtr(i64) local_unnamed_addr #5 {
  %2 = inttoptr i64 %0 to %struct.RBasic*
  %3 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %2, i64 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !1
  %5 = and i64 %4, 33554432
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %1
  tail call void @rb_ary_detransient(i64 %0) #11
  %.pre.i = load i64, i64* %3, align 8, !tbaa !1
  br label %8

8:                                                ; preds = %7, %1
  %9 = phi i64 [ %.pre.i, %7 ], [ %4, %1 ]
  %10 = and i64 %9, 8192
  %11 = icmp eq i64 %10, 0
  %12 = inttoptr i64 %0 to %struct.RArray*
  br i1 %11, label %15, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.RArray, %struct.RArray* %12, i64 0, i32 1, i32 0, i32 0
  br label %rb_array_const_ptr.exit

15:                                               ; preds = %8
  %16 = getelementptr inbounds %struct.RArray, %struct.RArray* %12, i64 0, i32 1, i32 0, i32 2
  %17 = load i64*, i64** %16, align 8, !tbaa !6
  br label %rb_array_const_ptr.exit

rb_array_const_ptr.exit:                          ; preds = %13, %15
  %18 = phi i64* [ %14, %13 ], [ %17, %15 ]
  ret i64* %18
}

declare i64 @rb_ary_new_capa(i64) local_unnamed_addr #3

declare i64 @rb_ary_push(i64, i64) local_unnamed_addr #3

declare i64 @rb_hash_new() local_unnamed_addr #3

declare i64 @rb_hash_aset(i64, i64, i64) local_unnamed_addr #3

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #3

declare i64 @rb_id2sym(i64) local_unnamed_addr #3

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #3

declare i64 @rb_funcall_with_block(i64, i64, i32, i64*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8*) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !7
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #11
  ret void
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly) #6 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !7
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

declare void @rb_ary_detransient(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_map() #7 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_map, i64 0, i64 0), i64 3) #11
  store i64 %0, i64* @rubyIdPrecomputed_map, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_to_proc() #7 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_to_proc, i64 0, i64 0), i64 7) #11
  store i64 %0, i64* @rubyIdPrecomputed_to_proc, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_puts() #7 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 4) #11
  store i64 %0, i64* @rubyIdPrecomputed_puts, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_test_testdata_llvm_send_with_block_param() local_unnamed_addr #8 {
"func_<root>.<static-init>$111.exit":
  %callArgs.i = alloca [3 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8
  %1 = bitcast [3 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1)
  %rubyId_map.i = load i64, i64* @rubyIdPrecomputed_map, align 8
  %rubyId_to_proc.i = load i64, i64* @rubyIdPrecomputed_to_proc, align 8
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8
  %2 = tail call i64 @rb_hash_new() #11
  %3 = tail call i64 @rb_hash_aset(i64 %2, i64 3, i64 5) #11
  %4 = tail call i64 @rb_ary_new_capa(i64 1) #11
  %5 = tail call i64 @rb_ary_push(i64 %4, i64 3) #11
  %rawSym.i = tail call i64 @rb_id2sym(i64 %rubyId_map.i) #11
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_to_proc.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #11, !noalias !9
  %6 = tail call i64 @rb_funcallv(i64 %2, i64 %rubyId_to_proc.i, i32 0, i64* null) #11
  %7 = getelementptr inbounds [3 x i64], [3 x i64]* %callArgs.i, i64 0, i64 0
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_map.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #11, !noalias !12
  %8 = call i64 @rb_funcall_with_block(i64 %4, i64 %rubyId_map.i, i32 0, i64* nonnull %7, i64 %6) #11
  store i64 %8, i64* %7, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #11, !noalias !15
  %9 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %7) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #9

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #9

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { nofree nounwind }
attributes #2 = { cold noreturn }
attributes #3 = { "addedToSilenceEmptyAttrsError" }
attributes #4 = { alwaysinline norecurse nounwind readonly ssp uwtable }
attributes #5 = { alwaysinline nounwind ssp uwtable }
attributes #6 = { norecurse nounwind readnone ssp uwtable }
attributes #7 = { nounwind ssp }
attributes #8 = { nounwind sspreq }
attributes #9 = { argmemonly nounwind }
attributes #10 = { cold noreturn nounwind }
attributes #11 = { nounwind }

!0 = !{!"branch_weights", i32 1, i32 2000}
!1 = !{!2, !3, i64 0}
!2 = !{!"RBasic", !3, i64 0, !3, i64 8}
!3 = !{!"long", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
!7 = !{!8, !8, i64 0}
!8 = !{!"int", !4, i64 0}
!9 = !{!10}
!10 = distinct !{!10, !11, !"sorbet_callFunc: argument 0"}
!11 = distinct !{!11, !"sorbet_callFunc"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"sorbet_callFuncProc: argument 0"}
!14 = distinct !{!14, !"sorbet_callFuncProc"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"sorbet_callFunc: argument 0"}
!17 = distinct !{!17, !"sorbet_callFunc"}
