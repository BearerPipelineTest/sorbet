source_filename = "compiler/IRHelpers/payload.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin18.2.0"

%struct.rb_data_type_struct = type { i8*, %struct.anon.1, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.1 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.RBasic = type { i64, i64 }
%struct.RString = type { %struct.RBasic, %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { i64, i8*, %union.anon.0 }
%union.anon.0 = type { i64 }
%struct.RArray = type { %struct.RBasic, %union.anon.4 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i64, %union.anon.6, i64* }
%union.anon.6 = type { i64 }

@.str = private unnamed_addr constant [16 x i8] c"ERROR: %s is 0\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%li\0B\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@.str.6 = private unnamed_addr constant [5 x i8] c"func\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@closureInfo = local_unnamed_addr constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i32 0, i32 0), %struct.anon.1 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@"rubyIdPrecomputed_[]" = internal unnamed_addr global i64 0, align 8
@"str_[]" = private unnamed_addr constant [3 x i8] c"[]\00", align 1
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@llvm.global_ctors = appending global [2 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_[]", i8* bitcast (i64* @"rubyIdPrecomputed_[]" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_puts, i8* bitcast (i64* @rubyIdPrecomputed_puts to i8*) }]

; Function Attrs: nounwind ssp uwtable
define weak void @dbg_sorbet_validate_id(i64, i8*) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6, !prof !0

4:                                                ; preds = %2
  %5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %1)
  tail call void @abort() #8
  unreachable

6:                                                ; preds = %2
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @abort() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_pi(i64) local_unnamed_addr #0 {
  %2 = tail call i8* @rb_id2name(i64 %0) #9
  ret i8* %2
}

declare i8* @rb_id2name(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_p(i64) local_unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #9
  %3 = inttoptr i64 %2 to %struct.RBasic*
  %4 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1
  %6 = and i64 %5, 8192
  %7 = icmp eq i64 %6, 0
  %8 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #9
  %9 = inttoptr i64 %8 to %struct.RString*
  br i1 %7, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !6
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i8* [ %12, %10 ], [ %15, %13 ]
  ret i8* %17
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #3

declare i64 @rb_ary_new_capa(i64) local_unnamed_addr #3

declare i64 @rb_ary_push(i64, i64) local_unnamed_addr #3

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #3

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8*) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !7
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #9
  ret void
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly) #4 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !7
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

declare i64 @rb_ary_dup(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_[]"() #5 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"str_[]", i64 0, i64 0), i64 2) #9
  store i64 %0, i64* @"rubyIdPrecomputed_[]", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_puts() #5 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 4) #9
  store i64 %0, i64* @rubyIdPrecomputed_puts, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_test_testdata_llvm_splat() local_unnamed_addr #6 {
typeTestSuccess.i:
  %callArgs.i = alloca [7 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8
  %1 = bitcast [7 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %1)
  %"rubyId_[].i" = load i64, i64* @"rubyIdPrecomputed_[]", align 8
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8
  %2 = tail call i64 @rb_ary_new_capa(i64 7) #9
  %3 = tail call i64 @rb_ary_push(i64 %2, i64 3) #9
  %4 = tail call i64 @rb_ary_push(i64 %2, i64 5) #9
  %5 = tail call i64 @rb_ary_push(i64 %2, i64 7) #9
  %6 = tail call i64 @rb_ary_push(i64 %2, i64 9) #9
  %7 = tail call i64 @rb_ary_push(i64 %2, i64 11) #9
  %8 = tail call i64 @rb_ary_push(i64 %2, i64 13) #9
  %9 = tail call i64 @rb_ary_push(i64 %2, i64 15) #9
  %10 = inttoptr i64 %2 to %struct.RBasic*
  %11 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %10, i64 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !1
  %13 = and i64 %12, 8192
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %typeTestSuccess.i
  %16 = lshr i64 %12, 15
  %17 = and i64 %16, 3
  br label %rb_array_len.exit.i.i

18:                                               ; preds = %typeTestSuccess.i
  %19 = inttoptr i64 %2 to %struct.RArray*
  %20 = getelementptr inbounds %struct.RArray, %struct.RArray* %19, i64 0, i32 1, i32 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !6
  br label %rb_array_len.exit.i.i

rb_array_len.exit.i.i:                            ; preds = %18, %15
  %22 = phi i64 [ %17, %15 ], [ %21, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = sub i32 3, %23
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %26, label %sorbet_splatIntrinsic.exit.i

26:                                               ; preds = %rb_array_len.exit.i.i
  %27 = tail call i64 @rb_ary_dup(i64 %2) #9
  br label %28

28:                                               ; preds = %28, %26
  %29 = phi i32 [ 0, %26 ], [ %31, %28 ]
  %30 = tail call i64 @rb_ary_push(i64 %27, i64 8) #9
  %31 = add nuw nsw i32 %29, 1
  %32 = icmp eq i32 %31, %24
  br i1 %32, label %sorbet_splatIntrinsic.exit.i, label %28

sorbet_splatIntrinsic.exit.i:                     ; preds = %28, %rb_array_len.exit.i.i
  %33 = phi i64 [ %2, %rb_array_len.exit.i.i ], [ %27, %28 ]
  %callArgsAddr.i = getelementptr inbounds [7 x i64], [7 x i64]* %callArgs.i, i64 0, i64 0
  store i64 1, i64* %callArgsAddr.i, align 8
  tail call void @dbg_sorbet_validate_id(i64 %"rubyId_[].i", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !9
  %34 = call i64 @rb_funcallv(i64 %33, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #9
  store i64 -3, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_[].i", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !12
  %35 = call i64 @rb_funcallv(i64 %33, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #9
  store i64 -1, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_[].i", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !15
  %36 = call i64 @rb_funcallv(i64 %33, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #9
  %37 = call i64 @rb_ary_new_capa(i64 3) #9
  %38 = call i64 @rb_ary_push(i64 %37, i64 %34) #9
  %39 = call i64 @rb_ary_push(i64 %37, i64 %35) #9
  %40 = call i64 @rb_ary_push(i64 %37, i64 %36) #9
  store i64 %37, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !18
  %41 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #9
  %42 = call i64 @rb_ary_new_capa(i64 2) #9
  %43 = call i64 @rb_ary_push(i64 %42, i64 3) #9
  %44 = call i64 @rb_ary_push(i64 %42, i64 5) #9
  %45 = inttoptr i64 %42 to %struct.RBasic*
  %46 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %45, i64 0, i32 0
  %47 = load i64, i64* %46, align 8, !tbaa !1
  %48 = and i64 %47, 8192
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %53, label %50

50:                                               ; preds = %sorbet_splatIntrinsic.exit.i
  %51 = lshr i64 %47, 15
  %52 = and i64 %51, 3
  br label %rb_array_len.exit.i1.i

53:                                               ; preds = %sorbet_splatIntrinsic.exit.i
  %54 = inttoptr i64 %42 to %struct.RArray*
  %55 = getelementptr inbounds %struct.RArray, %struct.RArray* %54, i64 0, i32 1, i32 0, i32 0
  %56 = load i64, i64* %55, align 8, !tbaa !6
  br label %rb_array_len.exit.i1.i

rb_array_len.exit.i1.i:                           ; preds = %53, %50
  %57 = phi i64 [ %52, %50 ], [ %56, %53 ]
  %58 = trunc i64 %57 to i32
  %59 = sub i32 3, %58
  %60 = icmp sgt i32 %59, 0
  br i1 %60, label %61, label %sorbet_splatIntrinsic.exit2.i

61:                                               ; preds = %rb_array_len.exit.i1.i
  %62 = call i64 @rb_ary_dup(i64 %42) #9
  br label %63

63:                                               ; preds = %63, %61
  %64 = phi i32 [ 0, %61 ], [ %66, %63 ]
  %65 = call i64 @rb_ary_push(i64 %62, i64 8) #9
  %66 = add nuw nsw i32 %64, 1
  %67 = icmp eq i32 %66, %59
  br i1 %67, label %sorbet_splatIntrinsic.exit2.i, label %63

sorbet_splatIntrinsic.exit2.i:                    ; preds = %63, %rb_array_len.exit.i1.i
  %68 = phi i64 [ %42, %rb_array_len.exit.i1.i ], [ %62, %63 ]
  store i64 1, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_[].i", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !21
  %69 = call i64 @rb_funcallv(i64 %68, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #9
  store i64 -3, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_[].i", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !24
  %70 = call i64 @rb_funcallv(i64 %68, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #9
  store i64 -1, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_[].i", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !27
  %71 = call i64 @rb_funcallv(i64 %68, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #9
  %72 = call i64 @rb_ary_new_capa(i64 3) #9
  %73 = call i64 @rb_ary_push(i64 %72, i64 %69) #9
  %74 = call i64 @rb_ary_push(i64 %72, i64 %70) #9
  %75 = call i64 @rb_ary_push(i64 %72, i64 %71) #9
  store i64 %72, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !30
  %76 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #9
  %77 = call i64 @rb_ary_new_capa(i64 0) #9
  %78 = inttoptr i64 %77 to %struct.RBasic*
  %79 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %78, i64 0, i32 0
  %80 = load i64, i64* %79, align 8, !tbaa !1
  %81 = and i64 %80, 8192
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %86, label %83

83:                                               ; preds = %sorbet_splatIntrinsic.exit2.i
  %84 = lshr i64 %80, 15
  %85 = and i64 %84, 3
  br label %rb_array_len.exit.i3.i

86:                                               ; preds = %sorbet_splatIntrinsic.exit2.i
  %87 = inttoptr i64 %77 to %struct.RArray*
  %88 = getelementptr inbounds %struct.RArray, %struct.RArray* %87, i64 0, i32 1, i32 0, i32 0
  %89 = load i64, i64* %88, align 8, !tbaa !6
  br label %rb_array_len.exit.i3.i

rb_array_len.exit.i3.i:                           ; preds = %86, %83
  %90 = phi i64 [ %85, %83 ], [ %89, %86 ]
  %91 = trunc i64 %90 to i32
  %92 = sub i32 3, %91
  %93 = icmp sgt i32 %92, 0
  br i1 %93, label %94, label %"func_<root>.<static-init>$111.exit"

94:                                               ; preds = %rb_array_len.exit.i3.i
  %95 = call i64 @rb_ary_dup(i64 %77) #9
  br label %96

96:                                               ; preds = %96, %94
  %97 = phi i32 [ 0, %94 ], [ %99, %96 ]
  %98 = call i64 @rb_ary_push(i64 %95, i64 8) #9
  %99 = add nuw nsw i32 %97, 1
  %100 = icmp eq i32 %99, %92
  br i1 %100, label %"func_<root>.<static-init>$111.exit", label %96

"func_<root>.<static-init>$111.exit":             ; preds = %96, %rb_array_len.exit.i3.i
  %101 = phi i64 [ %77, %rb_array_len.exit.i3.i ], [ %95, %96 ]
  store i64 1, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_[].i", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !33
  %102 = call i64 @rb_funcallv(i64 %101, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #9
  store i64 -3, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_[].i", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !36
  %103 = call i64 @rb_funcallv(i64 %101, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #9
  store i64 -1, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_[].i", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !39
  %104 = call i64 @rb_funcallv(i64 %101, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #9
  %105 = call i64 @rb_ary_new_capa(i64 3) #9
  %106 = call i64 @rb_ary_push(i64 %105, i64 %102) #9
  %107 = call i64 @rb_ary_push(i64 %105, i64 %103) #9
  %108 = call i64 @rb_ary_push(i64 %105, i64 %104) #9
  store i64 %105, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !42
  %109 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #9
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %1)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #7

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #7

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { nofree nounwind }
attributes #2 = { cold noreturn }
attributes #3 = { "addedToSilenceEmptyAttrsError" }
attributes #4 = { norecurse nounwind readnone ssp uwtable }
attributes #5 = { nounwind ssp }
attributes #6 = { nounwind sspreq }
attributes #7 = { argmemonly nounwind }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nounwind }

!0 = !{!"branch_weights", i32 1, i32 2000}
!1 = !{!2, !3, i64 0}
!2 = !{!"RBasic", !3, i64 0, !3, i64 8}
!3 = !{!"long", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
!7 = !{!8, !8, i64 0}
!8 = !{!"int", !4, i64 0}
!9 = !{!10}
!10 = distinct !{!10, !11, !"sorbet_callFunc: argument 0"}
!11 = distinct !{!11, !"sorbet_callFunc"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"sorbet_callFunc: argument 0"}
!14 = distinct !{!14, !"sorbet_callFunc"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"sorbet_callFunc: argument 0"}
!17 = distinct !{!17, !"sorbet_callFunc"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"sorbet_callFunc: argument 0"}
!20 = distinct !{!20, !"sorbet_callFunc"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"sorbet_callFunc: argument 0"}
!23 = distinct !{!23, !"sorbet_callFunc"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"sorbet_callFunc: argument 0"}
!26 = distinct !{!26, !"sorbet_callFunc"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"sorbet_callFunc: argument 0"}
!29 = distinct !{!29, !"sorbet_callFunc"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"sorbet_callFunc: argument 0"}
!32 = distinct !{!32, !"sorbet_callFunc"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"sorbet_callFunc: argument 0"}
!35 = distinct !{!35, !"sorbet_callFunc"}
!36 = !{!37}
!37 = distinct !{!37, !38, !"sorbet_callFunc: argument 0"}
!38 = distinct !{!38, !"sorbet_callFunc"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"sorbet_callFunc: argument 0"}
!41 = distinct !{!41, !"sorbet_callFunc"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"sorbet_callFunc: argument 0"}
!44 = distinct !{!44, !"sorbet_callFunc"}
