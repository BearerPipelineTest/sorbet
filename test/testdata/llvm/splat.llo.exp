; ModuleID = 'payload'
source_filename = "compiler/IRHelpers/payload.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_data_type_struct = type { i8*, %struct.anon.1, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.1 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.RBasic = type { i64, i64 }
%struct.RString = type { %struct.RBasic, %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { i64, i8*, %union.anon.0 }
%union.anon.0 = type { i64 }
%struct.RArray = type { %struct.RBasic, %union.anon.4 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i64, %union.anon.6, i64* }
%union.anon.6 = type { i64 }

@.str = private unnamed_addr constant [16 x i8] c"ERROR: %s is 0\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%li\0B\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@.str.6 = private unnamed_addr constant [5 x i8] c"func\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@closureInfo = local_unnamed_addr constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i32 0, i32 0), %struct.anon.1 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@"rubyIdPrecomputed_[]" = internal unnamed_addr global i64 0, align 8
@"str_[]" = private unnamed_addr constant [3 x i8] c"[]\00", align 1
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@llvm.global_ctors = appending global [2 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_[]", i8* bitcast (i64* @"rubyIdPrecomputed_[]" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_puts, i8* bitcast (i64* @rubyIdPrecomputed_puts to i8*) }]

; Function Attrs: nounwind ssp uwtable
define weak void @dbg_sorbet_validate_id(i64 %0, i8* %1) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6, !prof !0

4:                                                ; preds = %2
  %5 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %1)
  tail call void @abort() #8
  unreachable

6:                                                ; preds = %2
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @abort() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_pi(i64 %0) local_unnamed_addr #0 {
  %2 = tail call i8* @rb_id2name(i64 %0) #9
  ret i8* %2
}

declare i8* @rb_id2name(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_p(i64 %0) local_unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #9
  %3 = inttoptr i64 %2 to %struct.RBasic*
  %4 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1
  %6 = and i64 %5, 8192
  %7 = icmp eq i64 %6, 0
  %8 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #9
  %9 = inttoptr i64 %8 to %struct.RString*
  br i1 %7, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !6
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i8* [ %12, %10 ], [ %15, %13 ]
  ret i8* %17
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare i64 @rb_ary_new_capa(i64) local_unnamed_addr #3

declare i64 @rb_ary_push(i64, i64) local_unnamed_addr #3

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #3

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8* %0) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !7
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #9
  ret void
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly %0) #5 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !7
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

declare i64 @rb_ary_dup(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @sorbet_rb_array_square_br(i64 %0, i64 %.val) unnamed_addr #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #9
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = and i64 %.val, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = ashr i64 %.val, 1
  %10 = tail call i64 @rb_ary_entry(i64 %0, i64 %9) #9
  br label %32

11:                                               ; preds = %1
  %12 = inttoptr i64 %0 to %struct.RBasic*
  %13 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %12, i64 0, i32 0
  %14 = load i64, i64* %13, align 8, !tbaa !1
  %15 = and i64 %14, 8192
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %11
  %18 = lshr i64 %14, 15
  %19 = and i64 %18, 3
  br label %rb_array_len.exit

20:                                               ; preds = %11
  %21 = inttoptr i64 %0 to %struct.RArray*
  %22 = getelementptr inbounds %struct.RArray, %struct.RArray* %21, i64 0, i32 1, i32 0, i32 0
  %23 = load i64, i64* %22, align 8, !tbaa !6
  br label %rb_array_len.exit

rb_array_len.exit:                                ; preds = %17, %20
  %24 = phi i64 [ %19, %17 ], [ %23, %20 ]
  %25 = call i64 @rb_range_beg_len(i64 %.val, i64* nonnull %2, i64* nonnull %3, i64 %24, i32 0) #9
  switch i64 %25, label %26 [
    i64 0, label %rb_num2long_inline.exit
    i64 8, label %32
  ]

26:                                               ; preds = %rb_array_len.exit
  %27 = load i64, i64* %2, align 8, !tbaa !9
  %28 = load i64, i64* %3, align 8, !tbaa !9
  %29 = call i64 @rb_ary_subseq(i64 %0, i64 %27, i64 %28) #9
  br label %32

rb_num2long_inline.exit:                          ; preds = %rb_array_len.exit
  %30 = call i64 @rb_num2long(i64 %.val) #9
  %31 = call i64 @rb_ary_entry(i64 %0, i64 %30) #9
  br label %32

32:                                               ; preds = %rb_num2long_inline.exit, %26, %rb_array_len.exit, %8
  %33 = phi i64 [ %10, %8 ], [ %29, %26 ], [ %31, %rb_num2long_inline.exit ], [ 8, %rb_array_len.exit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #9
  ret i64 %33
}

declare i64 @rb_ary_entry(i64, i64) local_unnamed_addr #3

declare i64 @rb_range_beg_len(i64, i64*, i64*, i64, i32) local_unnamed_addr #3

declare i64 @rb_ary_subseq(i64, i64, i64) local_unnamed_addr #3

declare i64 @rb_num2long(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_[]"() #6 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"str_[]", i64 0, i64 0), i64 2) #9
  store i64 %0, i64* @"rubyIdPrecomputed_[]", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_puts() #6 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 4) #9
  store i64 %0, i64* @rubyIdPrecomputed_puts, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_test_testdata_llvm_splat() local_unnamed_addr #7 {
typeTestSuccess.i:
  %callArgs.i = alloca [7 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8
  %1 = bitcast [7 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %1)
  %"rubyId_[].i" = load i64, i64* @"rubyIdPrecomputed_[]", align 8
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8
  %2 = tail call i64 @rb_ary_new_capa(i64 7) #9
  %3 = tail call i64 @rb_ary_push(i64 %2, i64 3) #9
  %4 = tail call i64 @rb_ary_push(i64 %2, i64 5) #9
  %5 = tail call i64 @rb_ary_push(i64 %2, i64 7) #9
  %6 = tail call i64 @rb_ary_push(i64 %2, i64 9) #9
  %7 = tail call i64 @rb_ary_push(i64 %2, i64 11) #9
  %8 = tail call i64 @rb_ary_push(i64 %2, i64 13) #9
  %9 = tail call i64 @rb_ary_push(i64 %2, i64 15) #9
  %callArgsAddr.i = getelementptr inbounds [7 x i64], [7 x i64]* %callArgs.i, i64 0, i64 0
  store i64 %2, i64* %callArgsAddr.i, align 8
  %callArgsAddr112.i = getelementptr inbounds [7 x i64], [7 x i64]* %callArgs.i, i64 0, i64 1
  %10 = bitcast i64* %callArgsAddr112.i to <2 x i64>*
  store <2 x i64> <i64 3, i64 5>, <2 x i64>* %10, align 8
  %11 = inttoptr i64 %2 to %struct.RBasic*
  %12 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %11, i64 0, i32 0
  %13 = load i64, i64* %12, align 8, !tbaa !1, !noalias !10
  %14 = and i64 %13, 8192
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %typeTestSuccess.i
  %17 = lshr i64 %13, 15
  %18 = and i64 %17, 3
  br label %rb_array_len.exit.i.i

19:                                               ; preds = %typeTestSuccess.i
  %20 = inttoptr i64 %2 to %struct.RArray*
  %21 = getelementptr inbounds %struct.RArray, %struct.RArray* %20, i64 0, i32 1, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !6, !noalias !10
  br label %rb_array_len.exit.i.i

rb_array_len.exit.i.i:                            ; preds = %19, %16
  %23 = phi i64 [ %18, %16 ], [ %22, %19 ]
  %24 = trunc i64 %23 to i32
  %25 = sub i32 3, %24
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %27, label %sorbet_splatIntrinsic.exit.i

27:                                               ; preds = %rb_array_len.exit.i.i
  %28 = tail call i64 @rb_ary_dup(i64 %2) #9, !noalias !10
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i32 [ 0, %27 ], [ %32, %29 ]
  %31 = tail call i64 @rb_ary_push(i64 %28, i64 8) #9, !noalias !10
  %32 = add nuw nsw i32 %30, 1
  %33 = icmp eq i32 %32, %25
  br i1 %33, label %sorbet_splatIntrinsic.exit.i, label %29

sorbet_splatIntrinsic.exit.i:                     ; preds = %29, %rb_array_len.exit.i.i
  %34 = phi i64 [ %2, %rb_array_len.exit.i.i ], [ %28, %29 ]
  %35 = and i64 %34, 7
  %36 = icmp ne i64 %35, 0
  %37 = and i64 %34, -9
  %38 = icmp eq i64 %37, 0
  %39 = or i1 %36, %38
  br i1 %39, label %sorbet_isa_Array.exit.thread.i, label %sorbet_isa_Array.exit.i, !prof !13

sorbet_isa_Array.exit.thread.i:                   ; preds = %sorbet_splatIntrinsic.exit.i
  store i64 1, i64* %callArgsAddr.i, align 8
  br label %"slowSymCallIntrinsic_[]144.i"

sorbet_isa_Array.exit.i:                          ; preds = %sorbet_splatIntrinsic.exit.i
  %40 = inttoptr i64 %34 to %struct.RBasic*
  %41 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %40, i64 0, i32 0
  %42 = load i64, i64* %41, align 8, !tbaa !1
  %43 = and i64 %42, 31
  %44 = icmp eq i64 %43, 7
  store i64 1, i64* %callArgsAddr.i, align 8
  br i1 %44, label %"fastSymCallIntrinsic_[]145.i", label %"slowSymCallIntrinsic_[]144.i", !prof !14, !misexpect !15

"afterSymCallIntrinsic_[]143.i":                  ; preds = %"fastSymCallIntrinsic_[]145.i", %"slowSymCallIntrinsic_[]144.i"
  %"symIntrinsicRawPhi_[]14015.i" = phi i64 [ %rawSendResult134.i, %"fastSymCallIntrinsic_[]145.i" ], [ %88, %"slowSymCallIntrinsic_[]144.i" ]
  %"symIntrinsicRawPhi_[]913.i" = phi i64 [ %rawSendResult121.i, %"fastSymCallIntrinsic_[]145.i" ], [ %87, %"slowSymCallIntrinsic_[]144.i" ]
  %"symIntrinsicRawPhi_[]155.i" = phi i64 [ %rawSendResult149.i, %"fastSymCallIntrinsic_[]145.i" ], [ %89, %"slowSymCallIntrinsic_[]144.i" ]
  %45 = call i64 @rb_ary_new_capa(i64 3) #9
  %46 = call i64 @rb_ary_push(i64 %45, i64 %"symIntrinsicRawPhi_[]913.i") #9
  %47 = call i64 @rb_ary_push(i64 %45, i64 %"symIntrinsicRawPhi_[]14015.i") #9
  %48 = call i64 @rb_ary_push(i64 %45, i64 %"symIntrinsicRawPhi_[]155.i") #9
  store i64 %45, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !16
  %49 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #9
  %50 = call i64 @rb_ary_new_capa(i64 2) #9
  %51 = call i64 @rb_ary_push(i64 %50, i64 3) #9
  %52 = call i64 @rb_ary_push(i64 %50, i64 5) #9
  store i64 %50, i64* %callArgsAddr.i, align 8
  store <2 x i64> <i64 3, i64 5>, <2 x i64>* %10, align 8
  %53 = inttoptr i64 %50 to %struct.RBasic*
  %54 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %53, i64 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !1, !noalias !19
  %56 = and i64 %55, 8192
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %61, label %58

58:                                               ; preds = %"afterSymCallIntrinsic_[]143.i"
  %59 = lshr i64 %55, 15
  %60 = and i64 %59, 3
  br label %rb_array_len.exit.i1.i

61:                                               ; preds = %"afterSymCallIntrinsic_[]143.i"
  %62 = inttoptr i64 %50 to %struct.RArray*
  %63 = getelementptr inbounds %struct.RArray, %struct.RArray* %62, i64 0, i32 1, i32 0, i32 0
  %64 = load i64, i64* %63, align 8, !tbaa !6, !noalias !19
  br label %rb_array_len.exit.i1.i

rb_array_len.exit.i1.i:                           ; preds = %61, %58
  %65 = phi i64 [ %60, %58 ], [ %64, %61 ]
  %66 = trunc i64 %65 to i32
  %67 = sub i32 3, %66
  %68 = icmp sgt i32 %67, 0
  br i1 %68, label %69, label %sorbet_splatIntrinsic.exit2.i

69:                                               ; preds = %rb_array_len.exit.i1.i
  %70 = call i64 @rb_ary_dup(i64 %50) #9, !noalias !19
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i32 [ 0, %69 ], [ %74, %71 ]
  %73 = call i64 @rb_ary_push(i64 %70, i64 8) #9, !noalias !19
  %74 = add nuw nsw i32 %72, 1
  %75 = icmp eq i32 %74, %67
  br i1 %75, label %sorbet_splatIntrinsic.exit2.i, label %71

sorbet_splatIntrinsic.exit2.i:                    ; preds = %71, %rb_array_len.exit.i1.i
  %76 = phi i64 [ %50, %rb_array_len.exit.i1.i ], [ %70, %71 ]
  %77 = and i64 %76, 7
  %78 = icmp ne i64 %77, 0
  %79 = and i64 %76, -9
  %80 = icmp eq i64 %79, 0
  %81 = or i1 %78, %80
  br i1 %81, label %sorbet_isa_Array.exit3.thread.i, label %sorbet_isa_Array.exit3.i, !prof !13

sorbet_isa_Array.exit3.thread.i:                  ; preds = %sorbet_splatIntrinsic.exit2.i
  store i64 1, i64* %callArgsAddr.i, align 8
  br label %"slowSymCallIntrinsic_[]212.i"

sorbet_isa_Array.exit3.i:                         ; preds = %sorbet_splatIntrinsic.exit2.i
  %82 = inttoptr i64 %76 to %struct.RBasic*
  %83 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %82, i64 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !1
  %85 = and i64 %84, 31
  %86 = icmp eq i64 %85, 7
  store i64 1, i64* %callArgsAddr.i, align 8
  br i1 %86, label %"fastSymCallIntrinsic_[]213.i", label %"slowSymCallIntrinsic_[]212.i", !prof !14, !misexpect !15

"slowSymCallIntrinsic_[]144.i":                   ; preds = %sorbet_isa_Array.exit.i, %sorbet_isa_Array.exit.thread.i
  tail call void @dbg_sorbet_validate_id(i64 %"rubyId_[].i", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !22
  %87 = call i64 @rb_funcallv(i64 %34, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #9
  store i64 -3, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_[].i", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !25
  %88 = call i64 @rb_funcallv(i64 %34, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #9
  store i64 -1, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_[].i", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !28
  %89 = call i64 @rb_funcallv(i64 %34, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #9
  br label %"afterSymCallIntrinsic_[]143.i"

"fastSymCallIntrinsic_[]145.i":                   ; preds = %sorbet_isa_Array.exit.i
  %rawSendResult121.i = tail call fastcc i64 @sorbet_rb_array_square_br(i64 %34, i64 1) #9
  %rawSendResult134.i = tail call fastcc i64 @sorbet_rb_array_square_br(i64 %34, i64 -3) #9
  store i64 -1, i64* %callArgsAddr.i, align 8
  %rawSendResult149.i = tail call fastcc i64 @sorbet_rb_array_square_br(i64 %34, i64 -1) #9
  br label %"afterSymCallIntrinsic_[]143.i"

"afterSymCallIntrinsic_[]211.i":                  ; preds = %"fastSymCallIntrinsic_[]213.i", %"slowSymCallIntrinsic_[]212.i"
  %"symIntrinsicRawPhi_[]20824.i" = phi i64 [ %rawSendResult202.i, %"fastSymCallIntrinsic_[]213.i" ], [ %131, %"slowSymCallIntrinsic_[]212.i" ]
  %"symIntrinsicRawPhi_[]1931822.i" = phi i64 [ %rawSendResult187.i, %"fastSymCallIntrinsic_[]213.i" ], [ %130, %"slowSymCallIntrinsic_[]212.i" ]
  %"symIntrinsicRawPhi_[]223.i" = phi i64 [ %rawSendResult217.i, %"fastSymCallIntrinsic_[]213.i" ], [ %132, %"slowSymCallIntrinsic_[]212.i" ]
  %90 = call i64 @rb_ary_new_capa(i64 3) #9
  %91 = call i64 @rb_ary_push(i64 %90, i64 %"symIntrinsicRawPhi_[]1931822.i") #9
  %92 = call i64 @rb_ary_push(i64 %90, i64 %"symIntrinsicRawPhi_[]20824.i") #9
  %93 = call i64 @rb_ary_push(i64 %90, i64 %"symIntrinsicRawPhi_[]223.i") #9
  store i64 %90, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !31
  %94 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #9
  %95 = call i64 @rb_ary_new_capa(i64 0) #9
  store i64 %95, i64* %callArgsAddr.i, align 8
  store <2 x i64> <i64 3, i64 5>, <2 x i64>* %10, align 8
  %96 = inttoptr i64 %95 to %struct.RBasic*
  %97 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %96, i64 0, i32 0
  %98 = load i64, i64* %97, align 8, !tbaa !1, !noalias !34
  %99 = and i64 %98, 8192
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %104, label %101

101:                                              ; preds = %"afterSymCallIntrinsic_[]211.i"
  %102 = lshr i64 %98, 15
  %103 = and i64 %102, 3
  br label %rb_array_len.exit.i4.i

104:                                              ; preds = %"afterSymCallIntrinsic_[]211.i"
  %105 = inttoptr i64 %95 to %struct.RArray*
  %106 = getelementptr inbounds %struct.RArray, %struct.RArray* %105, i64 0, i32 1, i32 0, i32 0
  %107 = load i64, i64* %106, align 8, !tbaa !6, !noalias !34
  br label %rb_array_len.exit.i4.i

rb_array_len.exit.i4.i:                           ; preds = %104, %101
  %108 = phi i64 [ %103, %101 ], [ %107, %104 ]
  %109 = trunc i64 %108 to i32
  %110 = sub i32 3, %109
  %111 = icmp sgt i32 %110, 0
  br i1 %111, label %112, label %sorbet_splatIntrinsic.exit5.i

112:                                              ; preds = %rb_array_len.exit.i4.i
  %113 = call i64 @rb_ary_dup(i64 %95) #9, !noalias !34
  br label %114

114:                                              ; preds = %114, %112
  %115 = phi i32 [ 0, %112 ], [ %117, %114 ]
  %116 = call i64 @rb_ary_push(i64 %113, i64 8) #9, !noalias !34
  %117 = add nuw nsw i32 %115, 1
  %118 = icmp eq i32 %117, %110
  br i1 %118, label %sorbet_splatIntrinsic.exit5.i, label %114

sorbet_splatIntrinsic.exit5.i:                    ; preds = %114, %rb_array_len.exit.i4.i
  %119 = phi i64 [ %95, %rb_array_len.exit.i4.i ], [ %113, %114 ]
  %120 = and i64 %119, 7
  %121 = icmp ne i64 %120, 0
  %122 = and i64 %119, -9
  %123 = icmp eq i64 %122, 0
  %124 = or i1 %121, %123
  br i1 %124, label %sorbet_isa_Array.exit6.thread.i, label %sorbet_isa_Array.exit6.i, !prof !13

sorbet_isa_Array.exit6.thread.i:                  ; preds = %sorbet_splatIntrinsic.exit5.i
  store i64 1, i64* %callArgsAddr.i, align 8
  br label %"slowSymCallIntrinsic_[]277.i"

sorbet_isa_Array.exit6.i:                         ; preds = %sorbet_splatIntrinsic.exit5.i
  %125 = inttoptr i64 %119 to %struct.RBasic*
  %126 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %125, i64 0, i32 0
  %127 = load i64, i64* %126, align 8, !tbaa !1
  %128 = and i64 %127, 31
  %129 = icmp eq i64 %128, 7
  store i64 1, i64* %callArgsAddr.i, align 8
  br i1 %129, label %"fastSymCallIntrinsic_[]278.i", label %"slowSymCallIntrinsic_[]277.i", !prof !14, !misexpect !15

"slowSymCallIntrinsic_[]212.i":                   ; preds = %sorbet_isa_Array.exit3.i, %sorbet_isa_Array.exit3.thread.i
  call void @dbg_sorbet_validate_id(i64 %"rubyId_[].i", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !37
  %130 = call i64 @rb_funcallv(i64 %76, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #9
  store i64 -3, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_[].i", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !40
  %131 = call i64 @rb_funcallv(i64 %76, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #9
  store i64 -1, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_[].i", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !43
  %132 = call i64 @rb_funcallv(i64 %76, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #9
  br label %"afterSymCallIntrinsic_[]211.i"

"fastSymCallIntrinsic_[]213.i":                   ; preds = %sorbet_isa_Array.exit3.i
  %rawSendResult187.i = call fastcc i64 @sorbet_rb_array_square_br(i64 %76, i64 1) #9
  store i64 -3, i64* %callArgsAddr.i, align 8
  %rawSendResult202.i = call fastcc i64 @sorbet_rb_array_square_br(i64 %76, i64 -3) #9
  store i64 -1, i64* %callArgsAddr.i, align 8
  %rawSendResult217.i = call fastcc i64 @sorbet_rb_array_square_br(i64 %76, i64 -1) #9
  br label %"afterSymCallIntrinsic_[]211.i"

"slowSymCallIntrinsic_[]277.i":                   ; preds = %sorbet_isa_Array.exit6.i, %sorbet_isa_Array.exit6.thread.i
  call void @dbg_sorbet_validate_id(i64 %"rubyId_[].i", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !46
  %133 = call i64 @rb_funcallv(i64 %119, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #9
  store i64 -3, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_[].i", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !49
  %134 = call i64 @rb_funcallv(i64 %119, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #9
  store i64 -1, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %"rubyId_[].i", i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !52
  %135 = call i64 @rb_funcallv(i64 %119, i64 %"rubyId_[].i", i32 1, i64* nonnull %callArgsAddr.i) #9
  br label %"func_<root>.<static-init>$111.exit"

"fastSymCallIntrinsic_[]278.i":                   ; preds = %sorbet_isa_Array.exit6.i
  %rawSendResult252.i = call fastcc i64 @sorbet_rb_array_square_br(i64 %119, i64 1) #9
  store i64 -3, i64* %callArgsAddr.i, align 8
  %rawSendResult267.i = call fastcc i64 @sorbet_rb_array_square_br(i64 %119, i64 -3) #9
  store i64 -1, i64* %callArgsAddr.i, align 8
  %rawSendResult282.i = call fastcc i64 @sorbet_rb_array_square_br(i64 %119, i64 -1) #9
  br label %"func_<root>.<static-init>$111.exit"

"func_<root>.<static-init>$111.exit":             ; preds = %"slowSymCallIntrinsic_[]277.i", %"fastSymCallIntrinsic_[]278.i"
  %"symIntrinsicRawPhi_[]27333.i" = phi i64 [ %rawSendResult267.i, %"fastSymCallIntrinsic_[]278.i" ], [ %134, %"slowSymCallIntrinsic_[]277.i" ]
  %"symIntrinsicRawPhi_[]2582731.i" = phi i64 [ %rawSendResult252.i, %"fastSymCallIntrinsic_[]278.i" ], [ %133, %"slowSymCallIntrinsic_[]277.i" ]
  %"symIntrinsicRawPhi_[]288.i" = phi i64 [ %rawSendResult282.i, %"fastSymCallIntrinsic_[]278.i" ], [ %135, %"slowSymCallIntrinsic_[]277.i" ]
  %136 = call i64 @rb_ary_new_capa(i64 3) #9
  %137 = call i64 @rb_ary_push(i64 %136, i64 %"symIntrinsicRawPhi_[]2582731.i") #9
  %138 = call i64 @rb_ary_push(i64 %136, i64 %"symIntrinsicRawPhi_[]27333.i") #9
  %139 = call i64 @rb_ary_push(i64 %136, i64 %"symIntrinsicRawPhi_[]288.i") #9
  store i64 %136, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #9, !noalias !55
  %140 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #9
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %1)
  ret void
}

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { nofree nounwind }
attributes #2 = { cold noreturn }
attributes #3 = { "addedToSilenceEmptyAttrsError" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { norecurse nounwind readnone ssp uwtable }
attributes #6 = { nounwind ssp }
attributes #7 = { nounwind sspreq }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nounwind }

!0 = !{!"branch_weights", i32 1, i32 2000}
!1 = !{!2, !3, i64 0}
!2 = !{!"RBasic", !3, i64 0, !3, i64 8}
!3 = !{!"long", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
!7 = !{!8, !8, i64 0}
!8 = !{!"int", !4, i64 0}
!9 = !{!3, !3, i64 0}
!10 = !{!11}
!11 = distinct !{!11, !12, !"sorbet_splatIntrinsic: argument 0"}
!12 = distinct !{!12, !"sorbet_splatIntrinsic"}
!13 = !{!"branch_weights", i32 1073205, i32 2146410443}
!14 = !{!"branch_weights", i32 2000, i32 1}
!15 = !{!"misexpect", i64 0, i64 2000, i64 1}
!16 = !{!17}
!17 = distinct !{!17, !18, !"sorbet_callFunc: argument 0"}
!18 = distinct !{!18, !"sorbet_callFunc"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"sorbet_splatIntrinsic: argument 0"}
!21 = distinct !{!21, !"sorbet_splatIntrinsic"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"sorbet_callFunc: argument 0"}
!24 = distinct !{!24, !"sorbet_callFunc"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"sorbet_callFunc: argument 0"}
!27 = distinct !{!27, !"sorbet_callFunc"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"sorbet_callFunc: argument 0"}
!30 = distinct !{!30, !"sorbet_callFunc"}
!31 = !{!32}
!32 = distinct !{!32, !33, !"sorbet_callFunc: argument 0"}
!33 = distinct !{!33, !"sorbet_callFunc"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"sorbet_splatIntrinsic: argument 0"}
!36 = distinct !{!36, !"sorbet_splatIntrinsic"}
!37 = !{!38}
!38 = distinct !{!38, !39, !"sorbet_callFunc: argument 0"}
!39 = distinct !{!39, !"sorbet_callFunc"}
!40 = !{!41}
!41 = distinct !{!41, !42, !"sorbet_callFunc: argument 0"}
!42 = distinct !{!42, !"sorbet_callFunc"}
!43 = !{!44}
!44 = distinct !{!44, !45, !"sorbet_callFunc: argument 0"}
!45 = distinct !{!45, !"sorbet_callFunc"}
!46 = !{!47}
!47 = distinct !{!47, !48, !"sorbet_callFunc: argument 0"}
!48 = distinct !{!48, !"sorbet_callFunc"}
!49 = !{!50}
!50 = distinct !{!50, !51, !"sorbet_callFunc: argument 0"}
!51 = distinct !{!51, !"sorbet_callFunc"}
!52 = !{!53}
!53 = distinct !{!53, !54, !"sorbet_callFunc: argument 0"}
!54 = distinct !{!54, !"sorbet_callFunc"}
!55 = !{!56}
!56 = distinct !{!56, !57, !"sorbet_callFunc: argument 0"}
!57 = distinct !{!57, !"sorbet_callFunc"}
