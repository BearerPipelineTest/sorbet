source_filename = "compiler/IRHelpers/payload.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin18.2.0"

%struct.OnigEncodingTypeST = type { i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i8*, i32, i32, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8**, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i32 (i32, i32*, i32, i8*)*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, i8*, %struct.OnigCaseFoldCodeItem*, %struct.OnigEncodingTypeST*)*, i32 (%struct.OnigEncodingTypeST*, i8*, i8*)*, i32 (i32, i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i32*, i32**, %struct.OnigEncodingTypeST*)*, i8* (i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32*, i8**, i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32, i32 }
%struct.OnigCaseFoldCodeItem = type { i32, i32, [3 x i32] }
%struct.RBasic = type { i64, i64 }

@.str = private unnamed_addr constant [16 x i8] c"ERROR: %s is 0\0A\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@wrong_constant_name = internal constant [25 x i8] c"wrong constant name %1$s\00", align 16
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@.str.3 = private unnamed_addr constant [36 x i8] c"%li\0B does not refer to class/module\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"func\00", align 1
@.str.5 = private unnamed_addr constant [50 x i8] c"wrong number of arguments (given %d, expected %d)\00", align 1
@rb_eArgError = external local_unnamed_addr global i64, align 8
@rubyIdPrecomputed_unsafe = internal unnamed_addr global i64 0, align 8
@str_unsafe = private unnamed_addr constant [7 x i8] c"unsafe\00", align 1
@rubyIdPrecomputed_keep_for_ide = internal unnamed_addr global i64 0, align 8
@str_keep_for_ide = private unnamed_addr constant [13 x i8] c"keep_for_ide\00", align 1
@"str_Sorbet::Private::Static" = private unnamed_addr constant [24 x i8] c"Sorbet::Private::Static\00", align 1
@rubyIdPrecomputed_bar = internal unnamed_addr global i64 0, align 8
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@llvm.global_ctors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_unsafe, i8* bitcast (i64* @rubyIdPrecomputed_unsafe to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_keep_for_ide, i8* bitcast (i64* @rubyIdPrecomputed_keep_for_ide to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_bar, i8* bitcast (i64* @rubyIdPrecomputed_bar to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_puts, i8* bitcast (i64* @rubyIdPrecomputed_puts to i8*) }]
@str_Object.3 = private unnamed_addr constant [7 x i8] c"Object\00", align 1
@str_T.4 = private unnamed_addr constant [2 x i8] c"T\00", align 1
@str_Foo.5 = private unnamed_addr constant [4 x i8] c"Foo\00", align 1
@str_bar.6 = private unnamed_addr constant [4 x i8] c"bar\00", align 1

; Function Attrs: nounwind ssp uwtable
define weak void @dbg_sorbet_validate_id(i64, i8*) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6, !prof !0

; <label>:4:                                      ; preds = %2
  %5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %1)
  tail call void @abort() #13
  unreachable

; <label>:6:                                      ; preds = %2
  ret void
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @abort() local_unnamed_addr #2

declare i64 @rb_str_new(i8*, i64) local_unnamed_addr #3

declare i64 @rb_intern(i8*) local_unnamed_addr #3

declare i64 @rb_id2sym(i64) local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @sorbet_getConstant(i8*) unnamed_addr #4 {
  %2 = tail call i64 @rb_intern(i8* %0) #1
  %3 = tail call i64 @rb_id2sym(i64 %2) #1
  %4 = load i64, i64* @rb_cObject, align 8, !tbaa !1
  %5 = tail call %struct.OnigEncodingTypeST* @rb_enc_get(i64 %3) #1
  %6 = tail call i64 @strlen(i8* %0)
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  %8 = icmp slt i64 %6, 1
  br i1 %8, label %.loopexit13, label %9

; <label>:9:                                      ; preds = %1
  %10 = load i8, i8* %0, align 1, !tbaa !5
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %.loopexit13, label %16

.loopexit13:                                      ; preds = %rb_obj_freeze_inline.exit, %57, %54, %.loopexit, %115, %9, %1
  %12 = phi i64 [ %4, %1 ], [ %4, %9 ], [ %32, %115 ], [ %32, %.loopexit ], [ %32, %54 ], [ %32, %57 ], [ %32, %rb_obj_freeze_inline.exit ]
  %13 = phi i64 [ %3, %1 ], [ %3, %9 ], [ %116, %115 ], [ %3, %.loopexit ], [ %3, %54 ], [ %3, %57 ], [ %80, %rb_obj_freeze_inline.exit ]
  %14 = tail call i64 @rb_fstring_cstr(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @wrong_constant_name, i64 0, i64 0)) #1
  %15 = tail call i64 @rb_name_err_new(i64 %14, i64 %12, i64 %13) #1
  tail call void @rb_exc_raise(i64 %15) #14
  unreachable

; <label>:16:                                     ; preds = %9
  %17 = icmp sgt i64 %6, 2
  %18 = icmp eq i8 %10, 58
  %19 = and i1 %17, %18
  br i1 %19, label %20, label %26

; <label>:20:                                     ; preds = %16
  %21 = getelementptr inbounds i8, i8* %0, i64 2
  %22 = getelementptr inbounds i8, i8* %0, i64 1
  %23 = load i8, i8* %22, align 1, !tbaa !5
  %24 = icmp eq i8 %23, 58
  %25 = select i1 %24, i8* %21, i8* %0
  br label %26

; <label>:26:                                     ; preds = %20, %16
  %27 = phi i8* [ %0, %16 ], [ %25, %20 ]
  %28 = icmp ult i8* %27, %7
  br i1 %28, label %29, label %.loopexit15

; <label>:29:                                     ; preds = %26
  %30 = ptrtoint i8* %0 to i64
  br label %31

; <label>:31:                                     ; preds = %123, %29
  %32 = phi i64 [ %4, %29 ], [ %124, %123 ]
  %33 = phi i8* [ %27, %29 ], [ %63, %123 ]
  %34 = phi i8* [ %27, %29 ], [ %62, %123 ]
  %35 = icmp ult i8* %34, %7
  br i1 %35, label %.preheader, label %.loopexit

.preheader:                                       ; preds = %31, %39
  %36 = phi i8* [ %40, %39 ], [ %34, %31 ]
  %37 = load i8, i8* %36, align 1, !tbaa !5
  %38 = icmp eq i8 %37, 58
  br i1 %38, label %.loopexit, label %39

; <label>:39:                                     ; preds = %.preheader
  %40 = getelementptr inbounds i8, i8* %36, i64 1
  %41 = icmp ult i8* %40, %7
  br i1 %41, label %.preheader, label %.loopexit

.loopexit:                                        ; preds = %39, %.preheader, %31
  %42 = phi i8* [ %34, %31 ], [ %36, %.preheader ], [ %40, %39 ]
  %43 = phi i1 [ false, %31 ], [ true, %.preheader ], [ false, %39 ]
  %44 = icmp eq i8* %33, %42
  br i1 %44, label %.loopexit13, label %45

; <label>:45:                                     ; preds = %.loopexit
  %46 = ptrtoint i8* %42 to i64
  %47 = ptrtoint i8* %33 to i64
  %48 = sub i64 %46, %47
  %49 = tail call i64 @rb_check_id_cstr(i8* %33, i64 %48, %struct.OnigEncodingTypeST* %5) #1
  %50 = sub i64 %47, %30
  br i1 %43, label %51, label %61

; <label>:51:                                     ; preds = %45
  %52 = load i8, i8* %42, align 1, !tbaa !5
  %53 = icmp eq i8 %52, 58
  br i1 %53, label %54, label %61

; <label>:54:                                     ; preds = %51
  %55 = getelementptr inbounds i8, i8* %42, i64 2
  %56 = icmp ult i8* %55, %7
  br i1 %56, label %57, label %.loopexit13

; <label>:57:                                     ; preds = %54
  %58 = getelementptr inbounds i8, i8* %42, i64 1
  %59 = load i8, i8* %58, align 1, !tbaa !5
  %60 = icmp eq i8 %59, 58
  br i1 %60, label %61, label %.loopexit13

; <label>:61:                                     ; preds = %57, %51, %45
  %62 = phi i8* [ %42, %51 ], [ %42, %45 ], [ %55, %57 ]
  %63 = phi i8* [ %33, %51 ], [ %33, %45 ], [ %55, %57 ]
  %64 = and i64 %32, 7
  %65 = icmp ne i64 %64, 0
  %66 = and i64 %32, -9
  %67 = icmp eq i64 %66, 0
  %68 = or i1 %65, %67
  br i1 %68, label %74, label %69

; <label>:69:                                     ; preds = %61
  %70 = inttoptr i64 %32 to %struct.RBasic*
  %71 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %70, i64 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !6
  %73 = and i64 %72, 30
  %switch = icmp eq i64 %73, 2
  br i1 %switch, label %77, label %74

; <label>:74:                                     ; preds = %69, %61
  %75 = load i64, i64* @rb_eTypeError, align 8, !tbaa !1
  %76 = tail call i64 @rb_str_quote_unprintable(i64 %3) #1
  tail call void (i64, i8*, ...) @rb_raise(i64 %75, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0), i64 %76) #14
  unreachable

; <label>:77:                                     ; preds = %69
  %78 = icmp eq i64 %49, 0
  br i1 %78, label %79, label %112

; <label>:79:                                     ; preds = %77
  %80 = tail call i64 @rb_str_subseq(i64 %3, i64 %50, i64 %48) #1
  %81 = and i64 %80, 7
  %82 = icmp ne i64 %81, 0
  %83 = and i64 %80, -9
  %84 = icmp eq i64 %83, 0
  %85 = or i1 %82, %84
  br i1 %85, label %rb_obj_freeze_inline.exit, label %86

; <label>:86:                                     ; preds = %79
  %87 = inttoptr i64 %80 to %struct.RBasic*
  %88 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %87, i64 0, i32 0
  %89 = load i64, i64* %88, align 8, !tbaa !6
  %90 = and i64 %89, 31
  %91 = icmp eq i64 %90, 27
  br i1 %91, label %rb_obj_freeze_inline.exit, label %92

; <label>:92:                                     ; preds = %86
  %93 = or i64 %89, 2048
  store i64 %93, i64* %88, align 8, !tbaa !6
  %94 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %87, i64 0, i32 1
  %95 = load i64, i64* %94, align 8, !tbaa !8
  %96 = icmp ne i64 %95, 0
  %97 = and i64 %89, 4096
  %98 = icmp eq i64 %97, 0
  %99 = and i1 %98, %96
  br i1 %99, label %100, label %rb_obj_freeze_inline.exit

; <label>:100:                                    ; preds = %92
  tail call void @rb_freeze_singleton_class(i64 %80) #1
  br label %rb_obj_freeze_inline.exit

rb_obj_freeze_inline.exit:                        ; preds = %79, %86, %92, %100
  %101 = tail call i32 @rb_is_const_name(i64 %80) #1
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %.loopexit13, label %rb_class_of.exit

rb_class_of.exit:                                 ; preds = %rb_obj_freeze_inline.exit
  %103 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %70, i64 0, i32 1
  %104 = load i64, i64* %103, align 8, !tbaa !1
  %105 = tail call i32 @rb_method_basic_definition_p(i64 %104, i64 2817) #1
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %110

; <label>:107:                                    ; preds = %rb_class_of.exit
  %108 = tail call i64 @rb_str_intern(i64 %80) #1
  %109 = tail call i64 @rb_const_missing(i64 %32, i64 %108) #1
  br label %123

; <label>:110:                                    ; preds = %rb_class_of.exit
  %111 = tail call i64 @rb_mod_const_missing(i64 %32, i64 %80) #14
  unreachable

; <label>:112:                                    ; preds = %77
  %113 = tail call i32 @rb_is_const_id(i64 %49) #7
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %117

; <label>:115:                                    ; preds = %112
  %116 = tail call i64 @rb_id2sym(i64 %49) #1
  br label %.loopexit13

; <label>:117:                                    ; preds = %112
  %118 = icmp eq i64 %50, 0
  br i1 %118, label %119, label %121

; <label>:119:                                    ; preds = %117
  %120 = tail call i64 @rb_const_get(i64 %32, i64 %49) #1
  br label %123

; <label>:121:                                    ; preds = %117
  %122 = tail call i64 @rb_const_get_from(i64 %32, i64 %49) #1
  br label %123

; <label>:123:                                    ; preds = %121, %119, %107
  %124 = phi i64 [ %109, %107 ], [ %120, %119 ], [ %122, %121 ]
  %125 = icmp ult i8* %62, %7
  br i1 %125, label %31, label %.loopexit15

.loopexit15:                                      ; preds = %123, %26
  %126 = phi i64 [ %4, %26 ], [ %124, %123 ]
  ret i64 %126
}

declare %struct.OnigEncodingTypeST* @rb_enc_get(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @rb_exc_raise(i64) local_unnamed_addr #6

declare i64 @rb_name_err_new(i64, i64, i64) local_unnamed_addr #3

declare i64 @rb_fstring_cstr(i8*) local_unnamed_addr #3

declare i64 @rb_check_id_cstr(i8*, i64, %struct.OnigEncodingTypeST*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #6

declare i64 @rb_str_quote_unprintable(i64) local_unnamed_addr #3

declare i64 @rb_str_subseq(i64, i64, i64) local_unnamed_addr #3

declare i32 @rb_is_const_name(i64) local_unnamed_addr #3

declare i32 @rb_method_basic_definition_p(i64, i64) local_unnamed_addr #3

declare i64 @rb_str_intern(i64) local_unnamed_addr #3

declare i64 @rb_const_missing(i64, i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare i64 @rb_mod_const_missing(i64, i64) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @rb_is_const_id(i64) local_unnamed_addr #7

declare i64 @rb_const_get(i64, i64) local_unnamed_addr #3

declare i64 @rb_const_get_from(i64, i64) local_unnamed_addr #3

declare i64 @rb_define_module(i8*) local_unnamed_addr #3

declare void @rb_define_singleton_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #3

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @sorbet_rb_arity_error_new(i32) unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.5, i64 0, i64 0), i32 %0, i32 0) #1
  %3 = load i64, i64* @rb_eArgError, align 8, !tbaa !1
  %4 = tail call i64 @rb_exc_new_str(i64 %3, i64 %2) #1
  ret i64 %4
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #3

declare i64 @rb_exc_new_str(i64, i64) local_unnamed_addr #3

; Function Attrs: noreturn nounwind ssp uwtable
define internal fastcc void @sorbet_rb_error_arity(i32) unnamed_addr #8 {
  %2 = tail call fastcc i64 @sorbet_rb_arity_error_new(i32 %0)
  tail call void @rb_exc_raise(i64 %2) #14
  unreachable
}

declare void @rb_freeze_singleton_class(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_unsafe() #9 {
constr:
  %0 = tail call i64 @rb_intern(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_unsafe, i64 0, i64 0)) #1
  store i64 %0, i64* @rubyIdPrecomputed_unsafe, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_keep_for_ide() #9 {
constr:
  %0 = tail call i64 @rb_intern(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str_keep_for_ide, i64 0, i64 0)) #1
  store i64 %0, i64* @rubyIdPrecomputed_keep_for_ide, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_bar() #9 {
constr:
  %0 = tail call i64 @rb_intern(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_bar.6, i64 0, i64 0)) #1
  store i64 %0, i64* @rubyIdPrecomputed_bar, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_puts() #9 {
constr:
  %0 = tail call i64 @rb_intern(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0)) #1
  store i64 %0, i64* @rubyIdPrecomputed_puts, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_static_method() local_unnamed_addr #10 {
entry:
  %callArgs.i.i.i = alloca [2 x i64], align 8
  %callArgs.i = alloca [1 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8, !tbaa !1
  %1 = bitcast [1 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1)
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8
  %rubyId_bar.i = load i64, i64* @rubyIdPrecomputed_bar, align 8
  %rubyId_keep_for_ide.i = load i64, i64* @rubyIdPrecomputed_keep_for_ide, align 8
  %rubyId_unsafe.i = load i64, i64* @rubyIdPrecomputed_unsafe, align 8
  %2 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Object.3, i64 0, i64 0)) #1
  %callArgsAddr.i = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs.i, i64 0, i64 0
  store i64 %2, i64* %callArgsAddr.i, align 8
  %3 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_T.4, i64 0, i64 0)) #1
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_unsafe.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #1, !noalias !9
  %4 = call i64 @rb_funcallv(i64 %3, i64 %rubyId_unsafe.i, i32 1, i64* nonnull %callArgsAddr.i) #1
  %5 = call i64 @rb_define_module(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.5, i64 0, i64 0)) #1
  %6 = bitcast [2 x i64]* %callArgs.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #1
  %rubyId_unsafe.i.i.i = load i64, i64* @rubyIdPrecomputed_unsafe, align 8
  %7 = call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Object.3, i64 0, i64 0)) #1
  %callArgsAddr.i.i.i = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs.i.i.i, i64 0, i64 0
  store i64 %7, i64* %callArgsAddr.i.i.i, align 8
  %8 = call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_T.4, i64 0, i64 0)) #1
  call void @dbg_sorbet_validate_id(i64 %rubyId_unsafe.i.i.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #1, !noalias !12
  %9 = call i64 @rb_funcallv(i64 %8, i64 %rubyId_unsafe.i.i.i, i32 1, i64* nonnull %callArgsAddr.i.i.i) #1
  %10 = call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.5, i64 0, i64 0)) #1
  call void @rb_define_singleton_method(i64 %10, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_bar.6, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"<S <C <U Foo>> $1><U bar>" to i64 (...)*), i32 -1) #1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #1
  %11 = call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.5, i64 0, i64 0)) #1
  store i64 %11, i64* %callArgsAddr.i, align 8
  %12 = call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"str_Sorbet::Private::Static", i64 0, i64 0)) #1
  call void @dbg_sorbet_validate_id(i64 %rubyId_keep_for_ide.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #1, !noalias !15
  %13 = call i64 @rb_funcallv(i64 %12, i64 %rubyId_keep_for_ide.i, i32 1, i64* nonnull %callArgsAddr.i) #1
  %14 = call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.5, i64 0, i64 0)) #1
  call void @dbg_sorbet_validate_id(i64 %rubyId_bar.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #1, !noalias !18
  %15 = call i64 @rb_funcallv(i64 %14, i64 %rubyId_bar.i, i32 0, i64* nonnull %callArgsAddr.i) #1
  store i64 %15, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #1, !noalias !21
  %16 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1)
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"<S <C <U Foo>> $1><U bar>"(i32, i64* nocapture readnone, i64) #11 {
functionEntryInitializers:
  %tooManyArgs = icmp eq i32 %0, 0
  br i1 %tooManyArgs, label %argCountSuccess, label %argCountFailBlock

argCountSuccess:                                  ; preds = %functionEntryInitializers
  %3 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_bar.6, i64 0, i64 0), i64 3) #1
  ret i64 %3

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_rb_error_arity(i32 %0)
  unreachable
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #12

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #12

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { nounwind }
attributes #2 = { cold noreturn }
attributes #3 = { "addedToSilenceEmptyAttrsError" }
attributes #4 = { noinline nounwind ssp uwtable }
attributes #5 = { argmemonly nounwind readonly }
attributes #6 = { noreturn }
attributes #7 = { nounwind readnone }
attributes #8 = { noreturn nounwind ssp uwtable }
attributes #9 = { nounwind ssp }
attributes #10 = { nounwind sspreq }
attributes #11 = { nounwind sspreq uwtable }
attributes #12 = { argmemonly nounwind }
attributes #13 = { cold noreturn nounwind }
attributes #14 = { noreturn nounwind }

!0 = !{!"branch_weights", i32 1, i32 2000}
!1 = !{!2, !2, i64 0}
!2 = !{!"long", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!3, !3, i64 0}
!6 = !{!7, !2, i64 0}
!7 = !{!"RBasic", !2, i64 0, !2, i64 8}
!8 = !{!7, !2, i64 8}
!9 = !{!10}
!10 = distinct !{!10, !11, !"sorbet_callFunc: argument 0"}
!11 = distinct !{!11, !"sorbet_callFunc"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"sorbet_callFunc: argument 0"}
!14 = distinct !{!14, !"sorbet_callFunc"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"sorbet_callFunc: argument 0"}
!17 = distinct !{!17, !"sorbet_callFunc"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"sorbet_callFunc: argument 0"}
!20 = distinct !{!20, !"sorbet_callFunc"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"sorbet_callFunc: argument 0"}
!23 = distinct !{!23, !"sorbet_callFunc"}
