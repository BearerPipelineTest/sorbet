source_filename = "compiler/IRHelpers/payload.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin18.2.0"

%struct.rb_data_type_struct = type { i8*, %struct.anon.1, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.1 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.OnigEncodingTypeST = type { i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i8*, i32, i32, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8**, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i32 (i32, i32*, i32, i8*)*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, i8*, %struct.OnigCaseFoldCodeItem*, %struct.OnigEncodingTypeST*)*, i32 (%struct.OnigEncodingTypeST*, i8*, i8*)*, i32 (i32, i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i32*, i32**, %struct.OnigEncodingTypeST*)*, i8* (i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32*, i8**, i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32, i32 }
%struct.OnigCaseFoldCodeItem = type { i32, i32, [3 x i32] }
%struct.RBasic = type { i64, i64 }
%struct.sorbet_Closure = type { i32, [0 x i64] }
%struct.RTypedData = type { %struct.RBasic, %struct.rb_data_type_struct*, i64, i8* }

@.str = private unnamed_addr constant [16 x i8] c"ERROR: %s is 0\0A\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@wrong_constant_name = internal constant [25 x i8] c"wrong constant name %1$s\00", align 16
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@.str.3 = private unnamed_addr constant [36 x i8] c"%li\0B does not refer to class/module\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"func\00", align 1
@.str.5 = private unnamed_addr constant [50 x i8] c"wrong number of arguments (given %d, expected %d)\00", align 1
@rb_eArgError = external local_unnamed_addr global i64, align 8
@.str.8 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@closureInfo = local_unnamed_addr constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i32 0, i32 0), %struct.anon.1 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@rubyIdPrecomputed_unsafe = internal unnamed_addr global i64 0, align 8
@str_unsafe = private unnamed_addr constant [7 x i8] c"unsafe\00", align 1
@rubyIdPrecomputed_keep_for_ide = internal unnamed_addr global i64 0, align 8
@str_keep_for_ide = private unnamed_addr constant [13 x i8] c"keep_for_ide\00", align 1
@"str_Sorbet::Private::Static" = private unnamed_addr constant [24 x i8] c"Sorbet::Private::Static\00", align 1
@rubyIdPrecomputed_bar = internal unnamed_addr global i64 0, align 8
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@llvm.global_ctors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_unsafe, i8* bitcast (i64* @rubyIdPrecomputed_unsafe to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_keep_for_ide, i8* bitcast (i64* @rubyIdPrecomputed_keep_for_ide to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_bar, i8* bitcast (i64* @rubyIdPrecomputed_bar to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_puts, i8* bitcast (i64* @rubyIdPrecomputed_puts to i8*) }]
@str_Object.3 = private unnamed_addr constant [7 x i8] c"Object\00", align 1
@str_T.4 = private unnamed_addr constant [2 x i8] c"T\00", align 1
@str_Foo.5 = private unnamed_addr constant [4 x i8] c"Foo\00", align 1
@str_bar.6 = private unnamed_addr constant [4 x i8] c"bar\00", align 1

; Function Attrs: nounwind ssp uwtable
define weak void @dbg_sorbet_validate_id(i64, i8*) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6, !prof !0

; <label>:4:                                      ; preds = %2
  %5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %1)
  tail call void @abort() #13
  unreachable

; <label>:6:                                      ; preds = %2
  ret void
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @abort() local_unnamed_addr #2

declare i64 @rb_str_new(i8*, i64) local_unnamed_addr #3

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #3

declare i64 @rb_id2sym(i64) local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @sorbet_getConstant(i8*, i64) unnamed_addr #4 {
  %3 = tail call i64 @rb_intern2(i8* %0, i64 %1) #1
  %4 = tail call i64 @rb_id2sym(i64 %3) #1
  %5 = load i64, i64* @rb_cObject, align 8, !tbaa !1
  %6 = tail call %struct.OnigEncodingTypeST* @rb_enc_get(i64 %4) #1
  %7 = getelementptr inbounds i8, i8* %0, i64 %1
  %8 = ptrtoint i8* %0 to i64
  br label %12

.loopexit9:                                       ; preds = %rb_obj_freeze_inline.exit, %38, %35, %.loopexit, %96
  %9 = phi i64 [ %97, %96 ], [ %4, %.loopexit ], [ %4, %38 ], [ %4, %35 ], [ %61, %rb_obj_freeze_inline.exit ]
  %10 = tail call i64 @rb_fstring_cstr(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @wrong_constant_name, i64 0, i64 0)) #1
  %11 = tail call i64 @rb_name_err_new(i64 %10, i64 %13, i64 %9) #1
  tail call void @rb_exc_raise(i64 %11) #14
  unreachable

; <label>:12:                                     ; preds = %104, %2
  %13 = phi i64 [ %5, %2 ], [ %105, %104 ]
  %14 = phi i8* [ %0, %2 ], [ %44, %104 ]
  %15 = phi i8* [ %0, %2 ], [ %43, %104 ]
  %16 = icmp ult i8* %15, %7
  br i1 %16, label %.preheader, label %.loopexit

.preheader:                                       ; preds = %12, %20
  %17 = phi i8* [ %21, %20 ], [ %15, %12 ]
  %18 = load i8, i8* %17, align 1, !tbaa !5
  %19 = icmp eq i8 %18, 58
  br i1 %19, label %.loopexit, label %20

; <label>:20:                                     ; preds = %.preheader
  %21 = getelementptr inbounds i8, i8* %17, i64 1
  %22 = icmp ult i8* %21, %7
  br i1 %22, label %.preheader, label %.loopexit

.loopexit:                                        ; preds = %20, %.preheader, %12
  %23 = phi i8* [ %15, %12 ], [ %17, %.preheader ], [ %21, %20 ]
  %24 = phi i1 [ false, %12 ], [ true, %.preheader ], [ false, %20 ]
  %25 = icmp eq i8* %14, %23
  br i1 %25, label %.loopexit9, label %26

; <label>:26:                                     ; preds = %.loopexit
  %27 = ptrtoint i8* %23 to i64
  %28 = ptrtoint i8* %14 to i64
  %29 = sub i64 %27, %28
  %30 = tail call i64 @rb_check_id_cstr(i8* %14, i64 %29, %struct.OnigEncodingTypeST* %6) #1
  %31 = sub i64 %28, %8
  br i1 %24, label %32, label %42

; <label>:32:                                     ; preds = %26
  %33 = load i8, i8* %23, align 1, !tbaa !5
  %34 = icmp eq i8 %33, 58
  br i1 %34, label %35, label %42

; <label>:35:                                     ; preds = %32
  %36 = getelementptr inbounds i8, i8* %23, i64 2
  %37 = icmp ult i8* %36, %7
  br i1 %37, label %38, label %.loopexit9

; <label>:38:                                     ; preds = %35
  %39 = getelementptr inbounds i8, i8* %23, i64 1
  %40 = load i8, i8* %39, align 1, !tbaa !5
  %41 = icmp eq i8 %40, 58
  br i1 %41, label %42, label %.loopexit9

; <label>:42:                                     ; preds = %38, %32, %26
  %43 = phi i8* [ %23, %32 ], [ %23, %26 ], [ %36, %38 ]
  %44 = phi i8* [ %14, %32 ], [ %14, %26 ], [ %36, %38 ]
  %45 = and i64 %13, 7
  %46 = icmp ne i64 %45, 0
  %47 = and i64 %13, -9
  %48 = icmp eq i64 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %55, label %50

; <label>:50:                                     ; preds = %42
  %51 = inttoptr i64 %13 to %struct.RBasic*
  %52 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %51, i64 0, i32 0
  %53 = load i64, i64* %52, align 8, !tbaa !6
  %54 = and i64 %53, 30
  %switch = icmp eq i64 %54, 2
  br i1 %switch, label %58, label %55

; <label>:55:                                     ; preds = %50, %42
  %56 = load i64, i64* @rb_eTypeError, align 8, !tbaa !1
  %57 = tail call i64 @rb_str_quote_unprintable(i64 %4) #1
  tail call void (i64, i8*, ...) @rb_raise(i64 %56, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0), i64 %57) #14
  unreachable

; <label>:58:                                     ; preds = %50
  %59 = icmp eq i64 %30, 0
  br i1 %59, label %60, label %93

; <label>:60:                                     ; preds = %58
  %61 = tail call i64 @rb_str_subseq(i64 %4, i64 %31, i64 %29) #1
  %62 = and i64 %61, 7
  %63 = icmp ne i64 %62, 0
  %64 = and i64 %61, -9
  %65 = icmp eq i64 %64, 0
  %66 = or i1 %63, %65
  br i1 %66, label %rb_obj_freeze_inline.exit, label %67

; <label>:67:                                     ; preds = %60
  %68 = inttoptr i64 %61 to %struct.RBasic*
  %69 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %68, i64 0, i32 0
  %70 = load i64, i64* %69, align 8, !tbaa !6
  %71 = and i64 %70, 31
  %72 = icmp eq i64 %71, 27
  br i1 %72, label %rb_obj_freeze_inline.exit, label %73

; <label>:73:                                     ; preds = %67
  %74 = or i64 %70, 2048
  store i64 %74, i64* %69, align 8, !tbaa !6
  %75 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %68, i64 0, i32 1
  %76 = load i64, i64* %75, align 8, !tbaa !8
  %77 = icmp ne i64 %76, 0
  %78 = and i64 %70, 4096
  %79 = icmp eq i64 %78, 0
  %80 = and i1 %79, %77
  br i1 %80, label %81, label %rb_obj_freeze_inline.exit

; <label>:81:                                     ; preds = %73
  tail call void @rb_freeze_singleton_class(i64 %61) #1
  br label %rb_obj_freeze_inline.exit

rb_obj_freeze_inline.exit:                        ; preds = %60, %67, %73, %81
  %82 = tail call i32 @rb_is_const_name(i64 %61) #1
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %.loopexit9, label %rb_class_of.exit

rb_class_of.exit:                                 ; preds = %rb_obj_freeze_inline.exit
  %84 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %51, i64 0, i32 1
  %85 = load i64, i64* %84, align 8, !tbaa !1
  %86 = tail call i32 @rb_method_basic_definition_p(i64 %85, i64 2817) #1
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %91

; <label>:88:                                     ; preds = %rb_class_of.exit
  %89 = tail call i64 @rb_str_intern(i64 %61) #1
  %90 = tail call i64 @rb_const_missing(i64 %13, i64 %89) #1
  br label %104

; <label>:91:                                     ; preds = %rb_class_of.exit
  %92 = tail call i64 @rb_mod_const_missing(i64 %13, i64 %61) #14
  unreachable

; <label>:93:                                     ; preds = %58
  %94 = tail call i32 @rb_is_const_id(i64 %30) #6
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %98

; <label>:96:                                     ; preds = %93
  %97 = tail call i64 @rb_id2sym(i64 %30) #1
  br label %.loopexit9

; <label>:98:                                     ; preds = %93
  %99 = icmp eq i64 %31, 0
  br i1 %99, label %100, label %102

; <label>:100:                                    ; preds = %98
  %101 = tail call i64 @rb_const_get(i64 %13, i64 %30) #1
  br label %104

; <label>:102:                                    ; preds = %98
  %103 = tail call i64 @rb_const_get_from(i64 %13, i64 %30) #1
  br label %104

; <label>:104:                                    ; preds = %102, %100, %88
  %105 = phi i64 [ %90, %88 ], [ %101, %100 ], [ %103, %102 ]
  %106 = icmp ult i8* %43, %7
  br i1 %106, label %12, label %107

; <label>:107:                                    ; preds = %104
  ret i64 %105
}

declare %struct.OnigEncodingTypeST* @rb_enc_get(i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @rb_exc_raise(i64) local_unnamed_addr #5

declare i64 @rb_name_err_new(i64, i64, i64) local_unnamed_addr #3

declare i64 @rb_fstring_cstr(i8*) local_unnamed_addr #3

declare i64 @rb_check_id_cstr(i8*, i64, %struct.OnigEncodingTypeST*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #5

declare i64 @rb_str_quote_unprintable(i64) local_unnamed_addr #3

declare i64 @rb_str_subseq(i64, i64, i64) local_unnamed_addr #3

declare i32 @rb_is_const_name(i64) local_unnamed_addr #3

declare i32 @rb_method_basic_definition_p(i64, i64) local_unnamed_addr #3

declare i64 @rb_str_intern(i64) local_unnamed_addr #3

declare i64 @rb_const_missing(i64, i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare i64 @rb_mod_const_missing(i64, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @rb_is_const_id(i64) local_unnamed_addr #6

declare i64 @rb_const_get(i64, i64) local_unnamed_addr #3

declare i64 @rb_const_get_from(i64, i64) local_unnamed_addr #3

declare i64 @rb_define_module(i8*) local_unnamed_addr #3

declare void @rb_define_singleton_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #3

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @sorbet_rb_arity_error_new(i32) unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.5, i64 0, i64 0), i32 %0, i32 0) #1
  %3 = load i64, i64* @rb_eArgError, align 8, !tbaa !1
  %4 = tail call i64 @rb_exc_new_str(i64 %3, i64 %2) #1
  ret i64 %4
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #3

declare i64 @rb_exc_new_str(i64, i64) local_unnamed_addr #3

; Function Attrs: noreturn nounwind ssp uwtable
define internal fastcc void @sorbet_rb_error_arity(i32) unnamed_addr #7 {
  %2 = tail call fastcc i64 @sorbet_rb_arity_error_new(i32 %0)
  tail call void @rb_exc_raise(i64 %2) #14
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define %struct.sorbet_Closure* @sorbet_Closure_alloc(i32) local_unnamed_addr #0 {
  %2 = sext i32 %0 to i64
  %3 = shl nsw i64 %2, 3
  %4 = add nsw i64 %3, 8
  %5 = tail call i8* @ruby_xmalloc(i64 %4) #1
  %6 = bitcast i8* %5 to %struct.sorbet_Closure*
  ret %struct.sorbet_Closure* %6
}

declare i8* @ruby_xmalloc(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8*) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !9
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #1
  ret void
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly) #8 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !9
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define nonnull i64* @sorbet_getClosureElem(i64, i32) local_unnamed_addr #8 {
  %3 = inttoptr i64 %0 to %struct.RTypedData*
  %4 = getelementptr inbounds %struct.RTypedData, %struct.RTypedData* %3, i64 0, i32 3
  %5 = bitcast i8** %4 to %struct.sorbet_Closure**
  %6 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %5, align 8, !tbaa !11
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %6, i64 0, i32 1, i64 %7
  ret i64* %8
}

declare void @rb_freeze_singleton_class(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_unsafe() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_unsafe, i64 0, i64 0), i64 6) #1
  store i64 %0, i64* @rubyIdPrecomputed_unsafe, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_keep_for_ide() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str_keep_for_ide, i64 0, i64 0), i64 12) #1
  store i64 %0, i64* @rubyIdPrecomputed_keep_for_ide, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_bar() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_bar.6, i64 0, i64 0), i64 3) #1
  store i64 %0, i64* @rubyIdPrecomputed_bar, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_puts() #9 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 4) #1
  store i64 %0, i64* @rubyIdPrecomputed_puts, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_static_method() local_unnamed_addr #10 {
entry:
  %callArgs.i.i.i = alloca [2 x i64], align 8
  %callArgs.i = alloca [1 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8, !tbaa !1
  %1 = bitcast [1 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1)
  %rubyId_unsafe.i = load i64, i64* @rubyIdPrecomputed_unsafe, align 8
  %rubyId_keep_for_ide.i = load i64, i64* @rubyIdPrecomputed_keep_for_ide, align 8
  %rubyId_bar.i = load i64, i64* @rubyIdPrecomputed_bar, align 8
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8
  %2 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Object.3, i64 0, i64 0), i64 6) #1
  %callArgsAddr.i = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs.i, i64 0, i64 0
  store i64 %2, i64* %callArgsAddr.i, align 8
  %3 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_T.4, i64 0, i64 0), i64 1) #1
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_unsafe.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #1, !noalias !14
  %4 = call i64 @rb_funcallv(i64 %3, i64 %rubyId_unsafe.i, i32 1, i64* nonnull %callArgsAddr.i) #1
  %5 = call i64 @rb_define_module(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.5, i64 0, i64 0)) #1
  %6 = bitcast [2 x i64]* %callArgs.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #1
  %rubyId_unsafe.i.i.i = load i64, i64* @rubyIdPrecomputed_unsafe, align 8
  %rubyId_bar.i.i.i = load i64, i64* @rubyIdPrecomputed_bar, align 8
  %7 = call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Object.3, i64 0, i64 0), i64 6) #1
  %callArgsAddr.i.i.i = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs.i.i.i, i64 0, i64 0
  store i64 %7, i64* %callArgsAddr.i.i.i, align 8
  %8 = call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_T.4, i64 0, i64 0), i64 1) #1
  call void @dbg_sorbet_validate_id(i64 %rubyId_unsafe.i.i.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #1, !noalias !17
  %9 = call i64 @rb_funcallv(i64 %8, i64 %rubyId_unsafe.i.i.i, i32 1, i64* nonnull %callArgsAddr.i.i.i) #1
  %rawSym.i.i.i = call i64 @rb_id2sym(i64 %rubyId_bar.i.i.i) #1
  %10 = call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.5, i64 0, i64 0), i64 3) #1
  call void @rb_define_singleton_method(i64 %10, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_bar.6, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"<S <C <U Foo>> $1><U bar>" to i64 (...)*), i32 -1) #1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #1
  %11 = call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.5, i64 0, i64 0), i64 3) #1
  store i64 %11, i64* %callArgsAddr.i, align 8
  %12 = call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"str_Sorbet::Private::Static", i64 0, i64 0), i64 23) #1
  call void @dbg_sorbet_validate_id(i64 %rubyId_keep_for_ide.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #1, !noalias !20
  %13 = call i64 @rb_funcallv(i64 %12, i64 %rubyId_keep_for_ide.i, i32 1, i64* nonnull %callArgsAddr.i) #1
  %14 = call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.5, i64 0, i64 0), i64 3) #1
  call void @dbg_sorbet_validate_id(i64 %rubyId_bar.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #1, !noalias !23
  %15 = call i64 @rb_funcallv(i64 %14, i64 %rubyId_bar.i, i32 0, i64* nonnull %callArgsAddr.i) #1
  store i64 %15, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #1, !noalias !26
  %16 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1)
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"<S <C <U Foo>> $1><U bar>"(i32, i64* nocapture readnone, i64) #11 {
functionEntryInitializers:
  %tooManyArgs = icmp eq i32 %0, 0
  br i1 %tooManyArgs, label %argCountSuccess, label %argCountFailBlock

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_rb_error_arity(i32 %0)
  unreachable

argCountSuccess:                                  ; preds = %functionEntryInitializers
  %3 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_bar.6, i64 0, i64 0), i64 3) #1
  ret i64 %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #12

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #12

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { nounwind }
attributes #2 = { cold noreturn }
attributes #3 = { "addedToSilenceEmptyAttrsError" }
attributes #4 = { noinline nounwind ssp uwtable }
attributes #5 = { noreturn }
attributes #6 = { nounwind readnone }
attributes #7 = { noreturn nounwind ssp uwtable }
attributes #8 = { norecurse nounwind readonly ssp uwtable }
attributes #9 = { nounwind ssp }
attributes #10 = { nounwind sspreq }
attributes #11 = { nounwind sspreq uwtable }
attributes #12 = { argmemonly nounwind }
attributes #13 = { cold noreturn nounwind }
attributes #14 = { noreturn nounwind }

!0 = !{!"branch_weights", i32 1, i32 2000}
!1 = !{!2, !2, i64 0}
!2 = !{!"long", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!3, !3, i64 0}
!6 = !{!7, !2, i64 0}
!7 = !{!"RBasic", !2, i64 0, !2, i64 8}
!8 = !{!7, !2, i64 8}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !3, i64 0}
!11 = !{!12, !13, i64 32}
!12 = !{!"RTypedData", !7, i64 0, !13, i64 16, !2, i64 24, !13, i64 32}
!13 = !{!"any pointer", !3, i64 0}
!14 = !{!15}
!15 = distinct !{!15, !16, !"sorbet_callFunc: argument 0"}
!16 = distinct !{!16, !"sorbet_callFunc"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"sorbet_callFunc: argument 0"}
!19 = distinct !{!19, !"sorbet_callFunc"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"sorbet_callFunc: argument 0"}
!22 = distinct !{!22, !"sorbet_callFunc"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"sorbet_callFunc: argument 0"}
!25 = distinct !{!25, !"sorbet_callFunc"}
!26 = !{!27}
!27 = distinct !{!27, !28, !"sorbet_callFunc: argument 0"}
!28 = distinct !{!28, !"sorbet_callFunc"}
