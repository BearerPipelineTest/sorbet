source_filename = "compiler/IRHelpers/payload.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin18.2.0"

%struct.OnigEncodingTypeST = type { i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i8*, i32, i32, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8**, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i32 (i32, i32*, i32, i8*)*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, i8*, %struct.OnigCaseFoldCodeItem*, %struct.OnigEncodingTypeST*)*, i32 (%struct.OnigEncodingTypeST*, i8*, i8*)*, i32 (i32, i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i32*, i32**, %struct.OnigEncodingTypeST*)*, i8* (i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32*, i8**, i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32, i32 }
%struct.OnigCaseFoldCodeItem = type { i32, i32, [3 x i32] }
%struct.RBasic = type { i64, i64 }

@.str = private unnamed_addr constant [16 x i8] c"ERROR: %s is 0\0A\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@wrong_constant_name = internal constant [25 x i8] c"wrong constant name %1$s\00", align 16
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@.str.3 = private unnamed_addr constant [36 x i8] c"%li\0B does not refer to class/module\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"func\00", align 1
@.str.5 = private unnamed_addr constant [50 x i8] c"wrong number of arguments (given %d, expected %d)\00", align 1
@rb_eArgError = external local_unnamed_addr global i64, align 8
@rubyIdPrecomputed_unsafe = internal unnamed_addr global i64 0, align 8
@str_unsafe = private unnamed_addr constant [7 x i8] c"unsafe\00", align 1
@rubyIdPrecomputed_keep_for_ide = internal unnamed_addr global i64 0, align 8
@str_keep_for_ide = private unnamed_addr constant [13 x i8] c"keep_for_ide\00", align 1
@"str_Sorbet::Private::Static" = private unnamed_addr constant [24 x i8] c"Sorbet::Private::Static\00", align 1
@rubyIdPrecomputed_bar = internal unnamed_addr global i64 0, align 8
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@llvm.global_ctors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_unsafe, i8* bitcast (i64* @rubyIdPrecomputed_unsafe to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_keep_for_ide, i8* bitcast (i64* @rubyIdPrecomputed_keep_for_ide to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_bar, i8* bitcast (i64* @rubyIdPrecomputed_bar to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_puts, i8* bitcast (i64* @rubyIdPrecomputed_puts to i8*) }]
@str_Object.3 = private unnamed_addr constant [7 x i8] c"Object\00", align 1
@str_T.4 = private unnamed_addr constant [2 x i8] c"T\00", align 1
@str_Foo.5 = private unnamed_addr constant [4 x i8] c"Foo\00", align 1
@str_bar.6 = private unnamed_addr constant [4 x i8] c"bar\00", align 1

; Function Attrs: nounwind ssp uwtable
define weak void @dbg_sorbet_validate_id(i64, i8*) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6, !prof !0

; <label>:4:                                      ; preds = %2
  %5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %1)
  tail call void @abort() #12
  unreachable

; <label>:6:                                      ; preds = %2
  ret void
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @abort() local_unnamed_addr #2

declare i64 @rb_str_new(i8*, i64) local_unnamed_addr #3

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #3

declare i64 @rb_id2sym(i64) local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @sorbet_getConstant(i8*, i64) unnamed_addr #4 {
  %3 = tail call i64 @rb_intern2(i8* %0, i64 %1) #1
  %4 = tail call i64 @rb_id2sym(i64 %3) #1
  %5 = load i64, i64* @rb_cObject, align 8, !tbaa !1
  %6 = tail call %struct.OnigEncodingTypeST* @rb_enc_get(i64 %4) #1
  %7 = getelementptr inbounds i8, i8* %0, i64 %1
  %8 = load i8, i8* %0, align 1, !tbaa !5
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %.loopexit13, label %14

.loopexit13:                                      ; preds = %rb_obj_freeze_inline.exit, %55, %52, %.loopexit, %113, %2
  %10 = phi i64 [ %5, %2 ], [ %30, %113 ], [ %30, %.loopexit ], [ %30, %52 ], [ %30, %55 ], [ %30, %rb_obj_freeze_inline.exit ]
  %11 = phi i64 [ %4, %2 ], [ %114, %113 ], [ %4, %.loopexit ], [ %4, %52 ], [ %4, %55 ], [ %78, %rb_obj_freeze_inline.exit ]
  %12 = tail call i64 @rb_fstring_cstr(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @wrong_constant_name, i64 0, i64 0)) #1
  %13 = tail call i64 @rb_name_err_new(i64 %12, i64 %10, i64 %11) #1
  tail call void @rb_exc_raise(i64 %13) #13
  unreachable

; <label>:14:                                     ; preds = %2
  %15 = icmp sgt i64 %1, 2
  %16 = icmp eq i8 %8, 58
  %17 = and i1 %15, %16
  br i1 %17, label %18, label %24

; <label>:18:                                     ; preds = %14
  %19 = getelementptr inbounds i8, i8* %0, i64 2
  %20 = getelementptr inbounds i8, i8* %0, i64 1
  %21 = load i8, i8* %20, align 1, !tbaa !5
  %22 = icmp eq i8 %21, 58
  %23 = select i1 %22, i8* %19, i8* %0
  br label %24

; <label>:24:                                     ; preds = %18, %14
  %25 = phi i8* [ %0, %14 ], [ %23, %18 ]
  %26 = icmp ult i8* %25, %7
  br i1 %26, label %27, label %.loopexit15

; <label>:27:                                     ; preds = %24
  %28 = ptrtoint i8* %0 to i64
  br label %29

; <label>:29:                                     ; preds = %121, %27
  %30 = phi i64 [ %5, %27 ], [ %122, %121 ]
  %31 = phi i8* [ %25, %27 ], [ %61, %121 ]
  %32 = phi i8* [ %25, %27 ], [ %60, %121 ]
  %33 = icmp ult i8* %32, %7
  br i1 %33, label %.preheader, label %.loopexit

.preheader:                                       ; preds = %29, %37
  %34 = phi i8* [ %38, %37 ], [ %32, %29 ]
  %35 = load i8, i8* %34, align 1, !tbaa !5
  %36 = icmp eq i8 %35, 58
  br i1 %36, label %.loopexit, label %37

; <label>:37:                                     ; preds = %.preheader
  %38 = getelementptr inbounds i8, i8* %34, i64 1
  %39 = icmp ult i8* %38, %7
  br i1 %39, label %.preheader, label %.loopexit

.loopexit:                                        ; preds = %37, %.preheader, %29
  %40 = phi i8* [ %32, %29 ], [ %34, %.preheader ], [ %38, %37 ]
  %41 = phi i1 [ false, %29 ], [ true, %.preheader ], [ false, %37 ]
  %42 = icmp eq i8* %31, %40
  br i1 %42, label %.loopexit13, label %43

; <label>:43:                                     ; preds = %.loopexit
  %44 = ptrtoint i8* %40 to i64
  %45 = ptrtoint i8* %31 to i64
  %46 = sub i64 %44, %45
  %47 = tail call i64 @rb_check_id_cstr(i8* %31, i64 %46, %struct.OnigEncodingTypeST* %6) #1
  %48 = sub i64 %45, %28
  br i1 %41, label %49, label %59

; <label>:49:                                     ; preds = %43
  %50 = load i8, i8* %40, align 1, !tbaa !5
  %51 = icmp eq i8 %50, 58
  br i1 %51, label %52, label %59

; <label>:52:                                     ; preds = %49
  %53 = getelementptr inbounds i8, i8* %40, i64 2
  %54 = icmp ult i8* %53, %7
  br i1 %54, label %55, label %.loopexit13

; <label>:55:                                     ; preds = %52
  %56 = getelementptr inbounds i8, i8* %40, i64 1
  %57 = load i8, i8* %56, align 1, !tbaa !5
  %58 = icmp eq i8 %57, 58
  br i1 %58, label %59, label %.loopexit13

; <label>:59:                                     ; preds = %55, %49, %43
  %60 = phi i8* [ %40, %49 ], [ %40, %43 ], [ %53, %55 ]
  %61 = phi i8* [ %31, %49 ], [ %31, %43 ], [ %53, %55 ]
  %62 = and i64 %30, 7
  %63 = icmp ne i64 %62, 0
  %64 = and i64 %30, -9
  %65 = icmp eq i64 %64, 0
  %66 = or i1 %63, %65
  br i1 %66, label %72, label %67

; <label>:67:                                     ; preds = %59
  %68 = inttoptr i64 %30 to %struct.RBasic*
  %69 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %68, i64 0, i32 0
  %70 = load i64, i64* %69, align 8, !tbaa !6
  %71 = and i64 %70, 30
  %switch = icmp eq i64 %71, 2
  br i1 %switch, label %75, label %72

; <label>:72:                                     ; preds = %67, %59
  %73 = load i64, i64* @rb_eTypeError, align 8, !tbaa !1
  %74 = tail call i64 @rb_str_quote_unprintable(i64 %4) #1
  tail call void (i64, i8*, ...) @rb_raise(i64 %73, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0), i64 %74) #13
  unreachable

; <label>:75:                                     ; preds = %67
  %76 = icmp eq i64 %47, 0
  br i1 %76, label %77, label %110

; <label>:77:                                     ; preds = %75
  %78 = tail call i64 @rb_str_subseq(i64 %4, i64 %48, i64 %46) #1
  %79 = and i64 %78, 7
  %80 = icmp ne i64 %79, 0
  %81 = and i64 %78, -9
  %82 = icmp eq i64 %81, 0
  %83 = or i1 %80, %82
  br i1 %83, label %rb_obj_freeze_inline.exit, label %84

; <label>:84:                                     ; preds = %77
  %85 = inttoptr i64 %78 to %struct.RBasic*
  %86 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %85, i64 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !6
  %88 = and i64 %87, 31
  %89 = icmp eq i64 %88, 27
  br i1 %89, label %rb_obj_freeze_inline.exit, label %90

; <label>:90:                                     ; preds = %84
  %91 = or i64 %87, 2048
  store i64 %91, i64* %86, align 8, !tbaa !6
  %92 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %85, i64 0, i32 1
  %93 = load i64, i64* %92, align 8, !tbaa !8
  %94 = icmp ne i64 %93, 0
  %95 = and i64 %87, 4096
  %96 = icmp eq i64 %95, 0
  %97 = and i1 %96, %94
  br i1 %97, label %98, label %rb_obj_freeze_inline.exit

; <label>:98:                                     ; preds = %90
  tail call void @rb_freeze_singleton_class(i64 %78) #1
  br label %rb_obj_freeze_inline.exit

rb_obj_freeze_inline.exit:                        ; preds = %77, %84, %90, %98
  %99 = tail call i32 @rb_is_const_name(i64 %78) #1
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %.loopexit13, label %rb_class_of.exit

rb_class_of.exit:                                 ; preds = %rb_obj_freeze_inline.exit
  %101 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %68, i64 0, i32 1
  %102 = load i64, i64* %101, align 8, !tbaa !1
  %103 = tail call i32 @rb_method_basic_definition_p(i64 %102, i64 2817) #1
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %108

; <label>:105:                                    ; preds = %rb_class_of.exit
  %106 = tail call i64 @rb_str_intern(i64 %78) #1
  %107 = tail call i64 @rb_const_missing(i64 %30, i64 %106) #1
  br label %121

; <label>:108:                                    ; preds = %rb_class_of.exit
  %109 = tail call i64 @rb_mod_const_missing(i64 %30, i64 %78) #13
  unreachable

; <label>:110:                                    ; preds = %75
  %111 = tail call i32 @rb_is_const_id(i64 %47) #6
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %115

; <label>:113:                                    ; preds = %110
  %114 = tail call i64 @rb_id2sym(i64 %47) #1
  br label %.loopexit13

; <label>:115:                                    ; preds = %110
  %116 = icmp eq i64 %48, 0
  br i1 %116, label %117, label %119

; <label>:117:                                    ; preds = %115
  %118 = tail call i64 @rb_const_get(i64 %30, i64 %47) #1
  br label %121

; <label>:119:                                    ; preds = %115
  %120 = tail call i64 @rb_const_get_from(i64 %30, i64 %47) #1
  br label %121

; <label>:121:                                    ; preds = %119, %117, %105
  %122 = phi i64 [ %107, %105 ], [ %118, %117 ], [ %120, %119 ]
  %123 = icmp ult i8* %60, %7
  br i1 %123, label %29, label %.loopexit15

.loopexit15:                                      ; preds = %121, %24
  %124 = phi i64 [ %5, %24 ], [ %122, %121 ]
  ret i64 %124
}

declare %struct.OnigEncodingTypeST* @rb_enc_get(i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @rb_exc_raise(i64) local_unnamed_addr #5

declare i64 @rb_name_err_new(i64, i64, i64) local_unnamed_addr #3

declare i64 @rb_fstring_cstr(i8*) local_unnamed_addr #3

declare i64 @rb_check_id_cstr(i8*, i64, %struct.OnigEncodingTypeST*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #5

declare i64 @rb_str_quote_unprintable(i64) local_unnamed_addr #3

declare i64 @rb_str_subseq(i64, i64, i64) local_unnamed_addr #3

declare i32 @rb_is_const_name(i64) local_unnamed_addr #3

declare i32 @rb_method_basic_definition_p(i64, i64) local_unnamed_addr #3

declare i64 @rb_str_intern(i64) local_unnamed_addr #3

declare i64 @rb_const_missing(i64, i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare i64 @rb_mod_const_missing(i64, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @rb_is_const_id(i64) local_unnamed_addr #6

declare i64 @rb_const_get(i64, i64) local_unnamed_addr #3

declare i64 @rb_const_get_from(i64, i64) local_unnamed_addr #3

declare i64 @rb_define_module(i8*) local_unnamed_addr #3

declare void @rb_define_singleton_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #3

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @sorbet_rb_arity_error_new(i32) unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.5, i64 0, i64 0), i32 %0, i32 0) #1
  %3 = load i64, i64* @rb_eArgError, align 8, !tbaa !1
  %4 = tail call i64 @rb_exc_new_str(i64 %3, i64 %2) #1
  ret i64 %4
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #3

declare i64 @rb_exc_new_str(i64, i64) local_unnamed_addr #3

; Function Attrs: noreturn nounwind ssp uwtable
define internal fastcc void @sorbet_rb_error_arity(i32) unnamed_addr #7 {
  %2 = tail call fastcc i64 @sorbet_rb_arity_error_new(i32 %0)
  tail call void @rb_exc_raise(i64 %2) #13
  unreachable
}

declare void @rb_freeze_singleton_class(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_unsafe() #8 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_unsafe, i64 0, i64 0), i64 6) #1
  store i64 %0, i64* @rubyIdPrecomputed_unsafe, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_keep_for_ide() #8 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str_keep_for_ide, i64 0, i64 0), i64 12) #1
  store i64 %0, i64* @rubyIdPrecomputed_keep_for_ide, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_bar() #8 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_bar.6, i64 0, i64 0), i64 3) #1
  store i64 %0, i64* @rubyIdPrecomputed_bar, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_puts() #8 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 4) #1
  store i64 %0, i64* @rubyIdPrecomputed_puts, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_static_method() local_unnamed_addr #9 {
entry:
  %callArgs.i.i.i = alloca [2 x i64], align 8
  %callArgs.i = alloca [1 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8, !tbaa !1
  %1 = bitcast [1 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1)
  %rubyId_unsafe.i = load i64, i64* @rubyIdPrecomputed_unsafe, align 8
  %rubyId_keep_for_ide.i = load i64, i64* @rubyIdPrecomputed_keep_for_ide, align 8
  %rubyId_bar.i = load i64, i64* @rubyIdPrecomputed_bar, align 8
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8
  %2 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Object.3, i64 0, i64 0), i64 6) #1
  %callArgsAddr.i = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs.i, i64 0, i64 0
  store i64 %2, i64* %callArgsAddr.i, align 8
  %3 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_T.4, i64 0, i64 0), i64 1) #1
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_unsafe.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #1, !noalias !9
  %4 = call i64 @rb_funcallv(i64 %3, i64 %rubyId_unsafe.i, i32 1, i64* nonnull %callArgsAddr.i) #1
  %5 = call i64 @rb_define_module(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.5, i64 0, i64 0)) #1
  %6 = bitcast [2 x i64]* %callArgs.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #1
  %rubyId_unsafe.i.i.i = load i64, i64* @rubyIdPrecomputed_unsafe, align 8
  %rubyId_bar.i.i.i = load i64, i64* @rubyIdPrecomputed_bar, align 8
  %7 = call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_Object.3, i64 0, i64 0), i64 6) #1
  %callArgsAddr.i.i.i = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs.i.i.i, i64 0, i64 0
  store i64 %7, i64* %callArgsAddr.i.i.i, align 8
  %8 = call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_T.4, i64 0, i64 0), i64 1) #1
  call void @dbg_sorbet_validate_id(i64 %rubyId_unsafe.i.i.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #1, !noalias !12
  %9 = call i64 @rb_funcallv(i64 %8, i64 %rubyId_unsafe.i.i.i, i32 1, i64* nonnull %callArgsAddr.i.i.i) #1
  %rawSym.i.i.i = call i64 @rb_id2sym(i64 %rubyId_bar.i.i.i) #1
  %10 = call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.5, i64 0, i64 0), i64 3) #1
  call void @rb_define_singleton_method(i64 %10, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_bar.6, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"<S <C <U Foo>> $1><U bar>" to i64 (...)*), i32 -1) #1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #1
  %11 = call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.5, i64 0, i64 0), i64 3) #1
  store i64 %11, i64* %callArgsAddr.i, align 8
  %12 = call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"str_Sorbet::Private::Static", i64 0, i64 0), i64 23) #1
  call void @dbg_sorbet_validate_id(i64 %rubyId_keep_for_ide.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #1, !noalias !15
  %13 = call i64 @rb_funcallv(i64 %12, i64 %rubyId_keep_for_ide.i, i32 1, i64* nonnull %callArgsAddr.i) #1
  %14 = call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.5, i64 0, i64 0), i64 3) #1
  call void @dbg_sorbet_validate_id(i64 %rubyId_bar.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #1, !noalias !18
  %15 = call i64 @rb_funcallv(i64 %14, i64 %rubyId_bar.i, i32 0, i64* nonnull %callArgsAddr.i) #1
  store i64 %15, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #1, !noalias !21
  %16 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1)
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"<S <C <U Foo>> $1><U bar>"(i32, i64* nocapture readnone, i64) #10 {
functionEntryInitializers:
  %tooManyArgs = icmp eq i32 %0, 0
  br i1 %tooManyArgs, label %argCountSuccess, label %argCountFailBlock

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_rb_error_arity(i32 %0)
  unreachable

argCountSuccess:                                  ; preds = %functionEntryInitializers
  %3 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_bar.6, i64 0, i64 0), i64 3) #1
  ret i64 %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #11

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #11

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { nounwind }
attributes #2 = { cold noreturn }
attributes #3 = { "addedToSilenceEmptyAttrsError" }
attributes #4 = { noinline nounwind ssp uwtable }
attributes #5 = { noreturn }
attributes #6 = { nounwind readnone }
attributes #7 = { noreturn nounwind ssp uwtable }
attributes #8 = { nounwind ssp }
attributes #9 = { nounwind sspreq }
attributes #10 = { nounwind sspreq uwtable }
attributes #11 = { argmemonly nounwind }
attributes #12 = { cold noreturn nounwind }
attributes #13 = { noreturn nounwind }

!0 = !{!"branch_weights", i32 1, i32 2000}
!1 = !{!2, !2, i64 0}
!2 = !{!"long", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!3, !3, i64 0}
!6 = !{!7, !2, i64 0}
!7 = !{!"RBasic", !2, i64 0, !2, i64 8}
!8 = !{!7, !2, i64 8}
!9 = !{!10}
!10 = distinct !{!10, !11, !"sorbet_callFunc: argument 0"}
!11 = distinct !{!11, !"sorbet_callFunc"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"sorbet_callFunc: argument 0"}
!14 = distinct !{!14, !"sorbet_callFunc"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"sorbet_callFunc: argument 0"}
!17 = distinct !{!17, !"sorbet_callFunc"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"sorbet_callFunc: argument 0"}
!20 = distinct !{!20, !"sorbet_callFunc"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"sorbet_callFunc: argument 0"}
!23 = distinct !{!23, !"sorbet_callFunc"}
