source_filename = "compiler/IRHelpers/payload.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin18.2.0"

%struct.rb_data_type_struct = type { i8*, %struct.anon.1, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.1 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.RBasic = type { i64, i64 }
%struct.RString = type { %struct.RBasic, %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { i64, i8*, %union.anon.0 }
%union.anon.0 = type { i64 }
%struct.OnigEncodingTypeST = type { i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i8*, i32, i32, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8**, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i32 (i32, i32*, i32, i8*)*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, i8*, %struct.OnigCaseFoldCodeItem*, %struct.OnigEncodingTypeST*)*, i32 (%struct.OnigEncodingTypeST*, i8*, i8*)*, i32 (i32, i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i32*, i32**, %struct.OnigEncodingTypeST*)*, i8* (i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32*, i8**, i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32, i32 }
%struct.OnigCaseFoldCodeItem = type { i32, i32, [3 x i32] }

@.str = private unnamed_addr constant [16 x i8] c"ERROR: %s is 0\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%li\0B\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@ruby_vm_global_constant_state = external local_unnamed_addr global i64, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.4 = private unnamed_addr constant [29 x i8] c"wrong constant name %li\0B%li\0B\00", align 1
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@.str.5 = private unnamed_addr constant [36 x i8] c"%li\0B does not refer to class/module\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"func\00", align 1
@.str.7 = private unnamed_addr constant [50 x i8] c"wrong number of arguments (given %d, expected %d)\00", align 1
@rb_eArgError = external local_unnamed_addr global i64, align 8
@.str.10 = private unnamed_addr constant [45 x i8] c"%s: Expected type %s, got %s with value %li\0B\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@closureInfo = local_unnamed_addr constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i32 0, i32 0), %struct.anon.1 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@rb_cModule = external local_unnamed_addr constant i64, align 8
@rubyIdPrecomputed_unsafe = internal unnamed_addr global i64 0, align 8
@str_unsafe = private unnamed_addr constant [7 x i8] c"unsafe\00", align 1
@rubyIdPrecomputed_bar = internal unnamed_addr global i64 0, align 8
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@llvm.global_ctors = appending global [3 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_unsafe, i8* bitcast (i64* @rubyIdPrecomputed_unsafe to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_bar, i8* bitcast (i64* @rubyIdPrecomputed_bar to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_puts, i8* bitcast (i64* @rubyIdPrecomputed_puts to i8*) }]
@guard_epoch_Foo = linkonce local_unnamed_addr global i64 0
@guarded_const_Foo = linkonce local_unnamed_addr global i64 0
@str_Foo.1 = private unnamed_addr constant [4 x i8] c"Foo\00", align 1
@str_cast.3 = private unnamed_addr constant [5 x i8] c"cast\00", align 1
@"str_T.class_of(Foo).4" = private unnamed_addr constant [16 x i8] c"T.class_of(Foo)\00", align 1
@str_bar.5 = private unnamed_addr constant [4 x i8] c"bar\00", align 1

; Function Attrs: nounwind ssp uwtable
define weak void @dbg_sorbet_validate_id(i64, i8*) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6, !prof !0

4:                                                ; preds = %2
  %5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %1)
  tail call void @abort() #16
  unreachable

6:                                                ; preds = %2
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @abort() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_pi(i64) local_unnamed_addr #0 {
  %2 = tail call i8* @rb_id2name(i64 %0) #17
  ret i8* %2
}

declare i8* @rb_id2name(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_p(i64) local_unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #17
  %3 = inttoptr i64 %2 to %struct.RBasic*
  %4 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !1
  %6 = and i64 %5, 8192
  %7 = icmp eq i64 %6, 0
  %8 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %0) #17
  %9 = inttoptr i64 %8 to %struct.RString*
  br i1 %7, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !6
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i8* [ %12, %10 ], [ %15, %13 ]
  ret i8* %17
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #3

declare i64 @rb_str_new(i8*, i64) local_unnamed_addr #3

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #3

declare i64 @rb_id2sym(i64) local_unnamed_addr #3

declare i8* @rb_obj_classname(i64) local_unnamed_addr #3

declare i32 @rb_block_given_p() local_unnamed_addr #3

declare i64 @rb_block_proc() local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @sorbet_getConstant() unnamed_addr #4 {
  %1 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 0), i64 3) #17
  %2 = tail call i64 @rb_id2sym(i64 %1) #17
  %3 = load i64, i64* @rb_cObject, align 8, !tbaa !7
  %4 = tail call %struct.OnigEncodingTypeST* @rb_enc_get(i64 %2) #17
  br label %7

.loopexit1:                                       ; preds = %rb_obj_freeze_inline.exit, %38, %35, %22, %95
  %5 = phi i64 [ %96, %95 ], [ %2, %22 ], [ %2, %38 ], [ %2, %35 ], [ %60, %rb_obj_freeze_inline.exit ]
  %6 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !7
  tail call void (i64, i8*, ...) @rb_raise(i64 %6, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i64 %8, i64 %5) #18
  unreachable

7:                                                ; preds = %103, %0
  %8 = phi i64 [ %3, %0 ], [ %104, %103 ]
  %9 = phi i8* [ getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 0), %0 ], [ %44, %103 ]
  %10 = phi i8* [ getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 0), %0 ], [ %43, %103 ]
  %11 = icmp ult i8* %10, getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 3)
  br i1 %11, label %12, label %22

12:                                               ; preds = %7
  %13 = load i8, i8* %10, align 1, !tbaa !6
  %14 = icmp eq i8 %13, 58
  br i1 %14, label %22, label %.preheader

15:                                               ; preds = %.preheader
  %16 = load i8, i8* %19, align 1, !tbaa !6
  %17 = icmp eq i8 %16, 58
  br i1 %17, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %12, %15
  %18 = phi i8* [ %19, %15 ], [ %10, %12 ]
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  %20 = icmp eq i8* %19, getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 3)
  br i1 %20, label %.loopexit, label %15

.loopexit:                                        ; preds = %15, %.preheader
  %.lcssa = phi i8* [ %19, %15 ], [ getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 3), %.preheader ]
  %21 = icmp ult i8* %.lcssa, getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 3)
  br label %22

22:                                               ; preds = %.loopexit, %12, %7
  %23 = phi i8* [ %10, %7 ], [ %10, %12 ], [ %.lcssa, %.loopexit ]
  %24 = phi i1 [ false, %7 ], [ true, %12 ], [ %21, %.loopexit ]
  %25 = icmp eq i8* %9, %23
  br i1 %25, label %.loopexit1, label %26

26:                                               ; preds = %22
  %27 = ptrtoint i8* %23 to i64
  %28 = ptrtoint i8* %9 to i64
  %29 = sub i64 %27, %28
  %30 = tail call i64 @rb_check_id_cstr(i8* %9, i64 %29, %struct.OnigEncodingTypeST* %4) #17
  %31 = sub i64 %28, ptrtoint ([4 x i8]* @str_Foo.1 to i64)
  br i1 %24, label %32, label %42

32:                                               ; preds = %26
  %33 = load i8, i8* %23, align 1, !tbaa !6
  %34 = icmp eq i8 %33, 58
  br i1 %34, label %35, label %42

35:                                               ; preds = %32
  %36 = getelementptr inbounds i8, i8* %23, i64 2
  %37 = icmp ult i8* %36, getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 3)
  br i1 %37, label %38, label %.loopexit1

38:                                               ; preds = %35
  %39 = getelementptr inbounds i8, i8* %23, i64 1
  %40 = load i8, i8* %39, align 1, !tbaa !6
  %41 = icmp eq i8 %40, 58
  br i1 %41, label %42, label %.loopexit1

42:                                               ; preds = %38, %32, %26
  %43 = phi i8* [ %23, %32 ], [ %23, %26 ], [ %36, %38 ]
  %44 = phi i8* [ %9, %32 ], [ %9, %26 ], [ %36, %38 ]
  %45 = and i64 %8, 7
  %46 = icmp ne i64 %45, 0
  %47 = and i64 %8, -9
  %48 = icmp eq i64 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %55, label %50

50:                                               ; preds = %42
  %51 = inttoptr i64 %8 to %struct.RBasic*
  %52 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %51, i64 0, i32 0
  %53 = load i64, i64* %52, align 8, !tbaa !1
  %54 = and i64 %53, 30
  %switch = icmp eq i64 %54, 2
  br i1 %switch, label %57, label %55

55:                                               ; preds = %50, %42
  %56 = load i64, i64* @rb_eTypeError, align 8, !tbaa !7
  tail call void (i64, i8*, ...) @rb_raise(i64 %56, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0), i64 %2) #18
  unreachable

57:                                               ; preds = %50
  %58 = icmp eq i64 %30, 0
  br i1 %58, label %59, label %92

59:                                               ; preds = %57
  %60 = tail call i64 @rb_str_subseq(i64 %2, i64 %31, i64 %29) #17
  %61 = and i64 %60, 7
  %62 = icmp ne i64 %61, 0
  %63 = and i64 %60, -9
  %64 = icmp eq i64 %63, 0
  %65 = or i1 %62, %64
  br i1 %65, label %rb_obj_freeze_inline.exit, label %66

66:                                               ; preds = %59
  %67 = inttoptr i64 %60 to %struct.RBasic*
  %68 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %67, i64 0, i32 0
  %69 = load i64, i64* %68, align 8, !tbaa !1
  %70 = and i64 %69, 31
  %71 = icmp eq i64 %70, 27
  br i1 %71, label %rb_obj_freeze_inline.exit, label %72

72:                                               ; preds = %66
  %73 = or i64 %69, 2048
  store i64 %73, i64* %68, align 8, !tbaa !1
  %74 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %67, i64 0, i32 1
  %75 = load i64, i64* %74, align 8, !tbaa !8
  %76 = icmp ne i64 %75, 0
  %77 = and i64 %69, 4096
  %78 = icmp eq i64 %77, 0
  %79 = and i1 %78, %76
  br i1 %79, label %80, label %rb_obj_freeze_inline.exit

80:                                               ; preds = %72
  tail call void @rb_freeze_singleton_class(i64 %60) #17
  br label %rb_obj_freeze_inline.exit

rb_obj_freeze_inline.exit:                        ; preds = %59, %66, %72, %80
  %81 = tail call i32 @rb_is_const_name(i64 %60) #17
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %.loopexit1, label %rb_class_of.exit

rb_class_of.exit:                                 ; preds = %rb_obj_freeze_inline.exit
  %83 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %51, i64 0, i32 1
  %84 = load i64, i64* %83, align 8, !tbaa !7
  %85 = tail call i32 @rb_method_basic_definition_p(i64 %84, i64 2737) #17
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %90

87:                                               ; preds = %rb_class_of.exit
  %88 = tail call i64 @rb_str_intern(i64 %60) #17
  %89 = tail call i64 @rb_const_missing(i64 %8, i64 %88) #17
  br label %103

90:                                               ; preds = %rb_class_of.exit
  %91 = tail call i64 @rb_mod_const_missing(i64 %8, i64 %60) #18
  unreachable

92:                                               ; preds = %57
  %93 = tail call i32 @rb_is_const_id(i64 %30) #6
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %97

95:                                               ; preds = %92
  %96 = tail call i64 @rb_id2sym(i64 %30) #17
  br label %.loopexit1

97:                                               ; preds = %92
  %98 = icmp eq i64 %31, 0
  br i1 %98, label %99, label %101

99:                                               ; preds = %97
  %100 = tail call i64 @rb_const_get(i64 %8, i64 %30) #17
  br label %103

101:                                              ; preds = %97
  %102 = tail call i64 @rb_const_get_from(i64 %8, i64 %30) #17
  br label %103

103:                                              ; preds = %101, %99, %87
  %104 = phi i64 [ %89, %87 ], [ %100, %99 ], [ %102, %101 ]
  %105 = icmp ult i8* %43, getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 3)
  br i1 %105, label %7, label %106

106:                                              ; preds = %103
  ret i64 %104
}

declare %struct.OnigEncodingTypeST* @rb_enc_get(i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #5

declare i64 @rb_check_id_cstr(i8*, i64, %struct.OnigEncodingTypeST*) local_unnamed_addr #3

declare i64 @rb_str_subseq(i64, i64, i64) local_unnamed_addr #3

declare i32 @rb_is_const_name(i64) local_unnamed_addr #3

declare i32 @rb_method_basic_definition_p(i64, i64) local_unnamed_addr #3

declare i64 @rb_str_intern(i64) local_unnamed_addr #3

declare i64 @rb_const_missing(i64, i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare i64 @rb_mod_const_missing(i64, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @rb_is_const_id(i64) local_unnamed_addr #6

declare i64 @rb_const_get(i64, i64) local_unnamed_addr #3

declare i64 @rb_const_get_from(i64, i64) local_unnamed_addr #3

declare i64 @rb_define_module(i8*) local_unnamed_addr #3

declare void @rb_define_singleton_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #3

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @sorbet_rb_arity_error_new(i32) unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.7, i64 0, i64 0), i32 %0, i32 0) #17
  %3 = load i64, i64* @rb_eArgError, align 8, !tbaa !7
  %4 = tail call i64 @rb_exc_new_str(i64 %3, i64 %2) #17
  ret i64 %4
}

declare i64 @rb_exc_new_str(i64, i64) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind optsize ssp uwtable
define internal fastcc void @sorbet_cast_failure(i64) unnamed_addr #7 {
  %2 = load i64, i64* @rb_eTypeError, align 8, !tbaa !7
  %3 = tail call i8* @rb_obj_classname(i64 %0) #17
  tail call void (i64, i8*, ...) @rb_raise(i64 %2, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast.3, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"str_T.class_of(Foo).4", i64 0, i64 0), i8* %3, i64 %0) #18
  unreachable
}

; Function Attrs: noreturn nounwind ssp uwtable
define internal fastcc void @sorbet_rb_error_arity(i32) unnamed_addr #8 {
  %2 = tail call fastcc i64 @sorbet_rb_arity_error_new(i32 %0)
  tail call void @rb_exc_raise(i64 %2) #18
  unreachable
}

; Function Attrs: noreturn
declare void @rb_exc_raise(i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8*) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !9
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #17
  ret void
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly) #9 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !9
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

declare i64 @rb_obj_is_kind_of(i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind readonly
declare i64 @rb_class_inherited_p(i64, i64) local_unnamed_addr #10

declare void @rb_freeze_singleton_class(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_unsafe() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_unsafe, i64 0, i64 0), i64 6) #17
  store i64 %0, i64* @rubyIdPrecomputed_unsafe, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_bar() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_bar.5, i64 0, i64 0), i64 3) #17
  store i64 %0, i64* @rubyIdPrecomputed_bar, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_puts() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 4) #17
  store i64 %0, i64* @rubyIdPrecomputed_puts, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_test_testdata_llvm_static_method() local_unnamed_addr #12 {
entry:
  %callArgs.i.i.i = alloca [2 x i64], align 8
  %callArgs.i = alloca [1 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8
  %1 = bitcast [1 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1)
  %rubyId_unsafe.i = load i64, i64* @rubyIdPrecomputed_unsafe, align 8
  %rubyId_bar.i = load i64, i64* @rubyIdPrecomputed_bar, align 8
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8
  %2 = tail call i32 @rb_block_given_p() #17
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %typeTestSuccess.i, label %4

4:                                                ; preds = %entry
  %5 = tail call i64 @rb_block_proc() #17
  br label %typeTestSuccess.i

typeTestSuccess.i:                                ; preds = %entry, %4
  %callArgsAddr.i = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs.i, i64 0, i64 0
  store i64 8, i64* %callArgsAddr.i, align 8
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_unsafe.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #17, !noalias !11
  %6 = call i64 @rb_funcallv(i64 8, i64 %rubyId_unsafe.i, i32 1, i64* nonnull %callArgsAddr.i) #17
  %7 = call i64 @rb_define_module(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 0)) #17
  %8 = load i64, i64* @guard_epoch_Foo, align 8
  %9 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !14
  %canTakeFastPath.i.i = icmp eq i64 %8, %9
  br i1 %canTakeFastPath.i.i, label %const_continue.i.i, label %const_slowPath.i.i, !prof !16

const_continue.i.i:                               ; preds = %const_slowPath.i.i, %typeTestSuccess.i
  %10 = load i64, i64* @guarded_const_Foo, align 8
  %11 = bitcast [2 x i64]* %callArgs.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #17
  %rubyId_unsafe.i.i.i = load i64, i64* @rubyIdPrecomputed_unsafe, align 8
  %rubyId_bar.i.i.i = load i64, i64* @rubyIdPrecomputed_bar, align 8
  %12 = call i32 @rb_block_given_p() #17
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %sorbet_getMethodBlockAsProc.exit.i.i.i, label %14

14:                                               ; preds = %const_continue.i.i
  %15 = call i64 @rb_block_proc() #17
  br label %sorbet_getMethodBlockAsProc.exit.i.i.i

sorbet_getMethodBlockAsProc.exit.i.i.i:           ; preds = %14, %const_continue.i.i
  %16 = load i64, i64* @guard_epoch_Foo, align 8
  %17 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !14
  %canTakeFastPath.i.i.i = icmp eq i64 %16, %17
  br i1 %canTakeFastPath.i.i.i, label %const_continue.i.i.i, label %const_slowPath.i.i.i, !prof !16

const_continue.i.i.i:                             ; preds = %const_slowPath.i.i.i, %sorbet_getMethodBlockAsProc.exit.i.i.i
  %18 = load i64, i64* @guarded_const_Foo, align 8
  %19 = icmp eq i64 %18, %10
  br i1 %19, label %typeTestSuccess.i.i.i, label %20

20:                                               ; preds = %const_continue.i.i.i
  %21 = load i64, i64* @rb_cModule, align 8, !tbaa !7
  %22 = call i64 @rb_obj_is_kind_of(i64 %10, i64 %21) #17
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %typeTestFail.i.i.i, label %sorbet_isa_class_of.exit.i.i.i, !prof !17

sorbet_isa_class_of.exit.i.i.i:                   ; preds = %20
  %24 = call i64 @rb_class_inherited_p(i64 %10, i64 %18) #10
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %typeTestFail.i.i.i, label %typeTestSuccess.i.i.i, !prof !0

const_slowPath.i.i.i:                             ; preds = %sorbet_getMethodBlockAsProc.exit.i.i.i
  call void @const_recompute_Foo() #17
  br label %const_continue.i.i.i

typeTestSuccess.i.i.i:                            ; preds = %sorbet_isa_class_of.exit.i.i.i, %const_continue.i.i.i
  %callArgsAddr.i.i.i = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs.i.i.i, i64 0, i64 0
  store i64 8, i64* %callArgsAddr.i.i.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_unsafe.i.i.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #17, !noalias !18
  %26 = call i64 @rb_funcallv(i64 8, i64 %rubyId_unsafe.i.i.i, i32 1, i64* nonnull %callArgsAddr.i.i.i) #17
  %rawSym.i.i.i = call i64 @rb_id2sym(i64 %rubyId_bar.i.i.i) #17
  %27 = load i64, i64* @guard_epoch_Foo, align 8
  %28 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !14
  %canTakeFastPath16.i.i.i = icmp eq i64 %27, %28
  br i1 %canTakeFastPath16.i.i.i, label %"func_<S <C <U <root>>> $1><N <U <static-init>> $111>.exit", label %const_slowPath15.i.i.i, !prof !16

typeTestFail.i.i.i:                               ; preds = %sorbet_isa_class_of.exit.i.i.i, %20
  call fastcc void @sorbet_cast_failure(i64 %10) #17
  unreachable

const_slowPath15.i.i.i:                           ; preds = %typeTestSuccess.i.i.i
  call void @const_recompute_Foo() #17
  br label %"func_<S <C <U <root>>> $1><N <U <static-init>> $111>.exit"

const_slowPath.i.i:                               ; preds = %typeTestSuccess.i
  call void @const_recompute_Foo() #17
  br label %const_continue.i.i

"func_<S <C <U <root>>> $1><N <U <static-init>> $111>.exit": ; preds = %typeTestSuccess.i.i.i, %const_slowPath15.i.i.i
  %29 = load i64, i64* @guarded_const_Foo, align 8
  call void @rb_define_singleton_method(i64 %29, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_bar.5, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"func_<S <C <U Foo>> $1><U bar>" to i64 (...)*), i32 -1) #17
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #17
  call void @dbg_sorbet_validate_id(i64 %rubyId_bar.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #17, !noalias !21
  %30 = call i64 @rb_funcallv(i64 8, i64 %rubyId_bar.i, i32 0, i64* nonnull %callArgsAddr.i) #17
  store i64 %30, i64* %callArgsAddr.i, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #17, !noalias !24
  %31 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgsAddr.i) #17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1)
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_<S <C <U Foo>> $1><U bar>"(i32 %argc, i64* nocapture readnone %argArray, i64 %selfRaw) #13 {
functionEntryInitializers:
  %tooManyArgs = icmp eq i32 %argc, 0
  br i1 %tooManyArgs, label %fillRequiredArgs, label %argCountFailBlock, !prof !16

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_rb_error_arity(i32 %argc)
  unreachable

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %0 = tail call i32 @rb_block_given_p() #17
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %sorbet_getMethodBlockAsProc.exit, label %2

2:                                                ; preds = %fillRequiredArgs
  %3 = tail call i64 @rb_block_proc() #17
  br label %sorbet_getMethodBlockAsProc.exit

sorbet_getMethodBlockAsProc.exit:                 ; preds = %fillRequiredArgs, %2
  %4 = load i64, i64* @guard_epoch_Foo, align 8
  %5 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !14
  %canTakeFastPath = icmp eq i64 %4, %5
  br i1 %canTakeFastPath, label %const_continue, label %const_slowPath, !prof !16

const_continue:                                   ; preds = %const_slowPath, %sorbet_getMethodBlockAsProc.exit
  %6 = load i64, i64* @guarded_const_Foo, align 8
  %7 = icmp eq i64 %6, %selfRaw
  br i1 %7, label %typeTestSuccess, label %8

8:                                                ; preds = %const_continue
  %9 = load i64, i64* @rb_cModule, align 8, !tbaa !7
  %10 = tail call i64 @rb_obj_is_kind_of(i64 %selfRaw, i64 %9) #17
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %typeTestFail, label %sorbet_isa_class_of.exit, !prof !17

sorbet_isa_class_of.exit:                         ; preds = %8
  %12 = tail call i64 @rb_class_inherited_p(i64 %selfRaw, i64 %6) #10
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %typeTestFail, label %typeTestSuccess, !prof !0

const_slowPath:                                   ; preds = %sorbet_getMethodBlockAsProc.exit
  tail call void @const_recompute_Foo() #17
  br label %const_continue

typeTestSuccess:                                  ; preds = %sorbet_isa_class_of.exit, %const_continue
  %14 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_bar.5, i64 0, i64 0), i64 3) #17
  ret i64 %14

typeTestFail:                                     ; preds = %sorbet_isa_class_of.exit, %8
  tail call fastcc void @sorbet_cast_failure(i64 %selfRaw)
  unreachable
}

; Function Attrs: cold ssp
define linkonce void @const_recompute_Foo() local_unnamed_addr #14 {
  %1 = tail call fastcc i64 @sorbet_getConstant()
  store i64 %1, i64* @guarded_const_Foo, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !14
  store i64 %2, i64* @guard_epoch_Foo, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #15

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #15

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { nofree nounwind }
attributes #2 = { cold noreturn }
attributes #3 = { "addedToSilenceEmptyAttrsError" }
attributes #4 = { noinline nounwind ssp uwtable }
attributes #5 = { noreturn }
attributes #6 = { nounwind readnone }
attributes #7 = { cold noreturn nounwind optsize ssp uwtable }
attributes #8 = { noreturn nounwind ssp uwtable }
attributes #9 = { norecurse nounwind readnone ssp uwtable }
attributes #10 = { nounwind readonly }
attributes #11 = { nounwind ssp }
attributes #12 = { nounwind sspreq }
attributes #13 = { nounwind sspreq uwtable }
attributes #14 = { cold ssp }
attributes #15 = { argmemonly nounwind }
attributes #16 = { cold noreturn nounwind }
attributes #17 = { nounwind }
attributes #18 = { noreturn nounwind }

!0 = !{!"branch_weights", i32 1, i32 2000}
!1 = !{!2, !3, i64 0}
!2 = !{!"RBasic", !3, i64 0, !3, i64 8}
!3 = !{!"long", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
!7 = !{!3, !3, i64 0}
!8 = !{!2, !3, i64 8}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !4, i64 0}
!11 = !{!12}
!12 = distinct !{!12, !13, !"sorbet_callFunc: argument 0"}
!13 = distinct !{!13, !"sorbet_callFunc"}
!14 = !{!15, !15, i64 0}
!15 = !{!"long long", !4, i64 0}
!16 = !{!"branch_weights", i32 2000, i32 1}
!17 = !{!"branch_weights", i32 1073205, i32 2146410443}
!18 = !{!19}
!19 = distinct !{!19, !20, !"sorbet_callFunc: argument 0"}
!20 = distinct !{!20, !"sorbet_callFunc"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"sorbet_callFunc: argument 0"}
!23 = distinct !{!23, !"sorbet_callFunc"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"sorbet_callFunc: argument 0"}
!26 = distinct !{!26, !"sorbet_callFunc"}
