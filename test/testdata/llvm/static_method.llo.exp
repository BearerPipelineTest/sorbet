source_filename = "compiler/IRHelpers/payload.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin18.2.0"

%struct.OnigEncodingTypeST = type { i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i8*, i32, i32, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8**, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i32 (i32, i32*, i32, i8*)*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, i8*, %struct.OnigCaseFoldCodeItem*, %struct.OnigEncodingTypeST*)*, i32 (%struct.OnigEncodingTypeST*, i8*, i8*)*, i32 (i32, i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i32*, i32**, %struct.OnigEncodingTypeST*)*, i8* (i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32*, i8**, i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32, i32 }
%struct.OnigCaseFoldCodeItem = type { i32, i32, [3 x i32] }
%struct.RBasic = type { i64, i64 }

@.str = private unnamed_addr constant [16 x i8] c"ERROR: %s is 0\0A\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@wrong_constant_name = internal constant [25 x i8] c"wrong constant name %1$s\00", align 16
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@.str.3 = private unnamed_addr constant [36 x i8] c"%li\0B does not refer to class/module\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"func\00", align 1
@.str.5 = private unnamed_addr constant [50 x i8] c"wrong number of arguments (given %d, expected %d)\00", align 1
@rb_eArgError = external local_unnamed_addr global i64, align 8
@rubyIdPrecomputed_bar = internal unnamed_addr global i64 0, align 8
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@llvm.global_ctors = appending global [2 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_bar, i8* bitcast (i64* @rubyIdPrecomputed_bar to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_puts, i8* bitcast (i64* @rubyIdPrecomputed_puts to i8*) }]
@funcName_bar = private unnamed_addr constant [4 x i8] c"bar\00", align 1
@str_Foo.1 = private unnamed_addr constant [4 x i8] c"Foo\00", align 1

; Function Attrs: nounwind ssp uwtable
define weak void @dbg_sorbet_validate_id(i64, i8*) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %4, label %6, !prof !0

; <label>:4:                                      ; preds = %2
  %5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %1)
  tail call void @abort() #11
  unreachable

; <label>:6:                                      ; preds = %2
  ret void
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: cold noreturn
declare void @abort() local_unnamed_addr #2

declare i64 @rb_str_new(i8*, i64) local_unnamed_addr #3

declare i64 @rb_intern(i8*) local_unnamed_addr #3

declare i64 @rb_id2sym(i64) local_unnamed_addr #3

declare %struct.OnigEncodingTypeST* @rb_enc_get(i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @rb_exc_raise(i64) local_unnamed_addr #4

declare i64 @rb_name_err_new(i64, i64, i64) local_unnamed_addr #3

declare i64 @rb_fstring_cstr(i8*) local_unnamed_addr #3

declare i64 @rb_check_id_cstr(i8*, i64, %struct.OnigEncodingTypeST*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #4

declare i64 @rb_str_quote_unprintable(i64) local_unnamed_addr #3

declare i64 @rb_str_subseq(i64, i64, i64) local_unnamed_addr #3

declare i32 @rb_is_const_name(i64) local_unnamed_addr #3

declare i32 @rb_method_basic_definition_p(i64, i64) local_unnamed_addr #3

declare i64 @rb_str_intern(i64) local_unnamed_addr #3

declare i64 @rb_const_missing(i64, i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare i64 @rb_mod_const_missing(i64, i64) local_unnamed_addr #4

; Function Attrs: nounwind readnone
declare i32 @rb_is_const_id(i64) local_unnamed_addr #5

declare i64 @rb_const_get(i64, i64) local_unnamed_addr #3

declare i64 @rb_const_get_from(i64, i64) local_unnamed_addr #3

declare i64 @rb_define_module(i8*) local_unnamed_addr #3

declare void @rb_define_singleton_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #3

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @sorbet_rb_arity_error_new(i32) unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.5, i64 0, i64 0), i32 %0, i32 0) #1
  %3 = load i64, i64* @rb_eArgError, align 8, !tbaa !1
  %4 = tail call i64 @rb_exc_new_str(i64 %3, i64 %2) #1
  ret i64 %4
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #3

declare i64 @rb_exc_new_str(i64, i64) local_unnamed_addr #3

; Function Attrs: noreturn nounwind ssp uwtable
define internal fastcc void @sorbet_rb_error_arity(i32) unnamed_addr #6 {
  %2 = tail call fastcc i64 @sorbet_rb_arity_error_new(i32 %0)
  tail call void @rb_exc_raise(i64 %2) #12
  unreachable
}

declare void @rb_freeze_singleton_class(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_bar() #7 {
constr:
  %0 = tail call i64 @rb_intern(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @funcName_bar, i64 0, i64 0)) #1
  store i64 %0, i64* @rubyIdPrecomputed_bar, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_puts() #7 {
constr:
  %0 = tail call i64 @rb_intern(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0)) #1
  store i64 %0, i64* @rubyIdPrecomputed_puts, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_static_method() local_unnamed_addr #8 {
entry:
  %callArgs.i = alloca [1 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8, !tbaa !1
  %1 = bitcast [1 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1)
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8
  %rubyId_bar.i = load i64, i64* @rubyIdPrecomputed_bar, align 8
  %2 = tail call i64 @rb_define_module(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 0)) #1
  %3 = tail call i64 @rb_intern(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 0)) #1
  %4 = tail call i64 @rb_id2sym(i64 %3) #1
  %5 = tail call %struct.OnigEncodingTypeST* @rb_enc_get(i64 %4) #1
  br label %9

.loopexit13.i.i.i.i:                              ; preds = %rb_obj_freeze_inline.exit.i.i.i.i, %35, %32, %.loopexit.i.i.i.i, %93
  %6 = phi i64 [ %94, %93 ], [ %58, %rb_obj_freeze_inline.exit.i.i.i.i ], [ %4, %35 ], [ %4, %32 ], [ %4, %.loopexit.i.i.i.i ]
  %7 = tail call i64 @rb_fstring_cstr(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @wrong_constant_name, i64 0, i64 0)) #1
  %8 = tail call i64 @rb_name_err_new(i64 %7, i64 %10, i64 %6) #1
  tail call void @rb_exc_raise(i64 %8) #12
  unreachable

; <label>:9:                                      ; preds = %101, %entry
  %10 = phi i64 [ %102, %101 ], [ %0, %entry ]
  %11 = phi i8* [ %41, %101 ], [ getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 0), %entry ]
  %12 = phi i8* [ %40, %101 ], [ getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 0), %entry ]
  %13 = icmp ult i8* %12, getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 3)
  br i1 %13, label %.preheader.i.i.i.i, label %.loopexit.i.i.i.i

.preheader.i.i.i.i:                               ; preds = %9, %17
  %14 = phi i8* [ %18, %17 ], [ %12, %9 ]
  %15 = load i8, i8* %14, align 1, !tbaa !5
  %16 = icmp eq i8 %15, 58
  br i1 %16, label %.loopexit.i.i.i.i, label %17

; <label>:17:                                     ; preds = %.preheader.i.i.i.i
  %18 = getelementptr inbounds i8, i8* %14, i64 1
  %19 = icmp ult i8* %18, getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 3)
  br i1 %19, label %.preheader.i.i.i.i, label %.loopexit.i.i.i.i

.loopexit.i.i.i.i:                                ; preds = %17, %.preheader.i.i.i.i, %9
  %20 = phi i8* [ %12, %9 ], [ %14, %.preheader.i.i.i.i ], [ %18, %17 ]
  %21 = phi i1 [ false, %9 ], [ true, %.preheader.i.i.i.i ], [ false, %17 ]
  %22 = icmp eq i8* %11, %20
  br i1 %22, label %.loopexit13.i.i.i.i, label %23

; <label>:23:                                     ; preds = %.loopexit.i.i.i.i
  %24 = ptrtoint i8* %20 to i64
  %25 = ptrtoint i8* %11 to i64
  %26 = sub i64 %24, %25
  %27 = tail call i64 @rb_check_id_cstr(i8* %11, i64 %26, %struct.OnigEncodingTypeST* %5) #1
  %28 = sub i64 %25, ptrtoint ([4 x i8]* @str_Foo.1 to i64)
  br i1 %21, label %29, label %39

; <label>:29:                                     ; preds = %23
  %30 = load i8, i8* %20, align 1, !tbaa !5
  %31 = icmp eq i8 %30, 58
  br i1 %31, label %32, label %39

; <label>:32:                                     ; preds = %29
  %33 = getelementptr inbounds i8, i8* %20, i64 2
  %34 = icmp ult i8* %33, getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 3)
  br i1 %34, label %35, label %.loopexit13.i.i.i.i

; <label>:35:                                     ; preds = %32
  %36 = getelementptr inbounds i8, i8* %20, i64 1
  %37 = load i8, i8* %36, align 1, !tbaa !5
  %38 = icmp eq i8 %37, 58
  br i1 %38, label %39, label %.loopexit13.i.i.i.i

; <label>:39:                                     ; preds = %35, %29, %23
  %40 = phi i8* [ %20, %29 ], [ %20, %23 ], [ %33, %35 ]
  %41 = phi i8* [ %11, %29 ], [ %11, %23 ], [ %33, %35 ]
  %42 = and i64 %10, 7
  %43 = icmp ne i64 %42, 0
  %44 = and i64 %10, -9
  %45 = icmp eq i64 %44, 0
  %46 = or i1 %43, %45
  br i1 %46, label %52, label %47

; <label>:47:                                     ; preds = %39
  %48 = inttoptr i64 %10 to %struct.RBasic*
  %49 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %48, i64 0, i32 0
  %50 = load i64, i64* %49, align 8, !tbaa !6
  %51 = and i64 %50, 30
  %switch.i.i.i.i = icmp eq i64 %51, 2
  br i1 %switch.i.i.i.i, label %55, label %52

; <label>:52:                                     ; preds = %47, %39
  %53 = load i64, i64* @rb_eTypeError, align 8, !tbaa !1
  %54 = tail call i64 @rb_str_quote_unprintable(i64 %4) #1
  tail call void (i64, i8*, ...) @rb_raise(i64 %53, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0), i64 %54) #12
  unreachable

; <label>:55:                                     ; preds = %47
  %56 = icmp eq i64 %27, 0
  br i1 %56, label %57, label %90

; <label>:57:                                     ; preds = %55
  %58 = tail call i64 @rb_str_subseq(i64 %4, i64 %28, i64 %26) #1
  %59 = and i64 %58, 7
  %60 = icmp ne i64 %59, 0
  %61 = and i64 %58, -9
  %62 = icmp eq i64 %61, 0
  %63 = or i1 %60, %62
  br i1 %63, label %rb_obj_freeze_inline.exit.i.i.i.i, label %64

; <label>:64:                                     ; preds = %57
  %65 = inttoptr i64 %58 to %struct.RBasic*
  %66 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %65, i64 0, i32 0
  %67 = load i64, i64* %66, align 8, !tbaa !6
  %68 = and i64 %67, 31
  %69 = icmp eq i64 %68, 27
  br i1 %69, label %rb_obj_freeze_inline.exit.i.i.i.i, label %70

; <label>:70:                                     ; preds = %64
  %71 = or i64 %67, 2048
  store i64 %71, i64* %66, align 8, !tbaa !6
  %72 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %65, i64 0, i32 1
  %73 = load i64, i64* %72, align 8, !tbaa !8
  %74 = icmp ne i64 %73, 0
  %75 = and i64 %67, 4096
  %76 = icmp eq i64 %75, 0
  %77 = and i1 %76, %74
  br i1 %77, label %78, label %rb_obj_freeze_inline.exit.i.i.i.i

; <label>:78:                                     ; preds = %70
  tail call void @rb_freeze_singleton_class(i64 %58) #1
  br label %rb_obj_freeze_inline.exit.i.i.i.i

rb_obj_freeze_inline.exit.i.i.i.i:                ; preds = %78, %70, %64, %57
  %79 = tail call i32 @rb_is_const_name(i64 %58) #1
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %.loopexit13.i.i.i.i, label %rb_class_of.exit.i.i.i.i

rb_class_of.exit.i.i.i.i:                         ; preds = %rb_obj_freeze_inline.exit.i.i.i.i
  %81 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %48, i64 0, i32 1
  %82 = load i64, i64* %81, align 8, !tbaa !1
  %83 = tail call i32 @rb_method_basic_definition_p(i64 %82, i64 2817) #1
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %88

; <label>:85:                                     ; preds = %rb_class_of.exit.i.i.i.i
  %86 = tail call i64 @rb_str_intern(i64 %58) #1
  %87 = tail call i64 @rb_const_missing(i64 %10, i64 %86) #1
  br label %101

; <label>:88:                                     ; preds = %rb_class_of.exit.i.i.i.i
  %89 = tail call i64 @rb_mod_const_missing(i64 %10, i64 %58) #12
  unreachable

; <label>:90:                                     ; preds = %55
  %91 = tail call i32 @rb_is_const_id(i64 %27) #5
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %95

; <label>:93:                                     ; preds = %90
  %94 = tail call i64 @rb_id2sym(i64 %27) #1
  br label %.loopexit13.i.i.i.i

; <label>:95:                                     ; preds = %90
  %96 = icmp eq i64 %28, 0
  br i1 %96, label %97, label %99

; <label>:97:                                     ; preds = %95
  %98 = tail call i64 @rb_const_get(i64 %10, i64 %27) #1
  br label %101

; <label>:99:                                     ; preds = %95
  %100 = tail call i64 @rb_const_get_from(i64 %10, i64 %27) #1
  br label %101

; <label>:101:                                    ; preds = %99, %97, %85
  %102 = phi i64 [ %87, %85 ], [ %98, %97 ], [ %100, %99 ]
  %103 = icmp ult i8* %40, getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 3)
  br i1 %103, label %9, label %"Init_<S <C <U Foo>> $1><U <static-init>>.exit.i"

"Init_<S <C <U Foo>> $1><U <static-init>>.exit.i": ; preds = %101
  tail call void @rb_define_singleton_method(i64 %102, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @funcName_bar, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"<S <C <U Foo>> $1><U bar>" to i64 (...)*), i32 -1) #1
  %104 = tail call i64 @rb_intern(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 0)) #1
  %105 = tail call i64 @rb_id2sym(i64 %104) #1
  %106 = tail call %struct.OnigEncodingTypeST* @rb_enc_get(i64 %105) #1
  br label %110

.loopexit13.i.i:                                  ; preds = %rb_obj_freeze_inline.exit.i.i, %136, %133, %.loopexit.i.i, %194
  %107 = phi i64 [ %195, %194 ], [ %159, %rb_obj_freeze_inline.exit.i.i ], [ %105, %136 ], [ %105, %133 ], [ %105, %.loopexit.i.i ]
  %108 = tail call i64 @rb_fstring_cstr(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @wrong_constant_name, i64 0, i64 0)) #1
  %109 = tail call i64 @rb_name_err_new(i64 %108, i64 %111, i64 %107) #1
  tail call void @rb_exc_raise(i64 %109) #12
  unreachable

; <label>:110:                                    ; preds = %202, %"Init_<S <C <U Foo>> $1><U <static-init>>.exit.i"
  %111 = phi i64 [ %203, %202 ], [ %0, %"Init_<S <C <U Foo>> $1><U <static-init>>.exit.i" ]
  %112 = phi i8* [ %142, %202 ], [ getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 0), %"Init_<S <C <U Foo>> $1><U <static-init>>.exit.i" ]
  %113 = phi i8* [ %141, %202 ], [ getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 0), %"Init_<S <C <U Foo>> $1><U <static-init>>.exit.i" ]
  %114 = icmp ult i8* %113, getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 3)
  br i1 %114, label %.preheader.i.i, label %.loopexit.i.i

.preheader.i.i:                                   ; preds = %110, %118
  %115 = phi i8* [ %119, %118 ], [ %113, %110 ]
  %116 = load i8, i8* %115, align 1, !tbaa !5
  %117 = icmp eq i8 %116, 58
  br i1 %117, label %.loopexit.i.i, label %118

; <label>:118:                                    ; preds = %.preheader.i.i
  %119 = getelementptr inbounds i8, i8* %115, i64 1
  %120 = icmp ult i8* %119, getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 3)
  br i1 %120, label %.preheader.i.i, label %.loopexit.i.i

.loopexit.i.i:                                    ; preds = %118, %.preheader.i.i, %110
  %121 = phi i8* [ %113, %110 ], [ %115, %.preheader.i.i ], [ %119, %118 ]
  %122 = phi i1 [ false, %110 ], [ true, %.preheader.i.i ], [ false, %118 ]
  %123 = icmp eq i8* %112, %121
  br i1 %123, label %.loopexit13.i.i, label %124

; <label>:124:                                    ; preds = %.loopexit.i.i
  %125 = ptrtoint i8* %121 to i64
  %126 = ptrtoint i8* %112 to i64
  %127 = sub i64 %125, %126
  %128 = tail call i64 @rb_check_id_cstr(i8* %112, i64 %127, %struct.OnigEncodingTypeST* %106) #1
  %129 = sub i64 %126, ptrtoint ([4 x i8]* @str_Foo.1 to i64)
  br i1 %122, label %130, label %140

; <label>:130:                                    ; preds = %124
  %131 = load i8, i8* %121, align 1, !tbaa !5
  %132 = icmp eq i8 %131, 58
  br i1 %132, label %133, label %140

; <label>:133:                                    ; preds = %130
  %134 = getelementptr inbounds i8, i8* %121, i64 2
  %135 = icmp ult i8* %134, getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 3)
  br i1 %135, label %136, label %.loopexit13.i.i

; <label>:136:                                    ; preds = %133
  %137 = getelementptr inbounds i8, i8* %121, i64 1
  %138 = load i8, i8* %137, align 1, !tbaa !5
  %139 = icmp eq i8 %138, 58
  br i1 %139, label %140, label %.loopexit13.i.i

; <label>:140:                                    ; preds = %136, %130, %124
  %141 = phi i8* [ %121, %130 ], [ %121, %124 ], [ %134, %136 ]
  %142 = phi i8* [ %112, %130 ], [ %112, %124 ], [ %134, %136 ]
  %143 = and i64 %111, 7
  %144 = icmp ne i64 %143, 0
  %145 = and i64 %111, -9
  %146 = icmp eq i64 %145, 0
  %147 = or i1 %144, %146
  br i1 %147, label %153, label %148

; <label>:148:                                    ; preds = %140
  %149 = inttoptr i64 %111 to %struct.RBasic*
  %150 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %149, i64 0, i32 0
  %151 = load i64, i64* %150, align 8, !tbaa !6
  %152 = and i64 %151, 30
  %switch.i.i = icmp eq i64 %152, 2
  br i1 %switch.i.i, label %156, label %153

; <label>:153:                                    ; preds = %148, %140
  %154 = load i64, i64* @rb_eTypeError, align 8, !tbaa !1
  %155 = tail call i64 @rb_str_quote_unprintable(i64 %105) #1
  tail call void (i64, i8*, ...) @rb_raise(i64 %154, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0), i64 %155) #12
  unreachable

; <label>:156:                                    ; preds = %148
  %157 = icmp eq i64 %128, 0
  br i1 %157, label %158, label %191

; <label>:158:                                    ; preds = %156
  %159 = tail call i64 @rb_str_subseq(i64 %105, i64 %129, i64 %127) #1
  %160 = and i64 %159, 7
  %161 = icmp ne i64 %160, 0
  %162 = and i64 %159, -9
  %163 = icmp eq i64 %162, 0
  %164 = or i1 %161, %163
  br i1 %164, label %rb_obj_freeze_inline.exit.i.i, label %165

; <label>:165:                                    ; preds = %158
  %166 = inttoptr i64 %159 to %struct.RBasic*
  %167 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %166, i64 0, i32 0
  %168 = load i64, i64* %167, align 8, !tbaa !6
  %169 = and i64 %168, 31
  %170 = icmp eq i64 %169, 27
  br i1 %170, label %rb_obj_freeze_inline.exit.i.i, label %171

; <label>:171:                                    ; preds = %165
  %172 = or i64 %168, 2048
  store i64 %172, i64* %167, align 8, !tbaa !6
  %173 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %166, i64 0, i32 1
  %174 = load i64, i64* %173, align 8, !tbaa !8
  %175 = icmp ne i64 %174, 0
  %176 = and i64 %168, 4096
  %177 = icmp eq i64 %176, 0
  %178 = and i1 %177, %175
  br i1 %178, label %179, label %rb_obj_freeze_inline.exit.i.i

; <label>:179:                                    ; preds = %171
  tail call void @rb_freeze_singleton_class(i64 %159) #1
  br label %rb_obj_freeze_inline.exit.i.i

rb_obj_freeze_inline.exit.i.i:                    ; preds = %179, %171, %165, %158
  %180 = tail call i32 @rb_is_const_name(i64 %159) #1
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %.loopexit13.i.i, label %rb_class_of.exit.i.i

rb_class_of.exit.i.i:                             ; preds = %rb_obj_freeze_inline.exit.i.i
  %182 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %149, i64 0, i32 1
  %183 = load i64, i64* %182, align 8, !tbaa !1
  %184 = tail call i32 @rb_method_basic_definition_p(i64 %183, i64 2817) #1
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %186, label %189

; <label>:186:                                    ; preds = %rb_class_of.exit.i.i
  %187 = tail call i64 @rb_str_intern(i64 %159) #1
  %188 = tail call i64 @rb_const_missing(i64 %111, i64 %187) #1
  br label %202

; <label>:189:                                    ; preds = %rb_class_of.exit.i.i
  %190 = tail call i64 @rb_mod_const_missing(i64 %111, i64 %159) #12
  unreachable

; <label>:191:                                    ; preds = %156
  %192 = tail call i32 @rb_is_const_id(i64 %128) #5
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %194, label %196

; <label>:194:                                    ; preds = %191
  %195 = tail call i64 @rb_id2sym(i64 %128) #1
  br label %.loopexit13.i.i

; <label>:196:                                    ; preds = %191
  %197 = icmp eq i64 %129, 0
  br i1 %197, label %198, label %200

; <label>:198:                                    ; preds = %196
  %199 = tail call i64 @rb_const_get(i64 %111, i64 %128) #1
  br label %202

; <label>:200:                                    ; preds = %196
  %201 = tail call i64 @rb_const_get_from(i64 %111, i64 %128) #1
  br label %202

; <label>:202:                                    ; preds = %200, %198, %186
  %203 = phi i64 [ %188, %186 ], [ %199, %198 ], [ %201, %200 ]
  %204 = icmp ult i8* %141, getelementptr inbounds ([4 x i8], [4 x i8]* @str_Foo.1, i64 0, i64 3)
  br i1 %204, label %110, label %"<S <C <U <root>>> $1><N <U <static-init>> $110>.exit"

"<S <C <U <root>>> $1><N <U <static-init>> $110>.exit": ; preds = %202
  %205 = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs.i, i64 0, i64 0
  tail call void @dbg_sorbet_validate_id(i64 %rubyId_bar.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #1, !noalias !9
  %206 = call i64 @rb_funcallv(i64 %203, i64 %rubyId_bar.i, i32 0, i64* nonnull %205) #1
  store i64 %206, i64* %205, align 8
  call void @dbg_sorbet_validate_id(i64 %rubyId_puts.i, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0)) #1, !noalias !12
  %207 = call i64 @rb_funcallv(i64 %0, i64 %rubyId_puts.i, i32 1, i64* nonnull %205) #1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1)
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"<S <C <U Foo>> $1><U bar>"(i32, i64* nocapture readnone, i64) #9 {
functionEntryInitializers:
  %isWrongArgCount = icmp eq i32 %0, 0
  br i1 %isWrongArgCount, label %argCountSuccess, label %argCountFailBlock

argCountSuccess:                                  ; preds = %functionEntryInitializers
  %3 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @funcName_bar, i64 0, i64 0), i64 3) #1
  ret i64 %3

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_rb_error_arity(i32 %0)
  unreachable
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #10

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #10

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { nounwind }
attributes #2 = { cold noreturn }
attributes #3 = { "addedToSilenceEmptyAttrsError" }
attributes #4 = { noreturn }
attributes #5 = { nounwind readnone }
attributes #6 = { noreturn nounwind ssp uwtable }
attributes #7 = { nounwind ssp }
attributes #8 = { nounwind sspreq }
attributes #9 = { nounwind sspreq uwtable }
attributes #10 = { argmemonly nounwind }
attributes #11 = { cold noreturn nounwind }
attributes #12 = { noreturn nounwind }

!0 = !{!"branch_weights", i32 1, i32 2000}
!1 = !{!2, !2, i64 0}
!2 = !{!"long", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!3, !3, i64 0}
!6 = !{!7, !2, i64 0}
!7 = !{!"RBasic", !2, i64 0, !2, i64 8}
!8 = !{!7, !2, i64 8}
!9 = !{!10}
!10 = distinct !{!10, !11, !"sorbet_callFunc: argument 0"}
!11 = distinct !{!11, !"sorbet_callFunc"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"sorbet_callFunc: argument 0"}
!14 = distinct !{!14, !"sorbet_callFunc"}
