; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_data_type_struct = type { i8*, %struct.anon.19, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.19 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.18 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.15 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon.1, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_info*, %struct.rb_call_cache*, %struct.anon.14, i32, i32, i32, i32, i32, i8 }
%struct.anon.1 = type { %struct.anon.2, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.2 = type { i8, [3 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.rb_code_position_struct*, i32*, i32, %struct.succ_index_table* }
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, %union.anon.0 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.anon.2 }
%union.anon.0 = type { i64 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.rb_call_cache = type { i64, i64, %struct.rb_callable_method_entry_struct*, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_info*, %struct.rb_call_cache*)*, %union.anon.13 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon.12, i64 }
%union.anon.12 = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64 (...)*, i64, i32, i64*)*, i32 }
%struct.rb_calling_info = type { i64, i64, i32 }
%union.anon.13 = type { i32 }
%struct.anon.14 = type { i64, i64, i64, i64* }
%union.anon.15 = type { %struct.anon.16 }
%struct.anon.16 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [38 x i32], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_fiber_struct = type opaque
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, %struct._opaque_pthread_t*, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %struct._opaque_pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.8, i32, i64, %struct.rb_fiber_struct*, [38 x i32], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %struct._opaque_pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.4, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %struct._opaque_pthread_mutex_t, i64, i64, i64, i64, i64, i32, i64, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.anon.5, [28 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %struct._opaque_pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %struct._opaque_pthread_cond_t, %struct._opaque_pthread_cond_t, i32, i32 }
%struct._opaque_pthread_cond_t = type { i64, [40 x i8] }
%struct.anon.4 = type { [32 x i64], [32 x i8] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.anon.5 = type { i64, i64, i64, i64 }
%struct._opaque_pthread_t = type { i64, %struct.__darwin_pthread_handler_rec*, [8176 x i8] }
%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }
%struct.native_thread_data_struct = type { %struct.list_head, %struct.anon.7 }
%struct.anon.7 = type { %struct._opaque_pthread_cond_t, %struct._opaque_pthread_cond_t }
%struct._opaque_pthread_mutex_t = type { i64, [56 x i8] }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.8 = type { %struct.RBasic }
%struct.RBasic = type { i64, i64 }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (...)*, i64 (...)* }
%struct.st_table_entry = type opaque
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (...)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.18 = type { i64*, i64*, i64, [37 x i32] }
%struct.RString = type { %struct.RBasic, %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { i64, i8*, %union.anon.0 }
%struct.OnigEncodingTypeST = type { i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i8*, i32, i32, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8**, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i32 (i32, i32*, i32, i8*)*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, i8*, %struct.OnigCaseFoldCodeItem*, %struct.OnigEncodingTypeST*)*, i32 (%struct.OnigEncodingTypeST*, i8*, i8*)*, i32 (i32, i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i32*, i32**, %struct.OnigEncodingTypeST*)*, i8* (i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32*, i8**, i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32, i32 }
%struct.OnigCaseFoldCodeItem = type { i32, i32, [3 x i32] }
%struct.rb_ast_body_struct = type { %struct.RNode*, i64, i32 }
%struct.RNode = type { i64, %union.anon.20, %union.anon.20, %union.anon.20, %struct.rb_code_location_struct, i32 }
%union.anon.20 = type { %struct.RNode* }
%struct.RFloat = type { %struct.RBasic, double }
%struct.RTypedData = type { %struct.RBasic, %struct.rb_data_type_struct*, i64, i8* }
%struct.sorbet_Closure = type { i32, [0 x i64] }

@closureInfo = constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i32 0, i32 0), %struct.anon.19 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@.str.9 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@.str = private unnamed_addr constant [5 x i8] c"%li\0B\00", align 1
@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@rb_cObject = external local_unnamed_addr constant i64, align 8
@ruby_vm_global_constant_state = external local_unnamed_addr global i64, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.1 = private unnamed_addr constant [29 x i8] c"wrong constant name %li\0B%li\0B\00", align 1
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@.str.2 = private unnamed_addr constant [36 x i8] c"%li\0B does not refer to class/module\00", align 1
@sorbet_getConstantAt.rb_intern_id_cache = internal unnamed_addr global i64 0, align 8
@.str.3 = private unnamed_addr constant [14 x i8] c"const_missing\00", align 1
@.str.5 = private unnamed_addr constant [50 x i8] c"wrong number of arguments (given %d, expected %d)\00", align 1
@rb_eArgError = external local_unnamed_addr global i64, align 8
@.str.8 = private unnamed_addr constant [45 x i8] c"%s: Expected type %s, got %s with value %li\0B\00", align 1
@rb_cData = external local_unnamed_addr constant i64, align 8
@rb_cModule = external local_unnamed_addr constant i64, align 8
@"stackFramePrecomputed_func_<root>.<static-init>$111" = internal unnamed_addr global i8* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"str_test/testdata/ruby_benchmark/app_fib.rb" = private unnamed_addr constant [40 x i8] c"test/testdata/ruby_benchmark/app_fib.rb\00", align 1
@str_cast = private unnamed_addr constant [5 x i8] c"cast\00", align 1
@rubyIdPrecomputed_unsafe = internal unnamed_addr global i64 0, align 8
@str_unsafe = private unnamed_addr constant [7 x i8] c"unsafe\00", align 1
@str_HasFib = private unnamed_addr constant [7 x i8] c"HasFib\00", align 1
@rubyIdPrecomputed_fib = internal unnamed_addr global i64 0, align 8
@str_fib = private unnamed_addr constant [4 x i8] c"fib\00", align 1
@stackFramePrecomputed_func_HasFib.fib = internal unnamed_addr global i8* null, align 8
@str_sig = private unnamed_addr constant [4 x i8] c"sig\00", align 1
@str_Integer = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@"str_T.class_of(HasFib)" = private unnamed_addr constant [19 x i8] c"T.class_of(HasFib)\00", align 1
@"rubyIdPrecomputed_<" = internal unnamed_addr global i64 0, align 8
@"str_<" = private unnamed_addr constant [2 x i8] c"<\00", align 1
@rubyIdPrecomputed_- = internal unnamed_addr global i64 0, align 8
@str_- = private unnamed_addr constant [2 x i8] c"-\00", align 1
@"rubyIdPrecomputed_+" = internal unnamed_addr global i64 0, align 8
@"str_+" = private unnamed_addr constant [2 x i8] c"+\00", align 1
@"stackFramePrecomputed_func_HasFib.<static-init>" = internal unnamed_addr global i8* null, align 8
@rubyIdPrecomputed_final = internal unnamed_addr global i64 0, align 8
@str_final = private unnamed_addr constant [6 x i8] c"final\00", align 1
@rubyIdPrecomputed_sig = internal unnamed_addr global i64 0, align 8
@"str_T::Sig::WithoutRuntime" = private unnamed_addr constant [23 x i8] c"T::Sig::WithoutRuntime\00", align 1
@rubyIdPrecomputed_n = internal unnamed_addr global i64 0, align 8
@str_n = private unnamed_addr constant [2 x i8] c"n\00", align 1
@rubyIdPrecomputed_params = internal unnamed_addr global i64 0, align 8
@str_params = private unnamed_addr constant [7 x i8] c"params\00", align 1
@rubyIdPrecomputed_returns = internal unnamed_addr global i64 0, align 8
@str_returns = private unnamed_addr constant [8 x i8] c"returns\00", align 1
@llvm.global_ctors = appending global [14 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_<top (required)>", i8* bitcast (i64* @"rubyIdPrecomputed_<top (required)>" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_stackFramePrecomputed_func_<root>.<static-init>$111", i8* bitcast (i8** @"stackFramePrecomputed_func_<root>.<static-init>$111" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_unsafe, i8* bitcast (i64* @rubyIdPrecomputed_unsafe to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_fib, i8* bitcast (i64* @rubyIdPrecomputed_fib to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_stackFramePrecomputed_func_HasFib.fib, i8* bitcast (i8** @stackFramePrecomputed_func_HasFib.fib to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_<", i8* bitcast (i64* @"rubyIdPrecomputed_<" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_-, i8* bitcast (i64* @rubyIdPrecomputed_- to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_+", i8* bitcast (i64* @"rubyIdPrecomputed_+" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_stackFramePrecomputed_func_HasFib.<static-init>", i8* bitcast (i8** @"stackFramePrecomputed_func_HasFib.<static-init>" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_final, i8* bitcast (i64* @rubyIdPrecomputed_final to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_sig, i8* bitcast (i64* @rubyIdPrecomputed_sig to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_n, i8* bitcast (i64* @rubyIdPrecomputed_n to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_params, i8* bitcast (i64* @rubyIdPrecomputed_params to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_returns, i8* bitcast (i64* @rubyIdPrecomputed_returns to i8*) }]
@guard_epoch_HasFib = linkonce local_unnamed_addr global i64 0
@guarded_const_HasFib = linkonce local_unnamed_addr global i64 0
@"guard_epoch_T::Sig::WithoutRuntime" = linkonce local_unnamed_addr global i64 0
@"guarded_const_T::Sig::WithoutRuntime" = linkonce local_unnamed_addr global i64 0
@rb_cInteger = external local_unnamed_addr constant i64

declare i64 @rb_str_intern(i64) local_unnamed_addr #0

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8* %0) #1 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !0
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #20
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly %0) #2 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !0
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #0

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_pi(i64 %0) local_unnamed_addr #1 {
  %2 = tail call i8* @rb_id2name(i64 %0) #20
  ret i8* %2
}

declare i8* @rb_id2name(i64) local_unnamed_addr #0

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_p(i64 %0) local_unnamed_addr #1 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 %0) #20
  %3 = inttoptr i64 %2 to %struct.RBasic*
  %4 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !4
  %6 = and i64 %5, 8192
  %7 = icmp eq i64 %6, 0
  %8 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 %0) #20
  %9 = inttoptr i64 %8 to %struct.RString*
  br i1 %7, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !7
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i8* [ %12, %10 ], [ %15, %13 ]
  ret i8* %17
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #0

; Function Attrs: nounwind ssp uwtable
define void @stopInDebugger() local_unnamed_addr #1 {
  tail call void asm sideeffect "int $$3", "~{dirflag},~{fpsr},~{flags}"() #20, !srcloc !8
  ret void
}

declare i64 @rb_float_new_in_heap(double) local_unnamed_addr #0

declare i64 @rb_str_new(i8*, i64) local_unnamed_addr #0

declare void @rb_ary_detransient(i64) local_unnamed_addr #0

declare i64 @rb_hash_new() local_unnamed_addr #0

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #0

declare i64 @rb_id2sym(i64) local_unnamed_addr #0

declare i8* @rb_obj_classname(i64) local_unnamed_addr #0

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @sorbet_getConstantAt(i64 %0, i64 %1) unnamed_addr #3 {
  %3 = tail call i64 @rb_id2sym(i64 %1) #20
  %4 = tail call %struct.OnigEncodingTypeST* @rb_enc_get(i64 %3) #20
  %5 = tail call i8* @rb_id2name(i64 %1) #20
  %6 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %5)
  %7 = getelementptr inbounds i8, i8* %5, i64 %6
  %8 = icmp sgt i64 %6, 0
  br i1 %8, label %9, label %.loopexit11

9:                                                ; preds = %2
  %10 = ptrtoint i8* %5 to i64
  br label %13

.loopexit10:                                      ; preds = %91, %44, %41, %28, %107
  %11 = phi i64 [ %108, %107 ], [ %3, %28 ], [ %3, %44 ], [ %3, %41 ], [ %66, %91 ]
  %12 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !9
  tail call void (i64, i8*, ...) @rb_raise(i64 %12, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i64 %14, i64 %11) #21
  unreachable

13:                                               ; preds = %115, %9
  %14 = phi i64 [ %0, %9 ], [ %116, %115 ]
  %15 = phi i8* [ %5, %9 ], [ %50, %115 ]
  %16 = phi i8* [ %5, %9 ], [ %49, %115 ]
  %17 = icmp ult i8* %16, %7
  br i1 %17, label %18, label %28

18:                                               ; preds = %13
  %19 = load i8, i8* %16, align 1, !tbaa !7
  %20 = icmp eq i8 %19, 58
  br i1 %20, label %28, label %.preheader

21:                                               ; preds = %.preheader
  %22 = load i8, i8* %25, align 1, !tbaa !7
  %23 = icmp eq i8 %22, 58
  br i1 %23, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %18, %21
  %24 = phi i8* [ %25, %21 ], [ %16, %18 ]
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  %26 = icmp eq i8* %25, %7
  br i1 %26, label %.loopexit, label %21

.loopexit:                                        ; preds = %21, %.preheader
  %.lcssa = phi i8* [ %25, %21 ], [ %7, %.preheader ]
  %27 = icmp ult i8* %.lcssa, %7
  br label %28

28:                                               ; preds = %.loopexit, %18, %13
  %29 = phi i8* [ %16, %13 ], [ %16, %18 ], [ %.lcssa, %.loopexit ]
  %30 = phi i1 [ false, %13 ], [ true, %18 ], [ %27, %.loopexit ]
  %31 = icmp eq i8* %15, %29
  br i1 %31, label %.loopexit10, label %32

32:                                               ; preds = %28
  %33 = ptrtoint i8* %29 to i64
  %34 = ptrtoint i8* %15 to i64
  %35 = sub i64 %33, %34
  %36 = tail call i64 @rb_check_id_cstr(i8* %15, i64 %35, %struct.OnigEncodingTypeST* %4) #20
  %37 = sub i64 %34, %10
  br i1 %30, label %38, label %48

38:                                               ; preds = %32
  %39 = load i8, i8* %29, align 1, !tbaa !7
  %40 = icmp eq i8 %39, 58
  br i1 %40, label %41, label %48

41:                                               ; preds = %38
  %42 = getelementptr inbounds i8, i8* %29, i64 2
  %43 = icmp ult i8* %42, %7
  br i1 %43, label %44, label %.loopexit10

44:                                               ; preds = %41
  %45 = getelementptr inbounds i8, i8* %29, i64 1
  %46 = load i8, i8* %45, align 1, !tbaa !7
  %47 = icmp eq i8 %46, 58
  br i1 %47, label %48, label %.loopexit10

48:                                               ; preds = %44, %38, %32
  %49 = phi i8* [ %29, %38 ], [ %29, %32 ], [ %42, %44 ]
  %50 = phi i8* [ %15, %38 ], [ %15, %32 ], [ %42, %44 ]
  %51 = and i64 %14, 7
  %52 = icmp ne i64 %51, 0
  %53 = and i64 %14, -9
  %54 = icmp eq i64 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %61, label %56

56:                                               ; preds = %48
  %57 = inttoptr i64 %14 to %struct.RBasic*
  %58 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %57, i64 0, i32 0
  %59 = load i64, i64* %58, align 8, !tbaa !4
  %60 = and i64 %59, 30
  %switch = icmp eq i64 %60, 2
  br i1 %switch, label %63, label %61

61:                                               ; preds = %56, %48
  %62 = load i64, i64* @rb_eTypeError, align 8, !tbaa !9
  tail call void (i64, i8*, ...) @rb_raise(i64 %62, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i64 %3) #21
  unreachable

63:                                               ; preds = %56
  %64 = icmp eq i64 %36, 0
  br i1 %64, label %65, label %104

65:                                               ; preds = %63
  %66 = tail call i64 @rb_str_subseq(i64 %3, i64 %37, i64 %35) #20
  %67 = and i64 %66, 7
  %68 = icmp ne i64 %67, 0
  %69 = and i64 %66, -9
  %70 = icmp eq i64 %69, 0
  %71 = or i1 %68, %70
  br i1 %71, label %rb_obj_freeze_inline.exit, label %72

72:                                               ; preds = %65
  %73 = inttoptr i64 %66 to %struct.RBasic*
  %74 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %73, i64 0, i32 0
  %75 = load i64, i64* %74, align 8, !tbaa !4
  %76 = and i64 %75, 31
  %77 = icmp eq i64 %76, 27
  br i1 %77, label %rb_obj_freeze_inline.exit, label %78

78:                                               ; preds = %72
  %79 = or i64 %75, 2048
  store i64 %79, i64* %74, align 8, !tbaa !4
  %80 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %73, i64 0, i32 1
  %81 = load i64, i64* %80, align 8, !tbaa !10
  %82 = icmp ne i64 %81, 0
  %83 = and i64 %75, 4096
  %84 = icmp eq i64 %83, 0
  %85 = and i1 %84, %82
  br i1 %85, label %86, label %rb_obj_freeze_inline.exit

86:                                               ; preds = %78
  tail call void @rb_freeze_singleton_class(i64 %66) #20
  br label %rb_obj_freeze_inline.exit

rb_obj_freeze_inline.exit:                        ; preds = %65, %72, %78, %86
  %87 = load i64, i64* @sorbet_getConstantAt.rb_intern_id_cache, align 8, !tbaa !9
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %91

89:                                               ; preds = %rb_obj_freeze_inline.exit
  %90 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i64 13) #20
  store i64 %90, i64* @sorbet_getConstantAt.rb_intern_id_cache, align 8, !tbaa !9
  br label %91

91:                                               ; preds = %89, %rb_obj_freeze_inline.exit
  %92 = load i64, i64* @sorbet_getConstantAt.rb_intern_id_cache, align 8, !tbaa !9
  %93 = tail call i32 @rb_is_const_name(i64 %66) #20
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %.loopexit10, label %rb_class_of.exit

rb_class_of.exit:                                 ; preds = %91
  %95 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %57, i64 0, i32 1
  %96 = load i64, i64* %95, align 8, !tbaa !9
  %97 = tail call i32 @rb_method_basic_definition_p(i64 %96, i64 %92) #20
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %102

99:                                               ; preds = %rb_class_of.exit
  %100 = tail call i64 @rb_str_intern(i64 %66) #20
  %101 = tail call i64 @rb_const_missing(i64 %14, i64 %100) #20
  br label %115

102:                                              ; preds = %rb_class_of.exit
  %103 = tail call i64 @rb_mod_const_missing(i64 %14, i64 %66) #21
  unreachable

104:                                              ; preds = %63
  %105 = tail call i32 @rb_is_const_id(i64 %36) #6
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %109

107:                                              ; preds = %104
  %108 = tail call i64 @rb_id2sym(i64 %36) #20
  br label %.loopexit10

109:                                              ; preds = %104
  %110 = icmp eq i64 %37, 0
  br i1 %110, label %111, label %113

111:                                              ; preds = %109
  %112 = tail call i64 @rb_const_get(i64 %14, i64 %36) #20
  br label %115

113:                                              ; preds = %109
  %114 = tail call i64 @rb_const_get_from(i64 %14, i64 %36) #20
  br label %115

115:                                              ; preds = %113, %111, %99
  %116 = phi i64 [ %101, %99 ], [ %112, %111 ], [ %114, %113 ]
  %117 = icmp ult i8* %49, %7
  br i1 %117, label %13, label %.loopexit11

.loopexit11:                                      ; preds = %115, %2
  %118 = phi i64 [ %0, %2 ], [ %116, %115 ]
  ret i64 %118
}

declare %struct.OnigEncodingTypeST* @rb_enc_get(i64) local_unnamed_addr #0

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #5

declare i64 @rb_check_id_cstr(i8*, i64, %struct.OnigEncodingTypeST*) local_unnamed_addr #0

declare i64 @rb_str_subseq(i64, i64, i64) local_unnamed_addr #0

declare i32 @rb_is_const_name(i64) local_unnamed_addr #0

declare i32 @rb_method_basic_definition_p(i64, i64) local_unnamed_addr #0

declare i64 @rb_const_missing(i64, i64) local_unnamed_addr #0

; Function Attrs: noreturn
declare i64 @rb_mod_const_missing(i64, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @rb_is_const_id(i64) local_unnamed_addr #6

declare i64 @rb_const_get(i64, i64) local_unnamed_addr #0

declare i64 @rb_const_get_from(i64, i64) local_unnamed_addr #0

declare void @rb_freeze_singleton_class(i64) local_unnamed_addr #0

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @sorbet_getConstant(i8* %0, i64 %1) unnamed_addr #3 {
  %3 = load i64, i64* @rb_cObject, align 8, !tbaa !9
  %4 = tail call i64 @rb_intern2(i8* %0, i64 %1) #20
  %5 = tail call fastcc i64 @sorbet_getConstantAt(i64 %3, i64 %4)
  ret i64 %5
}

declare i64 @rb_define_class(i8*, i64) local_unnamed_addr #0

declare void @rb_define_singleton_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #0

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #0

declare i64 @rb_block_call(i64, i64, i32, i64*, i64 (...)*, i64) local_unnamed_addr #0

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @sorbet_rb_arity_error_new(i32 %0) unnamed_addr #1 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.5, i64 0, i64 0), i32 %0, i32 1) #20
  %3 = load i64, i64* @rb_eArgError, align 8, !tbaa !9
  %4 = tail call i64 @rb_exc_new_str(i64 %3, i64 %2) #20
  ret i64 %4
}

declare i64 @rb_exc_new_str(i64, i64) local_unnamed_addr #0

; Function Attrs: cold minsize noreturn nounwind optsize ssp uwtable
define internal fastcc void @sorbet_cast_failure(i64 %0, i8* %1, i8* %2) unnamed_addr #7 {
  %4 = load i64, i64* @rb_eTypeError, align 8, !tbaa !9
  %5 = tail call i8* @rb_obj_classname(i64 %0) #20
  tail call void (i64, i8*, ...) @rb_raise(i64 %4, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.8, i64 0, i64 0), i8* %1, i8* %2, i8* %5, i64 %0) #21
  unreachable
}

; Function Attrs: noreturn nounwind ssp uwtable
define internal fastcc void @sorbet_raiseArity(i32 %0) unnamed_addr #8 {
  %2 = tail call fastcc i64 @sorbet_rb_arity_error_new(i32 %0)
  tail call void @rb_exc_raise(i64 %2) #21
  unreachable
}

; Function Attrs: noreturn
declare void @rb_exc_raise(i64) local_unnamed_addr #5

; Function Attrs: inaccessiblememonly
declare i32 @ruby_stack_check() local_unnamed_addr #9

declare i8* @ruby_xmalloc(i64) local_unnamed_addr #0

declare i64 @rb_data_typed_object_wrap(i64, i8*, %struct.rb_data_type_struct*) local_unnamed_addr #0

declare %struct.rb_iseq_struct* @rb_iseq_new(%struct.rb_ast_body_struct*, i64, i64, i64, %struct.rb_iseq_struct*, i32) local_unnamed_addr #0

declare i8* @ruby_xmalloc2(i64, i64) local_unnamed_addr #0

declare void @rb_iseq_insns_info_encode_positions(%struct.rb_iseq_struct*) local_unnamed_addr #0

; Function Attrs: nofree norecurse nounwind ssp uwtable
define i64** @sorbet_setRubyStackFrame(i8* %0) local_unnamed_addr #10 {
  %2 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !11
  %3 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %2, i64 0, i32 2
  %4 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %3, align 8, !tbaa !13
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %4, i64 0, i32 2
  %6 = bitcast %struct.rb_iseq_struct** %5 to i8**
  store i8* %0, i8** %6, align 8, !tbaa !16
  %7 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %4, i64 0, i32 4
  %8 = load i64*, i64** %7, align 8, !tbaa !18
  %9 = load i64, i64* %8, align 8, !tbaa !9
  %10 = and i64 %9, -129
  store i64 %10, i64* %8, align 8, !tbaa !9
  %11 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %4, i64 0, i32 0
  ret i64** %11
}

; Function Attrs: nounwind readnone
declare i64 @rb_obj_is_kind_of(i64, i64) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i64 @rb_class_inherited_p(i64, i64) local_unnamed_addr #6

declare void @rb_hash_bulk_insert(i64, i64*, i64) local_unnamed_addr #0

declare i64 @rb_big_plus(i64, i64) local_unnamed_addr #0

declare i64 @rb_complex_plus(i64, i64) local_unnamed_addr #0

declare i64 @rb_num_coerce_bin(i64, i64, i64) local_unnamed_addr #0

; Function Attrs: nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #11

declare i64 @rb_int2big(i64) local_unnamed_addr #0

declare i64 @rb_big_minus(i64, i64) local_unnamed_addr #0

; Function Attrs: nounwind ssp
define internal void @"Constr_stackFramePrecomputed_func_<root>.<static-init>$111"() #12 {
sorbet_allocateRubyStackFrames.exit:
  %0 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #20
  %1 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"str_test/testdata/ruby_benchmark/app_fib.rb", i64 0, i64 0), i64 39) #20
  %2 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"str_test/testdata/ruby_benchmark/app_fib.rb", i64 0, i64 0), i64 39) #20
  %3 = tail call %struct.rb_iseq_struct* @rb_iseq_new(%struct.rb_ast_body_struct* null, i64 %0, i64 %1, i64 %2, %struct.rb_iseq_struct* null, i32 0) #20
  %4 = tail call i8* @ruby_xmalloc2(i64 12, i64 8) #20
  %5 = tail call i8* @ruby_xmalloc2(i64 12, i64 4) #20
  %6 = bitcast i8* %5 to i32*
  store i32 0, i32* %6, align 4, !tbaa !0
  %7 = bitcast i8* %4 to i32*
  store i32 3, i32* %7, align 4, !tbaa !19
  %8 = getelementptr inbounds i8, i8* %5, i64 4
  %9 = bitcast i8* %8 to i32*
  store i32 1, i32* %9, align 4, !tbaa !0
  %10 = getelementptr inbounds i8, i8* %4, i64 8
  %11 = bitcast i8* %10 to i32*
  store i32 4, i32* %11, align 4, !tbaa !19
  %12 = getelementptr inbounds i8, i8* %5, i64 8
  %13 = bitcast i8* %12 to i32*
  store i32 2, i32* %13, align 4, !tbaa !0
  %14 = getelementptr inbounds i8, i8* %4, i64 16
  %15 = bitcast i8* %14 to i32*
  store i32 5, i32* %15, align 4, !tbaa !19
  %16 = getelementptr inbounds i8, i8* %5, i64 12
  %17 = bitcast i8* %16 to i32*
  store i32 3, i32* %17, align 4, !tbaa !0
  %18 = getelementptr inbounds i8, i8* %4, i64 24
  %19 = bitcast i8* %18 to i32*
  store i32 6, i32* %19, align 4, !tbaa !19
  %20 = getelementptr inbounds i8, i8* %5, i64 16
  %21 = bitcast i8* %20 to i32*
  store i32 4, i32* %21, align 4, !tbaa !0
  %22 = getelementptr inbounds i8, i8* %4, i64 32
  %23 = bitcast i8* %22 to i32*
  store i32 7, i32* %23, align 4, !tbaa !19
  %24 = getelementptr inbounds i8, i8* %5, i64 20
  %25 = bitcast i8* %24 to i32*
  store i32 5, i32* %25, align 4, !tbaa !0
  %26 = getelementptr inbounds i8, i8* %4, i64 40
  %27 = bitcast i8* %26 to i32*
  store i32 8, i32* %27, align 4, !tbaa !19
  %28 = getelementptr inbounds i8, i8* %5, i64 24
  %29 = bitcast i8* %28 to i32*
  store i32 6, i32* %29, align 4, !tbaa !0
  %30 = getelementptr inbounds i8, i8* %4, i64 48
  %31 = bitcast i8* %30 to i32*
  store i32 9, i32* %31, align 4, !tbaa !19
  %32 = getelementptr inbounds i8, i8* %5, i64 28
  %33 = bitcast i8* %32 to i32*
  store i32 7, i32* %33, align 4, !tbaa !0
  %34 = getelementptr inbounds i8, i8* %4, i64 56
  %35 = bitcast i8* %34 to i32*
  store i32 10, i32* %35, align 4, !tbaa !19
  %36 = getelementptr inbounds i8, i8* %5, i64 32
  %37 = bitcast i8* %36 to i32*
  store i32 8, i32* %37, align 4, !tbaa !0
  %38 = getelementptr inbounds i8, i8* %4, i64 64
  %39 = bitcast i8* %38 to i32*
  store i32 11, i32* %39, align 4, !tbaa !19
  %40 = getelementptr inbounds i8, i8* %5, i64 36
  %41 = bitcast i8* %40 to i32*
  store i32 9, i32* %41, align 4, !tbaa !0
  %42 = getelementptr inbounds i8, i8* %4, i64 72
  %43 = bitcast i8* %42 to i32*
  store i32 12, i32* %43, align 4, !tbaa !19
  %44 = getelementptr inbounds i8, i8* %5, i64 40
  %45 = bitcast i8* %44 to i32*
  store i32 10, i32* %45, align 4, !tbaa !0
  %46 = getelementptr inbounds i8, i8* %4, i64 80
  %47 = bitcast i8* %46 to i32*
  store i32 13, i32* %47, align 4, !tbaa !19
  %48 = getelementptr inbounds i8, i8* %5, i64 44
  %49 = bitcast i8* %48 to i32*
  store i32 11, i32* %49, align 4, !tbaa !0
  %50 = getelementptr inbounds i8, i8* %4, i64 88
  %51 = bitcast i8* %50 to i32*
  store i32 14, i32* %51, align 4, !tbaa !19
  %52 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %3, i64 0, i32 2
  %53 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %52, align 8, !tbaa !21
  %54 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %53, i64 0, i32 5, i32 0
  %55 = bitcast %struct.rb_code_position_struct** %54 to i8**
  store i8* %4, i8** %55, align 8, !tbaa !23
  %56 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %53, i64 0, i32 5, i32 1
  %57 = bitcast i32** %56 to i8**
  store i8* %5, i8** %57, align 8, !tbaa !32
  %58 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %53, i64 0, i32 1
  store i32 12, i32* %58, align 4, !tbaa !33
  %59 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %53, i64 0, i32 5, i32 2
  store i32 12, i32* %59, align 8, !tbaa !34
  tail call void @rb_iseq_insns_info_encode_positions(%struct.rb_iseq_struct* %3) #20
  %60 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %52, align 8, !tbaa !21
  %61 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %60, i64 0, i32 2
  store i64* null, i64** %61, align 8, !tbaa !35
  store %struct.rb_iseq_struct* %3, %struct.rb_iseq_struct** bitcast (i8** @"stackFramePrecomputed_func_<root>.<static-init>$111" to %struct.rb_iseq_struct**), align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_<top (required)>"() #12 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #20
  store i64 %0, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_unsafe() #12 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_unsafe, i64 0, i64 0), i64 6) #20
  store i64 %0, i64* @rubyIdPrecomputed_unsafe, align 8
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @func_HasFib.fib(i32 %argc, i64* nocapture readonly %argArray, i64 %selfRaw) #13 {
functionEntryInitializers:
  %callArgs = alloca [1 x i64], align 8
  %"rubyId_+" = load i64, i64* @"rubyIdPrecomputed_+", align 8
  %0 = icmp eq i32 %argc, 1
  br i1 %0, label %fillRequiredArgs, label %argCountFailBlock, !prof !36, !misexpect !37

BB2:                                              ; preds = %sorbet_rb_int_lt.exit
  store i64* inttoptr (i64 24 to i64*), i64** %97, align 8, !tbaa !38
  br label %BB4

BB3:                                              ; preds = %sorbet_rb_int_lt.exit
  store i64* inttoptr (i64 40 to i64*), i64** %97, align 8, !tbaa !38
  %1 = and i64 %rawArg_n, 1
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %11, label %3, !prof !39

3:                                                ; preds = %BB3
  %4 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %rawArg_n, i64 -2)
  %5 = extractvalue { i64, i1 } %4, 1
  %6 = extractvalue { i64, i1 } %4, 0
  br i1 %5, label %7, label %sorbet_rb_int_minus.exit

7:                                                ; preds = %3
  %8 = ashr i64 %6, 1
  %9 = xor i64 %8, -9223372036854775808
  %10 = tail call i64 @rb_int2big(i64 %9) #20
  br label %sorbet_rb_int_minus.exit

11:                                               ; preds = %BB3
  %12 = and i64 %rawArg_n, 7
  %13 = icmp ne i64 %12, 0
  %14 = and i64 %rawArg_n, -9
  %15 = icmp eq i64 %14, 0
  %16 = or i1 %13, %15
  br i1 %16, label %25, label %17

17:                                               ; preds = %11
  %18 = inttoptr i64 %rawArg_n to %struct.RBasic*
  %19 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %18, i64 0, i32 0
  %20 = load i64, i64* %19, align 8, !tbaa !4
  %21 = and i64 %20, 31
  %22 = icmp eq i64 %21, 10
  br i1 %22, label %23, label %25

23:                                               ; preds = %17
  %24 = tail call i64 @rb_big_minus(i64 %rawArg_n, i64 3) #20
  br label %sorbet_rb_int_minus.exit

25:                                               ; preds = %17, %11
  %26 = tail call i64 @rb_num_coerce_bin(i64 %rawArg_n, i64 3, i64 45) #20
  br label %sorbet_rb_int_minus.exit

sorbet_rb_int_minus.exit:                         ; preds = %3, %7, %23, %25
  %27 = phi i64 [ %26, %25 ], [ %24, %23 ], [ %10, %7 ], [ %6, %3 ]
  store i64 %27, i64* %callArgsAddr, align 8
  %28 = tail call i32 @ruby_stack_check() #20
  %directSendResult = call i64 @func_HasFib.fib(i32 1, i64* nonnull %callArgsAddr, i64 %selfRaw)
  %29 = and i64 %rawArg_n, 1
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %39, label %31, !prof !39

31:                                               ; preds = %sorbet_rb_int_minus.exit
  %32 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %rawArg_n, i64 -4)
  %33 = extractvalue { i64, i1 } %32, 1
  %34 = extractvalue { i64, i1 } %32, 0
  br i1 %33, label %35, label %sorbet_rb_int_minus.exit112

35:                                               ; preds = %31
  %36 = ashr i64 %34, 1
  %37 = xor i64 %36, -9223372036854775808
  %38 = tail call i64 @rb_int2big(i64 %37) #20
  br label %sorbet_rb_int_minus.exit112

39:                                               ; preds = %sorbet_rb_int_minus.exit
  %40 = and i64 %rawArg_n, 7
  %41 = icmp ne i64 %40, 0
  %42 = and i64 %rawArg_n, -9
  %43 = icmp eq i64 %42, 0
  %44 = or i1 %41, %43
  br i1 %44, label %53, label %45

45:                                               ; preds = %39
  %46 = inttoptr i64 %rawArg_n to %struct.RBasic*
  %47 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %46, i64 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !4
  %49 = and i64 %48, 31
  %50 = icmp eq i64 %49, 10
  br i1 %50, label %51, label %53

51:                                               ; preds = %45
  %52 = tail call i64 @rb_big_minus(i64 %rawArg_n, i64 5) #20
  br label %sorbet_rb_int_minus.exit112

53:                                               ; preds = %45, %39
  %54 = tail call i64 @rb_num_coerce_bin(i64 %rawArg_n, i64 5, i64 45) #20
  br label %sorbet_rb_int_minus.exit112

sorbet_rb_int_minus.exit112:                      ; preds = %31, %35, %51, %53
  %55 = phi i64 [ %54, %53 ], [ %52, %51 ], [ %38, %35 ], [ %34, %31 ]
  store i64 %55, i64* %callArgsAddr, align 8
  %56 = tail call i32 @ruby_stack_check() #20
  %directSendResult74 = call i64 @func_HasFib.fib(i32 1, i64* nonnull %callArgsAddr, i64 %selfRaw)
  %57 = and i64 %directSendResult, 1
  %58 = icmp eq i64 %57, 0
  store i64 %directSendResult74, i64* %callArgsAddr, align 8
  br i1 %58, label %"slowSymCallIntrinsic_+", label %"fastSymCallIntrinsic_+", !prof !39, !misexpect !40

BB4:                                              ; preds = %188, %186, %177, %175, %169, %122, %106, %101, %"slowSymCallIntrinsic_+", %BB2
  %"<returnMethodTemp>.sroa.0.0" = phi i64 [ 3, %BB2 ], [ %98, %"slowSymCallIntrinsic_+" ], [ %189, %188 ], [ %187, %186 ], [ %123, %122 ], [ %109, %106 ], [ %105, %101 ], [ %178, %177 ], [ %174, %169 ], [ -9223372036854775806, %175 ]
  %59 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !11
  %60 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %59, i64 0, i32 2
  %61 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %60, align 8, !tbaa !13
  %62 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %61, i64 0, i32 0
  store i64* inttoptr (i64 8 to i64*), i64** %62, align 8, !tbaa !38
  ret i64 %"<returnMethodTemp>.sroa.0.0"

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_raiseArity(i32 %argc)
  unreachable

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %stackFrame_func_HasFib.fib106 = load i64, i64* bitcast (i8** @stackFramePrecomputed_func_HasFib.fib to i64*), align 8
  %rawArg_n = load i64, i64* %argArray, align 8
  %63 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !11
  %64 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %63, i64 0, i32 2
  %65 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %64, align 8, !tbaa !13
  %66 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %65, i64 0, i32 2
  %67 = bitcast %struct.rb_iseq_struct** %66 to i64*
  store i64 %stackFrame_func_HasFib.fib106, i64* %67, align 8, !tbaa !16
  %68 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %65, i64 0, i32 4
  %69 = load i64*, i64** %68, align 8, !tbaa !18
  %70 = load i64, i64* %69, align 8, !tbaa !9
  %71 = and i64 %70, -129
  store i64 %71, i64* %69, align 8, !tbaa !9
  %72 = and i64 %rawArg_n, 1
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %codeRepl, label %typeTestSuccess21, !prof !39, !misexpect !40

codeRepl:                                         ; preds = %fillRequiredArgs
  tail call fastcc void @func_HasFib.fib.cold.1(i64 %rawArg_n) #22
  unreachable

typeTestSuccess21:                                ; preds = %fillRequiredArgs
  %74 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %65, i64 0, i32 0
  store i64* inttoptr (i64 8 to i64*), i64** %74, align 8, !tbaa !38
  %75 = load i64, i64* @guard_epoch_HasFib, align 8
  %76 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !41
  %needTakeSlowPath = icmp eq i64 %75, %76
  br i1 %needTakeSlowPath, label %78, label %77, !prof !43

77:                                               ; preds = %typeTestSuccess21
  tail call void @const_recompute_HasFib() #20
  br label %78

78:                                               ; preds = %typeTestSuccess21, %77
  %79 = load i64, i64* @guarded_const_HasFib, align 8
  %80 = load i64, i64* @guard_epoch_HasFib, align 8
  %81 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !41
  %guardUpdated = icmp eq i64 %80, %81
  tail call void @llvm.assume(i1 %guardUpdated)
  %82 = icmp eq i64 %79, %selfRaw
  br i1 %82, label %sorbet_rb_int_lt.exit, label %83

83:                                               ; preds = %78
  %84 = load i64, i64* @rb_cModule, align 8, !tbaa !9
  %85 = tail call i64 @rb_obj_is_kind_of(i64 %selfRaw, i64 %84) #6
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %codeRepl108, label %sorbet_isa_class_of.exit, !prof !44

sorbet_isa_class_of.exit:                         ; preds = %83
  %87 = tail call i64 @rb_class_inherited_p(i64 %selfRaw, i64 %79) #6
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %codeRepl108, label %sorbet_rb_int_lt.exit, !prof !39, !misexpect !40

sorbet_rb_int_lt.exit:                            ; preds = %sorbet_isa_class_of.exit, %78
  %89 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !11
  %90 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %89, i64 0, i32 2
  %91 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %90, align 8, !tbaa !13
  %92 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %91, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %92, align 8, !tbaa !38
  %callArgsAddr = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs, i64 0, i64 0
  store i64 7, i64* %callArgsAddr, align 8
  %93 = icmp slt i64 %rawArg_n, 6
  %94 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !11
  %95 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %94, i64 0, i32 2
  %96 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %95, align 8, !tbaa !13
  %97 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %96, i64 0, i32 0
  br i1 %93, label %BB2, label %BB3

codeRepl108:                                      ; preds = %83, %sorbet_isa_class_of.exit
  tail call fastcc void @func_HasFib.fib.cold.2(i64 %selfRaw) #22
  unreachable

"slowSymCallIntrinsic_+":                         ; preds = %sorbet_rb_int_minus.exit112
  %98 = call i64 @rb_funcallv(i64 %directSendResult, i64 %"rubyId_+", i32 1, i64* nonnull %callArgsAddr) #20
  br label %BB4

"fastSymCallIntrinsic_+":                         ; preds = %sorbet_rb_int_minus.exit112
  %99 = and i64 %directSendResult74, 1
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %110, label %101, !prof !39

101:                                              ; preds = %"fastSymCallIntrinsic_+"
  %102 = add nsw i64 %directSendResult74, -1
  %103 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %directSendResult, i64 %102) #20
  %104 = extractvalue { i64, i1 } %103, 1
  %105 = extractvalue { i64, i1 } %103, 0
  br i1 %104, label %106, label %BB4

106:                                              ; preds = %101
  %107 = ashr i64 %105, 1
  %108 = xor i64 %107, -9223372036854775808
  %109 = tail call i64 @rb_int2big(i64 %108) #20, !noalias !45
  br label %BB4

110:                                              ; preds = %"fastSymCallIntrinsic_+"
  %111 = and i64 %directSendResult74, 7
  %112 = icmp ne i64 %111, 0
  %113 = and i64 %directSendResult74, -9
  %114 = icmp eq i64 %113, 0
  %115 = or i1 %112, %114
  br i1 %115, label %124, label %116

116:                                              ; preds = %110
  %117 = inttoptr i64 %directSendResult74 to %struct.RBasic*
  %118 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %117, i64 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !4, !noalias !45
  %120 = and i64 %119, 31
  %121 = icmp eq i64 %120, 10
  br i1 %121, label %122, label %124

122:                                              ; preds = %116
  %123 = tail call i64 @rb_big_plus(i64 %directSendResult74, i64 %directSendResult) #20, !noalias !45
  br label %BB4

124:                                              ; preds = %116, %110
  %125 = and i64 %directSendResult, 3
  %126 = icmp eq i64 %125, 2
  br i1 %126, label %139, label %127

127:                                              ; preds = %124
  %128 = and i64 %directSendResult, 7
  %129 = icmp ne i64 %128, 0
  %130 = and i64 %directSendResult, -9
  %131 = icmp eq i64 %130, 0
  %132 = or i1 %129, %131
  br i1 %132, label %179, label %133

133:                                              ; preds = %127
  %134 = inttoptr i64 %directSendResult to %struct.RBasic*
  %135 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %134, i64 0, i32 0
  %136 = load i64, i64* %135, align 8, !tbaa !4, !noalias !45
  %137 = and i64 %136, 31
  %138 = icmp eq i64 %137, 4
  br i1 %138, label %139, label %179

139:                                              ; preds = %133, %124
  %140 = ashr i64 %directSendResult, 1
  %141 = sitofp i64 %140 to double
  %142 = and i64 %directSendResult74, 3
  %143 = icmp eq i64 %142, 2
  br i1 %143, label %144, label %155

144:                                              ; preds = %139
  %145 = icmp eq i64 %directSendResult74, -9223372036854775806
  br i1 %145, label %rb_float_value_inline.exit.i, label %146

146:                                              ; preds = %144
  %147 = lshr i64 %directSendResult74, 63
  %148 = sub nuw nsw i64 2, %147
  %149 = and i64 %directSendResult74, 4
  %150 = or i64 %148, %149
  %151 = lshr i64 %directSendResult74, 3
  %152 = shl nuw i64 %150, 61
  %153 = or i64 %152, %151
  %154 = bitcast i64 %153 to double
  br label %rb_float_value_inline.exit.i

155:                                              ; preds = %139
  %156 = inttoptr i64 %directSendResult74 to %struct.RFloat*
  %157 = getelementptr inbounds %struct.RFloat, %struct.RFloat* %156, i64 0, i32 1
  %158 = load double, double* %157, align 8, !tbaa !48, !noalias !45
  br label %rb_float_value_inline.exit.i

rb_float_value_inline.exit.i:                     ; preds = %155, %146, %144
  %159 = phi double [ %158, %155 ], [ %154, %146 ], [ 0.000000e+00, %144 ]
  %160 = fadd double %159, %141
  %161 = bitcast double %160 to i64
  %162 = icmp eq i64 %161, 3458764513820540928
  br i1 %162, label %177, label %163

163:                                              ; preds = %rb_float_value_inline.exit.i
  %164 = lshr i64 %161, 60
  %165 = trunc i64 %164 to i32
  %166 = and i32 %165, 7
  %167 = add nsw i32 %166, -3
  %168 = icmp ugt i32 %167, 1
  br i1 %168, label %175, label %169

169:                                              ; preds = %163
  %170 = shl i64 %161, 3
  %171 = lshr i64 %161, 61
  %172 = and i64 %171, 4
  %173 = or i64 %170, %172
  %174 = or i64 %173, 2
  br label %BB4

175:                                              ; preds = %163
  %176 = icmp eq i64 %161, 0
  br i1 %176, label %BB4, label %177

177:                                              ; preds = %175, %rb_float_value_inline.exit.i
  %178 = tail call i64 @rb_float_new_in_heap(double %160) #20, !noalias !45
  br label %BB4

179:                                              ; preds = %133, %127
  br i1 %115, label %188, label %180

180:                                              ; preds = %179
  %181 = inttoptr i64 %directSendResult74 to %struct.RBasic*
  %182 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %181, i64 0, i32 0
  %183 = load i64, i64* %182, align 8, !tbaa !4, !noalias !45
  %184 = and i64 %183, 31
  %185 = icmp eq i64 %184, 14
  br i1 %185, label %186, label %188

186:                                              ; preds = %180
  %187 = tail call i64 @rb_complex_plus(i64 %directSendResult74, i64 %directSendResult) #20, !noalias !45
  br label %BB4

188:                                              ; preds = %180, %179
  %189 = tail call i64 @rb_num_coerce_bin(i64 %directSendResult, i64 %directSendResult74, i64 43) #20, !noalias !45
  br label %BB4
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_fib() #12 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_fib, i64 0, i64 0), i64 3) #20
  store i64 %0, i64* @rubyIdPrecomputed_fib, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_test_testdata_ruby_benchmark_app_fib() local_unnamed_addr #14 {
afterSymCallIntrinsic_unsafe.i:
  %callArgs.i.i.i = alloca [2 x i64], align 8
  %callArgs.i = alloca [1 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8
  %1 = bitcast [1 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1)
  %"stackFrame_func_<root>.<static-init>$1112.i" = load i64, i64* bitcast (i8** @"stackFramePrecomputed_func_<root>.<static-init>$111" to i64*), align 8
  %2 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !11
  %3 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %2, i64 0, i32 2
  %4 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %3, align 8, !tbaa !13
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %4, i64 0, i32 2
  %6 = bitcast %struct.rb_iseq_struct** %5 to i64*
  store i64 %"stackFrame_func_<root>.<static-init>$1112.i", i64* %6, align 8, !tbaa !16
  %7 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %4, i64 0, i32 4
  %8 = load i64*, i64** %7, align 8, !tbaa !18
  %9 = load i64, i64* %8, align 8, !tbaa !9
  %10 = and i64 %9, -129
  store i64 %10, i64* %8, align 8, !tbaa !9
  %11 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %4, i64 0, i32 0
  store i64* inttoptr (i64 8 to i64*), i64** %11, align 8, !tbaa !38
  %callArgsAddr.i = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs.i, i64 0, i64 0
  store i64 %0, i64* %callArgsAddr.i, align 8
  %12 = tail call i64 @rb_define_class(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_HasFib, i64 0, i64 0), i64 %0) #20
  %13 = load i64, i64* @guard_epoch_HasFib, align 8
  %14 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !41
  %needTakeSlowPath = icmp eq i64 %13, %14
  br i1 %needTakeSlowPath, label %16, label %15, !prof !43

15:                                               ; preds = %afterSymCallIntrinsic_unsafe.i
  tail call void @const_recompute_HasFib() #20
  br label %16

16:                                               ; preds = %afterSymCallIntrinsic_unsafe.i, %15
  %17 = load i64, i64* @guarded_const_HasFib, align 8
  %18 = load i64, i64* @guard_epoch_HasFib, align 8
  %19 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !41
  %guardUpdated = icmp eq i64 %18, %19
  tail call void @llvm.assume(i1 %guardUpdated)
  %20 = bitcast [2 x i64]* %callArgs.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #20
  %21 = tail call i8* @ruby_xmalloc(i64 16) #20
  %22 = bitcast i8* %21 to i32*
  store i32 1, i32* %22, align 8, !tbaa !0
  %23 = load i64, i64* @rb_cData, align 8, !tbaa !9
  %24 = tail call i64 @rb_data_typed_object_wrap(i64 %23, i8* %21, %struct.rb_data_type_struct* nonnull @closureInfo) #20
  %25 = inttoptr i64 %24 to %struct.RTypedData*
  %26 = getelementptr inbounds %struct.RTypedData, %struct.RTypedData* %25, i64 0, i32 3
  %27 = bitcast i8** %26 to %struct.sorbet_Closure**
  %28 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %27, align 8, !tbaa !51
  %29 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %28, i64 0, i32 1, i64 0
  store i64 8, i64* %29, align 8
  %rubyId_final.i.i.i = load i64, i64* @rubyIdPrecomputed_final, align 8
  %rubyId_sig.i.i.i = load i64, i64* @rubyIdPrecomputed_sig, align 8
  %rubyId_fib.i.i.i = load i64, i64* @rubyIdPrecomputed_fib, align 8
  %"stackFrame_func_HasFib.<static-init>2.i.i.i" = load i64, i64* bitcast (i8** @"stackFramePrecomputed_func_HasFib.<static-init>" to i64*), align 8
  %30 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %27, align 8, !tbaa !51
  %31 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %30, i64 0, i32 1, i64 0
  store i64 %17, i64* %31, align 8
  %32 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !11
  %33 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %32, i64 0, i32 2
  %34 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %33, align 8, !tbaa !13
  %35 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %34, i64 0, i32 2
  %36 = bitcast %struct.rb_iseq_struct** %35 to i64*
  store i64 %"stackFrame_func_HasFib.<static-init>2.i.i.i", i64* %36, align 8, !tbaa !16
  %37 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %34, i64 0, i32 4
  %38 = load i64*, i64** %37, align 8, !tbaa !18
  %39 = load i64, i64* %38, align 8, !tbaa !9
  %40 = and i64 %39, -129
  store i64 %40, i64* %38, align 8, !tbaa !9
  %41 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %34, i64 0, i32 0
  store i64* inttoptr (i64 8 to i64*), i64** %41, align 8, !tbaa !38
  %42 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %27, align 8, !tbaa !51
  %43 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %42, i64 0, i32 1, i64 0
  %44 = load i64, i64* %43, align 8
  %45 = icmp eq i64 %44, %17
  br i1 %45, label %"func_<root>.<static-init>$111.exit", label %46

46:                                               ; preds = %16
  %47 = load i64, i64* @rb_cModule, align 8, !tbaa !9
  %48 = tail call i64 @rb_obj_is_kind_of(i64 %44, i64 %47) #6
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %codeRepl, label %sorbet_isa_class_of.exit.i.i.i, !prof !44

sorbet_isa_class_of.exit.i.i.i:                   ; preds = %46
  %50 = tail call i64 @rb_class_inherited_p(i64 %44, i64 %17) #6
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %codeRepl, label %"func_<root>.<static-init>$111.exit", !prof !39, !misexpect !40

codeRepl:                                         ; preds = %46, %sorbet_isa_class_of.exit.i.i.i
  tail call fastcc void @Init_test_testdata_ruby_benchmark_app_fib.cold.1(i64 %44) #22
  unreachable

"func_<root>.<static-init>$111.exit":             ; preds = %16, %sorbet_isa_class_of.exit.i.i.i
  %52 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !11
  %53 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %52, i64 0, i32 2
  %54 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %53, align 8, !tbaa !13
  %55 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %54, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %55, align 8, !tbaa !38
  %rawSym.i.i.i = tail call i64 @rb_id2sym(i64 %rubyId_final.i.i.i) #20
  %callArgsAddr.i.i.i = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs.i.i.i, i64 0, i64 0
  store i64 %rawSym.i.i.i, i64* %callArgsAddr.i.i.i, align 8
  %56 = load i64, i64* @"guard_epoch_T::Sig::WithoutRuntime", align 8
  %57 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !41
  %needTakeSlowPath6 = icmp eq i64 %56, %57
  br i1 %needTakeSlowPath6, label %59, label %58, !prof !43

58:                                               ; preds = %"func_<root>.<static-init>$111.exit"
  tail call void @"const_recompute_T::Sig::WithoutRuntime"() #20
  br label %59

59:                                               ; preds = %"func_<root>.<static-init>$111.exit", %58
  %60 = load i64, i64* @"guarded_const_T::Sig::WithoutRuntime", align 8
  %61 = load i64, i64* @"guard_epoch_T::Sig::WithoutRuntime", align 8
  %62 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !41
  %guardUpdated7 = icmp eq i64 %61, %62
  tail call void @llvm.assume(i1 %guardUpdated7)
  %63 = call i64 @rb_block_call(i64 %60, i64 %rubyId_sig.i.i.i, i32 1, i64* nonnull %callArgsAddr.i.i.i, i64 (...)* bitcast (i64 (i64, i64, i32, i64*, i64)* @"func_HasFib.<static-init>$block_1" to i64 (...)*), i64 %24) #20
  %64 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %27, align 8, !tbaa !51
  %65 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %64, i64 0, i32 1, i64 0
  %66 = load i64, i64* %65, align 8
  %67 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !11
  %68 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %67, i64 0, i32 2
  %69 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %68, align 8, !tbaa !13
  %70 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %69, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %70, align 8, !tbaa !38
  store i64 %66, i64* %65, align 8
  %71 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !11
  %72 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %71, i64 0, i32 2
  %73 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %72, align 8, !tbaa !13
  %74 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %73, i64 0, i32 0
  store i64* inttoptr (i64 24 to i64*), i64** %74, align 8, !tbaa !38
  store i64 %0, i64* %callArgsAddr.i.i.i, align 8
  %rawSym31.i.i.i = call i64 @rb_id2sym(i64 %rubyId_fib.i.i.i) #20
  call void @rb_define_singleton_method(i64 %17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_fib, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @func_HasFib.fib to i64 (...)*), i32 -1) #20
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #20
  %75 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !11
  %76 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %75, i64 0, i32 2
  %77 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %76, align 8, !tbaa !13
  %78 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %77, i64 0, i32 0
  store i64* inttoptr (i64 96 to i64*), i64** %78, align 8, !tbaa !38
  store i64 69, i64* %callArgsAddr.i, align 8
  %79 = call i32 @ruby_stack_check() #20
  %directSendResult.i = call i64 @func_HasFib.fib(i32 1, i64* nonnull %callArgsAddr.i, i64 %17) #20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1)
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_stackFramePrecomputed_func_HasFib.fib() #12 {
sorbet_allocateRubyStackFrames.exit:
  %0 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_fib, i64 0, i64 0), i64 3) #20
  %1 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"str_test/testdata/ruby_benchmark/app_fib.rb", i64 0, i64 0), i64 39) #20
  %2 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"str_test/testdata/ruby_benchmark/app_fib.rb", i64 0, i64 0), i64 39) #20
  %3 = tail call %struct.rb_iseq_struct* @rb_iseq_new(%struct.rb_ast_body_struct* null, i64 %0, i64 %1, i64 %2, %struct.rb_iseq_struct* null, i32 0) #20
  %4 = tail call i8* @ruby_xmalloc2(i64 7, i64 8) #20
  %5 = tail call i8* @ruby_xmalloc2(i64 7, i64 4) #20
  %6 = bitcast i8* %5 to i32*
  store i32 0, i32* %6, align 4, !tbaa !0
  %7 = bitcast i8* %4 to i32*
  store i32 5, i32* %7, align 4, !tbaa !19
  %8 = getelementptr inbounds i8, i8* %5, i64 4
  %9 = bitcast i8* %8 to i32*
  store i32 1, i32* %9, align 4, !tbaa !0
  %10 = getelementptr inbounds i8, i8* %4, i64 8
  %11 = bitcast i8* %10 to i32*
  store i32 6, i32* %11, align 4, !tbaa !19
  %12 = getelementptr inbounds i8, i8* %5, i64 8
  %13 = bitcast i8* %12 to i32*
  store i32 2, i32* %13, align 4, !tbaa !0
  %14 = getelementptr inbounds i8, i8* %4, i64 16
  %15 = bitcast i8* %14 to i32*
  store i32 7, i32* %15, align 4, !tbaa !19
  %16 = getelementptr inbounds i8, i8* %5, i64 12
  %17 = bitcast i8* %16 to i32*
  store i32 3, i32* %17, align 4, !tbaa !0
  %18 = getelementptr inbounds i8, i8* %4, i64 24
  %19 = bitcast i8* %18 to i32*
  store i32 8, i32* %19, align 4, !tbaa !19
  %20 = getelementptr inbounds i8, i8* %5, i64 16
  %21 = bitcast i8* %20 to i32*
  store i32 4, i32* %21, align 4, !tbaa !0
  %22 = getelementptr inbounds i8, i8* %4, i64 32
  %23 = bitcast i8* %22 to i32*
  store i32 9, i32* %23, align 4, !tbaa !19
  %24 = getelementptr inbounds i8, i8* %5, i64 20
  %25 = bitcast i8* %24 to i32*
  store i32 5, i32* %25, align 4, !tbaa !0
  %26 = getelementptr inbounds i8, i8* %4, i64 40
  %27 = bitcast i8* %26 to i32*
  store i32 10, i32* %27, align 4, !tbaa !19
  %28 = getelementptr inbounds i8, i8* %5, i64 24
  %29 = bitcast i8* %28 to i32*
  store i32 6, i32* %29, align 4, !tbaa !0
  %30 = getelementptr inbounds i8, i8* %4, i64 48
  %31 = bitcast i8* %30 to i32*
  store i32 11, i32* %31, align 4, !tbaa !19
  %32 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %3, i64 0, i32 2
  %33 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %32, align 8, !tbaa !21
  %34 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %33, i64 0, i32 5, i32 0
  %35 = bitcast %struct.rb_code_position_struct** %34 to i8**
  store i8* %4, i8** %35, align 8, !tbaa !23
  %36 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %33, i64 0, i32 5, i32 1
  %37 = bitcast i32** %36 to i8**
  store i8* %5, i8** %37, align 8, !tbaa !32
  %38 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %33, i64 0, i32 1
  store i32 7, i32* %38, align 4, !tbaa !33
  %39 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %33, i64 0, i32 5, i32 2
  store i32 7, i32* %39, align 8, !tbaa !34
  tail call void @rb_iseq_insns_info_encode_positions(%struct.rb_iseq_struct* %3) #20
  %40 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %32, align 8, !tbaa !21
  %41 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %40, i64 0, i32 2
  store i64* null, i64** %41, align 8, !tbaa !35
  store %struct.rb_iseq_struct* %3, %struct.rb_iseq_struct** bitcast (i8** @stackFramePrecomputed_func_HasFib.fib to %struct.rb_iseq_struct**), align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_<"() #12 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_<", i64 0, i64 0), i64 1) #20
  store i64 %0, i64* @"rubyIdPrecomputed_<", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_-() #12 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_-, i64 0, i64 0), i64 1) #20
  store i64 %0, i64* @rubyIdPrecomputed_-, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_+"() #12 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_+", i64 0, i64 0), i64 1) #20
  store i64 %0, i64* @"rubyIdPrecomputed_+", align 8
  ret void
}

; Function Attrs: ssp
define internal i64 @"func_HasFib.<static-init>$block_1"(i64 %firstYieldArgRaw, i64 %captures, i32 %argc, i64* nocapture readonly %argArray, i64 %blockArg) #15 {
functionEntryInitializers:
  %callArgs = alloca [2 x i64], align 8
  %"stackFrame_func_HasFib.<static-init>21" = load i64, i64* bitcast (i8** @"stackFramePrecomputed_func_HasFib.<static-init>" to i64*), align 8
  %rubyId_n = load i64, i64* @rubyIdPrecomputed_n, align 8
  %rubyId_params = load i64, i64* @rubyIdPrecomputed_params, align 8
  %rubyId_returns = load i64, i64* @rubyIdPrecomputed_returns, align 8
  %arrayExpansionSizeGuard = icmp eq i32 %argc, 1
  br i1 %arrayExpansionSizeGuard, label %argArrayExpandArrayTest, label %fillRequiredArgs

argArrayExpandArrayTest:                          ; preds = %functionEntryInitializers
  %arg1_maybeExpandToFullArgs = load i64, i64* %argArray, align 8
  %0 = and i64 %arg1_maybeExpandToFullArgs, 7
  %1 = icmp ne i64 %0, 0
  %2 = and i64 %arg1_maybeExpandToFullArgs, -9
  %3 = icmp eq i64 %2, 0
  %4 = or i1 %1, %3
  br i1 %4, label %fillRequiredArgs, label %sorbet_isa_Array.exit

sorbet_isa_Array.exit:                            ; preds = %argArrayExpandArrayTest
  %5 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.RBasic*
  %6 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %5, i64 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !4
  %8 = and i64 %7, 33554463
  %9 = icmp eq i64 %8, 33554439
  br i1 %9, label %10, label %fillRequiredArgs

10:                                               ; preds = %sorbet_isa_Array.exit
  tail call void @rb_ary_detransient(i64 %arg1_maybeExpandToFullArgs) #20
  br label %fillRequiredArgs

fillRequiredArgs:                                 ; preds = %sorbet_isa_Array.exit, %argArrayExpandArrayTest, %10, %functionEntryInitializers
  %11 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !11
  %12 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %11, i64 0, i32 2
  %13 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %12, align 8, !tbaa !13
  %14 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %13, i64 0, i32 2
  %15 = bitcast %struct.rb_iseq_struct** %14 to i64*
  store i64 %"stackFrame_func_HasFib.<static-init>21", i64* %15, align 8, !tbaa !16
  %16 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %13, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8, !tbaa !18
  %18 = load i64, i64* %17, align 8, !tbaa !9
  %19 = and i64 %18, -129
  store i64 %19, i64* %17, align 8, !tbaa !9
  %20 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %13, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %20, align 8, !tbaa !38
  %21 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !11
  %22 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %21, i64 0, i32 2
  %23 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %22, align 8, !tbaa !13
  %24 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %23, i64 0, i32 3
  %25 = load i64, i64* %24, align 8, !tbaa !53
  %26 = inttoptr i64 %captures to %struct.RTypedData*
  %27 = getelementptr inbounds %struct.RTypedData, %struct.RTypedData* %26, i64 0, i32 3
  %28 = bitcast i8** %27 to %struct.sorbet_Closure**
  %29 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %28, align 8, !tbaa !51
  %30 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %29, i64 0, i32 1, i64 0
  store i64 %25, i64* %30, align 8
  %rawSym = tail call i64 @rb_id2sym(i64 %rubyId_n)
  %callArgsAddr = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs, i64 0, i64 0
  store i64 %rawSym, i64* %callArgsAddr, align 8
  %31 = load i64, i64* @rb_cInteger, align 8
  %callArgsAddr12 = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs, i64 0, i64 1
  store i64 %31, i64* %callArgsAddr12, align 8
  %32 = tail call i64 @rb_hash_new() #20, !noalias !54
  call void @rb_hash_bulk_insert(i64 2, i64* nonnull %callArgsAddr, i64 %32) #20
  store i64 %32, i64* %callArgsAddr, align 8
  %33 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %28, align 8, !tbaa !51
  %34 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %33, i64 0, i32 1, i64 0
  %35 = load i64, i64* %34, align 8
  %36 = call i64 @rb_funcallv(i64 %35, i64 %rubyId_params, i32 1, i64* nonnull %callArgsAddr) #20
  store i64 %31, i64* %callArgsAddr, align 8
  %37 = call i64 @rb_funcallv(i64 %36, i64 %rubyId_returns, i32 1, i64* nonnull %callArgsAddr) #20
  ret i64 %37
}

; Function Attrs: nounwind ssp
define internal void @"Constr_stackFramePrecomputed_func_HasFib.<static-init>"() #12 {
sorbet_allocateRubyStackFrames.exit:
  %0 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #20
  %1 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"str_test/testdata/ruby_benchmark/app_fib.rb", i64 0, i64 0), i64 39) #20
  %2 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"str_test/testdata/ruby_benchmark/app_fib.rb", i64 0, i64 0), i64 39) #20
  %3 = tail call %struct.rb_iseq_struct* @rb_iseq_new(%struct.rb_ast_body_struct* null, i64 %0, i64 %1, i64 %2, %struct.rb_iseq_struct* null, i32 0) #20
  %4 = tail call i8* @ruby_xmalloc2(i64 1, i64 8) #20
  %5 = tail call i8* @ruby_xmalloc2(i64 1, i64 4) #20
  %6 = bitcast i8* %5 to i32*
  store i32 0, i32* %6, align 4, !tbaa !0
  %7 = bitcast i8* %4 to i32*
  store i32 3, i32* %7, align 4, !tbaa !19
  %8 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %3, i64 0, i32 2
  %9 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %8, align 8, !tbaa !21
  %10 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %9, i64 0, i32 5, i32 0
  %11 = bitcast %struct.rb_code_position_struct** %10 to i8**
  store i8* %4, i8** %11, align 8, !tbaa !23
  %12 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %9, i64 0, i32 5, i32 1
  %13 = bitcast i32** %12 to i8**
  store i8* %5, i8** %13, align 8, !tbaa !32
  %14 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %9, i64 0, i32 1
  store i32 1, i32* %14, align 4, !tbaa !33
  %15 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %9, i64 0, i32 5, i32 2
  store i32 1, i32* %15, align 8, !tbaa !34
  tail call void @rb_iseq_insns_info_encode_positions(%struct.rb_iseq_struct* %3) #20
  %16 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %8, align 8, !tbaa !21
  %17 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %16, i64 0, i32 2
  store i64* null, i64** %17, align 8, !tbaa !35
  store %struct.rb_iseq_struct* %3, %struct.rb_iseq_struct** bitcast (i8** @"stackFramePrecomputed_func_HasFib.<static-init>" to %struct.rb_iseq_struct**), align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_final() #12 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_final, i64 0, i64 0), i64 5) #20
  store i64 %0, i64* @rubyIdPrecomputed_final, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_sig() #12 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_sig, i64 0, i64 0), i64 3) #20
  store i64 %0, i64* @rubyIdPrecomputed_sig, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_n() #12 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_n, i64 0, i64 0), i64 1) #20
  store i64 %0, i64* @rubyIdPrecomputed_n, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_params() #12 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_params, i64 0, i64 0), i64 6) #20
  store i64 %0, i64* @rubyIdPrecomputed_params, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_returns() #12 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_returns, i64 0, i64 0), i64 7) #20
  store i64 %0, i64* @rubyIdPrecomputed_returns, align 8
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #16

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #16

; Function Attrs: cold minsize noreturn nounwind sspreq uwtable
define internal fastcc void @func_HasFib.fib.cold.1(i64 %rawArg_n) unnamed_addr #17 {
newFuncRoot:
  tail call fastcc void @sorbet_cast_failure(i64 %rawArg_n, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_sig, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_Integer, i64 0, i64 0))
  unreachable
}

; Function Attrs: cold minsize noreturn nounwind sspreq uwtable
define internal fastcc void @func_HasFib.fib.cold.2(i64 %selfRaw) unnamed_addr #17 {
newFuncRoot:
  tail call fastcc void @sorbet_cast_failure(i64 %selfRaw, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"str_T.class_of(HasFib)", i64 0, i64 0))
  unreachable
}

; Function Attrs: cold minsize noreturn nounwind sspreq
define internal fastcc void @Init_test_testdata_ruby_benchmark_app_fib.cold.1(i64 %0) unnamed_addr #18 {
newFuncRoot:
  tail call fastcc void @sorbet_cast_failure(i64 %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"str_T.class_of(HasFib)", i64 0, i64 0)) #20
  unreachable
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #19

; Function Attrs: ssp
define linkonce void @const_recompute_HasFib() local_unnamed_addr #15 {
  %1 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_HasFib, i64 0, i64 0), i64 6)
  store i64 %1, i64* @guarded_const_HasFib, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !41
  store i64 %2, i64* @guard_epoch_HasFib, align 8
  ret void
}

; Function Attrs: ssp
define linkonce void @"const_recompute_T::Sig::WithoutRuntime"() local_unnamed_addr #15 {
  %1 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"str_T::Sig::WithoutRuntime", i64 0, i64 0), i64 22)
  store i64 %1, i64* @"guarded_const_T::Sig::WithoutRuntime", align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !41
  store i64 %2, i64* @"guard_epoch_T::Sig::WithoutRuntime", align 8
  ret void
}

attributes #0 = { "addedToSilenceEmptyAttrsError" }
attributes #1 = { nounwind ssp uwtable }
attributes #2 = { norecurse nounwind readnone ssp uwtable }
attributes #3 = { noinline nounwind ssp uwtable }
attributes #4 = { argmemonly nofree nounwind readonly }
attributes #5 = { noreturn }
attributes #6 = { nounwind readnone }
attributes #7 = { cold minsize noreturn nounwind optsize ssp uwtable }
attributes #8 = { noreturn nounwind ssp uwtable }
attributes #9 = { inaccessiblememonly "addedToSilenceEmptyAttrsError" }
attributes #10 = { nofree norecurse nounwind ssp uwtable }
attributes #11 = { nounwind readnone speculatable willreturn }
attributes #12 = { nounwind ssp }
attributes #13 = { nounwind sspreq uwtable }
attributes #14 = { nounwind sspreq }
attributes #15 = { ssp }
attributes #16 = { argmemonly nounwind willreturn }
attributes #17 = { cold minsize noreturn nounwind sspreq uwtable }
attributes #18 = { cold minsize noreturn nounwind sspreq }
attributes #19 = { nounwind willreturn }
attributes #20 = { nounwind }
attributes #21 = { noreturn nounwind }
attributes #22 = { noinline }

!0 = !{!1, !1, i64 0}
!1 = !{!"int", !2, i64 0}
!2 = !{!"omnipotent char", !3, i64 0}
!3 = !{!"Simple C/C++ TBAA"}
!4 = !{!5, !6, i64 0}
!5 = !{!"RBasic", !6, i64 0, !6, i64 8}
!6 = !{!"long", !2, i64 0}
!7 = !{!2, !2, i64 0}
!8 = !{i32 1088}
!9 = !{!6, !6, i64 0}
!10 = !{!5, !6, i64 8}
!11 = !{!12, !12, i64 0}
!12 = !{!"any pointer", !2, i64 0}
!13 = !{!14, !12, i64 16}
!14 = !{!"rb_execution_context_struct", !12, i64 0, !6, i64 8, !12, i64 16, !12, i64 24, !12, i64 32, !1, i64 40, !1, i64 44, !12, i64 48, !12, i64 56, !12, i64 64, !6, i64 72, !6, i64 80, !12, i64 88, !6, i64 96, !12, i64 104, !12, i64 112, !6, i64 120, !6, i64 128, !2, i64 136, !2, i64 137, !6, i64 144, !15, i64 152}
!15 = !{!"", !12, i64 0, !12, i64 8, !6, i64 16, !2, i64 24}
!16 = !{!17, !12, i64 16}
!17 = !{!"rb_control_frame_struct", !12, i64 0, !12, i64 8, !12, i64 16, !6, i64 24, !12, i64 32, !12, i64 40, !12, i64 48}
!18 = !{!17, !12, i64 32}
!19 = !{!20, !1, i64 0}
!20 = !{!"iseq_insn_info_entry", !1, i64 0, !1, i64 4}
!21 = !{!22, !12, i64 16}
!22 = !{!"rb_iseq_struct", !6, i64 0, !6, i64 8, !12, i64 16, !2, i64 24}
!23 = !{!24, !12, i64 120}
!24 = !{!"rb_iseq_constant_body", !2, i64 0, !1, i64 4, !12, i64 8, !25, i64 16, !27, i64 64, !30, i64 120, !12, i64 152, !12, i64 160, !12, i64 168, !12, i64 176, !12, i64 184, !12, i64 192, !12, i64 200, !31, i64 208, !1, i64 240, !1, i64 244, !1, i64 248, !1, i64 252, !1, i64 256, !2, i64 260}
!25 = !{!"", !26, i64 0, !1, i64 4, !1, i64 8, !1, i64 12, !1, i64 16, !1, i64 20, !1, i64 24, !1, i64 28, !12, i64 32, !12, i64 40}
!26 = !{!"", !1, i64 0, !1, i64 0, !1, i64 0, !1, i64 0, !1, i64 0, !1, i64 0, !1, i64 0, !1, i64 0}
!27 = !{!"rb_iseq_location_struct", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !1, i64 32, !28, i64 36}
!28 = !{!"rb_code_location_struct", !29, i64 0, !29, i64 8}
!29 = !{!"rb_code_position_struct", !1, i64 0, !1, i64 4}
!30 = !{!"iseq_insn_info", !12, i64 0, !12, i64 8, !1, i64 16, !12, i64 24}
!31 = !{!"", !6, i64 0, !6, i64 8, !6, i64 16, !12, i64 24}
!32 = !{!24, !12, i64 128}
!33 = !{!24, !1, i64 4}
!34 = !{!24, !1, i64 136}
!35 = !{!24, !12, i64 8}
!36 = !{!"branch_weights", i32 4000000, i32 4001}
!37 = !{!"misexpect", i64 1, i64 2000, i64 1}
!38 = !{!17, !12, i64 0}
!39 = !{!"branch_weights", i32 1, i32 2000}
!40 = !{!"misexpect", i64 0, i64 2000, i64 1}
!41 = !{!42, !42, i64 0}
!42 = !{!"long long", !2, i64 0}
!43 = !{!"branch_weights", i32 10000, i32 1}
!44 = !{!"branch_weights", i32 1073205, i32 2146410443}
!45 = !{!46}
!46 = distinct !{!46, !47, !"sorbet_rb_int_plus: argument 0"}
!47 = distinct !{!47, !"sorbet_rb_int_plus"}
!48 = !{!49, !50, i64 16}
!49 = !{!"RFloat", !5, i64 0, !50, i64 16}
!50 = !{!"double", !2, i64 0}
!51 = !{!52, !12, i64 32}
!52 = !{!"RTypedData", !5, i64 0, !12, i64 16, !6, i64 24, !12, i64 32}
!53 = !{!17, !6, i64 24}
!54 = !{!55}
!55 = distinct !{!55, !56, !"sorbet_buildHashIntrinsic: argument 0"}
!56 = distinct !{!56, !"sorbet_buildHashIntrinsic"}
