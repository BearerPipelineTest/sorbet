; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.5 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.13 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_data*, %struct.anon.12, i32, i32, i32, i32, i32, i8, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*)*, i64, %struct.rb_mjit_unit*, i64 }
%struct.anon = type { %struct.anon.0, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.0 = type { i16, [2 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.iseq_insn_info_entry*, i32*, i32, %struct.succ_index_table* }
%struct.iseq_insn_info_entry = type opaque
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, i64 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.rb_scope_visi_struct }
%struct.rb_scope_visi_struct = type { i8, [3 x i8] }
%struct.rb_call_data = type { %struct.rb_call_cache, %struct.rb_call_info }
%struct.rb_call_cache = type { i64, [3 x i64], %struct.rb_callable_method_entry_struct*, i64, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_data*)*, %union.anon.11 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon, i64, i64 }
%union.anon = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64, i32, i64*, i64 (...)*)*, i32 }
%struct.rb_calling_info = type { i64, i64, i32, i32 }
%union.anon.11 = type { i32 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.anon.12 = type { i64, i64, i64, i64* }
%struct.rb_mjit_unit = type opaque
%union.anon.13 = type { %struct.anon.14 }
%struct.anon.14 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [5 x i8*], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_fiber_struct = type opaque
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, i64, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %union.pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.8, i32, i64, %struct.rb_fiber_struct*, [5 x i8*], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %union.pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.3, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %union.pthread_mutex_t, i64, i64, i64, i64, i64, i32, %struct.st_table*, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.rb_builtin_function*, i32, %struct.anon.4, [29 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %union.pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32 }
%union.pthread_cond_t = type { %struct.anon.2 }
%struct.anon.2 = type { i32, i32, i64, i64, i64, i8*, i32, i32 }
%struct.anon.3 = type { [65 x i64] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.rb_builtin_function = type opaque
%struct.anon.4 = type { i64, i64, i64, i64 }
%struct.native_thread_data_struct = type { %struct.list_head, %union.anon.7 }
%union.anon.7 = type { %union.pthread_cond_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i64, i64, i32 }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (i64, i64)*, i64 (i64)* }
%struct.st_table_entry = type opaque
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (i64)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.5 = type { i64*, i64*, i64, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.FunctionInlineCache = type { %struct.rb_callable_method_entry_struct*, i64, i64 }

@ruby_vm_global_constant_state = external local_unnamed_addr global i64, align 8
@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.7 = private unnamed_addr constant [95 x i8] c"sorbet_getBuildSCMRevision: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@.str.8 = private unnamed_addr constant [93 x i8] c"sorbet_getIsReleaseBuild: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@"stackFramePrecomputed_func_<root>.<static-init>$153" = internal unnamed_addr global i8* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"rubyStrFrozen_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"rubyStrFrozen_test/testdata/ruby_benchmark/app_fib.rb" = internal unnamed_addr global i64 0, align 8
@"str_test/testdata/ruby_benchmark/app_fib.rb" = private unnamed_addr constant [40 x i8] c"test/testdata/ruby_benchmark/app_fib.rb\00", align 1
@str_HasFib = private unnamed_addr constant [7 x i8] c"HasFib\00", align 1
@rubyIdPrecomputed_fib = internal unnamed_addr global i64 0, align 8
@str_fib = private unnamed_addr constant [4 x i8] c"fib\00", align 1
@ic_callFunc_fib = internal global %struct.FunctionInlineCache zeroinitializer
@stackFramePrecomputed_func_HasFib.fib = internal unnamed_addr global i8* null, align 8
@str_sig = private unnamed_addr constant [4 x i8] c"sig\00", align 1
@str_Integer = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@"str_<" = private unnamed_addr constant [2 x i8] c"<\00", align 1
@str_- = private unnamed_addr constant [2 x i8] c"-\00", align 1
@ic_callFunc_fib.1 = internal global %struct.FunctionInlineCache zeroinitializer
@ic_callFunc_fib.3 = internal global %struct.FunctionInlineCache zeroinitializer
@"rubyIdPrecomputed_+" = internal unnamed_addr global i64 0, align 8
@"str_+" = private unnamed_addr constant [2 x i8] c"+\00", align 1
@"ic_callFunc_+" = internal global %struct.FunctionInlineCache zeroinitializer
@"str_Return value" = private unnamed_addr constant [13 x i8] c"Return value\00", align 1
@"stackFramePrecomputed_func_HasFib.<static-init>" = internal unnamed_addr global i8* null, align 8
@"<static-init-locals-storage>.4" = internal global [1 x i64] zeroinitializer
@"rubyIdPrecomputed_<self>" = internal unnamed_addr global i64 0, align 8
@"str_<self>" = private unnamed_addr constant [7 x i8] c"<self>\00", align 1
@"stackFramePrecomputed_func_HasFib.<static-init>$block_1" = internal unnamed_addr global i8* null, align 8
@"rubyIdPrecomputed_block for" = internal unnamed_addr global i64 0, align 8
@"str_block for" = private unnamed_addr constant [10 x i8] c"block for\00", align 1
@rubyIdPrecomputed_final = internal unnamed_addr global i64 0, align 8
@str_final = private unnamed_addr constant [6 x i8] c"final\00", align 1
@str_n = private unnamed_addr constant [2 x i8] c"n\00", align 1
@str_params = private unnamed_addr constant [7 x i8] c"params\00", align 1
@str_returns = private unnamed_addr constant [8 x i8] c"returns\00", align 1
@rubyIdPrecomputed_normal = internal unnamed_addr global i64 0, align 8
@str_normal = private unnamed_addr constant [7 x i8] c"normal\00", align 1
@str_keep_self_def = private unnamed_addr constant [14 x i8] c"keep_self_def\00", align 1
@rb_cObject = external local_unnamed_addr constant i64
@guard_epoch_HasFib = linkonce local_unnamed_addr global i64 0
@guarded_const_HasFib = linkonce local_unnamed_addr global i64 0

; Function Attrs: cold noreturn
declare void @sorbet_cast_failure(i64, i8*, i8*) local_unnamed_addr #0

; Function Attrs: noreturn
declare void @sorbet_raiseArity(i32, i32, i32) local_unnamed_addr #1

declare i8* @sorbet_allocateRubyStackFrame(i64, i64, i64, i64, i8*, i32, i32, i32, i64*, i32) local_unnamed_addr #2

declare i64 @sorbet_getConstant(i8*, i64) local_unnamed_addr #2

declare i64 @sorbet_readRealpath() local_unnamed_addr #2

declare void @sorbet_vm_env_write_slowpath(i64*, i32, i64) local_unnamed_addr #2

declare i64 @sorbet_callFuncWithCache(i64, i64, i32, i64* nocapture, i32, %struct.FunctionInlineCache*) local_unnamed_addr #2

declare void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_iseq_struct*) local_unnamed_addr #2

declare i64 @sorbet_rb_int_plus_slowpath(i64, i64) local_unnamed_addr #2

declare i64 @rb_define_class(i8*, i64) local_unnamed_addr #2

declare extern_weak void @rb_define_singleton_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #2

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #2

declare i64 @rb_id2sym(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare i64 @rb_fstring_new(i8*, i64) local_unnamed_addr #2

declare void @rb_gc_register_mark_object(i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #4

declare i64 @rb_int2big(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i32 @sorbet_getIsReleaseBuild() local_unnamed_addr #5 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.8, i64 0, i64 0)) #11
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @sorbet_getBuildSCMRevision() local_unnamed_addr #5 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.7, i64 0, i64 0)) #11
  unreachable
}

; Function Attrs: sspreq
define void @Init_app_fib() local_unnamed_addr #6 {
entry:
  %locals1.i.i = alloca [0 x i64], align 8
  %callArgs.i = alloca [1 x i64], align 8
  %realpath = tail call i64 @sorbet_readRealpath()
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #9
  store i64 %0, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %1 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_fib, i64 0, i64 0), i64 3) #9
  store i64 %1, i64* @rubyIdPrecomputed_fib, align 8
  %2 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_<", i64 0, i64 0), i64 1) #9
  %3 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_-, i64 0, i64 0), i64 1) #9
  %4 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_+", i64 0, i64 0), i64 1) #9
  store i64 %4, i64* @"rubyIdPrecomputed_+", align 8
  %5 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"str_<self>", i64 0, i64 0), i64 6) #9
  store i64 %5, i64* @"rubyIdPrecomputed_<self>", align 8
  %6 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str_block for", i64 0, i64 0), i64 9) #9
  store i64 %6, i64* @"rubyIdPrecomputed_block for", align 8
  %7 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_final, i64 0, i64 0), i64 5) #9
  store i64 %7, i64* @rubyIdPrecomputed_final, align 8
  %8 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_sig, i64 0, i64 0), i64 3) #9
  %9 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_n, i64 0, i64 0), i64 1) #9
  %10 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_params, i64 0, i64 0), i64 6) #9
  %11 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_returns, i64 0, i64 0), i64 7) #9
  %12 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_normal, i64 0, i64 0), i64 6) #9
  store i64 %12, i64* @rubyIdPrecomputed_normal, align 8
  %13 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str_keep_self_def, i64 0, i64 0), i64 13) #9
  %"rubyId_<self>.i" = load i64, i64* @"rubyIdPrecomputed_<self>", align 8
  store i64 %"rubyId_<self>.i", i64* getelementptr inbounds ([1 x i64], [1 x i64]* @"<static-init-locals-storage>.4", i64 0, i64 0), align 8
  %14 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #9
  tail call void @rb_gc_register_mark_object(i64 %14) #9
  store i64 %14, i64* @"rubyStrFrozen_<top (required)>", align 8
  %15 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"str_test/testdata/ruby_benchmark/app_fib.rb", i64 0, i64 0), i64 39) #9
  tail call void @rb_gc_register_mark_object(i64 %15) #9
  store i64 %15, i64* @"rubyStrFrozen_test/testdata/ruby_benchmark/app_fib.rb", align 8
  %"rubyId_<top (required)>.i.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %16 = tail call i8* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i.i", i64 %"rubyId_<top (required)>.i.i", i64 %15, i64 %realpath, i8* null, i32 1, i32 1, i32 16, i64* getelementptr inbounds ([1 x i64], [1 x i64]* @"<static-init-locals-storage>.4", i64 0, i64 0), i32 1)
  store i8* %16, i8** @"stackFramePrecomputed_func_<root>.<static-init>$153", align 8
  %17 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_fib, i64 0, i64 0), i64 3) #9
  tail call void @rb_gc_register_mark_object(i64 %17) #9
  %18 = bitcast [0 x i64]* %locals1.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 0, i8* nonnull %18)
  %rubyId_fib.i.i = load i64, i64* @rubyIdPrecomputed_fib, align 8
  %"rubyStr_test/testdata/ruby_benchmark/app_fib.rb.i2.i" = load i64, i64* @"rubyStrFrozen_test/testdata/ruby_benchmark/app_fib.rb", align 8
  %locals1.sub.i.i = getelementptr inbounds [0 x i64], [0 x i64]* %locals1.i.i, i64 0, i64 0
  %19 = call i8* @sorbet_allocateRubyStackFrame(i64 %17, i64 %rubyId_fib.i.i, i64 %"rubyStr_test/testdata/ruby_benchmark/app_fib.rb.i2.i", i64 %realpath, i8* null, i32 1, i32 7, i32 13, i64* nonnull %locals1.sub.i.i, i32 0)
  store i8* %19, i8** @stackFramePrecomputed_func_HasFib.fib, align 8
  call void @llvm.lifetime.end.p0i8(i64 0, i8* nonnull %18)
  %"rubyId_<top (required)>.i3.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i4.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/ruby_benchmark/app_fib.rb.i5.i" = load i64, i64* @"rubyStrFrozen_test/testdata/ruby_benchmark/app_fib.rb", align 8
  %20 = call i8* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i4.i", i64 %"rubyId_<top (required)>.i3.i", i64 %"rubyStr_test/testdata/ruby_benchmark/app_fib.rb.i5.i", i64 %realpath, i8* null, i32 1, i32 1, i32 5, i64* null, i32 0)
  store i8* %20, i8** @"stackFramePrecomputed_func_HasFib.<static-init>", align 8
  %21 = call i64 @rb_fstring_new(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str_block for", i64 0, i64 0), i64 9) #9
  call void @rb_gc_register_mark_object(i64 %21) #9
  %"stackFrame_func_HasFib.<static-init>.i.i" = load i8*, i8** @"stackFramePrecomputed_func_HasFib.<static-init>", align 8
  %"rubyId_block for.i.i" = load i64, i64* @"rubyIdPrecomputed_block for", align 8
  %"rubyStr_test/testdata/ruby_benchmark/app_fib.rb.i6.i" = load i64, i64* @"rubyStrFrozen_test/testdata/ruby_benchmark/app_fib.rb", align 8
  %22 = call i8* @sorbet_allocateRubyStackFrame(i64 %21, i64 %"rubyId_block for.i.i", i64 %"rubyStr_test/testdata/ruby_benchmark/app_fib.rb.i6.i", i64 %realpath, i8* %"stackFrame_func_HasFib.<static-init>.i.i", i32 2, i32 1, i32 5, i64* null, i32 0)
  store i8* %22, i8** @"stackFramePrecomputed_func_HasFib.<static-init>$block_1", align 8
  %23 = bitcast [1 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23)
  %"stackFrame_func_<root>.<static-init>$153.i" = load i8*, i8** @"stackFramePrecomputed_func_<root>.<static-init>$153", align 8
  %24 = bitcast i8* %"stackFrame_func_<root>.<static-init>$153.i" to %struct.rb_iseq_struct*
  %25 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !8
  %26 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %25, i64 0, i32 2
  %27 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %26, align 8, !tbaa !10
  %28 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %27, i64 0, i32 2
  %29 = bitcast %struct.rb_iseq_struct** %28 to i8**
  store i8* %"stackFrame_func_<root>.<static-init>$153.i", i8** %29, align 8, !tbaa !14
  %30 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %27, i64 0, i32 4
  %31 = load i64*, i64** %30, align 8, !tbaa !16
  %32 = load i64, i64* %31, align 8, !tbaa !4
  %33 = and i64 %32, -129
  store i64 %33, i64* %31, align 8, !tbaa !4
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %25, %struct.rb_control_frame_struct* nonnull %27, %struct.rb_iseq_struct* %24) #9
  %34 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %27, i64 0, i32 0
  %35 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %28, align 8, !tbaa !14
  %36 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %35, i64 0, i32 2
  %37 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %36, align 8, !tbaa !17
  %38 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %37, i64 0, i32 2
  %39 = load i64*, i64** %38, align 8, !tbaa !19
  %40 = getelementptr inbounds i64, i64* %39, i64 5
  store i64* %40, i64** %34, align 8, !dbg !28, !tbaa !8
  %41 = load i64, i64* @rb_cObject, align 8, !dbg !33
  %42 = call i64 @rb_define_class(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_HasFib, i64 0, i64 0), i64 %41) #9, !dbg !33
  %43 = load i64, i64* @guard_epoch_HasFib, align 8, !dbg !33
  %44 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !33, !tbaa !34
  %needTakeSlowPath = icmp eq i64 %43, %44, !dbg !33
  br i1 %needTakeSlowPath, label %46, label %45, !dbg !33, !prof !36

45:                                               ; preds = %entry
  call void @const_recompute_HasFib(), !dbg !33
  br label %46, !dbg !33

46:                                               ; preds = %entry, %45
  %47 = load i64, i64* @guarded_const_HasFib, align 8, !dbg !33
  %48 = load i64, i64* @guard_epoch_HasFib, align 8, !dbg !33
  %49 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !33, !tbaa !34
  %guardUpdated = icmp eq i64 %48, %49, !dbg !33
  call void @llvm.assume(i1 %guardUpdated), !dbg !33
  %50 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !8
  %51 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %50, i64 0, i32 2
  %52 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %51, align 8, !tbaa !10
  %53 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %52, i64 0, i32 0
  %54 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %52, i64 0, i32 2
  %55 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %54, align 8, !tbaa !14
  %56 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %55, i64 0, i32 2
  %57 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %56, align 8, !tbaa !17
  %58 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %57, i64 0, i32 2
  %59 = load i64*, i64** %58, align 8, !tbaa !19
  %60 = getelementptr inbounds i64, i64* %59, i64 5
  store i64* %60, i64** %53, align 8, !tbaa !8
  %61 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !37, !tbaa !8
  %62 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %61, i64 0, i32 2, !dbg !37
  %63 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %62, align 8, !dbg !37, !tbaa !10
  %64 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %63, i64 0, i32 4, !dbg !37
  %65 = load i64*, i64** %64, align 8, !dbg !37, !tbaa !16
  %66 = load i64, i64* %65, align 8, !dbg !37, !tbaa !4
  %67 = and i64 %66, 8, !dbg !37
  %68 = icmp eq i64 %67, 0, !dbg !37
  br i1 %68, label %69, label %71, !dbg !37, !prof !40

69:                                               ; preds = %46
  %70 = getelementptr inbounds i64, i64* %65, i64 -3, !dbg !37
  store i64 %47, i64* %70, align 8, !dbg !37, !tbaa !4
  br label %sorbet_writeLocal.exit.i.i, !dbg !37

71:                                               ; preds = %46
  call void @sorbet_vm_env_write_slowpath(i64* nonnull %65, i32 -3, i64 %47) #9, !dbg !37
  br label %sorbet_writeLocal.exit.i.i, !dbg !37

sorbet_writeLocal.exit.i.i:                       ; preds = %71, %69
  %72 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !41, !tbaa !8
  %73 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %72, i64 0, i32 2, !dbg !41
  %74 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %73, align 8, !dbg !41, !tbaa !10
  %75 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %74, i64 0, i32 4, !dbg !41
  %76 = load i64*, i64** %75, align 8, !dbg !41, !tbaa !16
  %77 = load i64, i64* %76, align 8, !dbg !41, !tbaa !4
  %78 = and i64 %77, 8, !dbg !41
  %79 = icmp eq i64 %78, 0, !dbg !41
  br i1 %79, label %afterSend.i.i, label %80, !dbg !41, !prof !40

80:                                               ; preds = %sorbet_writeLocal.exit.i.i
  %81 = getelementptr inbounds i64, i64* %76, i64 -3, !dbg !41
  %82 = load i64, i64* %81, align 8, !dbg !41, !tbaa !4
  call void @sorbet_vm_env_write_slowpath(i64* nonnull %76, i32 -3, i64 %82) #9, !dbg !41
  br label %afterSend.i.i, !dbg !41

afterSend.i.i:                                    ; preds = %80, %sorbet_writeLocal.exit.i.i
  %83 = getelementptr inbounds i64, i64* %59, i64 6, !dbg !41
  store i64* %83, i64** %53, align 8, !dbg !41, !tbaa !8
  %rubyId_final.i.i = load i64, i64* @rubyIdPrecomputed_final, align 8, !dbg !42
  %rawSym.i.i = call i64 @rb_id2sym(i64 %rubyId_final.i.i) #9, !dbg !42
  %84 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !41, !tbaa !8
  %85 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %84, i64 0, i32 2, !dbg !41
  %86 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %85, align 8, !dbg !41, !tbaa !10
  %87 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %86, i64 0, i32 4, !dbg !41
  %88 = load i64*, i64** %87, align 8, !dbg !41, !tbaa !16
  %89 = getelementptr inbounds i64, i64* %88, i64 -3, !dbg !41
  %90 = load i64, i64* %89, align 8, !dbg !41, !tbaa !4
  store i64* %83, i64** %53, align 8, !tbaa !8
  %91 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !43, !tbaa !8
  %92 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %91, i64 0, i32 2, !dbg !43
  %93 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %92, align 8, !dbg !43, !tbaa !10
  %94 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %93, i64 0, i32 4, !dbg !43
  %95 = load i64*, i64** %94, align 8, !dbg !43, !tbaa !16
  %96 = load i64, i64* %95, align 8, !dbg !43, !tbaa !4
  %97 = and i64 %96, 8, !dbg !43
  %98 = icmp eq i64 %97, 0, !dbg !43
  br i1 %98, label %99, label %101, !dbg !43, !prof !40

99:                                               ; preds = %afterSend.i.i
  %100 = getelementptr inbounds i64, i64* %95, i64 -3, !dbg !43
  store i64 %90, i64* %100, align 8, !dbg !43, !tbaa !4
  br label %"func_<root>.<static-init>$153.exit", !dbg !43

101:                                              ; preds = %afterSend.i.i
  call void @sorbet_vm_env_write_slowpath(i64* nonnull %95, i32 -3, i64 %90) #9, !dbg !43
  br label %"func_<root>.<static-init>$153.exit", !dbg !43

"func_<root>.<static-init>$153.exit":             ; preds = %99, %101
  %102 = getelementptr inbounds i64, i64* %59, i64 7, !dbg !43
  store i64* %102, i64** %53, align 8, !dbg !43, !tbaa !8
  %rubyId_fib.i.i1 = load i64, i64* @rubyIdPrecomputed_fib, align 8, !dbg !44
  %rawSym26.i.i = call i64 @rb_id2sym(i64 %rubyId_fib.i.i1) #9, !dbg !44
  %rubyId_normal.i.i = load i64, i64* @rubyIdPrecomputed_normal, align 8, !dbg !44
  %rawSym27.i.i = call i64 @rb_id2sym(i64 %rubyId_normal.i.i) #9, !dbg !44
  call void @rb_define_singleton_method(i64 %47, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_fib, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @func_HasFib.fib to i64 (...)*), i32 -1) #9, !dbg !44
  %103 = getelementptr inbounds i64, i64* %39, i64 16, !dbg !28
  store i64* %103, i64** %34, align 8, !dbg !28, !tbaa !8
  %callArgs0Addr.i = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs.i, i64 0, i64 0, !dbg !45
  store i64 69, i64* %callArgs0Addr.i, align 8, !dbg !45
  %rubyId_fib.i = load i64, i64* @rubyIdPrecomputed_fib, align 8, !dbg !45
  %callFunc_fib.i = call i64 @sorbet_callFuncWithCache(i64 %47, i64 %rubyId_fib.i, i32 1, i64* nonnull %callArgs0Addr.i, i32 0, %struct.FunctionInlineCache* nonnull @ic_callFunc_fib) #9, !dbg !45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23)
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @func_HasFib.fib(i32 %argc, i64* nocapture readonly %argArray, i64 %selfRaw) #7 !dbg !46 {
functionEntryInitializers:
  %callArgs = alloca [1 x i64], align 8
  %stackFrame_func_HasFib.fib = load i8*, i8** @stackFramePrecomputed_func_HasFib.fib, align 8
  %0 = bitcast i8* %stackFrame_func_HasFib.fib to %struct.rb_iseq_struct*
  %1 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !8
  %2 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %1, i64 0, i32 2
  %3 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %2, align 8, !tbaa !10
  %4 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %3, i64 0, i32 2
  %5 = bitcast %struct.rb_iseq_struct** %4 to i8**
  store i8* %stackFrame_func_HasFib.fib, i8** %5, align 8, !tbaa !14
  %6 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %3, i64 0, i32 4
  %7 = load i64*, i64** %6, align 8, !tbaa !16
  %8 = load i64, i64* %7, align 8, !tbaa !4
  %9 = and i64 %8, -129
  store i64 %9, i64* %7, align 8, !tbaa !4
  tail call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %1, %struct.rb_control_frame_struct* nonnull %3, %struct.rb_iseq_struct* %0) #9
  %10 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %3, i64 0, i32 0
  %11 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %4, align 8, !tbaa !14
  %12 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %11, i64 0, i32 2
  %13 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %12, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %13, i64 0, i32 2
  %15 = load i64*, i64** %14, align 8, !tbaa !19
  %16 = getelementptr inbounds i64, i64* %15, i64 1
  store i64* %16, i64** %10, align 8, !tbaa !8
  %17 = icmp eq i32 %argc, 1, !dbg !47
  br i1 %17, label %fillRequiredArgs, label %argCountFailBlock, !dbg !47, !prof !48

BB4.thread:                                       ; preds = %sorbet_rb_int_lt.exit
  store i64* %16, i64** %10, align 8, !tbaa !8
  br label %typeTestSuccess79

sorbet_rb_int_minus.exit98:                       ; preds = %sorbet_rb_int_lt.exit
  %18 = getelementptr inbounds i64, i64* %15, i64 5
  store i64* %18, i64** %10, align 8, !tbaa !8
  %19 = add nsw i64 %rawArg_n, -2, !dbg !49
  store i64 %19, i64* %callArgs0Addr, align 8, !dbg !50
  %rubyId_fib = load i64, i64* @rubyIdPrecomputed_fib, align 8, !dbg !50
  %callFunc_fib = call i64 @sorbet_callFuncWithCache(i64 %selfRaw, i64 %rubyId_fib, i32 1, i64* nonnull %callArgs0Addr, i32 0, %struct.FunctionInlineCache* nonnull @ic_callFunc_fib.1) #9, !dbg !50
  %20 = add nsw i64 %rawArg_n, -4, !dbg !51
  store i64 %20, i64* %callArgs0Addr, align 8, !dbg !52
  %rubyId_fib64 = load i64, i64* @rubyIdPrecomputed_fib, align 8, !dbg !52
  %callFunc_fib65 = call i64 @sorbet_callFuncWithCache(i64 %selfRaw, i64 %rubyId_fib64, i32 1, i64* nonnull %callArgs0Addr, i32 0, %struct.FunctionInlineCache* nonnull @ic_callFunc_fib.3) #9, !dbg !52
  %21 = and i64 %callFunc_fib, 1, !dbg !50
  %22 = icmp eq i64 %21, 0, !dbg !50
  store i64 %callFunc_fib65, i64* %callArgs0Addr, align 8, !dbg !50
  br i1 %22, label %"alternativeCallIntrinsic_Integer_+", label %"fastSymCallIntrinsic_Integer_+", !dbg !50, !prof !53

BB4:                                              ; preds = %36, %31, %40, %"alternativeCallIntrinsic_Integer_+"
  %"<returnMethodTemp>.sroa.0.0" = phi i64 [ %"callFunc_+", %"alternativeCallIntrinsic_Integer_+" ], [ %41, %40 ], [ %39, %36 ], [ %35, %31 ], !dbg !54
  store i64* %16, i64** %10, align 8, !tbaa !8
  %23 = and i64 %"<returnMethodTemp>.sroa.0.0", 1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %codeRepl102, label %typeTestSuccess79, !prof !53

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call void @sorbet_raiseArity(i32 %argc, i32 1, i32 1) #9, !dbg !47
  unreachable, !dbg !47

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %rawArg_n = load i64, i64* %argArray, align 8, !dbg !47
  %25 = and i64 %rawArg_n, 1, !dbg !55
  %26 = icmp eq i64 %25, 0, !dbg !55
  br i1 %26, label %codeRepl, label %sorbet_rb_int_lt.exit, !dbg !55, !prof !53

sorbet_rb_int_lt.exit:                            ; preds = %fillRequiredArgs
  %27 = getelementptr inbounds i64, i64* %15, i64 2, !dbg !55
  store i64* %27, i64** %10, align 8, !dbg !55, !tbaa !8
  %callArgs0Addr = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs, i64 0, i64 0, !dbg !56
  store i64 7, i64* %callArgs0Addr, align 8, !dbg !56
  %28 = icmp sgt i64 %rawArg_n, 5, !dbg !56
  br i1 %28, label %sorbet_rb_int_minus.exit98, label %BB4.thread, !dbg !56

codeRepl:                                         ; preds = %fillRequiredArgs
  tail call fastcc void @func_HasFib.fib.cold.1(i64 %rawArg_n) #12, !dbg !55
  unreachable

"alternativeCallIntrinsic_Integer_+":             ; preds = %sorbet_rb_int_minus.exit98
  %"rubyId_+" = load i64, i64* @"rubyIdPrecomputed_+", align 8, !dbg !50
  %"callFunc_+" = call i64 @sorbet_callFuncWithCache(i64 %callFunc_fib, i64 %"rubyId_+", i32 1, i64* nonnull %callArgs0Addr, i32 0, %struct.FunctionInlineCache* nonnull @"ic_callFunc_+") #9, !dbg !50
  br label %BB4, !dbg !50

"fastSymCallIntrinsic_Integer_+":                 ; preds = %sorbet_rb_int_minus.exit98
  %29 = and i64 %callFunc_fib65, %21, !dbg !50
  %30 = icmp eq i64 %29, 0, !dbg !50
  br i1 %30, label %40, label %31, !dbg !50, !prof !57

31:                                               ; preds = %"fastSymCallIntrinsic_Integer_+"
  %32 = add nsw i64 %callFunc_fib65, -1, !dbg !50
  %33 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %callFunc_fib, i64 %32) #9, !dbg !50
  %34 = extractvalue { i64, i1 } %33, 1, !dbg !50
  %35 = extractvalue { i64, i1 } %33, 0, !dbg !50
  br i1 %34, label %36, label %BB4, !dbg !50

36:                                               ; preds = %31
  %37 = ashr i64 %35, 1, !dbg !50
  %38 = xor i64 %37, -9223372036854775808, !dbg !50
  %39 = tail call i64 @rb_int2big(i64 %38) #9, !dbg !50
  br label %BB4, !dbg !50

40:                                               ; preds = %"fastSymCallIntrinsic_Integer_+"
  %41 = tail call i64 @sorbet_rb_int_plus_slowpath(i64 %callFunc_fib, i64 %callFunc_fib65) #9, !dbg !50, !noalias !58
  br label %BB4, !dbg !50

typeTestSuccess79:                                ; preds = %BB4, %BB4.thread
  %"<returnMethodTemp>.sroa.0.0101" = phi i64 [ 3, %BB4.thread ], [ %"<returnMethodTemp>.sroa.0.0", %BB4 ]
  ret i64 %"<returnMethodTemp>.sroa.0.0101"

codeRepl102:                                      ; preds = %BB4
  tail call fastcc void @func_HasFib.fib.cold.2(i64 %"<returnMethodTemp>.sroa.0.0") #12
  unreachable
}

; Function Attrs: cold minsize noreturn nounwind sspreq uwtable
define internal fastcc void @func_HasFib.fib.cold.1(i64 %rawArg_n) unnamed_addr #8 {
newFuncRoot:
  tail call void @sorbet_cast_failure(i64 %rawArg_n, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_sig, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_Integer, i64 0, i64 0)) #9, !dbg !55
  unreachable, !dbg !55
}

; Function Attrs: cold minsize noreturn nounwind sspreq uwtable
define internal fastcc void @func_HasFib.fib.cold.2(i64 %"<returnMethodTemp>.sroa.0.0") unnamed_addr #8 {
newFuncRoot:
  tail call void @sorbet_cast_failure(i64 %"<returnMethodTemp>.sroa.0.0", i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"str_Return value", i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_Integer, i64 0, i64 0)) #9
  unreachable
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #9

; Function Attrs: ssp
define linkonce void @const_recompute_HasFib() local_unnamed_addr #10 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_HasFib, i64 0, i64 0), i64 6)
  store i64 %1, i64* @guarded_const_HasFib, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !34
  store i64 %2, i64* @guard_epoch_HasFib, align 8
  ret void
}

attributes #0 = { cold noreturn }
attributes #1 = { noreturn }
attributes #2 = { "addedToSilenceEmptyAttrsError" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind ssp uwtable }
attributes #6 = { sspreq }
attributes #7 = { nounwind sspreq uwtable }
attributes #8 = { cold minsize noreturn nounwind sspreq uwtable }
attributes #9 = { nounwind }
attributes #10 = { ssp }
attributes #11 = { noreturn nounwind }
attributes #12 = { noinline }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "Sorbet LLVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "test/testdata/ruby_benchmark/app_fib.rb", directory: ".")
!3 = !{}
!4 = !{!5, !5, i64 0}
!5 = !{!"long", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"any pointer", !6, i64 0}
!10 = !{!11, !9, i64 16}
!11 = !{!"rb_execution_context_struct", !9, i64 0, !5, i64 8, !9, i64 16, !9, i64 24, !9, i64 32, !12, i64 40, !12, i64 44, !9, i64 48, !9, i64 56, !9, i64 64, !5, i64 72, !5, i64 80, !9, i64 88, !5, i64 96, !9, i64 104, !9, i64 112, !5, i64 120, !5, i64 128, !6, i64 136, !6, i64 137, !5, i64 144, !13, i64 152}
!12 = !{!"int", !6, i64 0}
!13 = !{!"", !9, i64 0, !9, i64 8, !5, i64 16, !6, i64 24}
!14 = !{!15, !9, i64 16}
!15 = !{!"rb_control_frame_struct", !9, i64 0, !9, i64 8, !9, i64 16, !5, i64 24, !9, i64 32, !9, i64 40, !9, i64 48}
!16 = !{!15, !9, i64 32}
!17 = !{!18, !9, i64 16}
!18 = !{!"rb_iseq_struct", !5, i64 0, !5, i64 8, !9, i64 16, !6, i64 24}
!19 = !{!20, !9, i64 8}
!20 = !{!"rb_iseq_constant_body", !6, i64 0, !12, i64 4, !9, i64 8, !21, i64 16, !23, i64 64, !26, i64 120, !9, i64 152, !9, i64 160, !9, i64 168, !9, i64 176, !9, i64 184, !9, i64 192, !27, i64 200, !12, i64 232, !12, i64 236, !12, i64 240, !12, i64 244, !12, i64 248, !6, i64 252, !9, i64 256, !5, i64 264, !9, i64 272, !5, i64 280}
!21 = !{!"", !22, i64 0, !12, i64 4, !12, i64 8, !12, i64 12, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28, !9, i64 32, !9, i64 40}
!22 = !{!"", !12, i64 0, !12, i64 0, !12, i64 0, !12, i64 0, !12, i64 0, !12, i64 0, !12, i64 0, !12, i64 0, !12, i64 1, !12, i64 1}
!23 = !{!"rb_iseq_location_struct", !5, i64 0, !5, i64 8, !5, i64 16, !5, i64 24, !12, i64 32, !24, i64 36}
!24 = !{!"rb_code_location_struct", !25, i64 0, !25, i64 8}
!25 = !{!"rb_code_position_struct", !12, i64 0, !12, i64 4}
!26 = !{!"iseq_insn_info", !9, i64 0, !9, i64 8, !12, i64 16, !9, i64 24}
!27 = !{!"", !5, i64 0, !5, i64 8, !5, i64 16, !9, i64 24}
!28 = !DILocation(line: 0, scope: !29)
!29 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.<static-init>$153", scope: null, file: !2, line: 5, type: !30, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!30 = !DISubroutineType(types: !31)
!31 = !{!32}
!32 = !DIBasicType(name: "VALUE", size: 64, encoding: DW_ATE_signed)
!33 = !DILocation(line: 5, column: 1, scope: !29)
!34 = !{!35, !35, i64 0}
!35 = !{!"long long", !6, i64 0}
!36 = !{!"branch_weights", i32 10000, i32 1}
!37 = !DILocation(line: 5, column: 1, scope: !38, inlinedAt: !39)
!38 = distinct !DISubprogram(name: "HasFib.<static-init>", linkageName: "func_HasFib.<static-init>L64", scope: null, file: !2, line: 5, type: !30, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!39 = distinct !DILocation(line: 5, column: 1, scope: !29)
!40 = !{!"branch_weights", i32 2000, i32 1}
!41 = !DILocation(line: 0, scope: !38, inlinedAt: !39)
!42 = !DILocation(line: 6, column: 30, scope: !38, inlinedAt: !39)
!43 = !DILocation(line: 6, column: 3, scope: !38, inlinedAt: !39)
!44 = !DILocation(line: 7, column: 3, scope: !38, inlinedAt: !39)
!45 = !DILocation(line: 16, column: 1, scope: !29)
!46 = distinct !DISubprogram(name: "HasFib.fib", linkageName: "func_HasFib.fib", scope: null, file: !2, line: 7, type: !30, scopeLine: 7, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!47 = !DILocation(line: 7, column: 3, scope: !46)
!48 = !{!"branch_weights", i32 4000000, i32 4001}
!49 = !DILocation(line: 11, column: 11, scope: !46)
!50 = !DILocation(line: 11, column: 7, scope: !46)
!51 = !DILocation(line: 11, column: 22, scope: !46)
!52 = !DILocation(line: 11, column: 18, scope: !46)
!53 = !{!"branch_weights", i32 1, i32 2000}
!54 = !DILocation(line: 0, scope: !46)
!55 = !DILocation(line: 7, column: 16, scope: !46)
!56 = !DILocation(line: 8, column: 8, scope: !46)
!57 = !{!"branch_weights", i32 4001, i32 4000000}
!58 = !{!59}
!59 = distinct !{!59, !60, !"sorbet_rb_int_plus: argument 0"}
!60 = distinct !{!60, !"sorbet_rb_int_plus"}
