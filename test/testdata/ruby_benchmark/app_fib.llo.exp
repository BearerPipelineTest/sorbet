; ModuleID = 'payload'
source_filename = "compiler/IREmitter/Payload/payload.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_data_type_struct = type { i8*, %struct.anon.1, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.1 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.7 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.17 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon.2, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_info*, %struct.rb_call_cache*, %struct.anon.16, i32, i32, i32, i32, i32, i8 }
%struct.anon.2 = type { %struct.anon.3, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.3 = type { i8, [3 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.iseq_insn_info_entry*, i32*, i32, %struct.succ_index_table* }
%struct.iseq_insn_info_entry = type { i32, i32 }
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, %union.anon.13 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.rb_scope_visi_struct }
%struct.rb_scope_visi_struct = type { i8, [3 x i8] }
%union.anon.13 = type { i64 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.rb_call_cache = type { i64, i64, %struct.rb_callable_method_entry_struct*, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_info*, %struct.rb_call_cache*)*, %union.anon.15 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon.14, i64 }
%union.anon.14 = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64 (...)*, i64, i32, i64*)*, i32 }
%struct.rb_calling_info = type { i64, i64, i32 }
%union.anon.15 = type { i32 }
%struct.anon.16 = type { i64, i64, i64, i64* }
%union.anon.17 = type { %struct.anon.18 }
%struct.anon.18 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [38 x i32], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_fiber_struct = type opaque
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, %struct._opaque_pthread_t*, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %struct._opaque_pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.10, i32, i64, %struct.rb_fiber_struct*, [38 x i32], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %struct._opaque_pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.5, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %struct._opaque_pthread_mutex_t, i64, i64, i64, i64, i64, i32, i64, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.anon.6, [28 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %struct._opaque_pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %struct._opaque_pthread_cond_t, %struct._opaque_pthread_cond_t, i32, i32 }
%struct._opaque_pthread_cond_t = type { i64, [40 x i8] }
%struct.anon.5 = type { [32 x i64], [32 x i8] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.anon.6 = type { i64, i64, i64, i64 }
%struct._opaque_pthread_t = type { i64, %struct.__darwin_pthread_handler_rec*, [8176 x i8] }
%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }
%struct.native_thread_data_struct = type { %union.anon.8, %struct.anon.9 }
%union.anon.8 = type { %struct.list_node }
%struct.anon.9 = type { %struct._opaque_pthread_cond_t, %struct._opaque_pthread_cond_t }
%struct._opaque_pthread_mutex_t = type { i64, [56 x i8] }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.10 = type { %struct.anon.11 }
%struct.anon.11 = type { i64, i64 }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (...)*, i64 (...)* }
%struct.st_table_entry = type opaque
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (...)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.7 = type { i64*, i64*, i64, [37 x i32] }
%struct.RBasic = type { i64, i64 }
%struct.RString = type { %struct.RBasic, %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { i64, i8*, %union.anon.0 }
%union.anon.0 = type { i64 }
%struct.OnigEncodingTypeST = type { i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i8*, i32, i32, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8**, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i32 (i32, i32*, i32, i8*)*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, i8*, %struct.OnigCaseFoldCodeItem*, %struct.OnigEncodingTypeST*)*, i32 (%struct.OnigEncodingTypeST*, i8*, i8*)*, i32 (i32, i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i32*, i32**, %struct.OnigEncodingTypeST*)*, i8* (i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32*, i8**, i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32, i32 }
%struct.OnigCaseFoldCodeItem = type { i32, i32, [3 x i32] }
%struct.rb_ast_body_struct = type { %struct.RNode*, i64, i32 }
%struct.RNode = type { i64, %union.anon.20, %union.anon.21, %union.anon.22, %struct.rb_code_location_struct, i32 }
%union.anon.20 = type { %struct.RNode* }
%union.anon.21 = type { %struct.RNode* }
%union.anon.22 = type { %struct.RNode* }
%struct.RTypedData = type { %struct.RBasic, %struct.rb_data_type_struct*, i64, i8* }
%struct.sorbet_Closure = type { i32, [0 x i64] }
%struct.RFloat = type { %struct.RBasic, double }

@.str = private unnamed_addr constant [5 x i8] c"%li\0B\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@ruby_vm_global_constant_state = external local_unnamed_addr global i64, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.1 = private unnamed_addr constant [29 x i8] c"wrong constant name %li\0B%li\0B\00", align 1
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@.str.2 = private unnamed_addr constant [36 x i8] c"%li\0B does not refer to class/module\00", align 1
@sorbet_getConstantAt.rb_intern_id_cache = internal unnamed_addr global i64 0, align 8
@.str.3 = private unnamed_addr constant [14 x i8] c"const_missing\00", align 1
@.str.4 = private unnamed_addr constant [50 x i8] c"wrong number of arguments (given %d, expected %d)\00", align 1
@rb_eArgError = external local_unnamed_addr global i64, align 8
@.str.7 = private unnamed_addr constant [45 x i8] c"%s: Expected type %s, got %s with value %li\0B\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@closureInfo = constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i32 0, i32 0), %struct.anon.1 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@rb_cData = external local_unnamed_addr constant i64, align 8
@rb_cModule = external local_unnamed_addr constant i64, align 8
@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"str_test/testdata/ruby_benchmark/app_fib.rb" = private unnamed_addr constant [40 x i8] c"test/testdata/ruby_benchmark/app_fib.rb\00", align 1
@str_cast = private unnamed_addr constant [5 x i8] c"cast\00", align 1
@rubyIdPrecomputed_unsafe = internal unnamed_addr global i64 0, align 8
@str_unsafe = private unnamed_addr constant [7 x i8] c"unsafe\00", align 1
@str_HasFib = private unnamed_addr constant [7 x i8] c"HasFib\00", align 1
@rubyIdPrecomputed_fib = internal unnamed_addr global i64 0, align 8
@str_fib = private unnamed_addr constant [4 x i8] c"fib\00", align 1
@str_sig = private unnamed_addr constant [4 x i8] c"sig\00", align 1
@str_Integer = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@"str_T.class_of(HasFib)" = private unnamed_addr constant [19 x i8] c"T.class_of(HasFib)\00", align 1
@"rubyIdPrecomputed_<" = internal unnamed_addr global i64 0, align 8
@"str_<" = private unnamed_addr constant [2 x i8] c"<\00", align 1
@rubyIdPrecomputed_- = internal unnamed_addr global i64 0, align 8
@str_- = private unnamed_addr constant [2 x i8] c"-\00", align 1
@"rubyIdPrecomputed_+" = internal unnamed_addr global i64 0, align 8
@"str_+" = private unnamed_addr constant [2 x i8] c"+\00", align 1
@rubyIdPrecomputed_final = internal unnamed_addr global i64 0, align 8
@str_final = private unnamed_addr constant [6 x i8] c"final\00", align 1
@rubyIdPrecomputed_sig = internal unnamed_addr global i64 0, align 8
@"str_T::Sig::WithoutRuntime" = private unnamed_addr constant [23 x i8] c"T::Sig::WithoutRuntime\00", align 1
@rubyIdPrecomputed_n = internal unnamed_addr global i64 0, align 8
@str_n = private unnamed_addr constant [2 x i8] c"n\00", align 1
@rubyIdPrecomputed_params = internal unnamed_addr global i64 0, align 8
@str_params = private unnamed_addr constant [7 x i8] c"params\00", align 1
@rubyIdPrecomputed_returns = internal unnamed_addr global i64 0, align 8
@str_returns = private unnamed_addr constant [8 x i8] c"returns\00", align 1
@llvm.global_ctors = appending global [11 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_<top (required)>", i8* bitcast (i64* @"rubyIdPrecomputed_<top (required)>" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_unsafe, i8* bitcast (i64* @rubyIdPrecomputed_unsafe to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_fib, i8* bitcast (i64* @rubyIdPrecomputed_fib to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_<", i8* bitcast (i64* @"rubyIdPrecomputed_<" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_-, i8* bitcast (i64* @rubyIdPrecomputed_- to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_+", i8* bitcast (i64* @"rubyIdPrecomputed_+" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_final, i8* bitcast (i64* @rubyIdPrecomputed_final to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_sig, i8* bitcast (i64* @rubyIdPrecomputed_sig to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_n, i8* bitcast (i64* @rubyIdPrecomputed_n to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_params, i8* bitcast (i64* @rubyIdPrecomputed_params to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_returns, i8* bitcast (i64* @rubyIdPrecomputed_returns to i8*) }]
@guard_epoch_HasFib = linkonce local_unnamed_addr global i64 0
@guarded_const_HasFib = linkonce local_unnamed_addr global i64 0
@"guard_epoch_T::Sig::WithoutRuntime" = linkonce local_unnamed_addr global i64 0
@"guarded_const_T::Sig::WithoutRuntime" = linkonce local_unnamed_addr global i64 0
@rb_cInteger = external local_unnamed_addr constant i64

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_pi(i64 %0) local_unnamed_addr #0 {
  %2 = tail call i8* @rb_id2name(i64 %0) #19
  ret i8* %2
}

declare i8* @rb_id2name(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_p(i64 %0) local_unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 %0) #19
  %3 = inttoptr i64 %2 to %struct.RBasic*
  %4 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !0
  %6 = and i64 %5, 8192
  %7 = icmp eq i64 %6, 0
  %8 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 %0) #19
  %9 = inttoptr i64 %8 to %struct.RString*
  br i1 %7, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !5
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i8* [ %12, %10 ], [ %15, %13 ]
  ret i8* %17
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define void @stopInDebugger() local_unnamed_addr #0 {
  tail call void asm sideeffect "int $$3", "~{dirflag},~{fpsr},~{flags}"() #19, !srcloc !6
  ret void
}

declare i64 @rb_str_new(i8*, i64) local_unnamed_addr #1

declare i64 @rb_hash_new() local_unnamed_addr #1

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #1

declare i64 @rb_id2sym(i64) local_unnamed_addr #1

declare i8* @rb_obj_classname(i64) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @sorbet_getConstantAt(i64 %0, i64 %1) unnamed_addr #2 {
  %3 = tail call i64 @rb_id2sym(i64 %1) #19
  %4 = tail call %struct.OnigEncodingTypeST* @rb_enc_get(i64 %3) #19
  %5 = tail call i8* @rb_id2name(i64 %1) #19
  %6 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %5)
  %7 = getelementptr inbounds i8, i8* %5, i64 %6
  %8 = icmp sgt i64 %6, 0
  br i1 %8, label %9, label %.loopexit11

9:                                                ; preds = %2
  %10 = ptrtoint i8* %5 to i64
  br label %13

.loopexit10:                                      ; preds = %91, %44, %41, %28, %107
  %11 = phi i64 [ %108, %107 ], [ %3, %28 ], [ %3, %44 ], [ %3, %41 ], [ %66, %91 ]
  %12 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !7
  tail call void (i64, i8*, ...) @rb_raise(i64 %12, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i64 %14, i64 %11) #20
  unreachable

13:                                               ; preds = %115, %9
  %14 = phi i64 [ %0, %9 ], [ %116, %115 ]
  %15 = phi i8* [ %5, %9 ], [ %50, %115 ]
  %16 = phi i8* [ %5, %9 ], [ %49, %115 ]
  %17 = icmp ult i8* %16, %7
  br i1 %17, label %18, label %28

18:                                               ; preds = %13
  %19 = load i8, i8* %16, align 1, !tbaa !5
  %20 = icmp eq i8 %19, 58
  br i1 %20, label %28, label %.preheader

21:                                               ; preds = %.preheader
  %22 = load i8, i8* %25, align 1, !tbaa !5
  %23 = icmp eq i8 %22, 58
  br i1 %23, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %18, %21
  %24 = phi i8* [ %25, %21 ], [ %16, %18 ]
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  %26 = icmp eq i8* %25, %7
  br i1 %26, label %.loopexit, label %21

.loopexit:                                        ; preds = %21, %.preheader
  %.lcssa = phi i8* [ %25, %21 ], [ %7, %.preheader ]
  %27 = icmp ult i8* %.lcssa, %7
  br label %28

28:                                               ; preds = %.loopexit, %18, %13
  %29 = phi i8* [ %16, %13 ], [ %16, %18 ], [ %.lcssa, %.loopexit ]
  %30 = phi i1 [ false, %13 ], [ true, %18 ], [ %27, %.loopexit ]
  %31 = icmp eq i8* %15, %29
  br i1 %31, label %.loopexit10, label %32

32:                                               ; preds = %28
  %33 = ptrtoint i8* %29 to i64
  %34 = ptrtoint i8* %15 to i64
  %35 = sub i64 %33, %34
  %36 = tail call i64 @rb_check_id_cstr(i8* %15, i64 %35, %struct.OnigEncodingTypeST* %4) #19
  %37 = sub i64 %34, %10
  br i1 %30, label %38, label %48

38:                                               ; preds = %32
  %39 = load i8, i8* %29, align 1, !tbaa !5
  %40 = icmp eq i8 %39, 58
  br i1 %40, label %41, label %48

41:                                               ; preds = %38
  %42 = getelementptr inbounds i8, i8* %29, i64 2
  %43 = icmp ult i8* %42, %7
  br i1 %43, label %44, label %.loopexit10

44:                                               ; preds = %41
  %45 = getelementptr inbounds i8, i8* %29, i64 1
  %46 = load i8, i8* %45, align 1, !tbaa !5
  %47 = icmp eq i8 %46, 58
  br i1 %47, label %48, label %.loopexit10

48:                                               ; preds = %44, %38, %32
  %49 = phi i8* [ %29, %38 ], [ %29, %32 ], [ %42, %44 ]
  %50 = phi i8* [ %15, %38 ], [ %15, %32 ], [ %42, %44 ]
  %51 = and i64 %14, 7
  %52 = icmp ne i64 %51, 0
  %53 = and i64 %14, -9
  %54 = icmp eq i64 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %61, label %56

56:                                               ; preds = %48
  %57 = inttoptr i64 %14 to %struct.RBasic*
  %58 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %57, i64 0, i32 0
  %59 = load i64, i64* %58, align 8, !tbaa !0
  %60 = and i64 %59, 30
  %switch = icmp eq i64 %60, 2
  br i1 %switch, label %63, label %61

61:                                               ; preds = %56, %48
  %62 = load i64, i64* @rb_eTypeError, align 8, !tbaa !7
  tail call void (i64, i8*, ...) @rb_raise(i64 %62, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i64 %3) #20
  unreachable

63:                                               ; preds = %56
  %64 = icmp eq i64 %36, 0
  br i1 %64, label %65, label %104

65:                                               ; preds = %63
  %66 = tail call i64 @rb_str_subseq(i64 %3, i64 %37, i64 %35) #19
  %67 = and i64 %66, 7
  %68 = icmp ne i64 %67, 0
  %69 = and i64 %66, -9
  %70 = icmp eq i64 %69, 0
  %71 = or i1 %68, %70
  br i1 %71, label %rb_obj_freeze_inline.exit, label %72

72:                                               ; preds = %65
  %73 = inttoptr i64 %66 to %struct.RBasic*
  %74 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %73, i64 0, i32 0
  %75 = load i64, i64* %74, align 8, !tbaa !0
  %76 = and i64 %75, 31
  %77 = icmp eq i64 %76, 27
  br i1 %77, label %rb_obj_freeze_inline.exit, label %78

78:                                               ; preds = %72
  %79 = or i64 %75, 2048
  store i64 %79, i64* %74, align 8, !tbaa !0
  %80 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %73, i64 0, i32 1
  %81 = load i64, i64* %80, align 8, !tbaa !8
  %82 = icmp ne i64 %81, 0
  %83 = and i64 %75, 4096
  %84 = icmp eq i64 %83, 0
  %85 = and i1 %84, %82
  br i1 %85, label %86, label %rb_obj_freeze_inline.exit

86:                                               ; preds = %78
  tail call void @rb_freeze_singleton_class(i64 %66) #19
  br label %rb_obj_freeze_inline.exit

rb_obj_freeze_inline.exit:                        ; preds = %65, %72, %78, %86
  %87 = load i64, i64* @sorbet_getConstantAt.rb_intern_id_cache, align 8, !tbaa !7
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %91

89:                                               ; preds = %rb_obj_freeze_inline.exit
  %90 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i64 13) #19
  store i64 %90, i64* @sorbet_getConstantAt.rb_intern_id_cache, align 8, !tbaa !7
  br label %91

91:                                               ; preds = %89, %rb_obj_freeze_inline.exit
  %92 = load i64, i64* @sorbet_getConstantAt.rb_intern_id_cache, align 8, !tbaa !7
  %93 = tail call i32 @rb_is_const_name(i64 %66) #19
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %.loopexit10, label %rb_class_of.exit

rb_class_of.exit:                                 ; preds = %91
  %95 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %57, i64 0, i32 1
  %96 = load i64, i64* %95, align 8, !tbaa !7
  %97 = tail call i32 @rb_method_basic_definition_p(i64 %96, i64 %92) #19
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %102

99:                                               ; preds = %rb_class_of.exit
  %100 = tail call i64 @rb_str_intern(i64 %66) #19
  %101 = tail call i64 @rb_const_missing(i64 %14, i64 %100) #19
  br label %115

102:                                              ; preds = %rb_class_of.exit
  %103 = tail call i64 @rb_mod_const_missing(i64 %14, i64 %66) #20
  unreachable

104:                                              ; preds = %63
  %105 = tail call i32 @rb_is_const_id(i64 %36) #5
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %109

107:                                              ; preds = %104
  %108 = tail call i64 @rb_id2sym(i64 %36) #19
  br label %.loopexit10

109:                                              ; preds = %104
  %110 = icmp eq i64 %37, 0
  br i1 %110, label %111, label %113

111:                                              ; preds = %109
  %112 = tail call i64 @rb_const_get(i64 %14, i64 %36) #19
  br label %115

113:                                              ; preds = %109
  %114 = tail call i64 @rb_const_get_from(i64 %14, i64 %36) #19
  br label %115

115:                                              ; preds = %113, %111, %99
  %116 = phi i64 [ %101, %99 ], [ %112, %111 ], [ %114, %113 ]
  %117 = icmp ult i8* %49, %7
  br i1 %117, label %13, label %.loopexit11

.loopexit11:                                      ; preds = %115, %2
  %118 = phi i64 [ %0, %2 ], [ %116, %115 ]
  ret i64 %118
}

declare %struct.OnigEncodingTypeST* @rb_enc_get(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #4

declare i64 @rb_check_id_cstr(i8*, i64, %struct.OnigEncodingTypeST*) local_unnamed_addr #1

declare i64 @rb_str_subseq(i64, i64, i64) local_unnamed_addr #1

declare i32 @rb_is_const_name(i64) local_unnamed_addr #1

declare i32 @rb_method_basic_definition_p(i64, i64) local_unnamed_addr #1

declare i64 @rb_str_intern(i64) local_unnamed_addr #1

declare i64 @rb_const_missing(i64, i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare i64 @rb_mod_const_missing(i64, i64) local_unnamed_addr #4

; Function Attrs: nounwind readnone
declare i32 @rb_is_const_id(i64) local_unnamed_addr #5

declare i64 @rb_const_get(i64, i64) local_unnamed_addr #1

declare i64 @rb_const_get_from(i64, i64) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @sorbet_getConstant(i8* %0, i64 %1) unnamed_addr #2 {
  %3 = load i64, i64* @rb_cObject, align 8, !tbaa !7
  %4 = tail call i64 @rb_intern2(i8* %0, i64 %1) #19
  %5 = tail call fastcc i64 @sorbet_getConstantAt(i64 %3, i64 %4)
  ret i64 %5
}

declare i64 @rb_define_class(i8*, i64) local_unnamed_addr #1

declare void @rb_define_singleton_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #1

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #1

declare i64 @rb_block_call(i64, i64, i32, i64*, i64 (...)*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @sorbet_rb_arity_error_new(i32 %0) unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.4, i64 0, i64 0), i32 %0, i32 1) #19
  %3 = load i64, i64* @rb_eArgError, align 8, !tbaa !7
  %4 = tail call i64 @rb_exc_new_str(i64 %3, i64 %2) #19
  ret i64 %4
}

declare i64 @rb_exc_new_str(i64, i64) local_unnamed_addr #1

; Function Attrs: cold minsize noreturn nounwind optsize ssp uwtable
define internal fastcc void @sorbet_cast_failure(i64 %0, i8* %1, i8* %2) unnamed_addr #6 {
  %4 = load i64, i64* @rb_eTypeError, align 8, !tbaa !7
  %5 = tail call i8* @rb_obj_classname(i64 %0) #19
  tail call void (i64, i8*, ...) @rb_raise(i64 %4, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.7, i64 0, i64 0), i8* %1, i8* %2, i8* %5, i64 %0) #20
  unreachable
}

; Function Attrs: noreturn nounwind ssp uwtable
define internal fastcc void @sorbet_raiseArity(i32 %0) unnamed_addr #7 {
  %2 = tail call fastcc i64 @sorbet_rb_arity_error_new(i32 %0)
  tail call void @rb_exc_raise(i64 %2) #20
  unreachable
}

; Function Attrs: noreturn
declare void @rb_exc_raise(i64) local_unnamed_addr #4

; Function Attrs: inaccessiblememonly
declare i32 @ruby_stack_check() local_unnamed_addr #8

declare i8* @ruby_xmalloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8* %0) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !9
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #19
  ret void
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly %0) #9 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !9
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

declare i64 @rb_data_typed_object_wrap(i64, i8*, %struct.rb_data_type_struct*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrames(i64 %0, i64 %1, i64 %2, i64 %3, i64 %4, i32 %5, i32 %6) local_unnamed_addr #0 {
  %8 = tail call %struct.rb_iseq_struct* @rb_iseq_new(%struct.rb_ast_body_struct* null, i64 %1, i64 %3, i64 %4, %struct.rb_iseq_struct* null, i32 0) #19
  %9 = sub nsw i32 %6, %5
  %10 = add nsw i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = tail call i8* @ruby_xmalloc2(i64 %11, i64 8) #19
  %13 = bitcast i8* %12 to %struct.iseq_insn_info_entry*
  %14 = tail call i8* @ruby_xmalloc2(i64 %11, i64 4) #19
  %15 = bitcast i8* %14 to i32*
  %16 = icmp slt i32 %9, 0
  br i1 %16, label %.loopexit, label %17

17:                                               ; preds = %7
  %18 = sub i32 1, %5
  %19 = add i32 %18, %6
  %20 = zext i32 %19 to i64
  %min.iters.check = icmp ult i32 %19, 8
  br i1 %min.iters.check, label %scalar.ph.preheader, label %vector.memcheck

scalar.ph.preheader:                              ; preds = %middle.block, %vector.memcheck, %17
  %.ph = phi i64 [ 0, %vector.memcheck ], [ 0, %17 ], [ %n.vec, %middle.block ]
  %21 = xor i64 %.ph, -1
  %22 = add nsw i64 %21, %20
  %xtraiter = and i64 %20, 7
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %scalar.ph.prol.loopexit, label %scalar.ph.prol

scalar.ph.prol:                                   ; preds = %scalar.ph.preheader, %scalar.ph.prol
  %23 = phi i64 [ %28, %scalar.ph.prol ], [ %.ph, %scalar.ph.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %scalar.ph.prol ], [ %xtraiter, %scalar.ph.preheader ]
  %24 = trunc i64 %23 to i32
  %25 = add nsw i32 %24, %5
  %26 = getelementptr inbounds i32, i32* %15, i64 %23
  store i32 %24, i32* %26, align 4, !tbaa !9
  %27 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %13, i64 %23, i32 0
  store i32 %25, i32* %27, align 4, !tbaa !11
  %28 = add nuw nsw i64 %23, 1
  %prol.iter.sub = add nsw i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %scalar.ph.prol.loopexit, label %scalar.ph.prol, !llvm.loop !13

scalar.ph.prol.loopexit:                          ; preds = %scalar.ph.prol, %scalar.ph.preheader
  %.unr = phi i64 [ %.ph, %scalar.ph.preheader ], [ %28, %scalar.ph.prol ]
  %29 = icmp ult i64 %22, 7
  br i1 %29, label %.loopexit, label %scalar.ph

vector.memcheck:                                  ; preds = %17
  %30 = shl nuw nsw i64 %20, 2
  %scevgep = getelementptr i8, i8* %14, i64 %30
  %31 = shl nuw nsw i64 %20, 3
  %32 = add nsw i64 %31, -4
  %scevgep1 = getelementptr i8, i8* %12, i64 %32
  %bound0 = icmp ult i8* %14, %scevgep1
  %bound1 = icmp ult i8* %12, %scevgep
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %n.vec = and i64 %20, 4294967288
  %broadcast.splatinsert = insertelement <8 x i32> undef, i32 %5, i32 0
  %broadcast.splat = shufflevector <8 x i32> %broadcast.splatinsert, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind2 = phi <8 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, %vector.ph ], [ %vec.ind.next3, %vector.body ]
  %33 = or i64 %index, 1
  %34 = or i64 %index, 2
  %35 = or i64 %index, 3
  %36 = or i64 %index, 4
  %37 = or i64 %index, 5
  %38 = or i64 %index, 6
  %39 = or i64 %index, 7
  %40 = add nsw <8 x i32> %vec.ind2, %broadcast.splat
  %41 = getelementptr inbounds i32, i32* %15, i64 %index
  %42 = bitcast i32* %41 to <8 x i32>*
  store <8 x i32> %vec.ind2, <8 x i32>* %42, align 4, !tbaa !9, !alias.scope !15, !noalias !18
  %43 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %13, i64 %index, i32 0
  %44 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %13, i64 %33, i32 0
  %45 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %13, i64 %34, i32 0
  %46 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %13, i64 %35, i32 0
  %47 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %13, i64 %36, i32 0
  %48 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %13, i64 %37, i32 0
  %49 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %13, i64 %38, i32 0
  %50 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %13, i64 %39, i32 0
  %51 = extractelement <8 x i32> %40, i32 0
  store i32 %51, i32* %43, align 4, !tbaa !11, !alias.scope !18
  %52 = extractelement <8 x i32> %40, i32 1
  store i32 %52, i32* %44, align 4, !tbaa !11, !alias.scope !18
  %53 = extractelement <8 x i32> %40, i32 2
  store i32 %53, i32* %45, align 4, !tbaa !11, !alias.scope !18
  %54 = extractelement <8 x i32> %40, i32 3
  store i32 %54, i32* %46, align 4, !tbaa !11, !alias.scope !18
  %55 = extractelement <8 x i32> %40, i32 4
  store i32 %55, i32* %47, align 4, !tbaa !11, !alias.scope !18
  %56 = extractelement <8 x i32> %40, i32 5
  store i32 %56, i32* %48, align 4, !tbaa !11, !alias.scope !18
  %57 = extractelement <8 x i32> %40, i32 6
  store i32 %57, i32* %49, align 4, !tbaa !11, !alias.scope !18
  %58 = extractelement <8 x i32> %40, i32 7
  store i32 %58, i32* %50, align 4, !tbaa !11, !alias.scope !18
  %index.next = add i64 %index, 8
  %vec.ind.next3 = add <8 x i32> %vec.ind2, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %59 = icmp eq i64 %index.next, %n.vec
  br i1 %59, label %middle.block, label %vector.body, !llvm.loop !20

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %20
  br i1 %cmp.n, label %.loopexit, label %scalar.ph.preheader

.loopexit:                                        ; preds = %scalar.ph, %scalar.ph.prol.loopexit, %middle.block, %7
  %60 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %8, i64 0, i32 2
  %61 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %60, align 8, !tbaa !22
  %62 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %61, i64 0, i32 5, i32 0
  %63 = bitcast %struct.iseq_insn_info_entry** %62 to i8**
  store i8* %12, i8** %63, align 8, !tbaa !25
  %64 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %61, i64 0, i32 5, i32 1
  %65 = bitcast i32** %64 to i8**
  store i8* %14, i8** %65, align 8, !tbaa !34
  %66 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %61, i64 0, i32 1
  store i32 %10, i32* %66, align 4, !tbaa !35
  %67 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %61, i64 0, i32 5, i32 2
  store i32 %10, i32* %67, align 8, !tbaa !36
  tail call void @rb_iseq_insns_info_encode_positions(%struct.rb_iseq_struct* %8) #19
  %68 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %60, align 8, !tbaa !22
  %69 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %68, i64 0, i32 2
  store i64* null, i64** %69, align 8, !tbaa !37
  ret %struct.rb_iseq_struct* %8

scalar.ph:                                        ; preds = %scalar.ph.prol.loopexit, %scalar.ph
  %70 = phi i64 [ %110, %scalar.ph ], [ %.unr, %scalar.ph.prol.loopexit ]
  %71 = trunc i64 %70 to i32
  %72 = add nsw i32 %71, %5
  %73 = getelementptr inbounds i32, i32* %15, i64 %70
  store i32 %71, i32* %73, align 4, !tbaa !9
  %74 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %13, i64 %70, i32 0
  store i32 %72, i32* %74, align 4, !tbaa !11
  %75 = add nuw nsw i64 %70, 1
  %76 = trunc i64 %75 to i32
  %77 = add nsw i32 %76, %5
  %78 = getelementptr inbounds i32, i32* %15, i64 %75
  store i32 %76, i32* %78, align 4, !tbaa !9
  %79 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %13, i64 %75, i32 0
  store i32 %77, i32* %79, align 4, !tbaa !11
  %80 = add nuw nsw i64 %70, 2
  %81 = trunc i64 %80 to i32
  %82 = add nsw i32 %81, %5
  %83 = getelementptr inbounds i32, i32* %15, i64 %80
  store i32 %81, i32* %83, align 4, !tbaa !9
  %84 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %13, i64 %80, i32 0
  store i32 %82, i32* %84, align 4, !tbaa !11
  %85 = add nuw nsw i64 %70, 3
  %86 = trunc i64 %85 to i32
  %87 = add nsw i32 %86, %5
  %88 = getelementptr inbounds i32, i32* %15, i64 %85
  store i32 %86, i32* %88, align 4, !tbaa !9
  %89 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %13, i64 %85, i32 0
  store i32 %87, i32* %89, align 4, !tbaa !11
  %90 = add nuw nsw i64 %70, 4
  %91 = trunc i64 %90 to i32
  %92 = add nsw i32 %91, %5
  %93 = getelementptr inbounds i32, i32* %15, i64 %90
  store i32 %91, i32* %93, align 4, !tbaa !9
  %94 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %13, i64 %90, i32 0
  store i32 %92, i32* %94, align 4, !tbaa !11
  %95 = add nuw nsw i64 %70, 5
  %96 = trunc i64 %95 to i32
  %97 = add nsw i32 %96, %5
  %98 = getelementptr inbounds i32, i32* %15, i64 %95
  store i32 %96, i32* %98, align 4, !tbaa !9
  %99 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %13, i64 %95, i32 0
  store i32 %97, i32* %99, align 4, !tbaa !11
  %100 = add nuw nsw i64 %70, 6
  %101 = trunc i64 %100 to i32
  %102 = add nsw i32 %101, %5
  %103 = getelementptr inbounds i32, i32* %15, i64 %100
  store i32 %101, i32* %103, align 4, !tbaa !9
  %104 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %13, i64 %100, i32 0
  store i32 %102, i32* %104, align 4, !tbaa !11
  %105 = add nuw nsw i64 %70, 7
  %106 = trunc i64 %105 to i32
  %107 = add nsw i32 %106, %5
  %108 = getelementptr inbounds i32, i32* %15, i64 %105
  store i32 %106, i32* %108, align 4, !tbaa !9
  %109 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %13, i64 %105, i32 0
  store i32 %107, i32* %109, align 4, !tbaa !11
  %110 = add nuw nsw i64 %70, 8
  %111 = icmp eq i64 %110, %20
  br i1 %111, label %.loopexit, label %scalar.ph, !llvm.loop !38
}

declare %struct.rb_iseq_struct* @rb_iseq_new(%struct.rb_ast_body_struct*, i64, i64, i64, %struct.rb_iseq_struct*, i32) local_unnamed_addr #1

declare i8* @ruby_xmalloc2(i64, i64) local_unnamed_addr #1

declare void @rb_iseq_insns_info_encode_positions(%struct.rb_iseq_struct*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define i64** @sorbet_setRubyStackFrame(i64 %0, i64 %1, i64 %2, i64 %3, i64 %4, i32 %5, i32 %6) local_unnamed_addr #0 {
  %8 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %9 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %8, i64 0, i32 2
  %10 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %9, align 8, !tbaa !40
  %11 = tail call %struct.rb_iseq_struct* @rb_iseq_new(%struct.rb_ast_body_struct* null, i64 %1, i64 %3, i64 %4, %struct.rb_iseq_struct* null, i32 0) #19
  %12 = sub nsw i32 %6, %5
  %13 = add nsw i32 %12, 1
  %14 = sext i32 %13 to i64
  %15 = tail call i8* @ruby_xmalloc2(i64 %14, i64 8) #19
  %16 = bitcast i8* %15 to %struct.iseq_insn_info_entry*
  %17 = tail call i8* @ruby_xmalloc2(i64 %14, i64 4) #19
  %18 = bitcast i8* %17 to i32*
  %19 = icmp slt i32 %12, 0
  br i1 %19, label %sorbet_allocateRubyStackFrames.exit, label %20

20:                                               ; preds = %7
  %21 = sub i32 1, %5
  %22 = add i32 %21, %6
  %23 = zext i32 %22 to i64
  %min.iters.check = icmp ult i32 %22, 8
  br i1 %min.iters.check, label %scalar.ph.preheader, label %vector.memcheck

vector.memcheck:                                  ; preds = %20
  %24 = shl nuw nsw i64 %23, 2
  %scevgep = getelementptr i8, i8* %17, i64 %24
  %25 = shl nuw nsw i64 %23, 3
  %26 = add nsw i64 %25, -4
  %scevgep1 = getelementptr i8, i8* %15, i64 %26
  %bound0 = icmp ult i8* %17, %scevgep1
  %bound1 = icmp ult i8* %15, %scevgep
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %n.vec = and i64 %23, 4294967288
  %broadcast.splatinsert = insertelement <8 x i32> undef, i32 %5, i32 0
  %broadcast.splat = shufflevector <8 x i32> %broadcast.splatinsert, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind2 = phi <8 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, %vector.ph ], [ %vec.ind.next3, %vector.body ]
  %27 = or i64 %index, 1
  %28 = or i64 %index, 2
  %29 = or i64 %index, 3
  %30 = or i64 %index, 4
  %31 = or i64 %index, 5
  %32 = or i64 %index, 6
  %33 = or i64 %index, 7
  %34 = add nsw <8 x i32> %vec.ind2, %broadcast.splat
  %35 = getelementptr inbounds i32, i32* %18, i64 %index
  %36 = bitcast i32* %35 to <8 x i32>*
  store <8 x i32> %vec.ind2, <8 x i32>* %36, align 4, !tbaa !9, !alias.scope !43, !noalias !46
  %37 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %16, i64 %index, i32 0
  %38 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %16, i64 %27, i32 0
  %39 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %16, i64 %28, i32 0
  %40 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %16, i64 %29, i32 0
  %41 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %16, i64 %30, i32 0
  %42 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %16, i64 %31, i32 0
  %43 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %16, i64 %32, i32 0
  %44 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %16, i64 %33, i32 0
  %45 = extractelement <8 x i32> %34, i32 0
  store i32 %45, i32* %37, align 4, !tbaa !11, !alias.scope !46
  %46 = extractelement <8 x i32> %34, i32 1
  store i32 %46, i32* %38, align 4, !tbaa !11, !alias.scope !46
  %47 = extractelement <8 x i32> %34, i32 2
  store i32 %47, i32* %39, align 4, !tbaa !11, !alias.scope !46
  %48 = extractelement <8 x i32> %34, i32 3
  store i32 %48, i32* %40, align 4, !tbaa !11, !alias.scope !46
  %49 = extractelement <8 x i32> %34, i32 4
  store i32 %49, i32* %41, align 4, !tbaa !11, !alias.scope !46
  %50 = extractelement <8 x i32> %34, i32 5
  store i32 %50, i32* %42, align 4, !tbaa !11, !alias.scope !46
  %51 = extractelement <8 x i32> %34, i32 6
  store i32 %51, i32* %43, align 4, !tbaa !11, !alias.scope !46
  %52 = extractelement <8 x i32> %34, i32 7
  store i32 %52, i32* %44, align 4, !tbaa !11, !alias.scope !46
  %index.next = add i64 %index, 8
  %vec.ind.next3 = add <8 x i32> %vec.ind2, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %53 = icmp eq i64 %index.next, %n.vec
  br i1 %53, label %middle.block, label %vector.body, !llvm.loop !48

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %23
  br i1 %cmp.n, label %sorbet_allocateRubyStackFrames.exit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %middle.block, %vector.memcheck, %20
  %.ph = phi i64 [ 0, %vector.memcheck ], [ 0, %20 ], [ %n.vec, %middle.block ]
  %54 = xor i64 %.ph, -1
  %55 = add nsw i64 %54, %23
  %xtraiter = and i64 %23, 7
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %scalar.ph.prol.loopexit, label %scalar.ph.prol

scalar.ph.prol:                                   ; preds = %scalar.ph.preheader, %scalar.ph.prol
  %56 = phi i64 [ %61, %scalar.ph.prol ], [ %.ph, %scalar.ph.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %scalar.ph.prol ], [ %xtraiter, %scalar.ph.preheader ]
  %57 = trunc i64 %56 to i32
  %58 = add nsw i32 %57, %5
  %59 = getelementptr inbounds i32, i32* %18, i64 %56
  store i32 %57, i32* %59, align 4, !tbaa !9
  %60 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %16, i64 %56, i32 0
  store i32 %58, i32* %60, align 4, !tbaa !11
  %61 = add nuw nsw i64 %56, 1
  %prol.iter.sub = add nsw i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %scalar.ph.prol.loopexit, label %scalar.ph.prol, !llvm.loop !49

scalar.ph.prol.loopexit:                          ; preds = %scalar.ph.prol, %scalar.ph.preheader
  %.unr = phi i64 [ %.ph, %scalar.ph.preheader ], [ %61, %scalar.ph.prol ]
  %62 = icmp ult i64 %55, 7
  br i1 %62, label %sorbet_allocateRubyStackFrames.exit, label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph.prol.loopexit, %scalar.ph
  %63 = phi i64 [ %103, %scalar.ph ], [ %.unr, %scalar.ph.prol.loopexit ]
  %64 = trunc i64 %63 to i32
  %65 = add nsw i32 %64, %5
  %66 = getelementptr inbounds i32, i32* %18, i64 %63
  store i32 %64, i32* %66, align 4, !tbaa !9
  %67 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %16, i64 %63, i32 0
  store i32 %65, i32* %67, align 4, !tbaa !11
  %68 = add nuw nsw i64 %63, 1
  %69 = trunc i64 %68 to i32
  %70 = add nsw i32 %69, %5
  %71 = getelementptr inbounds i32, i32* %18, i64 %68
  store i32 %69, i32* %71, align 4, !tbaa !9
  %72 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %16, i64 %68, i32 0
  store i32 %70, i32* %72, align 4, !tbaa !11
  %73 = add nuw nsw i64 %63, 2
  %74 = trunc i64 %73 to i32
  %75 = add nsw i32 %74, %5
  %76 = getelementptr inbounds i32, i32* %18, i64 %73
  store i32 %74, i32* %76, align 4, !tbaa !9
  %77 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %16, i64 %73, i32 0
  store i32 %75, i32* %77, align 4, !tbaa !11
  %78 = add nuw nsw i64 %63, 3
  %79 = trunc i64 %78 to i32
  %80 = add nsw i32 %79, %5
  %81 = getelementptr inbounds i32, i32* %18, i64 %78
  store i32 %79, i32* %81, align 4, !tbaa !9
  %82 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %16, i64 %78, i32 0
  store i32 %80, i32* %82, align 4, !tbaa !11
  %83 = add nuw nsw i64 %63, 4
  %84 = trunc i64 %83 to i32
  %85 = add nsw i32 %84, %5
  %86 = getelementptr inbounds i32, i32* %18, i64 %83
  store i32 %84, i32* %86, align 4, !tbaa !9
  %87 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %16, i64 %83, i32 0
  store i32 %85, i32* %87, align 4, !tbaa !11
  %88 = add nuw nsw i64 %63, 5
  %89 = trunc i64 %88 to i32
  %90 = add nsw i32 %89, %5
  %91 = getelementptr inbounds i32, i32* %18, i64 %88
  store i32 %89, i32* %91, align 4, !tbaa !9
  %92 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %16, i64 %88, i32 0
  store i32 %90, i32* %92, align 4, !tbaa !11
  %93 = add nuw nsw i64 %63, 6
  %94 = trunc i64 %93 to i32
  %95 = add nsw i32 %94, %5
  %96 = getelementptr inbounds i32, i32* %18, i64 %93
  store i32 %94, i32* %96, align 4, !tbaa !9
  %97 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %16, i64 %93, i32 0
  store i32 %95, i32* %97, align 4, !tbaa !11
  %98 = add nuw nsw i64 %63, 7
  %99 = trunc i64 %98 to i32
  %100 = add nsw i32 %99, %5
  %101 = getelementptr inbounds i32, i32* %18, i64 %98
  store i32 %99, i32* %101, align 4, !tbaa !9
  %102 = getelementptr inbounds %struct.iseq_insn_info_entry, %struct.iseq_insn_info_entry* %16, i64 %98, i32 0
  store i32 %100, i32* %102, align 4, !tbaa !11
  %103 = add nuw nsw i64 %63, 8
  %104 = icmp eq i64 %103, %23
  br i1 %104, label %sorbet_allocateRubyStackFrames.exit, label %scalar.ph, !llvm.loop !50

sorbet_allocateRubyStackFrames.exit:              ; preds = %scalar.ph, %scalar.ph.prol.loopexit, %middle.block, %7
  %105 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %11, i64 0, i32 2
  %106 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %105, align 8, !tbaa !22
  %107 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %106, i64 0, i32 5, i32 0
  %108 = bitcast %struct.iseq_insn_info_entry** %107 to i8**
  store i8* %15, i8** %108, align 8, !tbaa !25
  %109 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %106, i64 0, i32 5, i32 1
  %110 = bitcast i32** %109 to i8**
  store i8* %17, i8** %110, align 8, !tbaa !34
  %111 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %106, i64 0, i32 1
  store i32 %13, i32* %111, align 4, !tbaa !35
  %112 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %106, i64 0, i32 5, i32 2
  store i32 %13, i32* %112, align 8, !tbaa !36
  tail call void @rb_iseq_insns_info_encode_positions(%struct.rb_iseq_struct* %11) #19
  %113 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %105, align 8, !tbaa !22
  %114 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %113, i64 0, i32 2
  store i64* null, i64** %114, align 8, !tbaa !37
  %115 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %10, i64 0, i32 2
  store %struct.rb_iseq_struct* %11, %struct.rb_iseq_struct** %115, align 8, !tbaa !51
  %116 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %9, align 8, !tbaa !40
  %117 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %116, i64 0, i32 0
  ret i64** %117
}

; Function Attrs: nounwind readnone
declare i64 @rb_obj_is_kind_of(i64, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i64 @rb_class_inherited_p(i64, i64) local_unnamed_addr #5

declare void @rb_hash_bulk_insert(i64, i64*, i64) local_unnamed_addr #1

declare i64 @rb_big_plus(i64, i64) local_unnamed_addr #1

declare i64 @rb_complex_plus(i64, i64) local_unnamed_addr #1

declare i64 @rb_num_coerce_bin(i64, i64, i64) local_unnamed_addr #1

declare i64 @rb_int2big(i64) local_unnamed_addr #1

declare i64 @rb_big_minus(i64, i64) local_unnamed_addr #1

declare i64 @rb_float_new_in_heap(double) local_unnamed_addr #1

declare void @rb_ary_detransient(i64) local_unnamed_addr #1

declare void @rb_freeze_singleton_class(i64) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #10

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_<top (required)>"() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #19
  store i64 %0, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_unsafe() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_unsafe, i64 0, i64 0), i64 6) #19
  store i64 %0, i64* @rubyIdPrecomputed_unsafe, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_fib() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_fib, i64 0, i64 0), i64 3) #19
  store i64 %0, i64* @rubyIdPrecomputed_fib, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_test_testdata_ruby_benchmark_app_fib() local_unnamed_addr #12 {
afterSymCallIntrinsic_unsafe.i:
  %callArgs.i.i.i = alloca [2 x i64], align 8
  %callArgs.i = alloca [1 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8
  %1 = bitcast [1 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1)
  %rubyId_fib.i = load i64, i64* @rubyIdPrecomputed_fib, align 8
  %2 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #19
  %3 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"str_test/testdata/ruby_benchmark/app_fib.rb", i64 0, i64 0), i64 39) #19
  %4 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"str_test/testdata/ruby_benchmark/app_fib.rb", i64 0, i64 0), i64 39) #19
  %5 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %6 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %5, i64 0, i32 2
  %7 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %6, align 8, !tbaa !40
  %8 = tail call %struct.rb_iseq_struct* @rb_iseq_new(%struct.rb_ast_body_struct* null, i64 %2, i64 %3, i64 %4, %struct.rb_iseq_struct* null, i32 0) #19
  %9 = tail call i8* @ruby_xmalloc2(i64 12, i64 8) #19
  %10 = tail call i8* @ruby_xmalloc2(i64 12, i64 4) #19
  %11 = bitcast i8* %10 to i32*
  store i32 0, i32* %11, align 4, !tbaa !9
  %12 = bitcast i8* %9 to i32*
  store i32 3, i32* %12, align 4, !tbaa !11
  %13 = getelementptr inbounds i8, i8* %10, i64 4
  %14 = bitcast i8* %13 to i32*
  store i32 1, i32* %14, align 4, !tbaa !9
  %15 = getelementptr inbounds i8, i8* %9, i64 8
  %16 = bitcast i8* %15 to i32*
  store i32 4, i32* %16, align 4, !tbaa !11
  %17 = getelementptr inbounds i8, i8* %10, i64 8
  %18 = bitcast i8* %17 to i32*
  store i32 2, i32* %18, align 4, !tbaa !9
  %19 = getelementptr inbounds i8, i8* %9, i64 16
  %20 = bitcast i8* %19 to i32*
  store i32 5, i32* %20, align 4, !tbaa !11
  %21 = getelementptr inbounds i8, i8* %10, i64 12
  %22 = bitcast i8* %21 to i32*
  store i32 3, i32* %22, align 4, !tbaa !9
  %23 = getelementptr inbounds i8, i8* %9, i64 24
  %24 = bitcast i8* %23 to i32*
  store i32 6, i32* %24, align 4, !tbaa !11
  %25 = getelementptr inbounds i8, i8* %10, i64 16
  %26 = bitcast i8* %25 to i32*
  store i32 4, i32* %26, align 4, !tbaa !9
  %27 = getelementptr inbounds i8, i8* %9, i64 32
  %28 = bitcast i8* %27 to i32*
  store i32 7, i32* %28, align 4, !tbaa !11
  %29 = getelementptr inbounds i8, i8* %10, i64 20
  %30 = bitcast i8* %29 to i32*
  store i32 5, i32* %30, align 4, !tbaa !9
  %31 = getelementptr inbounds i8, i8* %9, i64 40
  %32 = bitcast i8* %31 to i32*
  store i32 8, i32* %32, align 4, !tbaa !11
  %33 = getelementptr inbounds i8, i8* %10, i64 24
  %34 = bitcast i8* %33 to i32*
  store i32 6, i32* %34, align 4, !tbaa !9
  %35 = getelementptr inbounds i8, i8* %9, i64 48
  %36 = bitcast i8* %35 to i32*
  store i32 9, i32* %36, align 4, !tbaa !11
  %37 = getelementptr inbounds i8, i8* %10, i64 28
  %38 = bitcast i8* %37 to i32*
  store i32 7, i32* %38, align 4, !tbaa !9
  %39 = getelementptr inbounds i8, i8* %9, i64 56
  %40 = bitcast i8* %39 to i32*
  store i32 10, i32* %40, align 4, !tbaa !11
  %41 = getelementptr inbounds i8, i8* %10, i64 32
  %42 = bitcast i8* %41 to i32*
  store i32 8, i32* %42, align 4, !tbaa !9
  %43 = getelementptr inbounds i8, i8* %9, i64 64
  %44 = bitcast i8* %43 to i32*
  store i32 11, i32* %44, align 4, !tbaa !11
  %45 = getelementptr inbounds i8, i8* %10, i64 36
  %46 = bitcast i8* %45 to i32*
  store i32 9, i32* %46, align 4, !tbaa !9
  %47 = getelementptr inbounds i8, i8* %9, i64 72
  %48 = bitcast i8* %47 to i32*
  store i32 12, i32* %48, align 4, !tbaa !11
  %49 = getelementptr inbounds i8, i8* %10, i64 40
  %50 = bitcast i8* %49 to i32*
  store i32 10, i32* %50, align 4, !tbaa !9
  %51 = getelementptr inbounds i8, i8* %9, i64 80
  %52 = bitcast i8* %51 to i32*
  store i32 13, i32* %52, align 4, !tbaa !11
  %53 = getelementptr inbounds i8, i8* %10, i64 44
  %54 = bitcast i8* %53 to i32*
  store i32 11, i32* %54, align 4, !tbaa !9
  %55 = getelementptr inbounds i8, i8* %9, i64 88
  %56 = bitcast i8* %55 to i32*
  store i32 14, i32* %56, align 4, !tbaa !11
  %57 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %8, i64 0, i32 2
  %58 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %57, align 8, !tbaa !22
  %59 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %58, i64 0, i32 5, i32 0
  %60 = bitcast %struct.iseq_insn_info_entry** %59 to i8**
  store i8* %9, i8** %60, align 8, !tbaa !25
  %61 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %58, i64 0, i32 5, i32 1
  %62 = bitcast i32** %61 to i8**
  store i8* %10, i8** %62, align 8, !tbaa !34
  %63 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %58, i64 0, i32 1
  store i32 12, i32* %63, align 4, !tbaa !35
  %64 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %58, i64 0, i32 5, i32 2
  store i32 12, i32* %64, align 8, !tbaa !36
  tail call void @rb_iseq_insns_info_encode_positions(%struct.rb_iseq_struct* %8) #19
  %65 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %57, align 8, !tbaa !22
  %66 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %65, i64 0, i32 2
  store i64* null, i64** %66, align 8, !tbaa !37
  %67 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %7, i64 0, i32 2
  store %struct.rb_iseq_struct* %8, %struct.rb_iseq_struct** %67, align 8, !tbaa !51
  %68 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %69 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %68, i64 0, i32 2
  %70 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %69, align 8, !tbaa !40
  %71 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %70, i64 0, i32 0
  store i64* inttoptr (i64 8 to i64*), i64** %71, align 8, !tbaa !53
  %72 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %73 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %72, i64 0, i32 2
  %74 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %73, align 8, !tbaa !40
  %75 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %74, i64 0, i32 0
  store i64* inttoptr (i64 8 to i64*), i64** %75, align 8, !tbaa !53
  %76 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %77 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %76, i64 0, i32 2
  %78 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %77, align 8, !tbaa !40
  %79 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %78, i64 0, i32 0
  store i64* inttoptr (i64 8 to i64*), i64** %79, align 8, !tbaa !53
  %80 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %81 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %80, i64 0, i32 2
  %82 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %81, align 8, !tbaa !40
  %83 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %82, i64 0, i32 0
  store i64* inttoptr (i64 8 to i64*), i64** %83, align 8, !tbaa !53
  %callArgsAddr.i = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs.i, i64 0, i64 0
  store i64 %0, i64* %callArgsAddr.i, align 8
  %84 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %85 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %84, i64 0, i32 2
  %86 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %85, align 8, !tbaa !40
  %87 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %86, i64 0, i32 0
  store i64* inttoptr (i64 8 to i64*), i64** %87, align 8, !tbaa !53
  %88 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %89 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %88, i64 0, i32 2
  %90 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %89, align 8, !tbaa !40
  %91 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %90, i64 0, i32 0
  store i64* inttoptr (i64 8 to i64*), i64** %91, align 8, !tbaa !53
  %92 = tail call i64 @rb_define_class(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_HasFib, i64 0, i64 0), i64 %0) #19
  %93 = load i64, i64* @guard_epoch_HasFib, align 8
  %94 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !54
  %needTakeSlowPath = icmp eq i64 %93, %94
  br i1 %needTakeSlowPath, label %96, label %95, !prof !56

95:                                               ; preds = %afterSymCallIntrinsic_unsafe.i
  tail call void @const_recompute_HasFib() #19
  br label %96

96:                                               ; preds = %afterSymCallIntrinsic_unsafe.i, %95
  %97 = load i64, i64* @guarded_const_HasFib, align 8
  %98 = load i64, i64* @guard_epoch_HasFib, align 8
  %99 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !54
  %guardUpdated = icmp eq i64 %98, %99
  tail call void @llvm.assume(i1 %guardUpdated)
  %100 = bitcast [2 x i64]* %callArgs.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %100) #19
  %101 = tail call i8* @ruby_xmalloc(i64 16) #19
  %102 = bitcast i8* %101 to i32*
  store i32 1, i32* %102, align 8, !tbaa !9
  %103 = load i64, i64* @rb_cData, align 8, !tbaa !7
  %104 = tail call i64 @rb_data_typed_object_wrap(i64 %103, i8* %101, %struct.rb_data_type_struct* nonnull @closureInfo) #19
  %105 = inttoptr i64 %104 to %struct.RTypedData*
  %106 = getelementptr inbounds %struct.RTypedData, %struct.RTypedData* %105, i64 0, i32 3
  %107 = bitcast i8** %106 to %struct.sorbet_Closure**
  %108 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %107, align 8, !tbaa !57
  %109 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %108, i64 0, i32 1, i64 0
  store i64 8, i64* %109, align 8
  %rubyId_final.i.i.i = load i64, i64* @rubyIdPrecomputed_final, align 8
  %rubyId_sig.i.i.i = load i64, i64* @rubyIdPrecomputed_sig, align 8
  %rubyId_fib.i.i.i = load i64, i64* @rubyIdPrecomputed_fib, align 8
  %110 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %107, align 8, !tbaa !57
  %111 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %110, i64 0, i32 1, i64 0
  store i64 %97, i64* %111, align 8
  %112 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #19
  %113 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"str_test/testdata/ruby_benchmark/app_fib.rb", i64 0, i64 0), i64 39) #19
  %114 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"str_test/testdata/ruby_benchmark/app_fib.rb", i64 0, i64 0), i64 39) #19
  %115 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %116 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %115, i64 0, i32 2
  %117 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %116, align 8, !tbaa !40
  %118 = tail call %struct.rb_iseq_struct* @rb_iseq_new(%struct.rb_ast_body_struct* null, i64 %112, i64 %113, i64 %114, %struct.rb_iseq_struct* null, i32 0) #19
  %119 = tail call i8* @ruby_xmalloc2(i64 1, i64 8) #19
  %120 = tail call i8* @ruby_xmalloc2(i64 1, i64 4) #19
  %121 = bitcast i8* %120 to i32*
  store i32 0, i32* %121, align 4, !tbaa !9
  %122 = bitcast i8* %119 to i32*
  store i32 3, i32* %122, align 4, !tbaa !11
  %123 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %118, i64 0, i32 2
  %124 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %123, align 8, !tbaa !22
  %125 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %124, i64 0, i32 5, i32 0
  %126 = bitcast %struct.iseq_insn_info_entry** %125 to i8**
  store i8* %119, i8** %126, align 8, !tbaa !25
  %127 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %124, i64 0, i32 5, i32 1
  %128 = bitcast i32** %127 to i8**
  store i8* %120, i8** %128, align 8, !tbaa !34
  %129 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %124, i64 0, i32 1
  store i32 1, i32* %129, align 4, !tbaa !35
  %130 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %124, i64 0, i32 5, i32 2
  store i32 1, i32* %130, align 8, !tbaa !36
  tail call void @rb_iseq_insns_info_encode_positions(%struct.rb_iseq_struct* %118) #19
  %131 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %123, align 8, !tbaa !22
  %132 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %131, i64 0, i32 2
  store i64* null, i64** %132, align 8, !tbaa !37
  %133 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %117, i64 0, i32 2
  store %struct.rb_iseq_struct* %118, %struct.rb_iseq_struct** %133, align 8, !tbaa !51
  %134 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %135 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %134, i64 0, i32 2
  %136 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %135, align 8, !tbaa !40
  %137 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %136, i64 0, i32 0
  store i64* inttoptr (i64 8 to i64*), i64** %137, align 8, !tbaa !53
  %138 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %107, align 8, !tbaa !57
  %139 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %138, i64 0, i32 1, i64 0
  %140 = load i64, i64* %139, align 8
  %141 = icmp eq i64 %140, %97
  br i1 %141, label %"func_<root>.<static-init>$111.exit", label %142

142:                                              ; preds = %96
  %143 = load i64, i64* @rb_cModule, align 8, !tbaa !7
  %144 = tail call i64 @rb_obj_is_kind_of(i64 %140, i64 %143) #5
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %codeRepl, label %sorbet_isa_class_of.exit.i.i.i, !prof !59

sorbet_isa_class_of.exit.i.i.i:                   ; preds = %142
  %146 = tail call i64 @rb_class_inherited_p(i64 %140, i64 %97) #5
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %codeRepl, label %"func_<root>.<static-init>$111.exit", !prof !60, !misexpect !61

codeRepl:                                         ; preds = %142, %sorbet_isa_class_of.exit.i.i.i
  tail call fastcc void @Init_test_testdata_ruby_benchmark_app_fib.cold.1(i64 %140) #21
  unreachable

"func_<root>.<static-init>$111.exit":             ; preds = %96, %sorbet_isa_class_of.exit.i.i.i
  %148 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %149 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %148, i64 0, i32 2
  %150 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %149, align 8, !tbaa !40
  %151 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %150, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %151, align 8, !tbaa !53
  %152 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %153 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %152, i64 0, i32 2
  %154 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %153, align 8, !tbaa !40
  %155 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %154, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %155, align 8, !tbaa !53
  %156 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %157 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %156, i64 0, i32 2
  %158 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %157, align 8, !tbaa !40
  %159 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %158, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %159, align 8, !tbaa !53
  %160 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %161 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %160, i64 0, i32 2
  %162 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %161, align 8, !tbaa !40
  %163 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %162, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %163, align 8, !tbaa !53
  %rawSym.i.i.i = tail call i64 @rb_id2sym(i64 %rubyId_final.i.i.i) #19
  %164 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %165 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %164, i64 0, i32 2
  %166 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %165, align 8, !tbaa !40
  %167 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %166, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %167, align 8, !tbaa !53
  %callArgsAddr.i.i.i = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs.i.i.i, i64 0, i64 0
  store i64 %rawSym.i.i.i, i64* %callArgsAddr.i.i.i, align 8
  %168 = load i64, i64* @"guard_epoch_T::Sig::WithoutRuntime", align 8
  %169 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !54
  %needTakeSlowPath6 = icmp eq i64 %168, %169
  br i1 %needTakeSlowPath6, label %171, label %170, !prof !56

170:                                              ; preds = %"func_<root>.<static-init>$111.exit"
  tail call void @"const_recompute_T::Sig::WithoutRuntime"() #19
  br label %171

171:                                              ; preds = %"func_<root>.<static-init>$111.exit", %170
  %172 = load i64, i64* @"guarded_const_T::Sig::WithoutRuntime", align 8
  %173 = load i64, i64* @"guard_epoch_T::Sig::WithoutRuntime", align 8
  %174 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !54
  %guardUpdated7 = icmp eq i64 %173, %174
  tail call void @llvm.assume(i1 %guardUpdated7)
  %175 = call i64 @rb_block_call(i64 %172, i64 %rubyId_sig.i.i.i, i32 1, i64* nonnull %callArgsAddr.i.i.i, i64 (...)* bitcast (i64 (i64, i64, i32, i64*, i64)* @"func_HasFib.<static-init>$block_1" to i64 (...)*), i64 %104) #19
  %176 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %107, align 8, !tbaa !57
  %177 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %176, i64 0, i32 1, i64 0
  %178 = load i64, i64* %177, align 8
  %179 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %180 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %179, i64 0, i32 2
  %181 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %180, align 8, !tbaa !40
  %182 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %181, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %182, align 8, !tbaa !53
  %183 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %184 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %183, i64 0, i32 2
  %185 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %184, align 8, !tbaa !40
  %186 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %185, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %186, align 8, !tbaa !53
  store i64 %178, i64* %177, align 8
  %187 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %188 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %187, i64 0, i32 2
  %189 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %188, align 8, !tbaa !40
  %190 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %189, i64 0, i32 0
  store i64* inttoptr (i64 24 to i64*), i64** %190, align 8, !tbaa !53
  %191 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %192 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %191, i64 0, i32 2
  %193 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %192, align 8, !tbaa !40
  %194 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %193, i64 0, i32 0
  store i64* inttoptr (i64 24 to i64*), i64** %194, align 8, !tbaa !53
  %195 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %196 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %195, i64 0, i32 2
  %197 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %196, align 8, !tbaa !40
  %198 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %197, i64 0, i32 0
  store i64* inttoptr (i64 24 to i64*), i64** %198, align 8, !tbaa !53
  store i64 %0, i64* %callArgsAddr.i.i.i, align 8
  %199 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %200 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %199, i64 0, i32 2
  %201 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %200, align 8, !tbaa !40
  %202 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %201, i64 0, i32 0
  store i64* inttoptr (i64 24 to i64*), i64** %202, align 8, !tbaa !53
  %rawSym33.i.i.i = call i64 @rb_id2sym(i64 %rubyId_fib.i.i.i) #19
  %203 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %204 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %203, i64 0, i32 2
  %205 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %204, align 8, !tbaa !40
  %206 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %205, i64 0, i32 0
  store i64* inttoptr (i64 24 to i64*), i64** %206, align 8, !tbaa !53
  call void @rb_define_singleton_method(i64 %97, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_fib, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @func_HasFib.fib to i64 (...)*), i32 -1) #19
  %207 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %208 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %207, i64 0, i32 2
  %209 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %208, align 8, !tbaa !40
  %210 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %209, i64 0, i32 0
  store i64* inttoptr (i64 24 to i64*), i64** %210, align 8, !tbaa !53
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %100) #19
  %211 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %212 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %211, i64 0, i32 2
  %213 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %212, align 8, !tbaa !40
  %214 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %213, i64 0, i32 0
  store i64* inttoptr (i64 8 to i64*), i64** %214, align 8, !tbaa !53
  %215 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %216 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %215, i64 0, i32 2
  %217 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %216, align 8, !tbaa !40
  %218 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %217, i64 0, i32 0
  store i64* inttoptr (i64 96 to i64*), i64** %218, align 8, !tbaa !53
  %219 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %220 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %219, i64 0, i32 2
  %221 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %220, align 8, !tbaa !40
  %222 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %221, i64 0, i32 0
  store i64* inttoptr (i64 96 to i64*), i64** %222, align 8, !tbaa !53
  %223 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %224 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %223, i64 0, i32 2
  %225 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %224, align 8, !tbaa !40
  %226 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %225, i64 0, i32 0
  store i64* inttoptr (i64 96 to i64*), i64** %226, align 8, !tbaa !53
  store i64 69, i64* %callArgsAddr.i, align 8
  %227 = call i64 @rb_funcallv(i64 %97, i64 %rubyId_fib.i, i32 1, i64* nonnull %callArgsAddr.i) #19
  %228 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %229 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %228, i64 0, i32 2
  %230 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %229, align 8, !tbaa !40
  %231 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %230, i64 0, i32 0
  store i64* inttoptr (i64 96 to i64*), i64** %231, align 8, !tbaa !53
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1)
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @func_HasFib.fib(i32 %argc, i64* nocapture readonly %argArray, i64 %selfRaw) #13 {
functionEntryInitializers:
  %callArgs = alloca [1 x i64], align 8
  %"rubyId_+" = load i64, i64* @"rubyIdPrecomputed_+", align 8
  %0 = icmp eq i32 %argc, 1
  br i1 %0, label %sorbet_setRubyStackFrame.exit, label %argCountFailBlock, !prof !62, !misexpect !63

BB2:                                              ; preds = %sorbet_rb_int_lt.exit
  store i64* inttoptr (i64 24 to i64*), i64** %169, align 8, !tbaa !53
  br label %BB4

BB3:                                              ; preds = %sorbet_rb_int_lt.exit
  store i64* inttoptr (i64 40 to i64*), i64** %169, align 8, !tbaa !53
  %1 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %2 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %1, i64 0, i32 2
  %3 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %2, align 8, !tbaa !40
  %4 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %3, i64 0, i32 0
  store i64* inttoptr (i64 40 to i64*), i64** %4, align 8, !tbaa !53
  %5 = and i64 %rawArg_n, 1
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %15, label %7, !prof !60

7:                                                ; preds = %BB3
  %8 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %rawArg_n, i64 -2)
  %9 = extractvalue { i64, i1 } %8, 1
  %10 = extractvalue { i64, i1 } %8, 0
  br i1 %9, label %11, label %sorbet_rb_int_minus.exit

11:                                               ; preds = %7
  %12 = ashr i64 %10, 1
  %13 = xor i64 %12, -9223372036854775808
  %14 = tail call i64 @rb_int2big(i64 %13) #19
  br label %sorbet_rb_int_minus.exit

15:                                               ; preds = %BB3
  %16 = and i64 %rawArg_n, 7
  %17 = icmp ne i64 %16, 0
  %18 = and i64 %rawArg_n, -9
  %19 = icmp eq i64 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %29, label %21

21:                                               ; preds = %15
  %22 = inttoptr i64 %rawArg_n to %struct.RBasic*
  %23 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %22, i64 0, i32 0
  %24 = load i64, i64* %23, align 8, !tbaa !0
  %25 = and i64 %24, 31
  %26 = icmp eq i64 %25, 10
  br i1 %26, label %27, label %29

27:                                               ; preds = %21
  %28 = tail call i64 @rb_big_minus(i64 %rawArg_n, i64 3) #19
  br label %sorbet_rb_int_minus.exit

29:                                               ; preds = %21, %15
  %30 = tail call i64 @rb_num_coerce_bin(i64 %rawArg_n, i64 3, i64 45) #19
  br label %sorbet_rb_int_minus.exit

sorbet_rb_int_minus.exit:                         ; preds = %7, %11, %27, %29
  %31 = phi i64 [ %30, %29 ], [ %28, %27 ], [ %14, %11 ], [ %10, %7 ]
  %32 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %33 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %32, i64 0, i32 2
  %34 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %33, align 8, !tbaa !40
  %35 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %34, i64 0, i32 0
  store i64* inttoptr (i64 40 to i64*), i64** %35, align 8, !tbaa !53
  store i64 %31, i64* %callArgsAddr, align 8
  %36 = tail call i32 @ruby_stack_check() #19
  %directSendResult = call i64 @func_HasFib.fib(i32 1, i64* nonnull %callArgsAddr, i64 %selfRaw)
  %37 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %38 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %37, i64 0, i32 2
  %39 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %38, align 8, !tbaa !40
  %40 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %39, i64 0, i32 0
  store i64* inttoptr (i64 40 to i64*), i64** %40, align 8, !tbaa !53
  %41 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %42 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %41, i64 0, i32 2
  %43 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %42, align 8, !tbaa !40
  %44 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %43, i64 0, i32 0
  store i64* inttoptr (i64 40 to i64*), i64** %44, align 8, !tbaa !53
  %45 = and i64 %rawArg_n, 1
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47, !prof !60

47:                                               ; preds = %sorbet_rb_int_minus.exit
  %48 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %rawArg_n, i64 -4)
  %49 = extractvalue { i64, i1 } %48, 1
  %50 = extractvalue { i64, i1 } %48, 0
  br i1 %49, label %51, label %sorbet_rb_int_minus.exit120

51:                                               ; preds = %47
  %52 = ashr i64 %50, 1
  %53 = xor i64 %52, -9223372036854775808
  %54 = tail call i64 @rb_int2big(i64 %53) #19
  br label %sorbet_rb_int_minus.exit120

55:                                               ; preds = %sorbet_rb_int_minus.exit
  %56 = and i64 %rawArg_n, 7
  %57 = icmp ne i64 %56, 0
  %58 = and i64 %rawArg_n, -9
  %59 = icmp eq i64 %58, 0
  %60 = or i1 %57, %59
  br i1 %60, label %69, label %61

61:                                               ; preds = %55
  %62 = inttoptr i64 %rawArg_n to %struct.RBasic*
  %63 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %62, i64 0, i32 0
  %64 = load i64, i64* %63, align 8, !tbaa !0
  %65 = and i64 %64, 31
  %66 = icmp eq i64 %65, 10
  br i1 %66, label %67, label %69

67:                                               ; preds = %61
  %68 = tail call i64 @rb_big_minus(i64 %rawArg_n, i64 5) #19
  br label %sorbet_rb_int_minus.exit120

69:                                               ; preds = %61, %55
  %70 = tail call i64 @rb_num_coerce_bin(i64 %rawArg_n, i64 5, i64 45) #19
  br label %sorbet_rb_int_minus.exit120

sorbet_rb_int_minus.exit120:                      ; preds = %47, %51, %67, %69
  %71 = phi i64 [ %70, %69 ], [ %68, %67 ], [ %54, %51 ], [ %50, %47 ]
  %72 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %73 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %72, i64 0, i32 2
  %74 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %73, align 8, !tbaa !40
  %75 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %74, i64 0, i32 0
  store i64* inttoptr (i64 40 to i64*), i64** %75, align 8, !tbaa !53
  store i64 %71, i64* %callArgsAddr, align 8
  %76 = tail call i32 @ruby_stack_check() #19
  %directSendResult77 = call i64 @func_HasFib.fib(i32 1, i64* nonnull %callArgsAddr, i64 %selfRaw)
  %77 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %78 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %77, i64 0, i32 2
  %79 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %78, align 8, !tbaa !40
  %80 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %79, i64 0, i32 0
  store i64* inttoptr (i64 40 to i64*), i64** %80, align 8, !tbaa !53
  %81 = and i64 %directSendResult, 1
  %82 = icmp eq i64 %81, 0
  store i64 %directSendResult77, i64* %callArgsAddr, align 8
  br i1 %82, label %"slowSymCallIntrinsic_+", label %"fastSymCallIntrinsic_+", !prof !60, !misexpect !61

BB4:                                              ; preds = %260, %258, %249, %247, %241, %194, %178, %173, %"slowSymCallIntrinsic_+", %BB2
  %"<returnMethodTemp>.sroa.0.0" = phi i64 [ 3, %BB2 ], [ %170, %"slowSymCallIntrinsic_+" ], [ %261, %260 ], [ %259, %258 ], [ %195, %194 ], [ %181, %178 ], [ %177, %173 ], [ %250, %249 ], [ %246, %241 ], [ -9223372036854775806, %247 ]
  %83 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %84 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %83, i64 0, i32 2
  %85 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %84, align 8, !tbaa !40
  %86 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %85, i64 0, i32 0
  store i64* inttoptr (i64 8 to i64*), i64** %86, align 8, !tbaa !53
  ret i64 %"<returnMethodTemp>.sroa.0.0"

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_raiseArity(i32 %argc)
  unreachable

sorbet_setRubyStackFrame.exit:                    ; preds = %functionEntryInitializers
  %rawArg_n = load i64, i64* %argArray, align 8
  %87 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_fib, i64 0, i64 0), i64 3) #19
  %88 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"str_test/testdata/ruby_benchmark/app_fib.rb", i64 0, i64 0), i64 39) #19
  %89 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"str_test/testdata/ruby_benchmark/app_fib.rb", i64 0, i64 0), i64 39) #19
  %90 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %91 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %90, i64 0, i32 2
  %92 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %91, align 8, !tbaa !40
  %93 = tail call %struct.rb_iseq_struct* @rb_iseq_new(%struct.rb_ast_body_struct* null, i64 %87, i64 %88, i64 %89, %struct.rb_iseq_struct* null, i32 0) #19
  %94 = tail call i8* @ruby_xmalloc2(i64 7, i64 8) #19
  %95 = tail call i8* @ruby_xmalloc2(i64 7, i64 4) #19
  %96 = bitcast i8* %95 to i32*
  store i32 0, i32* %96, align 4, !tbaa !9
  %97 = bitcast i8* %94 to i32*
  store i32 5, i32* %97, align 4, !tbaa !11
  %98 = getelementptr inbounds i8, i8* %95, i64 4
  %99 = bitcast i8* %98 to i32*
  store i32 1, i32* %99, align 4, !tbaa !9
  %100 = getelementptr inbounds i8, i8* %94, i64 8
  %101 = bitcast i8* %100 to i32*
  store i32 6, i32* %101, align 4, !tbaa !11
  %102 = getelementptr inbounds i8, i8* %95, i64 8
  %103 = bitcast i8* %102 to i32*
  store i32 2, i32* %103, align 4, !tbaa !9
  %104 = getelementptr inbounds i8, i8* %94, i64 16
  %105 = bitcast i8* %104 to i32*
  store i32 7, i32* %105, align 4, !tbaa !11
  %106 = getelementptr inbounds i8, i8* %95, i64 12
  %107 = bitcast i8* %106 to i32*
  store i32 3, i32* %107, align 4, !tbaa !9
  %108 = getelementptr inbounds i8, i8* %94, i64 24
  %109 = bitcast i8* %108 to i32*
  store i32 8, i32* %109, align 4, !tbaa !11
  %110 = getelementptr inbounds i8, i8* %95, i64 16
  %111 = bitcast i8* %110 to i32*
  store i32 4, i32* %111, align 4, !tbaa !9
  %112 = getelementptr inbounds i8, i8* %94, i64 32
  %113 = bitcast i8* %112 to i32*
  store i32 9, i32* %113, align 4, !tbaa !11
  %114 = getelementptr inbounds i8, i8* %95, i64 20
  %115 = bitcast i8* %114 to i32*
  store i32 5, i32* %115, align 4, !tbaa !9
  %116 = getelementptr inbounds i8, i8* %94, i64 40
  %117 = bitcast i8* %116 to i32*
  store i32 10, i32* %117, align 4, !tbaa !11
  %118 = getelementptr inbounds i8, i8* %95, i64 24
  %119 = bitcast i8* %118 to i32*
  store i32 6, i32* %119, align 4, !tbaa !9
  %120 = getelementptr inbounds i8, i8* %94, i64 48
  %121 = bitcast i8* %120 to i32*
  store i32 11, i32* %121, align 4, !tbaa !11
  %122 = load i64, i64* @guard_epoch_HasFib, align 8
  %123 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !54
  %needTakeSlowPath = icmp eq i64 %122, %123
  br i1 %needTakeSlowPath, label %125, label %124, !prof !56

124:                                              ; preds = %sorbet_setRubyStackFrame.exit
  tail call void @const_recompute_HasFib() #19
  br label %125

125:                                              ; preds = %sorbet_setRubyStackFrame.exit, %124
  %126 = load i64, i64* @guarded_const_HasFib, align 8
  %127 = load i64, i64* @guard_epoch_HasFib, align 8
  %128 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !54
  %guardUpdated = icmp eq i64 %127, %128
  tail call void @llvm.assume(i1 %guardUpdated)
  %129 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %93, i64 0, i32 2
  %130 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %129, align 8, !tbaa !22
  %131 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %130, i64 0, i32 5, i32 0
  %132 = bitcast %struct.iseq_insn_info_entry** %131 to i8**
  store i8* %94, i8** %132, align 8, !tbaa !25
  %133 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %130, i64 0, i32 5, i32 1
  %134 = bitcast i32** %133 to i8**
  store i8* %95, i8** %134, align 8, !tbaa !34
  %135 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %130, i64 0, i32 1
  store i32 7, i32* %135, align 4, !tbaa !35
  %136 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %130, i64 0, i32 5, i32 2
  store i32 7, i32* %136, align 8, !tbaa !36
  tail call void @rb_iseq_insns_info_encode_positions(%struct.rb_iseq_struct* %93) #19
  %137 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %129, align 8, !tbaa !22
  %138 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %137, i64 0, i32 2
  store i64* null, i64** %138, align 8, !tbaa !37
  %139 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %92, i64 0, i32 2
  store %struct.rb_iseq_struct* %93, %struct.rb_iseq_struct** %139, align 8, !tbaa !51
  %140 = and i64 %rawArg_n, 1
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %codeRepl, label %typeTestSuccess23, !prof !60, !misexpect !61

codeRepl:                                         ; preds = %125
  tail call fastcc void @func_HasFib.fib.cold.1(i64 %rawArg_n) #21
  unreachable

typeTestSuccess23:                                ; preds = %125
  %142 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %143 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %142, i64 0, i32 2
  %144 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %143, align 8, !tbaa !40
  %145 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %144, i64 0, i32 0
  store i64* inttoptr (i64 8 to i64*), i64** %145, align 8, !tbaa !53
  %146 = icmp eq i64 %126, %selfRaw
  br i1 %146, label %sorbet_rb_int_lt.exit, label %147

147:                                              ; preds = %typeTestSuccess23
  %148 = load i64, i64* @rb_cModule, align 8, !tbaa !7
  %149 = tail call i64 @rb_obj_is_kind_of(i64 %selfRaw, i64 %148) #5
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %codeRepl116, label %sorbet_isa_class_of.exit, !prof !59

sorbet_isa_class_of.exit:                         ; preds = %147
  %151 = tail call i64 @rb_class_inherited_p(i64 %selfRaw, i64 %126) #5
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %codeRepl116, label %sorbet_rb_int_lt.exit, !prof !60, !misexpect !61

sorbet_rb_int_lt.exit:                            ; preds = %sorbet_isa_class_of.exit, %typeTestSuccess23
  %153 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %154 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %153, i64 0, i32 2
  %155 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %154, align 8, !tbaa !40
  %156 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %155, i64 0, i32 0
  store i64* inttoptr (i64 8 to i64*), i64** %156, align 8, !tbaa !53
  %157 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %158 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %157, i64 0, i32 2
  %159 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %158, align 8, !tbaa !40
  %160 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %159, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %160, align 8, !tbaa !53
  %161 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %162 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %161, i64 0, i32 2
  %163 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %162, align 8, !tbaa !40
  %164 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %163, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %164, align 8, !tbaa !53
  %callArgsAddr = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs, i64 0, i64 0
  store i64 7, i64* %callArgsAddr, align 8
  %165 = icmp slt i64 %rawArg_n, 6
  %166 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %167 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %166, i64 0, i32 2
  %168 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %167, align 8, !tbaa !40
  %169 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %168, i64 0, i32 0
  br i1 %165, label %BB2, label %BB3

codeRepl116:                                      ; preds = %147, %sorbet_isa_class_of.exit
  tail call fastcc void @func_HasFib.fib.cold.2(i64 %selfRaw) #21
  unreachable

"slowSymCallIntrinsic_+":                         ; preds = %sorbet_rb_int_minus.exit120
  %170 = call i64 @rb_funcallv(i64 %directSendResult, i64 %"rubyId_+", i32 1, i64* nonnull %callArgsAddr) #19
  br label %BB4

"fastSymCallIntrinsic_+":                         ; preds = %sorbet_rb_int_minus.exit120
  %171 = and i64 %directSendResult77, 1
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %182, label %173, !prof !60

173:                                              ; preds = %"fastSymCallIntrinsic_+"
  %174 = add nsw i64 %directSendResult77, -1
  %175 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %directSendResult, i64 %174) #19
  %176 = extractvalue { i64, i1 } %175, 1
  %177 = extractvalue { i64, i1 } %175, 0
  br i1 %176, label %178, label %BB4

178:                                              ; preds = %173
  %179 = ashr i64 %177, 1
  %180 = xor i64 %179, -9223372036854775808
  %181 = tail call i64 @rb_int2big(i64 %180) #19, !noalias !64
  br label %BB4

182:                                              ; preds = %"fastSymCallIntrinsic_+"
  %183 = and i64 %directSendResult77, 7
  %184 = icmp ne i64 %183, 0
  %185 = and i64 %directSendResult77, -9
  %186 = icmp eq i64 %185, 0
  %187 = or i1 %184, %186
  br i1 %187, label %196, label %188

188:                                              ; preds = %182
  %189 = inttoptr i64 %directSendResult77 to %struct.RBasic*
  %190 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %189, i64 0, i32 0
  %191 = load i64, i64* %190, align 8, !tbaa !0, !noalias !64
  %192 = and i64 %191, 31
  %193 = icmp eq i64 %192, 10
  br i1 %193, label %194, label %196

194:                                              ; preds = %188
  %195 = tail call i64 @rb_big_plus(i64 %directSendResult77, i64 %directSendResult) #19, !noalias !64
  br label %BB4

196:                                              ; preds = %188, %182
  %197 = and i64 %directSendResult, 3
  %198 = icmp eq i64 %197, 2
  br i1 %198, label %211, label %199

199:                                              ; preds = %196
  %200 = and i64 %directSendResult, 7
  %201 = icmp ne i64 %200, 0
  %202 = and i64 %directSendResult, -9
  %203 = icmp eq i64 %202, 0
  %204 = or i1 %201, %203
  br i1 %204, label %251, label %205

205:                                              ; preds = %199
  %206 = inttoptr i64 %directSendResult to %struct.RBasic*
  %207 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %206, i64 0, i32 0
  %208 = load i64, i64* %207, align 8, !tbaa !0, !noalias !64
  %209 = and i64 %208, 31
  %210 = icmp eq i64 %209, 4
  br i1 %210, label %211, label %251

211:                                              ; preds = %205, %196
  %212 = ashr i64 %directSendResult, 1
  %213 = sitofp i64 %212 to double
  %214 = and i64 %directSendResult77, 3
  %215 = icmp eq i64 %214, 2
  br i1 %215, label %216, label %227

216:                                              ; preds = %211
  %217 = icmp eq i64 %directSendResult77, -9223372036854775806
  br i1 %217, label %rb_float_value_inline.exit.i, label %218

218:                                              ; preds = %216
  %219 = lshr i64 %directSendResult77, 63
  %220 = sub nuw nsw i64 2, %219
  %221 = and i64 %directSendResult77, 4
  %222 = or i64 %220, %221
  %223 = lshr i64 %directSendResult77, 3
  %224 = shl nuw i64 %222, 61
  %225 = or i64 %224, %223
  %226 = bitcast i64 %225 to double
  br label %rb_float_value_inline.exit.i

227:                                              ; preds = %211
  %228 = inttoptr i64 %directSendResult77 to %struct.RFloat*
  %229 = getelementptr inbounds %struct.RFloat, %struct.RFloat* %228, i64 0, i32 1
  %230 = load double, double* %229, align 8, !tbaa !67, !noalias !64
  br label %rb_float_value_inline.exit.i

rb_float_value_inline.exit.i:                     ; preds = %227, %218, %216
  %231 = phi double [ %230, %227 ], [ %226, %218 ], [ 0.000000e+00, %216 ]
  %232 = fadd double %231, %213
  %233 = bitcast double %232 to i64
  %234 = icmp eq i64 %233, 3458764513820540928
  br i1 %234, label %249, label %235

235:                                              ; preds = %rb_float_value_inline.exit.i
  %236 = lshr i64 %233, 60
  %237 = trunc i64 %236 to i32
  %238 = and i32 %237, 7
  %239 = add nsw i32 %238, -3
  %240 = icmp ugt i32 %239, 1
  br i1 %240, label %247, label %241

241:                                              ; preds = %235
  %242 = shl i64 %233, 3
  %243 = lshr i64 %233, 61
  %244 = and i64 %243, 4
  %245 = or i64 %242, %244
  %246 = or i64 %245, 2
  br label %BB4

247:                                              ; preds = %235
  %248 = icmp eq i64 %233, 0
  br i1 %248, label %BB4, label %249

249:                                              ; preds = %247, %rb_float_value_inline.exit.i
  %250 = tail call i64 @rb_float_new_in_heap(double %232) #19, !noalias !64
  br label %BB4

251:                                              ; preds = %205, %199
  br i1 %187, label %260, label %252

252:                                              ; preds = %251
  %253 = inttoptr i64 %directSendResult77 to %struct.RBasic*
  %254 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %253, i64 0, i32 0
  %255 = load i64, i64* %254, align 8, !tbaa !0, !noalias !64
  %256 = and i64 %255, 31
  %257 = icmp eq i64 %256, 14
  br i1 %257, label %258, label %260

258:                                              ; preds = %252
  %259 = tail call i64 @rb_complex_plus(i64 %directSendResult77, i64 %directSendResult) #19, !noalias !64
  br label %BB4

260:                                              ; preds = %252, %251
  %261 = tail call i64 @rb_num_coerce_bin(i64 %directSendResult, i64 %directSendResult77, i64 43) #19, !noalias !64
  br label %BB4
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_<"() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_<", i64 0, i64 0), i64 1) #19
  store i64 %0, i64* @"rubyIdPrecomputed_<", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_-() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_-, i64 0, i64 0), i64 1) #19
  store i64 %0, i64* @rubyIdPrecomputed_-, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_+"() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_+", i64 0, i64 0), i64 1) #19
  store i64 %0, i64* @"rubyIdPrecomputed_+", align 8
  ret void
}

; Function Attrs: ssp
define internal i64 @"func_HasFib.<static-init>$block_1"(i64 %firstYieldArgRaw, i64 %captures, i32 %argc, i64* nocapture readonly %argArray, i64 %blockArg) #14 {
functionEntryInitializers:
  %callArgs = alloca [2 x i64], align 8
  %rubyId_n = load i64, i64* @rubyIdPrecomputed_n, align 8
  %rubyId_params = load i64, i64* @rubyIdPrecomputed_params, align 8
  %rubyId_returns = load i64, i64* @rubyIdPrecomputed_returns, align 8
  %arrayExpansionSizeGuard = icmp eq i32 %argc, 1
  br i1 %arrayExpansionSizeGuard, label %argArrayExpandArrayTest, label %sorbet_setRubyStackFrame.exit

argArrayExpandArrayTest:                          ; preds = %functionEntryInitializers
  %arg1_maybeExpandToFullArgs = load i64, i64* %argArray, align 8
  %0 = and i64 %arg1_maybeExpandToFullArgs, 7
  %1 = icmp ne i64 %0, 0
  %2 = and i64 %arg1_maybeExpandToFullArgs, -9
  %3 = icmp eq i64 %2, 0
  %4 = or i1 %1, %3
  br i1 %4, label %sorbet_setRubyStackFrame.exit, label %sorbet_isa_Array.exit

sorbet_isa_Array.exit:                            ; preds = %argArrayExpandArrayTest
  %5 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.RBasic*
  %6 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %5, i64 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !0
  %8 = and i64 %7, 33554463
  %9 = icmp eq i64 %8, 33554439
  br i1 %9, label %10, label %sorbet_setRubyStackFrame.exit

10:                                               ; preds = %sorbet_isa_Array.exit
  tail call void @rb_ary_detransient(i64 %arg1_maybeExpandToFullArgs) #19
  br label %sorbet_setRubyStackFrame.exit

sorbet_setRubyStackFrame.exit:                    ; preds = %sorbet_isa_Array.exit, %functionEntryInitializers, %10, %argArrayExpandArrayTest
  %11 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #19
  %12 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"str_test/testdata/ruby_benchmark/app_fib.rb", i64 0, i64 0), i64 39) #19
  %13 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"str_test/testdata/ruby_benchmark/app_fib.rb", i64 0, i64 0), i64 39) #19
  %14 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %15 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %14, i64 0, i32 2
  %16 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %15, align 8, !tbaa !40
  %17 = tail call %struct.rb_iseq_struct* @rb_iseq_new(%struct.rb_ast_body_struct* null, i64 %11, i64 %12, i64 %13, %struct.rb_iseq_struct* null, i32 0) #19
  %18 = tail call i8* @ruby_xmalloc2(i64 1, i64 8) #19
  %19 = tail call i8* @ruby_xmalloc2(i64 1, i64 4) #19
  %20 = bitcast i8* %19 to i32*
  store i32 0, i32* %20, align 4, !tbaa !9
  %21 = bitcast i8* %18 to i32*
  store i32 3, i32* %21, align 4, !tbaa !11
  %22 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %17, i64 0, i32 2
  %23 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %22, align 8, !tbaa !22
  %24 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %23, i64 0, i32 5, i32 0
  %25 = bitcast %struct.iseq_insn_info_entry** %24 to i8**
  store i8* %18, i8** %25, align 8, !tbaa !25
  %26 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %23, i64 0, i32 5, i32 1
  %27 = bitcast i32** %26 to i8**
  store i8* %19, i8** %27, align 8, !tbaa !34
  %28 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %23, i64 0, i32 1
  store i32 1, i32* %28, align 4, !tbaa !35
  %29 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %23, i64 0, i32 5, i32 2
  store i32 1, i32* %29, align 8, !tbaa !36
  tail call void @rb_iseq_insns_info_encode_positions(%struct.rb_iseq_struct* %17) #19
  %30 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %22, align 8, !tbaa !22
  %31 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %30, i64 0, i32 2
  store i64* null, i64** %31, align 8, !tbaa !37
  %32 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %16, i64 0, i32 2
  store %struct.rb_iseq_struct* %17, %struct.rb_iseq_struct** %32, align 8, !tbaa !51
  %33 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %34 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %33, i64 0, i32 2
  %35 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %34, align 8, !tbaa !40
  %36 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %35, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %36, align 8, !tbaa !53
  %37 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %38 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %37, i64 0, i32 2
  %39 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %38, align 8, !tbaa !40
  %40 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %39, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %40, align 8, !tbaa !53
  %rawSym = tail call i64 @rb_id2sym(i64 %rubyId_n)
  %41 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %42 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %41, i64 0, i32 2
  %43 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %42, align 8, !tbaa !40
  %44 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %43, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %44, align 8, !tbaa !53
  %45 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %46 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %45, i64 0, i32 2
  %47 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %46, align 8, !tbaa !40
  %48 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %47, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %48, align 8, !tbaa !53
  %callArgsAddr = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs, i64 0, i64 0
  store i64 %rawSym, i64* %callArgsAddr, align 8
  %49 = load i64, i64* @rb_cInteger, align 8
  %callArgsAddr14 = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs, i64 0, i64 1
  store i64 %49, i64* %callArgsAddr14, align 8
  %50 = tail call i64 @rb_hash_new() #19, !noalias !70
  call void @rb_hash_bulk_insert(i64 2, i64* nonnull %callArgsAddr, i64 %50) #19
  %51 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %52 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %51, i64 0, i32 2
  %53 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %52, align 8, !tbaa !40
  %54 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %53, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %54, align 8, !tbaa !53
  store i64 %50, i64* %callArgsAddr, align 8
  %55 = inttoptr i64 %captures to %struct.RTypedData*
  %56 = getelementptr inbounds %struct.RTypedData, %struct.RTypedData* %55, i64 0, i32 3
  %57 = bitcast i8** %56 to %struct.sorbet_Closure**
  %58 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %57, align 8, !tbaa !57
  %59 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %58, i64 0, i32 1, i64 0
  %60 = load i64, i64* %59, align 8
  %61 = call i64 @rb_funcallv(i64 %60, i64 %rubyId_params, i32 1, i64* nonnull %callArgsAddr) #19
  %62 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %63 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %62, i64 0, i32 2
  %64 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %63, align 8, !tbaa !40
  %65 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %64, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %65, align 8, !tbaa !53
  %66 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %67 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %66, i64 0, i32 2
  %68 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %67, align 8, !tbaa !40
  %69 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %68, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %69, align 8, !tbaa !53
  store i64 %49, i64* %callArgsAddr, align 8
  %70 = call i64 @rb_funcallv(i64 %61, i64 %rubyId_returns, i32 1, i64* nonnull %callArgsAddr) #19
  %71 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !39
  %72 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %71, i64 0, i32 2
  %73 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %72, align 8, !tbaa !40
  %74 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %73, i64 0, i32 0
  store i64* inttoptr (i64 16 to i64*), i64** %74, align 8, !tbaa !53
  ret i64 %70
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_final() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_final, i64 0, i64 0), i64 5) #19
  store i64 %0, i64* @rubyIdPrecomputed_final, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_sig() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_sig, i64 0, i64 0), i64 3) #19
  store i64 %0, i64* @rubyIdPrecomputed_sig, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_n() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_n, i64 0, i64 0), i64 1) #19
  store i64 %0, i64* @rubyIdPrecomputed_n, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_params() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_params, i64 0, i64 0), i64 6) #19
  store i64 %0, i64* @rubyIdPrecomputed_params, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_returns() #11 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_returns, i64 0, i64 0), i64 7) #19
  store i64 %0, i64* @rubyIdPrecomputed_returns, align 8
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #15

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #15

; Function Attrs: cold minsize noreturn nounwind sspreq
define internal fastcc void @Init_test_testdata_ruby_benchmark_app_fib.cold.1(i64 %0) unnamed_addr #16 {
newFuncRoot:
  tail call fastcc void @sorbet_cast_failure(i64 %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"str_T.class_of(HasFib)", i64 0, i64 0)) #19
  unreachable
}

; Function Attrs: cold minsize noreturn nounwind sspreq uwtable
define internal fastcc void @func_HasFib.fib.cold.1(i64 %rawArg_n) unnamed_addr #17 {
newFuncRoot:
  tail call fastcc void @sorbet_cast_failure(i64 %rawArg_n, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_sig, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_Integer, i64 0, i64 0))
  unreachable
}

; Function Attrs: cold minsize noreturn nounwind sspreq uwtable
define internal fastcc void @func_HasFib.fib.cold.2(i64 %selfRaw) unnamed_addr #17 {
newFuncRoot:
  tail call fastcc void @sorbet_cast_failure(i64 %selfRaw, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"str_T.class_of(HasFib)", i64 0, i64 0))
  unreachable
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #18

; Function Attrs: ssp
define linkonce void @const_recompute_HasFib() local_unnamed_addr #14 {
  %1 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_HasFib, i64 0, i64 0), i64 6)
  store i64 %1, i64* @guarded_const_HasFib, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !54
  store i64 %2, i64* @guard_epoch_HasFib, align 8
  ret void
}

; Function Attrs: ssp
define linkonce void @"const_recompute_T::Sig::WithoutRuntime"() local_unnamed_addr #14 {
  %1 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"str_T::Sig::WithoutRuntime", i64 0, i64 0), i64 22)
  store i64 %1, i64* @"guarded_const_T::Sig::WithoutRuntime", align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !54
  store i64 %2, i64* @"guard_epoch_T::Sig::WithoutRuntime", align 8
  ret void
}

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { "addedToSilenceEmptyAttrsError" }
attributes #2 = { noinline nounwind ssp uwtable }
attributes #3 = { argmemonly nofree nounwind readonly }
attributes #4 = { noreturn }
attributes #5 = { nounwind readnone }
attributes #6 = { cold minsize noreturn nounwind optsize ssp uwtable }
attributes #7 = { noreturn nounwind ssp uwtable }
attributes #8 = { inaccessiblememonly "addedToSilenceEmptyAttrsError" }
attributes #9 = { norecurse nounwind readnone ssp uwtable }
attributes #10 = { nounwind readnone speculatable willreturn }
attributes #11 = { nounwind ssp }
attributes #12 = { nounwind sspreq }
attributes #13 = { nounwind sspreq uwtable }
attributes #14 = { ssp }
attributes #15 = { argmemonly nounwind willreturn }
attributes #16 = { cold minsize noreturn nounwind sspreq }
attributes #17 = { cold minsize noreturn nounwind sspreq uwtable }
attributes #18 = { nounwind willreturn }
attributes #19 = { nounwind }
attributes #20 = { noreturn nounwind }
attributes #21 = { noinline }

!0 = !{!1, !2, i64 0}
!1 = !{!"RBasic", !2, i64 0, !2, i64 8}
!2 = !{!"long", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!3, !3, i64 0}
!6 = !{i32 1088}
!7 = !{!2, !2, i64 0}
!8 = !{!1, !2, i64 8}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !3, i64 0}
!11 = !{!12, !10, i64 0}
!12 = !{!"iseq_insn_info_entry", !10, i64 0, !10, i64 4}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.isvectorized", i32 1}
!22 = !{!23, !24, i64 16}
!23 = !{!"rb_iseq_struct", !2, i64 0, !2, i64 8, !24, i64 16, !3, i64 24}
!24 = !{!"any pointer", !3, i64 0}
!25 = !{!26, !24, i64 120}
!26 = !{!"rb_iseq_constant_body", !3, i64 0, !10, i64 4, !24, i64 8, !27, i64 16, !29, i64 64, !32, i64 120, !24, i64 152, !24, i64 160, !24, i64 168, !24, i64 176, !24, i64 184, !24, i64 192, !24, i64 200, !33, i64 208, !10, i64 240, !10, i64 244, !10, i64 248, !10, i64 252, !10, i64 256, !3, i64 260}
!27 = !{!"", !28, i64 0, !10, i64 4, !10, i64 8, !10, i64 12, !10, i64 16, !10, i64 20, !10, i64 24, !10, i64 28, !24, i64 32, !24, i64 40}
!28 = !{!"", !10, i64 0, !10, i64 0, !10, i64 0, !10, i64 0, !10, i64 0, !10, i64 0, !10, i64 0, !10, i64 0}
!29 = !{!"rb_iseq_location_struct", !2, i64 0, !2, i64 8, !2, i64 16, !2, i64 24, !10, i64 32, !30, i64 36}
!30 = !{!"rb_code_location_struct", !31, i64 0, !31, i64 8}
!31 = !{!"rb_code_position_struct", !10, i64 0, !10, i64 4}
!32 = !{!"iseq_insn_info", !24, i64 0, !24, i64 8, !10, i64 16, !24, i64 24}
!33 = !{!"", !2, i64 0, !2, i64 8, !2, i64 16, !24, i64 24}
!34 = !{!26, !24, i64 128}
!35 = !{!26, !10, i64 4}
!36 = !{!26, !10, i64 136}
!37 = !{!26, !24, i64 8}
!38 = distinct !{!38, !21}
!39 = !{!24, !24, i64 0}
!40 = !{!41, !24, i64 16}
!41 = !{!"rb_execution_context_struct", !24, i64 0, !2, i64 8, !24, i64 16, !24, i64 24, !24, i64 32, !10, i64 40, !10, i64 44, !24, i64 48, !24, i64 56, !24, i64 64, !2, i64 72, !2, i64 80, !24, i64 88, !2, i64 96, !24, i64 104, !24, i64 112, !2, i64 120, !2, i64 128, !3, i64 136, !3, i64 137, !2, i64 144, !42, i64 152}
!42 = !{!"", !24, i64 0, !24, i64 8, !2, i64 16, !3, i64 24}
!43 = !{!44}
!44 = distinct !{!44, !45}
!45 = distinct !{!45, !"LVerDomain"}
!46 = !{!47}
!47 = distinct !{!47, !45}
!48 = distinct !{!48, !21}
!49 = distinct !{!49, !14}
!50 = distinct !{!50, !21}
!51 = !{!52, !24, i64 16}
!52 = !{!"rb_control_frame_struct", !24, i64 0, !24, i64 8, !24, i64 16, !2, i64 24, !24, i64 32, !24, i64 40, !24, i64 48}
!53 = !{!52, !24, i64 0}
!54 = !{!55, !55, i64 0}
!55 = !{!"long long", !3, i64 0}
!56 = !{!"branch_weights", i32 10000, i32 1}
!57 = !{!58, !24, i64 32}
!58 = !{!"RTypedData", !1, i64 0, !24, i64 16, !2, i64 24, !24, i64 32}
!59 = !{!"branch_weights", i32 1073205, i32 2146410443}
!60 = !{!"branch_weights", i32 1, i32 2000}
!61 = !{!"misexpect", i64 0, i64 2000, i64 1}
!62 = !{!"branch_weights", i32 4000000, i32 4001}
!63 = !{!"misexpect", i64 1, i64 2000, i64 1}
!64 = !{!65}
!65 = distinct !{!65, !66, !"sorbet_rb_int_plus: argument 0"}
!66 = distinct !{!66, !"sorbet_rb_int_plus"}
!67 = !{!68, !69, i64 16}
!68 = !{!"RFloat", !1, i64 0, !69, i64 16}
!69 = !{!"double", !3, i64 0}
!70 = !{!71}
!71 = distinct !{!71, !72, !"sorbet_buildHashIntrinsic: argument 0"}
!72 = distinct !{!72, !"sorbet_buildHashIntrinsic"}
