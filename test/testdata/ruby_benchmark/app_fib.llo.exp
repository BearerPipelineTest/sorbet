; ModuleID = 'payload'
source_filename = "compiler/IRHelpers/payload.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_data_type_struct = type { i8*, %struct.anon.1, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.1 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.RBasic = type { i64, i64 }
%struct.RString = type { %struct.RBasic, %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { i64, i8*, %union.anon.0 }
%union.anon.0 = type { i64 }
%struct.OnigEncodingTypeST = type { i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i8*, i32, i32, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8**, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i32 (i32, i32*, i32, i8*)*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32, i8*, i8*, %struct.OnigCaseFoldCodeItem*, %struct.OnigEncodingTypeST*)*, i32 (%struct.OnigEncodingTypeST*, i8*, i8*)*, i32 (i32, i32, %struct.OnigEncodingTypeST*)*, i32 (i32, i32*, i32**, %struct.OnigEncodingTypeST*)*, i8* (i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i8*, i8*, %struct.OnigEncodingTypeST*)*, i32 (i32*, i8**, i8*, i8*, i8*, %struct.OnigEncodingTypeST*)*, i32, i32 }
%struct.OnigCaseFoldCodeItem = type { i32, i32, [3 x i32] }
%struct.RFloat = type { %struct.RBasic, double }
%struct.RTypedData = type { %struct.RBasic, %struct.rb_data_type_struct*, i64, i8* }
%struct.sorbet_Closure = type { i32, [0 x i64] }

@.str = private unnamed_addr constant [5 x i8] c"%li\0B\00", align 1
@rb_cObject = external local_unnamed_addr constant i64, align 8
@ruby_vm_global_constant_state = external local_unnamed_addr global i64, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.1 = private unnamed_addr constant [29 x i8] c"wrong constant name %li\0B%li\0B\00", align 1
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@.str.2 = private unnamed_addr constant [36 x i8] c"%li\0B does not refer to class/module\00", align 1
@.str.3 = private unnamed_addr constant [50 x i8] c"wrong number of arguments (given %d, expected %d)\00", align 1
@rb_eArgError = external local_unnamed_addr global i64, align 8
@.str.6 = private unnamed_addr constant [45 x i8] c"%s: Expected type %s, got %s with value %li\0B\00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@closureInfo = constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i32 0, i32 0), %struct.anon.1 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@rb_cData = external local_unnamed_addr constant i64, align 8
@rb_cModule = external local_unnamed_addr constant i64, align 8
@rb_cInteger = external local_unnamed_addr constant i64, align 8
@"rubyIdPrecomputed_<static-init>" = internal unnamed_addr global i64 0, align 8
@"str_<static-init>" = private unnamed_addr constant [14 x i8] c"<static-init>\00", align 1
@str_cast = private unnamed_addr constant [5 x i8] c"cast\00", align 1
@str_T = private unnamed_addr constant [2 x i8] c"T\00", align 1
@rubyIdPrecomputed_unsafe = internal unnamed_addr global i64 0, align 8
@str_unsafe = private unnamed_addr constant [7 x i8] c"unsafe\00", align 1
@str_HasFib = private unnamed_addr constant [7 x i8] c"HasFib\00", align 1
@rubyIdPrecomputed_fib = internal unnamed_addr global i64 0, align 8
@str_fib = private unnamed_addr constant [4 x i8] c"fib\00", align 1
@str_sig = private unnamed_addr constant [4 x i8] c"sig\00", align 1
@str_Integer = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@"str_T.class_of(HasFib)" = private unnamed_addr constant [19 x i8] c"T.class_of(HasFib)\00", align 1
@"rubyIdPrecomputed_<" = internal unnamed_addr global i64 0, align 8
@"str_<" = private unnamed_addr constant [2 x i8] c"<\00", align 1
@rubyIdPrecomputed_- = internal unnamed_addr global i64 0, align 8
@str_- = private unnamed_addr constant [2 x i8] c"-\00", align 1
@"rubyIdPrecomputed_+" = internal unnamed_addr global i64 0, align 8
@"str_+" = private unnamed_addr constant [2 x i8] c"+\00", align 1
@rubyIdPrecomputed_final = internal unnamed_addr global i64 0, align 8
@str_final = private unnamed_addr constant [6 x i8] c"final\00", align 1
@rubyIdPrecomputed_sig = internal unnamed_addr global i64 0, align 8
@"str_T::Sig::WithoutRuntime" = private unnamed_addr constant [23 x i8] c"T::Sig::WithoutRuntime\00", align 1
@rubyIdPrecomputed_n = internal unnamed_addr global i64 0, align 8
@str_n = private unnamed_addr constant [2 x i8] c"n\00", align 1
@rubyIdPrecomputed_params = internal unnamed_addr global i64 0, align 8
@str_params = private unnamed_addr constant [7 x i8] c"params\00", align 1
@rubyIdPrecomputed_returns = internal unnamed_addr global i64 0, align 8
@str_returns = private unnamed_addr constant [8 x i8] c"returns\00", align 1
@llvm.global_ctors = appending global [11 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_<static-init>", i8* bitcast (i64* @"rubyIdPrecomputed_<static-init>" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_unsafe, i8* bitcast (i64* @rubyIdPrecomputed_unsafe to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_fib, i8* bitcast (i64* @rubyIdPrecomputed_fib to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_<", i8* bitcast (i64* @"rubyIdPrecomputed_<" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_-, i8* bitcast (i64* @rubyIdPrecomputed_- to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_+", i8* bitcast (i64* @"rubyIdPrecomputed_+" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_final, i8* bitcast (i64* @rubyIdPrecomputed_final to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_sig, i8* bitcast (i64* @rubyIdPrecomputed_sig to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_n, i8* bitcast (i64* @rubyIdPrecomputed_n to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_params, i8* bitcast (i64* @rubyIdPrecomputed_params to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @Constr_rubyIdPrecomputed_returns, i8* bitcast (i64* @rubyIdPrecomputed_returns to i8*) }]
@guard_epoch_T = linkonce local_unnamed_addr global i64 0
@guarded_const_T = linkonce local_unnamed_addr global i64 0
@guard_epoch_HasFib = linkonce local_unnamed_addr global i64 0
@guarded_const_HasFib = linkonce local_unnamed_addr global i64 0
@"guard_epoch_T::Sig::WithoutRuntime" = linkonce local_unnamed_addr global i64 0
@"guarded_const_T::Sig::WithoutRuntime" = linkonce local_unnamed_addr global i64 0

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_pi(i64 %0) local_unnamed_addr #0 {
  %2 = tail call i8* @rb_id2name(i64 %0) #15
  ret i8* %2
}

declare i8* @rb_id2name(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_p(i64 %0) local_unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 %0) #15
  %3 = inttoptr i64 %2 to %struct.RBasic*
  %4 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !0
  %6 = and i64 %5, 8192
  %7 = icmp eq i64 %6, 0
  %8 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 %0) #15
  %9 = inttoptr i64 %8 to %struct.RString*
  br i1 %7, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !5
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i8* [ %12, %10 ], [ %15, %13 ]
  ret i8* %17
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #1

declare i64 @rb_hash_new() local_unnamed_addr #1

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #1

declare i64 @rb_id2sym(i64) local_unnamed_addr #1

declare i8* @rb_obj_classname(i64) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @sorbet_getConstantAt(i64 %0, i64 %1) unnamed_addr #2 {
  %3 = tail call i64 @rb_id2sym(i64 %1) #15
  %4 = tail call %struct.OnigEncodingTypeST* @rb_enc_get(i64 %3) #15
  %5 = tail call i8* @rb_id2name(i64 %1) #15
  %6 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %5)
  %7 = getelementptr inbounds i8, i8* %5, i64 %6
  %8 = icmp sgt i64 %6, 0
  br i1 %8, label %9, label %.loopexit11

9:                                                ; preds = %2
  %10 = ptrtoint i8* %5 to i64
  br label %13

.loopexit10:                                      ; preds = %rb_obj_freeze_inline.exit, %44, %41, %28, %101
  %11 = phi i64 [ %102, %101 ], [ %3, %28 ], [ %3, %44 ], [ %3, %41 ], [ %66, %rb_obj_freeze_inline.exit ]
  %12 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !6
  tail call void (i64, i8*, ...) @rb_raise(i64 %12, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i64 %14, i64 %11) #16
  unreachable

13:                                               ; preds = %109, %9
  %14 = phi i64 [ %0, %9 ], [ %110, %109 ]
  %15 = phi i8* [ %5, %9 ], [ %50, %109 ]
  %16 = phi i8* [ %5, %9 ], [ %49, %109 ]
  %17 = icmp ult i8* %16, %7
  br i1 %17, label %18, label %28

18:                                               ; preds = %13
  %19 = load i8, i8* %16, align 1, !tbaa !5
  %20 = icmp eq i8 %19, 58
  br i1 %20, label %28, label %.preheader

21:                                               ; preds = %.preheader
  %22 = load i8, i8* %25, align 1, !tbaa !5
  %23 = icmp eq i8 %22, 58
  br i1 %23, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %18, %21
  %24 = phi i8* [ %25, %21 ], [ %16, %18 ]
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  %26 = icmp eq i8* %25, %7
  br i1 %26, label %.loopexit, label %21

.loopexit:                                        ; preds = %21, %.preheader
  %.lcssa = phi i8* [ %25, %21 ], [ %7, %.preheader ]
  %27 = icmp ult i8* %.lcssa, %7
  br label %28

28:                                               ; preds = %.loopexit, %18, %13
  %29 = phi i8* [ %16, %13 ], [ %16, %18 ], [ %.lcssa, %.loopexit ]
  %30 = phi i1 [ false, %13 ], [ true, %18 ], [ %27, %.loopexit ]
  %31 = icmp eq i8* %15, %29
  br i1 %31, label %.loopexit10, label %32

32:                                               ; preds = %28
  %33 = ptrtoint i8* %29 to i64
  %34 = ptrtoint i8* %15 to i64
  %35 = sub i64 %33, %34
  %36 = tail call i64 @rb_check_id_cstr(i8* %15, i64 %35, %struct.OnigEncodingTypeST* %4) #15
  %37 = sub i64 %34, %10
  br i1 %30, label %38, label %48

38:                                               ; preds = %32
  %39 = load i8, i8* %29, align 1, !tbaa !5
  %40 = icmp eq i8 %39, 58
  br i1 %40, label %41, label %48

41:                                               ; preds = %38
  %42 = getelementptr inbounds i8, i8* %29, i64 2
  %43 = icmp ult i8* %42, %7
  br i1 %43, label %44, label %.loopexit10

44:                                               ; preds = %41
  %45 = getelementptr inbounds i8, i8* %29, i64 1
  %46 = load i8, i8* %45, align 1, !tbaa !5
  %47 = icmp eq i8 %46, 58
  br i1 %47, label %48, label %.loopexit10

48:                                               ; preds = %44, %38, %32
  %49 = phi i8* [ %29, %38 ], [ %29, %32 ], [ %42, %44 ]
  %50 = phi i8* [ %15, %38 ], [ %15, %32 ], [ %42, %44 ]
  %51 = and i64 %14, 7
  %52 = icmp ne i64 %51, 0
  %53 = and i64 %14, -9
  %54 = icmp eq i64 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %61, label %56

56:                                               ; preds = %48
  %57 = inttoptr i64 %14 to %struct.RBasic*
  %58 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %57, i64 0, i32 0
  %59 = load i64, i64* %58, align 8, !tbaa !0
  %60 = and i64 %59, 30
  %switch = icmp eq i64 %60, 2
  br i1 %switch, label %63, label %61

61:                                               ; preds = %56, %48
  %62 = load i64, i64* @rb_eTypeError, align 8, !tbaa !6
  tail call void (i64, i8*, ...) @rb_raise(i64 %62, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i64 %3) #16
  unreachable

63:                                               ; preds = %56
  %64 = icmp eq i64 %36, 0
  br i1 %64, label %65, label %98

65:                                               ; preds = %63
  %66 = tail call i64 @rb_str_subseq(i64 %3, i64 %37, i64 %35) #15
  %67 = and i64 %66, 7
  %68 = icmp ne i64 %67, 0
  %69 = and i64 %66, -9
  %70 = icmp eq i64 %69, 0
  %71 = or i1 %68, %70
  br i1 %71, label %rb_obj_freeze_inline.exit, label %72

72:                                               ; preds = %65
  %73 = inttoptr i64 %66 to %struct.RBasic*
  %74 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %73, i64 0, i32 0
  %75 = load i64, i64* %74, align 8, !tbaa !0
  %76 = and i64 %75, 31
  %77 = icmp eq i64 %76, 27
  br i1 %77, label %rb_obj_freeze_inline.exit, label %78

78:                                               ; preds = %72
  %79 = or i64 %75, 2048
  store i64 %79, i64* %74, align 8, !tbaa !0
  %80 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %73, i64 0, i32 1
  %81 = load i64, i64* %80, align 8, !tbaa !7
  %82 = icmp ne i64 %81, 0
  %83 = and i64 %75, 4096
  %84 = icmp eq i64 %83, 0
  %85 = and i1 %84, %82
  br i1 %85, label %86, label %rb_obj_freeze_inline.exit

86:                                               ; preds = %78
  tail call void @rb_freeze_singleton_class(i64 %66) #15
  br label %rb_obj_freeze_inline.exit

rb_obj_freeze_inline.exit:                        ; preds = %65, %72, %78, %86
  %87 = tail call i32 @rb_is_const_name(i64 %66) #15
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %.loopexit10, label %rb_class_of.exit

rb_class_of.exit:                                 ; preds = %rb_obj_freeze_inline.exit
  %89 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %57, i64 0, i32 1
  %90 = load i64, i64* %89, align 8, !tbaa !6
  %91 = tail call i32 @rb_method_basic_definition_p(i64 %90, i64 2737) #15
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %96

93:                                               ; preds = %rb_class_of.exit
  %94 = tail call i64 @rb_str_intern(i64 %66) #15
  %95 = tail call i64 @rb_const_missing(i64 %14, i64 %94) #15
  br label %109

96:                                               ; preds = %rb_class_of.exit
  %97 = tail call i64 @rb_mod_const_missing(i64 %14, i64 %66) #16
  unreachable

98:                                               ; preds = %63
  %99 = tail call i32 @rb_is_const_id(i64 %36) #5
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %103

101:                                              ; preds = %98
  %102 = tail call i64 @rb_id2sym(i64 %36) #15
  br label %.loopexit10

103:                                              ; preds = %98
  %104 = icmp eq i64 %37, 0
  br i1 %104, label %105, label %107

105:                                              ; preds = %103
  %106 = tail call i64 @rb_const_get(i64 %14, i64 %36) #15
  br label %109

107:                                              ; preds = %103
  %108 = tail call i64 @rb_const_get_from(i64 %14, i64 %36) #15
  br label %109

109:                                              ; preds = %107, %105, %93
  %110 = phi i64 [ %95, %93 ], [ %106, %105 ], [ %108, %107 ]
  %111 = icmp ult i8* %49, %7
  br i1 %111, label %13, label %.loopexit11

.loopexit11:                                      ; preds = %109, %2
  %112 = phi i64 [ %0, %2 ], [ %110, %109 ]
  ret i64 %112
}

declare %struct.OnigEncodingTypeST* @rb_enc_get(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #4

declare i64 @rb_check_id_cstr(i8*, i64, %struct.OnigEncodingTypeST*) local_unnamed_addr #1

declare i64 @rb_str_subseq(i64, i64, i64) local_unnamed_addr #1

declare i32 @rb_is_const_name(i64) local_unnamed_addr #1

declare i32 @rb_method_basic_definition_p(i64, i64) local_unnamed_addr #1

declare i64 @rb_str_intern(i64) local_unnamed_addr #1

declare i64 @rb_const_missing(i64, i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare i64 @rb_mod_const_missing(i64, i64) local_unnamed_addr #4

; Function Attrs: nounwind readnone
declare i32 @rb_is_const_id(i64) local_unnamed_addr #5

declare i64 @rb_const_get(i64, i64) local_unnamed_addr #1

declare i64 @rb_const_get_from(i64, i64) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i64 @sorbet_getConstant(i8* %0, i64 %1) unnamed_addr #2 {
  %3 = load i64, i64* @rb_cObject, align 8, !tbaa !6
  %4 = tail call i64 @rb_intern2(i8* %0, i64 %1) #15
  %5 = tail call fastcc i64 @sorbet_getConstantAt(i64 %3, i64 %4)
  ret i64 %5
}

declare i64 @rb_define_class(i8*, i64) local_unnamed_addr #1

declare void @rb_define_singleton_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #1

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #1

declare i64 @rb_block_call(i64, i64, i32, i64*, i64 (...)*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @sorbet_rb_arity_error_new(i32 %0) unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.3, i64 0, i64 0), i32 %0, i32 1) #15
  %3 = load i64, i64* @rb_eArgError, align 8, !tbaa !6
  %4 = tail call i64 @rb_exc_new_str(i64 %3, i64 %2) #15
  ret i64 %4
}

declare i64 @rb_exc_new_str(i64, i64) local_unnamed_addr #1

; Function Attrs: cold noreturn nounwind optsize ssp uwtable
define internal fastcc void @sorbet_cast_failure(i64 %0, i8* %1, i8* %2) unnamed_addr #6 {
  %4 = load i64, i64* @rb_eTypeError, align 8, !tbaa !6
  %5 = tail call i8* @rb_obj_classname(i64 %0) #15
  tail call void (i64, i8*, ...) @rb_raise(i64 %4, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.6, i64 0, i64 0), i8* %1, i8* %2, i8* %5, i64 %0) #16
  unreachable
}

; Function Attrs: noreturn nounwind ssp uwtable
define internal fastcc void @sorbet_rb_error_arity(i32 %0) unnamed_addr #7 {
  %2 = tail call fastcc i64 @sorbet_rb_arity_error_new(i32 %0)
  tail call void @rb_exc_raise(i64 %2) #16
  unreachable
}

; Function Attrs: noreturn
declare void @rb_exc_raise(i64) local_unnamed_addr #4

declare i32 @ruby_stack_check() local_unnamed_addr #1

declare i8* @ruby_xmalloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8* %0) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !8
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #15
  ret void
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly %0) #8 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !8
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

declare i64 @rb_data_typed_object_wrap(i64, i8*, %struct.rb_data_type_struct*) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare i64 @rb_obj_is_kind_of(i64, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i64 @rb_class_inherited_p(i64, i64) local_unnamed_addr #5

declare void @rb_hash_bulk_insert(i64, i64*, i64) local_unnamed_addr #1

declare i64 @rb_big_plus(i64, i64) local_unnamed_addr #1

declare i64 @rb_complex_plus(i64, i64) local_unnamed_addr #1

declare i64 @rb_num_coerce_bin(i64, i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @sorbet_rb_int_minus(i64 %0, i64 %.val) unnamed_addr #0 {
  %2 = and i64 %0, 1
  %3 = icmp eq i64 %2, 0
  br i1 %3, label %82, label %4, !prof !10

4:                                                ; preds = %1
  %5 = and i64 %.val, 1
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %16, label %7, !prof !10

7:                                                ; preds = %4
  %8 = add nsw i64 %.val, -1
  %9 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %0, i64 %8) #15
  %10 = extractvalue { i64, i1 } %9, 1
  %11 = extractvalue { i64, i1 } %9, 0
  br i1 %10, label %12, label %rb_fix_minus_fix.exit

12:                                               ; preds = %7
  %13 = ashr i64 %11, 1
  %14 = xor i64 %13, -9223372036854775808
  %15 = tail call i64 @rb_int2big(i64 %14) #15
  br label %rb_fix_minus_fix.exit

16:                                               ; preds = %4
  %17 = and i64 %.val, 7
  %18 = icmp ne i64 %17, 0
  %19 = and i64 %.val, -9
  %20 = icmp eq i64 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %32, label %22

22:                                               ; preds = %16
  %23 = inttoptr i64 %.val to %struct.RBasic*
  %24 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %23, i64 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !0
  %26 = and i64 %25, 31
  %27 = icmp eq i64 %26, 10
  br i1 %27, label %28, label %32

28:                                               ; preds = %22
  %29 = ashr i64 %0, 1
  %30 = tail call i64 @rb_int2big(i64 %29) #15
  %31 = tail call i64 @rb_big_minus(i64 %30, i64 %.val) #15
  br label %rb_fix_minus_fix.exit

32:                                               ; preds = %22, %16
  %33 = and i64 %.val, 3
  %34 = icmp eq i64 %33, 2
  br i1 %34, label %42, label %35

35:                                               ; preds = %32
  br i1 %21, label %96, label %36

36:                                               ; preds = %35
  %37 = inttoptr i64 %.val to %struct.RBasic*
  %38 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %37, i64 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !0
  %40 = and i64 %39, 31
  %41 = icmp eq i64 %40, 4
  br i1 %41, label %55, label %96

42:                                               ; preds = %32
  %43 = ashr i64 %0, 1
  %44 = sitofp i64 %43 to double
  %45 = icmp eq i64 %.val, -9223372036854775806
  br i1 %45, label %rb_float_value_inline.exit, label %46

46:                                               ; preds = %42
  %47 = lshr i64 %.val, 63
  %48 = sub nuw nsw i64 2, %47
  %49 = and i64 %.val, 4
  %50 = or i64 %48, %49
  %51 = lshr i64 %.val, 3
  %52 = shl nuw i64 %50, 61
  %53 = or i64 %52, %51
  %54 = bitcast i64 %53 to double
  br label %rb_float_value_inline.exit

55:                                               ; preds = %36
  %56 = ashr i64 %0, 1
  %57 = sitofp i64 %56 to double
  %58 = inttoptr i64 %.val to %struct.RFloat*
  %59 = getelementptr inbounds %struct.RFloat, %struct.RFloat* %58, i64 0, i32 1
  %60 = load double, double* %59, align 8, !tbaa !11
  br label %rb_float_value_inline.exit

rb_float_value_inline.exit:                       ; preds = %42, %46, %55
  %61 = phi double [ %57, %55 ], [ %44, %46 ], [ %44, %42 ]
  %62 = phi double [ %60, %55 ], [ %54, %46 ], [ 0.000000e+00, %42 ]
  %63 = fsub double %61, %62
  %64 = bitcast double %63 to i64
  %65 = icmp eq i64 %64, 3458764513820540928
  br i1 %65, label %80, label %66

66:                                               ; preds = %rb_float_value_inline.exit
  %67 = lshr i64 %64, 60
  %68 = trunc i64 %67 to i32
  %69 = and i32 %68, 7
  %70 = add nsw i32 %69, -3
  %71 = icmp ugt i32 %70, 1
  br i1 %71, label %78, label %72

72:                                               ; preds = %66
  %73 = shl i64 %64, 3
  %74 = lshr i64 %64, 61
  %75 = and i64 %74, 4
  %76 = or i64 %73, %75
  %77 = or i64 %76, 2
  br label %rb_fix_minus_fix.exit

78:                                               ; preds = %66
  %79 = icmp eq i64 %64, 0
  br i1 %79, label %rb_fix_minus_fix.exit, label %80

80:                                               ; preds = %78, %rb_float_value_inline.exit
  %81 = tail call i64 @rb_float_new_in_heap(double %63) #15
  br label %rb_fix_minus_fix.exit

82:                                               ; preds = %1
  %83 = and i64 %0, 7
  %84 = icmp ne i64 %83, 0
  %85 = and i64 %0, -9
  %86 = icmp eq i64 %85, 0
  %87 = or i1 %84, %86
  br i1 %87, label %96, label %88

88:                                               ; preds = %82
  %89 = inttoptr i64 %0 to %struct.RBasic*
  %90 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %89, i64 0, i32 0
  %91 = load i64, i64* %90, align 8, !tbaa !0
  %92 = and i64 %91, 31
  %93 = icmp eq i64 %92, 10
  br i1 %93, label %94, label %96

94:                                               ; preds = %88
  %95 = tail call i64 @rb_big_minus(i64 %0, i64 %.val) #15
  br label %rb_fix_minus_fix.exit

96:                                               ; preds = %88, %82, %36, %35
  %97 = tail call i64 @rb_num_coerce_bin(i64 %0, i64 %.val, i64 45) #15
  br label %rb_fix_minus_fix.exit

rb_fix_minus_fix.exit:                            ; preds = %80, %78, %72, %12, %7, %96, %94, %28
  %98 = phi i64 [ %97, %96 ], [ %31, %28 ], [ %95, %94 ], [ %15, %12 ], [ %11, %7 ], [ %81, %80 ], [ %77, %72 ], [ -9223372036854775806, %78 ]
  ret i64 %98
}

declare i64 @rb_int2big(i64) local_unnamed_addr #1

declare i64 @rb_big_minus(i64, i64) local_unnamed_addr #1

declare i64 @rb_float_new_in_heap(double) local_unnamed_addr #1

declare void @rb_ary_detransient(i64) local_unnamed_addr #1

declare void @rb_freeze_singleton_class(i64) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #9

; Function Attrs: nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #9

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_<static-init>"() #10 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"str_<static-init>", i64 0, i64 0), i64 13) #15
  store i64 %0, i64* @"rubyIdPrecomputed_<static-init>", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_unsafe() #10 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_unsafe, i64 0, i64 0), i64 6) #15
  store i64 %0, i64* @rubyIdPrecomputed_unsafe, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_fib() #10 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_fib, i64 0, i64 0), i64 3) #15
  store i64 %0, i64* @rubyIdPrecomputed_fib, align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_test_testdata_ruby_benchmark_app_fib() local_unnamed_addr #11 {
typeTestSuccess.i:
  %callArgs.i.i.i = alloca [2 x i64], align 8
  %callArgs.i = alloca [1 x i64], align 8
  %0 = load i64, i64* @rb_cObject, align 8
  %1 = bitcast [1 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1)
  %rubyId_fib.i = load i64, i64* @rubyIdPrecomputed_fib, align 8
  %2 = load i64, i64* @guard_epoch_T, align 8
  %3 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !14
  %needTakeSlowPath.i = icmp eq i64 %2, %3
  br i1 %needTakeSlowPath.i, label %afterSymCallIntrinsic_unsafe.i, label %4, !prof !16

4:                                                ; preds = %typeTestSuccess.i
  tail call void @const_recompute_T() #15
  br label %afterSymCallIntrinsic_unsafe.i

afterSymCallIntrinsic_unsafe.i:                   ; preds = %4, %typeTestSuccess.i
  %callArgsAddr.i = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs.i, i64 0, i64 0
  store i64 %0, i64* %callArgsAddr.i, align 8
  %5 = tail call i64 @rb_define_class(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_HasFib, i64 0, i64 0), i64 %0) #15
  %6 = load i64, i64* @guard_epoch_HasFib, align 8
  %7 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !14
  %needTakeSlowPath.i.i = icmp eq i64 %6, %7
  br i1 %needTakeSlowPath.i.i, label %9, label %8, !prof !16

8:                                                ; preds = %afterSymCallIntrinsic_unsafe.i
  tail call void @const_recompute_HasFib() #15
  br label %9

9:                                                ; preds = %8, %afterSymCallIntrinsic_unsafe.i
  %10 = load i64, i64* @guarded_const_HasFib, align 8
  %11 = bitcast [2 x i64]* %callArgs.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #15
  %12 = tail call i8* @ruby_xmalloc(i64 16) #15
  %13 = bitcast i8* %12 to i32*
  store i32 1, i32* %13, align 8, !tbaa !8
  %14 = load i64, i64* @rb_cData, align 8, !tbaa !6
  %15 = tail call i64 @rb_data_typed_object_wrap(i64 %14, i8* %12, %struct.rb_data_type_struct* nonnull @closureInfo) #15
  %16 = inttoptr i64 %15 to %struct.RTypedData*
  %17 = getelementptr inbounds %struct.RTypedData, %struct.RTypedData* %16, i64 0, i32 3
  %18 = bitcast i8** %17 to %struct.sorbet_Closure**
  %19 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %18, align 8, !tbaa !17
  %20 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %19, i64 0, i32 1, i64 0
  store i64 8, i64* %20, align 8
  %rubyId_final.i.i.i = load i64, i64* @rubyIdPrecomputed_final, align 8
  %rubyId_sig.i.i.i = load i64, i64* @rubyIdPrecomputed_sig, align 8
  %rubyId_fib.i.i.i = load i64, i64* @rubyIdPrecomputed_fib, align 8
  %21 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %18, align 8, !tbaa !17
  %22 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %21, i64 0, i32 1, i64 0
  store i64 %10, i64* %22, align 8
  %23 = load i64, i64* @guard_epoch_HasFib, align 8
  %24 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !14
  %needTakeSlowPath.i.i.i = icmp eq i64 %23, %24
  br i1 %needTakeSlowPath.i.i.i, label %26, label %25, !prof !16

25:                                               ; preds = %9
  tail call void @const_recompute_HasFib() #15
  br label %26

26:                                               ; preds = %25, %9
  %27 = load i64, i64* @guarded_const_HasFib, align 8
  %28 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %18, align 8, !tbaa !17
  %29 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %28, i64 0, i32 1, i64 0
  %30 = load i64, i64* %29, align 8
  %31 = icmp eq i64 %30, %27
  br i1 %31, label %typeTestSuccess.i.i.i, label %32

32:                                               ; preds = %26
  %33 = load i64, i64* @rb_cModule, align 8, !tbaa !6
  %34 = tail call i64 @rb_obj_is_kind_of(i64 %30, i64 %33) #5
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %typeTestFail.i.i.i, label %sorbet_isa_class_of.exit.i.i.i, !prof !20

sorbet_isa_class_of.exit.i.i.i:                   ; preds = %32
  %36 = tail call i64 @rb_class_inherited_p(i64 %30, i64 %27) #5
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %typeTestFail.i.i.i, label %typeTestSuccess.i.i.i, !prof !10, !misexpect !21

typeTestSuccess.i.i.i:                            ; preds = %sorbet_isa_class_of.exit.i.i.i, %26
  %rawSym.i.i.i = tail call i64 @rb_id2sym(i64 %rubyId_final.i.i.i) #15
  %callArgsAddr.i.i.i = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs.i.i.i, i64 0, i64 0
  store i64 %rawSym.i.i.i, i64* %callArgsAddr.i.i.i, align 8
  %38 = load i64, i64* @"guard_epoch_T::Sig::WithoutRuntime", align 8
  %39 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !14
  %needTakeSlowPath35.i.i.i = icmp eq i64 %38, %39
  br i1 %needTakeSlowPath35.i.i.i, label %41, label %40, !prof !16

40:                                               ; preds = %typeTestSuccess.i.i.i
  tail call void @"const_recompute_T::Sig::WithoutRuntime"() #15
  br label %41

41:                                               ; preds = %40, %typeTestSuccess.i.i.i
  %42 = load i64, i64* @"guarded_const_T::Sig::WithoutRuntime", align 8
  %43 = call i64 @rb_block_call(i64 %42, i64 %rubyId_sig.i.i.i, i32 1, i64* nonnull %callArgsAddr.i.i.i, i64 (...)* bitcast (i64 (i64, i64, i32, i64*, i64)* @"func_HasFib.<static-init>$block_1" to i64 (...)*), i64 %15) #15
  %44 = load i64, i64* @guard_epoch_T, align 8
  %45 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !14
  %needTakeSlowPath37.i.i.i = icmp eq i64 %44, %45
  br i1 %needTakeSlowPath37.i.i.i, label %"Init_func_HasFib.<static-init>.exit.i", label %46, !prof !16

46:                                               ; preds = %41
  call void @const_recompute_T() #15
  br label %"Init_func_HasFib.<static-init>.exit.i"

typeTestFail.i.i.i:                               ; preds = %sorbet_isa_class_of.exit.i.i.i, %32
  tail call fastcc void @sorbet_cast_failure(i64 %30, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"str_T.class_of(HasFib)", i64 0, i64 0)) #15
  unreachable

"Init_func_HasFib.<static-init>.exit.i":          ; preds = %46, %41
  store i64 %0, i64* %callArgsAddr.i.i.i, align 8
  %rawSym31.i.i.i = call i64 @rb_id2sym(i64 %rubyId_fib.i.i.i) #15
  call void @rb_define_singleton_method(i64 %27, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_fib, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @func_HasFib.fib to i64 (...)*), i32 -1) #15
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #15
  store i64 69, i64* %callArgsAddr.i, align 8
  %47 = load i64, i64* @guard_epoch_HasFib, align 8
  %48 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !14
  %needTakeSlowPath36.i = icmp eq i64 %47, %48
  br i1 %needTakeSlowPath36.i, label %"func_<root>.<static-init>$111.exit", label %49, !prof !16

49:                                               ; preds = %"Init_func_HasFib.<static-init>.exit.i"
  call void @const_recompute_HasFib() #15
  br label %"func_<root>.<static-init>$111.exit"

"func_<root>.<static-init>$111.exit":             ; preds = %"Init_func_HasFib.<static-init>.exit.i", %49
  %50 = load i64, i64* @guarded_const_HasFib, align 8
  %51 = call i64 @rb_funcallv(i64 %50, i64 %rubyId_fib.i, i32 1, i64* nonnull %callArgsAddr.i) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1)
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @func_HasFib.fib(i32 %argc, i64* nocapture readonly %argArray, i64 %selfRaw) #12 {
functionEntryInitializers:
  %callArgs = alloca [1 x i64], align 8
  %"rubyId_+" = load i64, i64* @"rubyIdPrecomputed_+", align 8
  %0 = icmp eq i32 %argc, 1
  br i1 %0, label %fillRequiredArgs, label %argCountFailBlock, !prof !22, !misexpect !23

BB4:                                              ; preds = %110, %108, %99, %97, %91, %44, %28, %23, %"slowSymCallIntrinsic_+", %sorbet_rb_int_lt.exit
  %"<returnMethodTemp>.sroa.0.0" = phi i64 [ 3, %sorbet_rb_int_lt.exit ], [ %20, %"slowSymCallIntrinsic_+" ], [ %111, %110 ], [ %109, %108 ], [ %45, %44 ], [ %31, %28 ], [ %27, %23 ], [ %100, %99 ], [ %96, %91 ], [ -9223372036854775806, %97 ]
  ret i64 %"<returnMethodTemp>.sroa.0.0"

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call fastcc void @sorbet_rb_error_arity(i32 %argc)
  unreachable

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %rawArg_n = load i64, i64* %argArray, align 8
  %1 = and i64 %rawArg_n, 1
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %typeTestFail, label %typeTestSuccess21, !prof !10, !misexpect !21

typeTestFail:                                     ; preds = %fillRequiredArgs
  tail call fastcc void @sorbet_cast_failure(i64 %rawArg_n, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_sig, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_Integer, i64 0, i64 0))
  unreachable

typeTestSuccess21:                                ; preds = %fillRequiredArgs
  %3 = load i64, i64* @guard_epoch_HasFib, align 8
  %4 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !14
  %needTakeSlowPath = icmp eq i64 %3, %4
  br i1 %needTakeSlowPath, label %6, label %5, !prof !16

5:                                                ; preds = %typeTestSuccess21
  tail call void @const_recompute_HasFib() #15
  br label %6

6:                                                ; preds = %typeTestSuccess21, %5
  %7 = load i64, i64* @guarded_const_HasFib, align 8
  %8 = icmp eq i64 %7, %selfRaw
  br i1 %8, label %sorbet_rb_int_lt.exit, label %9

9:                                                ; preds = %6
  %10 = load i64, i64* @rb_cModule, align 8, !tbaa !6
  %11 = tail call i64 @rb_obj_is_kind_of(i64 %selfRaw, i64 %10) #5
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %typeTestFail25, label %sorbet_isa_class_of.exit, !prof !20

sorbet_isa_class_of.exit:                         ; preds = %9
  %13 = tail call i64 @rb_class_inherited_p(i64 %selfRaw, i64 %7) #5
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %typeTestFail25, label %sorbet_rb_int_lt.exit, !prof !10, !misexpect !21

sorbet_rb_int_lt.exit:                            ; preds = %sorbet_isa_class_of.exit, %6
  %callArgsAddr = getelementptr inbounds [1 x i64], [1 x i64]* %callArgs, i64 0, i64 0
  store i64 7, i64* %callArgsAddr, align 8
  %15 = icmp slt i64 %rawArg_n, 6
  br i1 %15, label %BB4, label %fastSymCallIntrinsic_-

typeTestFail25:                                   ; preds = %sorbet_isa_class_of.exit, %9
  tail call fastcc void @sorbet_cast_failure(i64 %selfRaw, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"str_T.class_of(HasFib)", i64 0, i64 0))
  unreachable

fastSymCallIntrinsic_-:                           ; preds = %sorbet_rb_int_lt.exit
  %rawSendResult39 = tail call fastcc i64 @sorbet_rb_int_minus(i64 %rawArg_n, i64 3)
  store i64 %rawSendResult39, i64* %callArgsAddr, align 8
  %16 = tail call i32 @ruby_stack_check() #15
  %directSendResult = call i64 @func_HasFib.fib(i32 1, i64* nonnull %callArgsAddr, i64 %selfRaw)
  %rawSendResult61 = tail call fastcc i64 @sorbet_rb_int_minus(i64 %rawArg_n, i64 5)
  store i64 %rawSendResult61, i64* %callArgsAddr, align 8
  %17 = tail call i32 @ruby_stack_check() #15
  %directSendResult75 = call i64 @func_HasFib.fib(i32 1, i64* nonnull %callArgsAddr, i64 %selfRaw)
  %18 = and i64 %directSendResult, 1
  %19 = icmp eq i64 %18, 0
  store i64 %directSendResult75, i64* %callArgsAddr, align 8
  br i1 %19, label %"slowSymCallIntrinsic_+", label %"fastSymCallIntrinsic_+", !prof !10, !misexpect !21

"slowSymCallIntrinsic_+":                         ; preds = %fastSymCallIntrinsic_-
  %20 = call i64 @rb_funcallv(i64 %directSendResult, i64 %"rubyId_+", i32 1, i64* nonnull %callArgsAddr) #15
  br label %BB4

"fastSymCallIntrinsic_+":                         ; preds = %fastSymCallIntrinsic_-
  %21 = and i64 %directSendResult75, 1
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %32, label %23, !prof !10

23:                                               ; preds = %"fastSymCallIntrinsic_+"
  %24 = add nsw i64 %directSendResult75, -1
  %25 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %directSendResult, i64 %24) #15
  %26 = extractvalue { i64, i1 } %25, 1
  %27 = extractvalue { i64, i1 } %25, 0
  br i1 %26, label %28, label %BB4

28:                                               ; preds = %23
  %29 = ashr i64 %27, 1
  %30 = xor i64 %29, -9223372036854775808
  %31 = tail call i64 @rb_int2big(i64 %30) #15, !noalias !24
  br label %BB4

32:                                               ; preds = %"fastSymCallIntrinsic_+"
  %33 = and i64 %directSendResult75, 7
  %34 = icmp ne i64 %33, 0
  %35 = and i64 %directSendResult75, -9
  %36 = icmp eq i64 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %46, label %38

38:                                               ; preds = %32
  %39 = inttoptr i64 %directSendResult75 to %struct.RBasic*
  %40 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %39, i64 0, i32 0
  %41 = load i64, i64* %40, align 8, !tbaa !0, !noalias !24
  %42 = and i64 %41, 31
  %43 = icmp eq i64 %42, 10
  br i1 %43, label %44, label %46

44:                                               ; preds = %38
  %45 = tail call i64 @rb_big_plus(i64 %directSendResult75, i64 %directSendResult) #15, !noalias !24
  br label %BB4

46:                                               ; preds = %38, %32
  %47 = and i64 %directSendResult, 3
  %48 = icmp eq i64 %47, 2
  br i1 %48, label %61, label %49

49:                                               ; preds = %46
  %50 = and i64 %directSendResult, 7
  %51 = icmp ne i64 %50, 0
  %52 = and i64 %directSendResult, -9
  %53 = icmp eq i64 %52, 0
  %54 = or i1 %51, %53
  br i1 %54, label %101, label %55

55:                                               ; preds = %49
  %56 = inttoptr i64 %directSendResult to %struct.RBasic*
  %57 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %56, i64 0, i32 0
  %58 = load i64, i64* %57, align 8, !tbaa !0, !noalias !24
  %59 = and i64 %58, 31
  %60 = icmp eq i64 %59, 4
  br i1 %60, label %61, label %101

61:                                               ; preds = %55, %46
  %62 = ashr i64 %directSendResult, 1
  %63 = sitofp i64 %62 to double
  %64 = and i64 %directSendResult75, 3
  %65 = icmp eq i64 %64, 2
  br i1 %65, label %66, label %77

66:                                               ; preds = %61
  %67 = icmp eq i64 %directSendResult75, -9223372036854775806
  br i1 %67, label %rb_float_value_inline.exit.i, label %68

68:                                               ; preds = %66
  %69 = lshr i64 %directSendResult75, 63
  %70 = sub nuw nsw i64 2, %69
  %71 = and i64 %directSendResult75, 4
  %72 = or i64 %70, %71
  %73 = lshr i64 %directSendResult75, 3
  %74 = shl nuw i64 %72, 61
  %75 = or i64 %74, %73
  %76 = bitcast i64 %75 to double
  br label %rb_float_value_inline.exit.i

77:                                               ; preds = %61
  %78 = inttoptr i64 %directSendResult75 to %struct.RFloat*
  %79 = getelementptr inbounds %struct.RFloat, %struct.RFloat* %78, i64 0, i32 1
  %80 = load double, double* %79, align 8, !tbaa !11, !noalias !24
  br label %rb_float_value_inline.exit.i

rb_float_value_inline.exit.i:                     ; preds = %77, %68, %66
  %81 = phi double [ %80, %77 ], [ %76, %68 ], [ 0.000000e+00, %66 ]
  %82 = fadd double %81, %63
  %83 = bitcast double %82 to i64
  %84 = icmp eq i64 %83, 3458764513820540928
  br i1 %84, label %99, label %85

85:                                               ; preds = %rb_float_value_inline.exit.i
  %86 = lshr i64 %83, 60
  %87 = trunc i64 %86 to i32
  %88 = and i32 %87, 7
  %89 = add nsw i32 %88, -3
  %90 = icmp ugt i32 %89, 1
  br i1 %90, label %97, label %91

91:                                               ; preds = %85
  %92 = shl i64 %83, 3
  %93 = lshr i64 %83, 61
  %94 = and i64 %93, 4
  %95 = or i64 %92, %94
  %96 = or i64 %95, 2
  br label %BB4

97:                                               ; preds = %85
  %98 = icmp eq i64 %83, 0
  br i1 %98, label %BB4, label %99

99:                                               ; preds = %97, %rb_float_value_inline.exit.i
  %100 = tail call i64 @rb_float_new_in_heap(double %82) #15, !noalias !24
  br label %BB4

101:                                              ; preds = %55, %49
  br i1 %37, label %110, label %102

102:                                              ; preds = %101
  %103 = inttoptr i64 %directSendResult75 to %struct.RBasic*
  %104 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %103, i64 0, i32 0
  %105 = load i64, i64* %104, align 8, !tbaa !0, !noalias !24
  %106 = and i64 %105, 31
  %107 = icmp eq i64 %106, 14
  br i1 %107, label %108, label %110

108:                                              ; preds = %102
  %109 = tail call i64 @rb_complex_plus(i64 %directSendResult75, i64 %directSendResult) #15, !noalias !24
  br label %BB4

110:                                              ; preds = %102, %101
  %111 = tail call i64 @rb_num_coerce_bin(i64 %directSendResult, i64 %directSendResult75, i64 43) #15, !noalias !24
  br label %BB4
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_<"() #10 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_<", i64 0, i64 0), i64 1) #15
  store i64 %0, i64* @"rubyIdPrecomputed_<", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_-() #10 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_-, i64 0, i64 0), i64 1) #15
  store i64 %0, i64* @rubyIdPrecomputed_-, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_+"() #10 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_+", i64 0, i64 0), i64 1) #15
  store i64 %0, i64* @"rubyIdPrecomputed_+", align 8
  ret void
}

; Function Attrs: ssp
define internal i64 @"func_HasFib.<static-init>$block_1"(i64 %firstYieldArgRaw, i64 %captures, i32 %argc, i64* nocapture readonly %argArray, i64 %blockArg) #13 {
functionEntryInitializers:
  %callArgs = alloca [2 x i64], align 8
  %rubyId_n = load i64, i64* @rubyIdPrecomputed_n, align 8
  %rubyId_params = load i64, i64* @rubyIdPrecomputed_params, align 8
  %rubyId_returns = load i64, i64* @rubyIdPrecomputed_returns, align 8
  %arrayExpansionSizeGuard = icmp eq i32 %argc, 1
  br i1 %arrayExpansionSizeGuard, label %argArrayExpandArrayTest, label %fillRequiredArgs

argArrayExpandArrayTest:                          ; preds = %functionEntryInitializers
  %arg1_maybeExpandToFullArgs = load i64, i64* %argArray, align 8
  %0 = and i64 %arg1_maybeExpandToFullArgs, 7
  %1 = icmp ne i64 %0, 0
  %2 = and i64 %arg1_maybeExpandToFullArgs, -9
  %3 = icmp eq i64 %2, 0
  %4 = or i1 %1, %3
  br i1 %4, label %fillRequiredArgs, label %sorbet_isa_Array.exit

sorbet_isa_Array.exit:                            ; preds = %argArrayExpandArrayTest
  %5 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.RBasic*
  %6 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %5, i64 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !0
  %8 = and i64 %7, 33554463
  %9 = icmp eq i64 %8, 33554439
  br i1 %9, label %10, label %fillRequiredArgs

10:                                               ; preds = %sorbet_isa_Array.exit
  tail call void @rb_ary_detransient(i64 %arg1_maybeExpandToFullArgs) #15
  br label %fillRequiredArgs

fillRequiredArgs:                                 ; preds = %sorbet_isa_Array.exit, %argArrayExpandArrayTest, %10, %functionEntryInitializers
  %rawSym = tail call i64 @rb_id2sym(i64 %rubyId_n)
  %callArgsAddr = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs, i64 0, i64 0
  store i64 %rawSym, i64* %callArgsAddr, align 8
  %11 = load i64, i64* @rb_cInteger, align 8
  %callArgsAddr12 = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs, i64 0, i64 1
  store i64 %11, i64* %callArgsAddr12, align 8
  %12 = tail call i64 @rb_hash_new() #15, !noalias !27
  call void @rb_hash_bulk_insert(i64 2, i64* nonnull %callArgsAddr, i64 %12) #15
  store i64 %12, i64* %callArgsAddr, align 8
  %13 = inttoptr i64 %captures to %struct.RTypedData*
  %14 = getelementptr inbounds %struct.RTypedData, %struct.RTypedData* %13, i64 0, i32 3
  %15 = bitcast i8** %14 to %struct.sorbet_Closure**
  %16 = load %struct.sorbet_Closure*, %struct.sorbet_Closure** %15, align 8, !tbaa !17
  %17 = getelementptr inbounds %struct.sorbet_Closure, %struct.sorbet_Closure* %16, i64 0, i32 1, i64 0
  %18 = load i64, i64* %17, align 8
  %19 = call i64 @rb_funcallv(i64 %18, i64 %rubyId_params, i32 1, i64* nonnull %callArgsAddr) #15
  store i64 %11, i64* %callArgsAddr, align 8
  %20 = call i64 @rb_funcallv(i64 %19, i64 %rubyId_returns, i32 1, i64* nonnull %callArgsAddr) #15
  ret i64 %20
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_final() #10 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_final, i64 0, i64 0), i64 5) #15
  store i64 %0, i64* @rubyIdPrecomputed_final, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_sig() #10 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_sig, i64 0, i64 0), i64 3) #15
  store i64 %0, i64* @rubyIdPrecomputed_sig, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_n() #10 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_n, i64 0, i64 0), i64 1) #15
  store i64 %0, i64* @rubyIdPrecomputed_n, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_params() #10 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_params, i64 0, i64 0), i64 6) #15
  store i64 %0, i64* @rubyIdPrecomputed_params, align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @Constr_rubyIdPrecomputed_returns() #10 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_returns, i64 0, i64 0), i64 7) #15
  store i64 %0, i64* @rubyIdPrecomputed_returns, align 8
  ret void
}

; Function Attrs: ssp
define linkonce void @const_recompute_T() local_unnamed_addr #13 {
  %1 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_T, i64 0, i64 0), i64 1)
  store i64 %1, i64* @guarded_const_T, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !14
  store i64 %2, i64* @guard_epoch_T, align 8
  ret void
}

; Function Attrs: ssp
define linkonce void @const_recompute_HasFib() local_unnamed_addr #13 {
  %1 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_HasFib, i64 0, i64 0), i64 6)
  store i64 %1, i64* @guarded_const_HasFib, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !14
  store i64 %2, i64* @guard_epoch_HasFib, align 8
  ret void
}

; Function Attrs: ssp
define linkonce void @"const_recompute_T::Sig::WithoutRuntime"() local_unnamed_addr #13 {
  %1 = tail call fastcc i64 @sorbet_getConstant(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"str_T::Sig::WithoutRuntime", i64 0, i64 0), i64 22)
  store i64 %1, i64* @"guarded_const_T::Sig::WithoutRuntime", align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !14
  store i64 %2, i64* @"guard_epoch_T::Sig::WithoutRuntime", align 8
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #14

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #14

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { "addedToSilenceEmptyAttrsError" }
attributes #2 = { noinline nounwind ssp uwtable }
attributes #3 = { argmemonly nofree nounwind readonly }
attributes #4 = { noreturn }
attributes #5 = { nounwind readnone }
attributes #6 = { cold noreturn nounwind optsize ssp uwtable }
attributes #7 = { noreturn nounwind ssp uwtable }
attributes #8 = { norecurse nounwind readnone ssp uwtable }
attributes #9 = { nounwind readnone speculatable willreturn }
attributes #10 = { nounwind ssp }
attributes #11 = { nounwind sspreq }
attributes #12 = { nounwind sspreq uwtable }
attributes #13 = { ssp }
attributes #14 = { argmemonly nounwind willreturn }
attributes #15 = { nounwind }
attributes #16 = { noreturn nounwind }

!0 = !{!1, !2, i64 0}
!1 = !{!"RBasic", !2, i64 0, !2, i64 8}
!2 = !{!"long", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!3, !3, i64 0}
!6 = !{!2, !2, i64 0}
!7 = !{!1, !2, i64 8}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !3, i64 0}
!10 = !{!"branch_weights", i32 1, i32 2000}
!11 = !{!12, !13, i64 16}
!12 = !{!"RFloat", !1, i64 0, !13, i64 16}
!13 = !{!"double", !3, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"long long", !3, i64 0}
!16 = !{!"branch_weights", i32 10000, i32 1}
!17 = !{!18, !19, i64 32}
!18 = !{!"RTypedData", !1, i64 0, !19, i64 16, !2, i64 24, !19, i64 32}
!19 = !{!"any pointer", !3, i64 0}
!20 = !{!"branch_weights", i32 1073205, i32 2146410443}
!21 = !{!"misexpect", i64 0, i64 2000, i64 1}
!22 = !{!"branch_weights", i32 4000000, i32 4001}
!23 = !{!"misexpect", i64 1, i64 2000, i64 1}
!24 = !{!25}
!25 = distinct !{!25, !26, !"sorbet_rb_int_plus: argument 0"}
!26 = distinct !{!26, !"sorbet_rb_int_plus"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"sorbet_buildHashIntrinsic: argument 0"}
!29 = distinct !{!29, !"sorbet_buildHashIntrinsic"}
