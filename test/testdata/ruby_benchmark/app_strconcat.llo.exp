; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.7 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.17 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_data*, %struct.anon.16, i32, i32, i32, i32, i32, i8, i64 }
%struct.anon = type { %struct.anon.0, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.0 = type { i16, [2 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.iseq_insn_info_entry*, i32*, i32, %struct.succ_index_table* }
%struct.iseq_insn_info_entry = type opaque
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, i64 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.rb_scope_visi_struct }
%struct.rb_scope_visi_struct = type { i8, [3 x i8] }
%struct.rb_call_data = type { %struct.rb_call_cache, %struct.rb_call_info }
%struct.rb_call_cache = type { i64, [3 x i64], %struct.rb_callable_method_entry_struct*, i64, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_data*)*, %union.anon.15 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon.13, i64, i64 }
%union.anon.13 = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64, i32, i64*, i64 (...)*)*, i32 }
%struct.rb_calling_info = type { i64, i64, i32, i32 }
%union.anon.15 = type { i32 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.anon.16 = type { i64, i64, i64, i64* }
%union.anon.17 = type { %struct.anon.18 }
%struct.anon.18 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [5 x i8*], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_fiber_struct = type opaque
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, i64, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %union.pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.10, i32, i64, %struct.rb_fiber_struct*, [5 x i8*], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %union.pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.5, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %union.pthread_mutex_t, i64, i64, i64, i64, i64, i32, %struct.st_table*, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.rb_builtin_function*, i32, %struct.anon.6, [29 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %union.pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%struct.anon.5 = type { [65 x i64] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.rb_builtin_function = type opaque
%struct.anon.6 = type { i64, i64, i64, i64 }
%struct.native_thread_data_struct = type { %struct.list_head, %union.anon.9 }
%union.anon.9 = type { %union.pthread_cond_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.10 = type { %struct.anon.11 }
%struct.anon.11 = type { i64, i64, i32 }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (i64, i64)*, i64 (i64)* }
%struct.st_table_entry = type opaque
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (i64)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.7 = type { i64*, i64*, i64, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.SorbetLineNumberInfo = type { i32, %struct.iseq_insn_info_entry*, i64* }
%struct.FunctionInlineCache = type { %struct.rb_kwarg_call_data }
%struct.rb_kwarg_call_data = type { %struct.rb_call_cache, %struct.rb_call_info_with_kwarg }
%struct.rb_call_info_with_kwarg = type { %struct.rb_call_info, %struct.rb_call_info_kw_arg* }
%struct.rb_call_info_kw_arg = type { i32, [1 x i64] }
%struct.iseq_inline_iv_cache_entry = type { i64, i64 }

@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.8 = private unnamed_addr constant [95 x i8] c"sorbet_getBuildSCMRevision: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@.str.9 = private unnamed_addr constant [93 x i8] c"sorbet_getIsReleaseBuild: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@"stackFramePrecomputed_func_<root>.<static-init>$152" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"rubyStrFrozen_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"rubyStrFrozen_test/testdata/ruby_benchmark/app_strconcat.rb" = internal unnamed_addr global i64 0, align 8
@"str_test/testdata/ruby_benchmark/app_strconcat.rb" = private unnamed_addr constant [46 x i8] c"test/testdata/ruby_benchmark/app_strconcat.rb\00", align 1
@iseqEncodedArray = internal global [9 x i64] zeroinitializer
@fileLineNumberInfo = internal global %struct.SorbetLineNumberInfo zeroinitializer
@"rubyIdPrecomputed_<" = internal unnamed_addr global i64 0, align 8
@"str_<" = private unnamed_addr constant [2 x i8] c"<\00", align 1
@"ic_<" = internal global %struct.FunctionInlineCache zeroinitializer
@"rubyIdPrecomputed_+" = internal unnamed_addr global i64 0, align 8
@"str_+" = private unnamed_addr constant [2 x i8] c"+\00", align 1
@"ic_+" = internal global %struct.FunctionInlineCache zeroinitializer
@"rubyStrFrozen_ " = internal unnamed_addr global i64 0, align 8
@"str_ " = private unnamed_addr constant [2 x i8] c" \00", align 1
@"ic_+.1" = internal global %struct.FunctionInlineCache zeroinitializer
@"ic_+.2" = internal global %struct.FunctionInlineCache zeroinitializer
@"rubyIdPrecomputed_<string-interpolate>" = internal unnamed_addr global i64 0, align 8
@"str_<string-interpolate>" = private unnamed_addr constant [21 x i8] c"<string-interpolate>\00", align 1
@"ic_+.3" = internal global %struct.FunctionInlineCache zeroinitializer

declare %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64, i64, i64, i64, %struct.rb_iseq_struct*, i32, i32, %struct.SorbetLineNumberInfo*, i64*, i32, i32) local_unnamed_addr #0

declare void @sorbet_initLineNumberInfo(%struct.SorbetLineNumberInfo*, i64*, i32) local_unnamed_addr #0

declare i64 @sorbet_readRealpath() local_unnamed_addr #0

declare void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache*, i64, i32, i32, i32, i64*) local_unnamed_addr #0

declare i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache*, i64) local_unnamed_addr #0

declare void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_iseq_struct*) local_unnamed_addr #0

declare i64 @sorbet_stringInterpolate(i64, i64, i32, i64*, i64 (i64, i64, i32, i64*, i64)*, i64) local_unnamed_addr #0

declare i64 @sorbet_rb_int_plus_slowpath(i64, i64) local_unnamed_addr #0

declare i64 @sorbet_rb_int_lt_slowpath(i64, i64) local_unnamed_addr #0

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #0

declare i64 @rb_fstring_new(i8*, i64) local_unnamed_addr #0

declare void @rb_gc_register_mark_object(i64) local_unnamed_addr #0

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #1

declare i64 @rb_int2big(i64) local_unnamed_addr #0

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #2

declare i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct*, i32) local_unnamed_addr #0

; Function Attrs: alwaysinline nounwind ssp uwtable
define noalias nonnull i8* @sorbet_allocateParamInfo() local_unnamed_addr #3 {
  %1 = tail call noalias nonnull i8* @ruby_xcalloc(i64 noundef 1, i64 noundef 64) #9
  ret i8* %1
}

; Function Attrs: allocsize(0,1)
declare noalias nonnull i8* @ruby_xcalloc(i64, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define weak i32 @sorbet_getIsReleaseBuild() local_unnamed_addr #5 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* noundef getelementptr inbounds ([93 x i8], [93 x i8]* @.str.9, i64 0, i64 0)) #10
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @sorbet_getBuildSCMRevision() local_unnamed_addr #5 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* noundef getelementptr inbounds ([95 x i8], [95 x i8]* @.str.8, i64 0, i64 0)) #10
  unreachable
}

; Function Attrs: sspreq
define void @Init_app_strconcat() local_unnamed_addr #6 {
entry:
  %callArgs.i = alloca [6 x i64], align 8
  %locals.i.i = alloca i64, i32 0, align 8
  %realpath = tail call i64 @sorbet_readRealpath()
  %0 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 noundef 16) #11
  store i64 %0, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %1 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @"str_<", i64 0, i64 0), i64 noundef 1) #11
  store i64 %1, i64* @"rubyIdPrecomputed_<", align 8
  %2 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @"str_+", i64 0, i64 0), i64 noundef 1) #11
  store i64 %2, i64* @"rubyIdPrecomputed_+", align 8
  %3 = tail call i64 @rb_intern2(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @"str_<string-interpolate>", i64 0, i64 0), i64 noundef 20) #11
  store i64 %3, i64* @"rubyIdPrecomputed_<string-interpolate>", align 8
  %4 = tail call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 noundef 16) #11
  tail call void @rb_gc_register_mark_object(i64 %4) #11
  store i64 %4, i64* @"rubyStrFrozen_<top (required)>", align 8
  %5 = tail call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([46 x i8], [46 x i8]* @"str_test/testdata/ruby_benchmark/app_strconcat.rb", i64 0, i64 0), i64 noundef 45) #11
  tail call void @rb_gc_register_mark_object(i64 %5) #11
  store i64 %5, i64* @"rubyStrFrozen_test/testdata/ruby_benchmark/app_strconcat.rb", align 8
  tail call void @sorbet_initLineNumberInfo(%struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef getelementptr inbounds ([9 x i64], [9 x i64]* @iseqEncodedArray, i32 0, i32 0), i32 noundef 9)
  %"rubyId_<top (required)>.i.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/ruby_benchmark/app_strconcat.rb.i.i" = load i64, i64* @"rubyStrFrozen_test/testdata/ruby_benchmark/app_strconcat.rb", align 8
  %6 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i.i", i64 %"rubyId_<top (required)>.i.i", i64 %"rubyStr_test/testdata/ruby_benchmark/app_strconcat.rb.i.i", i64 %realpath, %struct.rb_iseq_struct* noundef null, i32 noundef 0, i32 noundef 4, %struct.SorbetLineNumberInfo* noundef @fileLineNumberInfo, i64* noundef nonnull %locals.i.i, i32 noundef 0, i32 noundef 6)
  store %struct.rb_iseq_struct* %6, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %"rubyId_<.i" = load i64, i64* @"rubyIdPrecomputed_<", align 8, !dbg !8
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @"ic_<", i64 %"rubyId_<.i", i32 noundef 16, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !8
  %"rubyId_+.i" = load i64, i64* @"rubyIdPrecomputed_+", align 8, !dbg !13
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @"ic_+", i64 %"rubyId_+.i", i32 noundef 16, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !13
  %7 = call i64 @rb_fstring_new(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @"str_ ", i64 0, i64 0), i64 noundef 1) #11
  call void @rb_gc_register_mark_object(i64 %7) #11
  store i64 %7, i64* @"rubyStrFrozen_ ", align 8
  %"rubyId_+2.i" = load i64, i64* @"rubyIdPrecomputed_+", align 8, !dbg !14
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @"ic_+.1", i64 %"rubyId_+2.i", i32 noundef 16, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !14
  %"rubyId_+4.i" = load i64, i64* @"rubyIdPrecomputed_+", align 8, !dbg !15
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @"ic_+.2", i64 %"rubyId_+4.i", i32 noundef 16, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !15
  %"rubyId_+6.i" = load i64, i64* @"rubyIdPrecomputed_+", align 8, !dbg !16
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* noundef @"ic_+.3", i64 %"rubyId_+6.i", i32 noundef 16, i32 noundef 1, i32 noundef 0, i64* noundef null), !dbg !16
  %8 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !17
  %9 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %8, i64 0, i32 2
  %10 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %9, align 8, !tbaa !19
  %11 = bitcast [6 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %11)
  %stackFrame.i = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %12 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %9, align 8, !tbaa !19
  %13 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %12, i64 0, i32 2
  store %struct.rb_iseq_struct* %stackFrame.i, %struct.rb_iseq_struct** %13, align 8, !tbaa !23
  %14 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %12, i64 0, i32 4
  %15 = load i64*, i64** %14, align 8, !tbaa !25
  %16 = load i64, i64* %15, align 8, !tbaa !4
  %17 = and i64 %16, -33
  store i64 %17, i64* %15, align 8, !tbaa !4
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %8, %struct.rb_control_frame_struct* %12, %struct.rb_iseq_struct* %stackFrame.i) #11
  %18 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %10, i64 0, i32 0
  %19 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %10, i64 0, i32 1
  %callArgs0Addr.i = getelementptr [6 x i64], [6 x i64]* %callArgs.i, i32 0, i64 0
  %20 = getelementptr [6 x i64], [6 x i64]* %callArgs.i, i64 0, i64 0
  %callArgs1Addr.i = getelementptr [6 x i64], [6 x i64]* %callArgs.i, i32 0, i64 1
  %callArgs2Addr.i = getelementptr [6 x i64], [6 x i64]* %callArgs.i, i32 0, i64 2
  %callArgs3Addr.i = getelementptr [6 x i64], [6 x i64]* %callArgs.i, i32 0, i64 3
  %callArgs4Addr.i = getelementptr [6 x i64], [6 x i64]* %callArgs.i, i32 0, i64 4
  br label %BB2.i, !dbg !26

BB2.i:                                            ; preds = %BB2.i.backedge, %entry
  %i.sroa.0.0.i = phi i64 [ 1, %entry ], [ %i.sroa.0.0.i.be, %BB2.i.backedge ], !dbg !27
  store i64* getelementptr inbounds ([9 x i64], [9 x i64]* @iseqEncodedArray, i64 0, i64 5), i64** %18, align 8, !tbaa !17
  %21 = and i64 %i.sroa.0.0.i, 1, !dbg !8
  %22 = icmp eq i64 %21, 0, !dbg !8
  br i1 %22, label %23, label %"fastSymCallIntrinsic_Integer_<.i", !dbg !8, !prof !28

23:                                               ; preds = %BB2.i
  %24 = and i64 %i.sroa.0.0.i, 7, !dbg !8
  %25 = icmp ne i64 %24, 0, !dbg !8
  %26 = and i64 %i.sroa.0.0.i, -9, !dbg !8
  %27 = icmp eq i64 %26, 0, !dbg !8
  %28 = or i1 %25, %27, !dbg !8
  br i1 %28, label %"alternativeCallIntrinsic_Integer_<.i", label %sorbet_isa_Integer.exit, !dbg !8, !prof !29

sorbet_isa_Integer.exit:                          ; preds = %23
  %29 = inttoptr i64 %i.sroa.0.0.i to %struct.iseq_inline_iv_cache_entry*, !dbg !8
  %30 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %29, i64 0, i32 0, !dbg !8
  %31 = load i64, i64* %30, align 8, !dbg !8, !tbaa !30
  %32 = and i64 %31, 31, !dbg !8
  %33 = icmp eq i64 %32, 10, !dbg !8
  br i1 %33, label %"fastSymCallIntrinsic_Integer_<.i", label %"alternativeCallIntrinsic_Integer_<.i", !dbg !8, !prof !32

BB5.i:                                            ; preds = %afterSend.i
  store i64* getelementptr inbounds ([9 x i64], [9 x i64]* @iseqEncodedArray, i64 0, i64 6), i64** %18, align 8, !tbaa !17
  store i64 3, i64* %callArgs0Addr.i, align 8, !dbg !13
  call void @llvm.experimental.noalias.scope.decl(metadata !33) #11, !dbg !13
  %34 = load i64, i64* %20, align 8, !dbg !13, !tbaa !4, !alias.scope !33
  %35 = and i64 %34, 1, !dbg !13
  %36 = icmp eq i64 %35, 0, !dbg !13
  br i1 %36, label %77, label %68, !dbg !13, !prof !36

afterSend.i:                                      ; preds = %64, %sorbet_rb_int_lt.exit.i, %"alternativeCallIntrinsic_Integer_<.i"
  %37 = phi i1 [ %40, %"alternativeCallIntrinsic_Integer_<.i" ], [ %44, %sorbet_rb_int_lt.exit.i ], [ %44, %64 ]
  %"symIntrinsicRawPhi_<.i" = phi i64 [ %send.i, %"alternativeCallIntrinsic_Integer_<.i" ], [ %rawSendResult126.i, %sorbet_rb_int_lt.exit.i ], [ %rawSendResult126.i, %64 ], !dbg !8
  %38 = and i64 %"symIntrinsicRawPhi_<.i", -9, !dbg !8
  %39 = icmp ne i64 %38, 0, !dbg !8
  br i1 %39, label %BB5.i, label %"func_<root>.<static-init>$152.exit", !dbg !8

"alternativeCallIntrinsic_Integer_<.i":           ; preds = %23, %sorbet_isa_Integer.exit
  %40 = phi i1 [ %33, %sorbet_isa_Integer.exit ], [ false, %23 ]
  %41 = load i64*, i64** %19, align 8, !dbg !8, !tbaa !37
  %42 = getelementptr inbounds i64, i64* %41, i64 1, !dbg !8
  store i64 %i.sroa.0.0.i, i64* %41, align 8, !dbg !8, !tbaa !4
  %43 = getelementptr inbounds i64, i64* %42, i64 1, !dbg !8
  store i64* %43, i64** %19, align 8, !dbg !8, !tbaa !37
  store i64 4000001, i64* %42, align 8, !dbg !8, !tbaa !4
  %send.i = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @"ic_<", i64 0) #11, !dbg !8
  br label %afterSend.i, !dbg !8

"fastSymCallIntrinsic_Integer_<.i":               ; preds = %BB2.i, %sorbet_isa_Integer.exit
  %44 = phi i1 [ %33, %sorbet_isa_Integer.exit ], [ true, %BB2.i ]
  store i64 4000001, i64* %callArgs0Addr.i, align 8, !dbg !8
  call void @llvm.experimental.noalias.scope.decl(metadata !38) #11, !dbg !8
  %45 = load i64, i64* %20, align 8, !dbg !8, !tbaa !4, !alias.scope !38
  %46 = and i64 %i.sroa.0.0.i, 1, !dbg !8
  %47 = and i64 %46, %45, !dbg !8
  %48 = icmp eq i64 %47, 0, !dbg !8
  br i1 %48, label %54, label %49, !dbg !8, !prof !36

49:                                               ; preds = %"fastSymCallIntrinsic_Integer_<.i"
  %50 = ashr i64 %i.sroa.0.0.i, 1, !dbg !8
  %51 = ashr i64 %45, 1, !dbg !8
  %52 = icmp slt i64 %50, %51, !dbg !8
  %53 = select i1 %52, i64 20, i64 0, !dbg !8
  br label %sorbet_rb_int_lt.exit.i, !dbg !8

54:                                               ; preds = %"fastSymCallIntrinsic_Integer_<.i"
  %55 = call i64 @sorbet_rb_int_lt_slowpath(i64 %i.sroa.0.0.i, i64 %45) #11, !dbg !8, !noalias !38
  br label %sorbet_rb_int_lt.exit.i, !dbg !8

sorbet_rb_int_lt.exit.i:                          ; preds = %54, %49
  %rawSendResult126.i = phi i64 [ %53, %49 ], [ %55, %54 ]
  %56 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !8, !tbaa !17
  %57 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %56, i64 0, i32 5, !dbg !8
  %58 = load i32, i32* %57, align 8, !dbg !8, !tbaa !41
  %59 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %56, i64 0, i32 6, !dbg !8
  %60 = load i32, i32* %59, align 4, !dbg !8, !tbaa !42
  %61 = xor i32 %60, -1, !dbg !8
  %62 = and i32 %61, %58, !dbg !8
  %63 = icmp eq i32 %62, 0, !dbg !8
  br i1 %63, label %afterSend.i, label %64, !dbg !8, !prof !32

64:                                               ; preds = %sorbet_rb_int_lt.exit.i
  %65 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %56, i64 0, i32 8, !dbg !8
  %66 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %65, align 8, !dbg !8, !tbaa !43
  %67 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %66, i32 noundef 0) #11, !dbg !8
  br label %afterSend.i, !dbg !8

68:                                               ; preds = %BB5.i
  %69 = add nsw i64 %34, -1, !dbg !13
  %70 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 3, i64 %69) #12, !dbg !13
  %71 = extractvalue { i64, i1 } %70, 1, !dbg !13
  %72 = extractvalue { i64, i1 } %70, 0, !dbg !13
  br i1 %71, label %73, label %sorbet_rb_int_plus.exit128.i, !dbg !13

73:                                               ; preds = %68
  %74 = ashr i64 %72, 1, !dbg !13
  %75 = xor i64 %74, -9223372036854775808, !dbg !13
  %76 = call i64 @rb_int2big(i64 %75) #11, !dbg !13, !noalias !33
  br label %sorbet_rb_int_plus.exit128.i, !dbg !13

77:                                               ; preds = %BB5.i
  %78 = call i64 @sorbet_rb_int_plus_slowpath(i64 noundef 3, i64 %34) #11, !dbg !13, !noalias !33
  br label %sorbet_rb_int_plus.exit128.i, !dbg !13

sorbet_rb_int_plus.exit128.i:                     ; preds = %77, %73, %68
  %79 = phi i64 [ %78, %77 ], [ %76, %73 ], [ %72, %68 ], !dbg !13
  %80 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !13, !tbaa !17
  %81 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %80, i64 0, i32 5, !dbg !13
  %82 = load i32, i32* %81, align 8, !dbg !13, !tbaa !41
  %83 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %80, i64 0, i32 6, !dbg !13
  %84 = load i32, i32* %83, align 4, !dbg !13, !tbaa !42
  %85 = xor i32 %84, -1, !dbg !13
  %86 = and i32 %85, %82, !dbg !13
  %87 = icmp eq i32 %86, 0, !dbg !13
  br i1 %87, label %"fastSymCallIntrinsic_Integer_+57.i", label %88, !dbg !13, !prof !32

88:                                               ; preds = %sorbet_rb_int_plus.exit128.i
  %89 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %80, i64 0, i32 8, !dbg !13
  %90 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %89, align 8, !dbg !13, !tbaa !43
  %91 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %90, i32 noundef 0) #11, !dbg !13
  br label %"fastSymCallIntrinsic_Integer_+57.i", !dbg !13

"fastSymCallIntrinsic_Integer_+57.i":             ; preds = %88, %sorbet_rb_int_plus.exit128.i
  %"rubyStr_ 9.i" = load i64, i64* @"rubyStrFrozen_ ", align 8, !dbg !44
  store i64 3, i64* %callArgs0Addr.i, align 8, !dbg !14
  call void @llvm.experimental.noalias.scope.decl(metadata !45) #11, !dbg !14
  %92 = load i64, i64* %20, align 8, !dbg !14, !tbaa !4, !alias.scope !45
  %93 = and i64 %92, 1, !dbg !14
  %94 = icmp eq i64 %93, 0, !dbg !14
  br i1 %94, label %104, label %95, !dbg !14, !prof !36

95:                                               ; preds = %"fastSymCallIntrinsic_Integer_+57.i"
  %96 = add nsw i64 %92, -1, !dbg !14
  %97 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 3, i64 %96) #12, !dbg !14
  %98 = extractvalue { i64, i1 } %97, 1, !dbg !14
  %99 = extractvalue { i64, i1 } %97, 0, !dbg !14
  br i1 %98, label %100, label %sorbet_rb_int_plus.exit127.i, !dbg !14

100:                                              ; preds = %95
  %101 = ashr i64 %99, 1, !dbg !14
  %102 = xor i64 %101, -9223372036854775808, !dbg !14
  %103 = call i64 @rb_int2big(i64 %102) #11, !dbg !14, !noalias !45
  br label %sorbet_rb_int_plus.exit127.i, !dbg !14

104:                                              ; preds = %"fastSymCallIntrinsic_Integer_+57.i"
  %105 = call i64 @sorbet_rb_int_plus_slowpath(i64 noundef 3, i64 %92) #11, !dbg !14, !noalias !45
  br label %sorbet_rb_int_plus.exit127.i, !dbg !14

sorbet_rb_int_plus.exit127.i:                     ; preds = %104, %100, %95
  %106 = phi i64 [ %105, %104 ], [ %103, %100 ], [ %99, %95 ], !dbg !14
  %107 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !14, !tbaa !17
  %108 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %107, i64 0, i32 5, !dbg !14
  %109 = load i32, i32* %108, align 8, !dbg !14, !tbaa !41
  %110 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %107, i64 0, i32 6, !dbg !14
  %111 = load i32, i32* %110, align 4, !dbg !14, !tbaa !42
  %112 = xor i32 %111, -1, !dbg !14
  %113 = and i32 %112, %109, !dbg !14
  %114 = icmp eq i32 %113, 0, !dbg !14
  br i1 %114, label %"fastSymCallIntrinsic_Integer_+73.i", label %115, !dbg !14, !prof !32

115:                                              ; preds = %sorbet_rb_int_plus.exit127.i
  %116 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %107, i64 0, i32 8, !dbg !14
  %117 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %116, align 8, !dbg !14, !tbaa !43
  %118 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %117, i32 noundef 0) #11, !dbg !14
  br label %"fastSymCallIntrinsic_Integer_+73.i", !dbg !14

afterSend70.i:                                    ; preds = %142, %sorbet_rb_int_plus.exit125.i
  store i64 %79, i64* %callArgs0Addr.i, align 8, !dbg !48
  store i64 %"rubyStr_ 9.i", i64* %callArgs1Addr.i, align 8, !dbg !48
  store i64 %106, i64* %callArgs2Addr.i, align 8, !dbg !48
  store i64 %"rubyStr_ 6717.i", i64* %callArgs3Addr.i, align 8, !dbg !48
  store i64 %133, i64* %callArgs4Addr.i, align 8, !dbg !48
  %"rubyId_<string-interpolate>.i" = load i64, i64* @"rubyIdPrecomputed_<string-interpolate>", align 8, !dbg !48
  %rawSendResult91.i = call i64 @sorbet_stringInterpolate(i64 noundef 8, i64 %"rubyId_<string-interpolate>.i", i32 noundef 5, i64* noundef nonnull align 8 %20, i64 (i64, i64, i32, i64*, i64)* noundef null, i64 noundef 0) #11, !dbg !48
  store i64* getelementptr inbounds ([9 x i64], [9 x i64]* @iseqEncodedArray, i64 0, i64 7), i64** %18, align 8, !dbg !48, !tbaa !17
  br i1 %37, label %"fastSymCallIntrinsic_Integer_+97.i", label %"alternativeCallIntrinsic_Integer_+96.i", !dbg !16

"fastSymCallIntrinsic_Integer_+73.i":             ; preds = %115, %sorbet_rb_int_plus.exit127.i
  %"rubyStr_ 6717.i" = load i64, i64* @"rubyStrFrozen_ ", align 8, !dbg !49
  store i64 3, i64* %callArgs0Addr.i, align 8, !dbg !15
  call void @llvm.experimental.noalias.scope.decl(metadata !50) #11, !dbg !15
  %119 = load i64, i64* %20, align 8, !dbg !15, !tbaa !4, !alias.scope !50
  %120 = and i64 %119, 1, !dbg !15
  %121 = icmp eq i64 %120, 0, !dbg !15
  br i1 %121, label %131, label %122, !dbg !15, !prof !36

122:                                              ; preds = %"fastSymCallIntrinsic_Integer_+73.i"
  %123 = add nsw i64 %119, -1, !dbg !15
  %124 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 3, i64 %123) #12, !dbg !15
  %125 = extractvalue { i64, i1 } %124, 1, !dbg !15
  %126 = extractvalue { i64, i1 } %124, 0, !dbg !15
  br i1 %125, label %127, label %sorbet_rb_int_plus.exit125.i, !dbg !15

127:                                              ; preds = %122
  %128 = ashr i64 %126, 1, !dbg !15
  %129 = xor i64 %128, -9223372036854775808, !dbg !15
  %130 = call i64 @rb_int2big(i64 %129) #11, !dbg !15, !noalias !50
  br label %sorbet_rb_int_plus.exit125.i, !dbg !15

131:                                              ; preds = %"fastSymCallIntrinsic_Integer_+73.i"
  %132 = call i64 @sorbet_rb_int_plus_slowpath(i64 noundef 3, i64 %119) #11, !dbg !15, !noalias !50
  br label %sorbet_rb_int_plus.exit125.i, !dbg !15

sorbet_rb_int_plus.exit125.i:                     ; preds = %131, %127, %122
  %133 = phi i64 [ %132, %131 ], [ %130, %127 ], [ %126, %122 ], !dbg !15
  %134 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !15, !tbaa !17
  %135 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %134, i64 0, i32 5, !dbg !15
  %136 = load i32, i32* %135, align 8, !dbg !15, !tbaa !41
  %137 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %134, i64 0, i32 6, !dbg !15
  %138 = load i32, i32* %137, align 4, !dbg !15, !tbaa !42
  %139 = xor i32 %138, -1, !dbg !15
  %140 = and i32 %139, %136, !dbg !15
  %141 = icmp eq i32 %140, 0, !dbg !15
  br i1 %141, label %afterSend70.i, label %142, !dbg !15, !prof !32

142:                                              ; preds = %sorbet_rb_int_plus.exit125.i
  %143 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %134, i64 0, i32 8, !dbg !15
  %144 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %143, align 8, !dbg !15, !tbaa !43
  %145 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %144, i32 noundef 0) #11, !dbg !15
  br label %afterSend70.i, !dbg !15

"alternativeCallIntrinsic_Integer_+96.i":         ; preds = %afterSend70.i
  %146 = load i64*, i64** %19, align 8, !dbg !16, !tbaa !37
  %147 = getelementptr inbounds i64, i64* %146, i64 1, !dbg !16
  store i64 %i.sroa.0.0.i, i64* %146, align 8, !dbg !16, !tbaa !4
  %148 = getelementptr inbounds i64, i64* %147, i64 1, !dbg !16
  store i64* %148, i64** %19, align 8, !dbg !16, !tbaa !37
  store i64 3, i64* %147, align 8, !dbg !16, !tbaa !4
  %send106.i = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* noundef @"ic_+.3", i64 0) #11, !dbg !16
  br label %BB2.i.backedge, !dbg !16

"fastSymCallIntrinsic_Integer_+97.i":             ; preds = %afterSend70.i
  store i64 3, i64* %callArgs0Addr.i, align 8, !dbg !16
  call void @llvm.experimental.noalias.scope.decl(metadata !53) #11, !dbg !16
  %149 = load i64, i64* %20, align 8, !dbg !16, !tbaa !4, !alias.scope !53
  %150 = and i64 %i.sroa.0.0.i, 1, !dbg !16
  %151 = and i64 %150, %149, !dbg !16
  %152 = icmp eq i64 %151, 0, !dbg !16
  br i1 %152, label %162, label %153, !dbg !16, !prof !36

153:                                              ; preds = %"fastSymCallIntrinsic_Integer_+97.i"
  %154 = add nsw i64 %149, -1, !dbg !16
  %155 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %i.sroa.0.0.i, i64 %154) #12, !dbg !16
  %156 = extractvalue { i64, i1 } %155, 1, !dbg !16
  %157 = extractvalue { i64, i1 } %155, 0, !dbg !16
  br i1 %156, label %158, label %sorbet_rb_int_plus.exit.i, !dbg !16

158:                                              ; preds = %153
  %159 = ashr i64 %157, 1, !dbg !16
  %160 = xor i64 %159, -9223372036854775808, !dbg !16
  %161 = call i64 @rb_int2big(i64 %160) #11, !dbg !16, !noalias !53
  br label %sorbet_rb_int_plus.exit.i, !dbg !16

162:                                              ; preds = %"fastSymCallIntrinsic_Integer_+97.i"
  %163 = call i64 @sorbet_rb_int_plus_slowpath(i64 %i.sroa.0.0.i, i64 %149) #11, !dbg !16, !noalias !53
  br label %sorbet_rb_int_plus.exit.i, !dbg !16

sorbet_rb_int_plus.exit.i:                        ; preds = %162, %158, %153
  %164 = phi i64 [ %163, %162 ], [ %161, %158 ], [ %157, %153 ], !dbg !16
  %165 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !16, !tbaa !17
  %166 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %165, i64 0, i32 5, !dbg !16
  %167 = load i32, i32* %166, align 8, !dbg !16, !tbaa !41
  %168 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %165, i64 0, i32 6, !dbg !16
  %169 = load i32, i32* %168, align 4, !dbg !16, !tbaa !42
  %170 = xor i32 %169, -1, !dbg !16
  %171 = and i32 %170, %167, !dbg !16
  %172 = icmp eq i32 %171, 0, !dbg !16
  br i1 %172, label %BB2.i.backedge, label %173, !dbg !16, !prof !32

173:                                              ; preds = %sorbet_rb_int_plus.exit.i
  %174 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %165, i64 0, i32 8, !dbg !16
  %175 = load %struct.rb_thread_struct*, %struct.rb_thread_struct** %174, align 8, !dbg !16, !tbaa !43
  %176 = call i32 @rb_threadptr_execute_interrupts(%struct.rb_thread_struct* %175, i32 noundef 0) #11, !dbg !16
  br label %BB2.i.backedge, !dbg !16

BB2.i.backedge:                                   ; preds = %173, %sorbet_rb_int_plus.exit.i, %"alternativeCallIntrinsic_Integer_+96.i"
  %i.sroa.0.0.i.be = phi i64 [ %send106.i, %"alternativeCallIntrinsic_Integer_+96.i" ], [ %164, %sorbet_rb_int_plus.exit.i ], [ %164, %173 ]
  br label %BB2.i

"func_<root>.<static-init>$152.exit":             ; preds = %afterSend.i
  store i64* getelementptr inbounds ([9 x i64], [9 x i64]* @iseqEncodedArray, i64 0, i64 8), i64** %18, align 8, !tbaa !17
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %11)
  ret void
}

; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn
declare void @llvm.experimental.noalias.scope.decl(metadata) #7

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #8

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #8

attributes #0 = { "addedToSilenceEmptyAttrsError" }
attributes #1 = { noreturn }
attributes #2 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { alwaysinline nounwind ssp uwtable }
attributes #4 = { allocsize(0,1) }
attributes #5 = { nounwind ssp uwtable }
attributes #6 = { sspreq }
attributes #7 = { inaccessiblememonly nofree nosync nounwind willreturn }
attributes #8 = { argmemonly nofree nosync nounwind willreturn }
attributes #9 = { nounwind allocsize(0,1) }
attributes #10 = { noreturn nounwind }
attributes #11 = { nounwind }
attributes #12 = { nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "Sorbet LLVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "test/testdata/ruby_benchmark/app_strconcat.rb", directory: ".")
!3 = !{}
!4 = !{!5, !5, i64 0}
!5 = !{!"long", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !DILocation(line: 5, column: 7, scope: !9)
!9 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.<static-init>$152", scope: null, file: !2, line: 4, type: !10, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!10 = !DISubroutineType(types: !11)
!11 = !{!12}
!12 = !DIBasicType(name: "VALUE", size: 64, encoding: DW_ATE_signed)
!13 = !DILocation(line: 6, column: 6, scope: !9)
!14 = !DILocation(line: 6, column: 13, scope: !9)
!15 = !DILocation(line: 6, column: 20, scope: !9)
!16 = !DILocation(line: 7, column: 3, scope: !9)
!17 = !{!18, !18, i64 0}
!18 = !{!"any pointer", !6, i64 0}
!19 = !{!20, !18, i64 16}
!20 = !{!"rb_execution_context_struct", !18, i64 0, !5, i64 8, !18, i64 16, !18, i64 24, !18, i64 32, !21, i64 40, !21, i64 44, !18, i64 48, !18, i64 56, !18, i64 64, !5, i64 72, !5, i64 80, !18, i64 88, !5, i64 96, !18, i64 104, !18, i64 112, !5, i64 120, !5, i64 128, !6, i64 136, !6, i64 137, !5, i64 144, !22, i64 152}
!21 = !{!"int", !6, i64 0}
!22 = !{!"", !18, i64 0, !18, i64 8, !5, i64 16, !6, i64 24}
!23 = !{!24, !18, i64 16}
!24 = !{!"rb_control_frame_struct", !18, i64 0, !18, i64 8, !18, i64 16, !5, i64 24, !18, i64 32, !18, i64 40, !18, i64 48}
!25 = !{!24, !18, i64 32}
!26 = !DILocation(line: 4, column: 5, scope: !9)
!27 = !DILocation(line: 0, scope: !9)
!28 = !{!"branch_weights", i32 1, i32 2000}
!29 = !{!"branch_weights", i32 1073205, i32 2146410443}
!30 = !{!31, !5, i64 0}
!31 = !{!"RBasic", !5, i64 0, !5, i64 8}
!32 = !{!"branch_weights", i32 2000, i32 1}
!33 = !{!34}
!34 = distinct !{!34, !35, !"sorbet_rb_int_plus: argument 0"}
!35 = distinct !{!35, !"sorbet_rb_int_plus"}
!36 = !{!"branch_weights", i32 4001, i32 4000000}
!37 = !{!24, !18, i64 8}
!38 = !{!39}
!39 = distinct !{!39, !40, !"sorbet_rb_int_lt: argument 0"}
!40 = distinct !{!40, !"sorbet_rb_int_lt"}
!41 = !{!20, !21, i64 40}
!42 = !{!20, !21, i64 44}
!43 = !{!20, !18, i64 56}
!44 = !DILocation(line: 6, column: 10, scope: !9)
!45 = !{!46}
!46 = distinct !{!46, !47, !"sorbet_rb_int_plus: argument 0"}
!47 = distinct !{!47, !"sorbet_rb_int_plus"}
!48 = !DILocation(line: 6, column: 3, scope: !9)
!49 = !DILocation(line: 6, column: 17, scope: !9)
!50 = !{!51}
!51 = distinct !{!51, !52, !"sorbet_rb_int_plus: argument 0"}
!52 = distinct !{!52, !"sorbet_rb_int_plus"}
!53 = !{!54}
!54 = distinct !{!54, !55, !"sorbet_rb_int_plus: argument 0"}
!55 = distinct !{!55, !"sorbet_rb_int_plus"}
