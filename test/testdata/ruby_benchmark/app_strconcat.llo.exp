; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.5 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.12 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_data*, %struct.anon.11, i32, i32, i32, i32, i32, i8, i64 }
%struct.anon = type { %struct.anon.0, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.0 = type { i16, [2 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.iseq_insn_info_entry*, i32*, i32, %struct.succ_index_table* }
%struct.iseq_insn_info_entry = type opaque
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, i64 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.rb_scope_visi_struct }
%struct.rb_scope_visi_struct = type { i8, [3 x i8] }
%struct.rb_call_data = type { %struct.rb_call_cache, %struct.rb_call_info }
%struct.rb_call_cache = type { i64, [3 x i64], %struct.rb_callable_method_entry_struct*, i64, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_data*)*, %union.anon.15 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon, i64, i64 }
%union.anon = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64, i32, i64*, i64 (...)*)*, i32 }
%struct.rb_calling_info = type { i64, i64, i32, i32 }
%union.anon.15 = type { i32 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.anon.11 = type { i64, i64, i64, i64* }
%union.anon.12 = type { %struct.anon.13 }
%struct.anon.13 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [5 x i8*], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_fiber_struct = type opaque
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, i64, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %union.pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.8, i32, i64, %struct.rb_fiber_struct*, [5 x i8*], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %union.pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.3, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %union.pthread_mutex_t, i64, i64, i64, i64, i64, i32, %struct.st_table*, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.rb_builtin_function*, i32, %struct.anon.4, [29 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %union.pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32 }
%union.pthread_cond_t = type { %struct.anon.2 }
%struct.anon.2 = type { i32, i32, i64, i64, i64, i8*, i32, i32 }
%struct.anon.3 = type { [65 x i64] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.rb_builtin_function = type opaque
%struct.anon.4 = type { i64, i64, i64, i64 }
%struct.native_thread_data_struct = type { %struct.list_head, %union.anon.7 }
%union.anon.7 = type { %union.pthread_cond_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i64, i64, i32 }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (i64, i64)*, i64 (i64)* }
%struct.st_table_entry = type opaque
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (i64)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.5 = type { i64*, i64*, i64, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.FunctionInlineCache = type { %struct.rb_kwarg_call_data }
%struct.rb_kwarg_call_data = type { %struct.rb_call_cache, %struct.rb_call_info_with_kwarg }
%struct.rb_call_info_with_kwarg = type { %struct.rb_call_info, %struct.rb_call_info_kw_arg* }
%struct.rb_call_info_kw_arg = type { i32, [1 x i64] }
%struct.iseq_inline_iv_cache_entry = type { i64, i64 }

@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.7 = private unnamed_addr constant [95 x i8] c"sorbet_getBuildSCMRevision: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@.str.8 = private unnamed_addr constant [93 x i8] c"sorbet_getIsReleaseBuild: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@"stackFramePrecomputed_func_<root>.<static-init>$152" = internal unnamed_addr global i8* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"rubyStrFrozen_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_test/testdata/ruby_benchmark/app_strconcat.rb" = private unnamed_addr constant [46 x i8] c"test/testdata/ruby_benchmark/app_strconcat.rb\00", align 1
@"rubyIdPrecomputed_<" = internal unnamed_addr global i64 0, align 8
@"str_<" = private unnamed_addr constant [2 x i8] c"<\00", align 1
@"ic_<" = internal global %struct.FunctionInlineCache zeroinitializer
@"rubyIdPrecomputed_+" = internal unnamed_addr global i64 0, align 8
@"str_+" = private unnamed_addr constant [2 x i8] c"+\00", align 1
@"ic_+" = internal global %struct.FunctionInlineCache zeroinitializer
@"rubyStrFrozen_ " = internal unnamed_addr global i64 0, align 8
@"str_ " = private unnamed_addr constant [2 x i8] c" \00", align 1
@"ic_+.1" = internal global %struct.FunctionInlineCache zeroinitializer
@"ic_+.2" = internal global %struct.FunctionInlineCache zeroinitializer
@"rubyIdPrecomputed_<string-interpolate>" = internal unnamed_addr global i64 0, align 8
@"str_<string-interpolate>" = private unnamed_addr constant [21 x i8] c"<string-interpolate>\00", align 1
@"ic_+.3" = internal global %struct.FunctionInlineCache zeroinitializer

declare i8* @sorbet_allocateRubyStackFrame(i64, i64, i64, i64, i8*, i32, i32, i32, i64*, i32, i32) local_unnamed_addr #0

declare i64 @sorbet_readRealpath() local_unnamed_addr #0

declare void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache*, i64, i32, i32, i32, i64*) local_unnamed_addr #0

declare i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache*, i64) local_unnamed_addr #0

declare void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_iseq_struct*) local_unnamed_addr #0

declare i64 @sorbet_stringInterpolate(i64, i64, i32, i64*, i64 (i64, i64, i32, i64*, i64)*, i64) local_unnamed_addr #0

declare i64 @sorbet_rb_int_plus_slowpath(i64, i64) local_unnamed_addr #0

declare i64 @sorbet_rb_int_lt_slowpath(i64, i64) local_unnamed_addr #0

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #0

declare i64 @rb_fstring_new(i8*, i64) local_unnamed_addr #0

declare void @rb_gc_register_mark_object(i64) local_unnamed_addr #0

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #2

declare i64 @rb_int2big(i64) local_unnamed_addr #0

; Function Attrs: nounwind ssp uwtable
define weak i32 @sorbet_getIsReleaseBuild() local_unnamed_addr #3 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.8, i64 0, i64 0)) #6
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @sorbet_getBuildSCMRevision() local_unnamed_addr #3 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.7, i64 0, i64 0)) #6
  unreachable
}

; Function Attrs: sspreq
define void @Init_app_strconcat() local_unnamed_addr #4 {
entry:
  %locals1.i.i = alloca [0 x i64], align 8
  %callArgs.i = alloca [6 x i64], align 8
  %realpath = tail call i64 @sorbet_readRealpath()
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #7
  store i64 %0, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %1 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_<", i64 0, i64 0), i64 1) #7
  store i64 %1, i64* @"rubyIdPrecomputed_<", align 8
  %2 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_+", i64 0, i64 0), i64 1) #7
  store i64 %2, i64* @"rubyIdPrecomputed_+", align 8
  %3 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"str_<string-interpolate>", i64 0, i64 0), i64 20) #7
  store i64 %3, i64* @"rubyIdPrecomputed_<string-interpolate>", align 8
  %4 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #7
  tail call void @rb_gc_register_mark_object(i64 %4) #7
  store i64 %4, i64* @"rubyStrFrozen_<top (required)>", align 8
  %5 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @"str_test/testdata/ruby_benchmark/app_strconcat.rb", i64 0, i64 0), i64 45) #7
  tail call void @rb_gc_register_mark_object(i64 %5) #7
  %6 = bitcast [0 x i64]* %locals1.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 0, i8* nonnull %6)
  %"rubyId_<top (required)>.i.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %locals1.sub.i.i = getelementptr inbounds [0 x i64], [0 x i64]* %locals1.i.i, i64 0, i64 0
  %7 = call i8* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i.i", i64 %"rubyId_<top (required)>.i.i", i64 %5, i64 %realpath, i8* null, i32 1, i32 1, i32 8, i64* nonnull %locals1.sub.i.i, i32 0, i32 6)
  store i8* %7, i8** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  call void @llvm.lifetime.end.p0i8(i64 0, i8* nonnull %6)
  %"rubyId_<.i" = load i64, i64* @"rubyIdPrecomputed_<", align 8, !dbg !8
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @"ic_<", i64 %"rubyId_<.i", i32 16, i32 1, i32 0, i64* null), !dbg !8
  %"rubyId_+.i" = load i64, i64* @"rubyIdPrecomputed_+", align 8, !dbg !13
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @"ic_+", i64 %"rubyId_+.i", i32 16, i32 1, i32 0, i64* null), !dbg !13
  %8 = call i64 @rb_fstring_new(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_ ", i64 0, i64 0), i64 1) #7
  call void @rb_gc_register_mark_object(i64 %8) #7
  store i64 %8, i64* @"rubyStrFrozen_ ", align 8
  %"rubyId_+2.i" = load i64, i64* @"rubyIdPrecomputed_+", align 8, !dbg !14
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @"ic_+.1", i64 %"rubyId_+2.i", i32 16, i32 1, i32 0, i64* null), !dbg !14
  %"rubyId_+4.i" = load i64, i64* @"rubyIdPrecomputed_+", align 8, !dbg !15
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @"ic_+.2", i64 %"rubyId_+4.i", i32 16, i32 1, i32 0, i64* null), !dbg !15
  %"rubyId_+6.i" = load i64, i64* @"rubyIdPrecomputed_+", align 8, !dbg !16
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @"ic_+.3", i64 %"rubyId_+6.i", i32 16, i32 1, i32 0, i64* null), !dbg !16
  %9 = bitcast [6 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %9)
  %"stackFrame_func_<root>.<static-init>$152.i" = load i8*, i8** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %10 = bitcast i8* %"stackFrame_func_<root>.<static-init>$152.i" to %struct.rb_iseq_struct*
  %11 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !17
  %12 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %11, i64 0, i32 2
  %13 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %12, align 8, !tbaa !19
  %14 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %13, i64 0, i32 2
  %15 = bitcast %struct.rb_iseq_struct** %14 to i8**
  store i8* %"stackFrame_func_<root>.<static-init>$152.i", i8** %15, align 8, !tbaa !23
  %16 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %13, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8, !tbaa !25
  %18 = load i64, i64* %17, align 8, !tbaa !4
  %19 = and i64 %18, -129
  store i64 %19, i64* %17, align 8, !tbaa !4
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %11, %struct.rb_control_frame_struct* nonnull %13, %struct.rb_iseq_struct* %10) #7
  %20 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %13, i64 0, i32 0
  %21 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %14, align 8, !tbaa !23
  %22 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %21, i64 0, i32 2
  %23 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %22, align 8, !tbaa !26
  %24 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %23, i64 0, i32 2
  %25 = load i64*, i64** %24, align 8, !tbaa !28
  %26 = getelementptr inbounds i64, i64* %25, i64 4
  store i64* %26, i64** %20, align 8, !dbg !37, !tbaa !17
  %27 = getelementptr inbounds i64, i64* %25, i64 5
  %callArgs0Addr.i = getelementptr inbounds [6 x i64], [6 x i64]* %callArgs.i, i64 0, i64 0, !dbg !37
  %28 = getelementptr inbounds i64, i64* %25, i64 6
  %callArgs1Addr.i = getelementptr inbounds [6 x i64], [6 x i64]* %callArgs.i, i64 0, i64 1, !dbg !37
  %callArgs2Addr.i = getelementptr inbounds [6 x i64], [6 x i64]* %callArgs.i, i64 0, i64 2, !dbg !37
  %callArgs3Addr.i = getelementptr inbounds [6 x i64], [6 x i64]* %callArgs.i, i64 0, i64 3, !dbg !37
  %callArgs4Addr.i = getelementptr inbounds [6 x i64], [6 x i64]* %callArgs.i, i64 0, i64 4, !dbg !37
  %29 = getelementptr inbounds i64, i64* %25, i64 7, !dbg !37
  br label %BB2.i, !dbg !38

BB2.i:                                            ; preds = %BB2.i.backedge, %entry
  %i.sroa.0.0.i = phi i64 [ 1, %entry ], [ %i.sroa.0.0.i.be, %BB2.i.backedge ], !dbg !37
  store i64* %27, i64** %20, align 8, !tbaa !17
  %30 = and i64 %i.sroa.0.0.i, 1, !dbg !8
  %31 = icmp eq i64 %30, 0, !dbg !8
  br i1 %31, label %32, label %53, !dbg !8, !prof !39

32:                                               ; preds = %BB2.i
  %33 = and i64 %i.sroa.0.0.i, 7, !dbg !8
  %34 = icmp ne i64 %33, 0, !dbg !8
  %35 = and i64 %i.sroa.0.0.i, -9, !dbg !8
  %36 = icmp eq i64 %35, 0, !dbg !8
  %37 = or i1 %34, %36, !dbg !8
  br i1 %37, label %"alternativeCallIntrinsic_Integer_<.i", label %sorbet_isa_Integer.exit.i, !dbg !8, !prof !40

sorbet_isa_Integer.exit.i:                        ; preds = %32
  %38 = inttoptr i64 %i.sroa.0.0.i to %struct.iseq_inline_iv_cache_entry*, !dbg !8
  %39 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %38, i64 0, i32 0, !dbg !8
  %40 = load i64, i64* %39, align 8, !dbg !8, !tbaa !41
  %41 = and i64 %40, 31, !dbg !8
  %42 = icmp eq i64 %41, 10, !dbg !8
  br i1 %42, label %56, label %"alternativeCallIntrinsic_Integer_<.i", !dbg !8, !prof !43

afterSend.i:                                      ; preds = %56, %53, %"alternativeCallIntrinsic_Integer_<.i"
  %43 = phi i1 [ false, %"alternativeCallIntrinsic_Integer_<.i" ], [ true, %56 ], [ true, %53 ]
  %"symIntrinsicRawPhi_<.i" = phi i64 [ %send.i, %"alternativeCallIntrinsic_Integer_<.i" ], [ %57, %56 ], [ %55, %53 ], !dbg !8
  %44 = and i64 %"symIntrinsicRawPhi_<.i", -9, !dbg !8
  %45 = icmp eq i64 %44, 0, !dbg !8
  br i1 %45, label %"func_<root>.<static-init>$152.exit", label %afterSend73.i, !dbg !8

"alternativeCallIntrinsic_Integer_<.i":           ; preds = %sorbet_isa_Integer.exit.i, %32
  %46 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !8, !tbaa !17
  %47 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %46, i64 0, i32 2, !dbg !8
  %48 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %47, align 8, !dbg !8, !tbaa !19
  %49 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %48, i64 0, i32 1, !dbg !8
  %50 = load i64*, i64** %49, align 8, !dbg !8, !tbaa !44
  %51 = getelementptr inbounds i64, i64* %50, i64 1, !dbg !8
  store i64 %i.sroa.0.0.i, i64* %50, align 8, !dbg !8, !tbaa !4
  %52 = getelementptr inbounds i64, i64* %50, i64 2, !dbg !8
  store i64* %52, i64** %49, align 8, !dbg !8, !tbaa !44
  store i64 4000001, i64* %51, align 8, !dbg !8, !tbaa !4
  %send.i = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* nonnull @"ic_<", i64 0) #7, !dbg !8
  br label %afterSend.i, !dbg !8

53:                                               ; preds = %BB2.i
  store i64 4000001, i64* %callArgs0Addr.i, align 8, !dbg !8
  %54 = icmp slt i64 %i.sroa.0.0.i, 4000000, !dbg !8
  %55 = select i1 %54, i64 20, i64 0, !dbg !8
  br label %afterSend.i, !dbg !8

56:                                               ; preds = %sorbet_isa_Integer.exit.i
  store i64 4000001, i64* %callArgs0Addr.i, align 8, !dbg !8
  %57 = call i64 @sorbet_rb_int_lt_slowpath(i64 %i.sroa.0.0.i, i64 4000001) #7, !dbg !8, !noalias !45
  br label %afterSend.i, !dbg !8

afterSend73.i:                                    ; preds = %afterSend.i
  store i64* %28, i64** %20, align 8, !tbaa !17
  %"rubyStr_ .i" = load i64, i64* @"rubyStrFrozen_ ", align 8, !dbg !48
  store i64 5, i64* %callArgs0Addr.i, align 8, !dbg !49
  store i64 %"rubyStr_ .i", i64* %callArgs1Addr.i, align 8, !dbg !49
  store i64 5, i64* %callArgs2Addr.i, align 8, !dbg !49
  store i64 %"rubyStr_ .i", i64* %callArgs3Addr.i, align 8, !dbg !49
  store i64 5, i64* %callArgs4Addr.i, align 8, !dbg !49
  %"rubyId_<string-interpolate>.i" = load i64, i64* @"rubyIdPrecomputed_<string-interpolate>", align 8, !dbg !49
  %rawSendResult95.i = call i64 @sorbet_stringInterpolate(i64 8, i64 %"rubyId_<string-interpolate>.i", i32 5, i64* nonnull %callArgs0Addr.i, i64 (i64, i64, i32, i64*, i64)* null, i64 0) #7, !dbg !49
  store i64* %29, i64** %20, align 8, !dbg !49, !tbaa !17
  br i1 %43, label %"fastSymCallIntrinsic_Integer_+101.i", label %"alternativeCallIntrinsic_Integer_+100.i", !dbg !16

"alternativeCallIntrinsic_Integer_+100.i":        ; preds = %afterSend73.i
  %58 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !16, !tbaa !17
  %59 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %58, i64 0, i32 2, !dbg !16
  %60 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %59, align 8, !dbg !16, !tbaa !19
  %61 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %60, i64 0, i32 1, !dbg !16
  %62 = load i64*, i64** %61, align 8, !dbg !16, !tbaa !44
  %63 = getelementptr inbounds i64, i64* %62, i64 1, !dbg !16
  store i64 %i.sroa.0.0.i, i64* %62, align 8, !dbg !16, !tbaa !4
  %64 = getelementptr inbounds i64, i64* %62, i64 2, !dbg !16
  store i64* %64, i64** %61, align 8, !dbg !16, !tbaa !44
  store i64 3, i64* %63, align 8, !dbg !16, !tbaa !4
  %send111.i = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* nonnull @"ic_+.3", i64 0) #7, !dbg !16
  br label %BB2.i.backedge, !dbg !16

"fastSymCallIntrinsic_Integer_+101.i":            ; preds = %afterSend73.i
  store i64 3, i64* %callArgs0Addr.i, align 8, !dbg !16
  br i1 %31, label %73, label %65, !dbg !16, !prof !50

65:                                               ; preds = %"fastSymCallIntrinsic_Integer_+101.i"
  %66 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %i.sroa.0.0.i, i64 2) #7, !dbg !16
  %67 = extractvalue { i64, i1 } %66, 1, !dbg !16
  %68 = extractvalue { i64, i1 } %66, 0, !dbg !16
  br i1 %67, label %69, label %BB2.i.backedge, !dbg !16

69:                                               ; preds = %65
  %70 = ashr i64 %68, 1, !dbg !16
  %71 = xor i64 %70, -9223372036854775808, !dbg !16
  %72 = call i64 @rb_int2big(i64 %71) #7, !dbg !16
  br label %BB2.i.backedge, !dbg !16

73:                                               ; preds = %"fastSymCallIntrinsic_Integer_+101.i"
  %74 = call i64 @sorbet_rb_int_plus_slowpath(i64 %i.sroa.0.0.i, i64 3) #7, !dbg !16, !noalias !51
  br label %BB2.i.backedge, !dbg !16

BB2.i.backedge:                                   ; preds = %73, %69, %65, %"alternativeCallIntrinsic_Integer_+100.i"
  %i.sroa.0.0.i.be = phi i64 [ %send111.i, %"alternativeCallIntrinsic_Integer_+100.i" ], [ %74, %73 ], [ %72, %69 ], [ %68, %65 ]
  br label %BB2.i

"func_<root>.<static-init>$152.exit":             ; preds = %afterSend.i
  store i64* %26, i64** %20, align 8, !tbaa !17
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %9)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

attributes #0 = { "addedToSilenceEmptyAttrsError" }
attributes #1 = { noreturn }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind ssp uwtable }
attributes #4 = { sspreq }
attributes #5 = { argmemonly nounwind }
attributes #6 = { noreturn nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "Sorbet LLVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "test/testdata/ruby_benchmark/app_strconcat.rb", directory: ".")
!3 = !{}
!4 = !{!5, !5, i64 0}
!5 = !{!"long", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !DILocation(line: 5, column: 7, scope: !9)
!9 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.<static-init>$152", scope: null, file: !2, line: 4, type: !10, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!10 = !DISubroutineType(types: !11)
!11 = !{!12}
!12 = !DIBasicType(name: "VALUE", size: 64, encoding: DW_ATE_signed)
!13 = !DILocation(line: 6, column: 6, scope: !9)
!14 = !DILocation(line: 6, column: 13, scope: !9)
!15 = !DILocation(line: 6, column: 20, scope: !9)
!16 = !DILocation(line: 7, column: 3, scope: !9)
!17 = !{!18, !18, i64 0}
!18 = !{!"any pointer", !6, i64 0}
!19 = !{!20, !18, i64 16}
!20 = !{!"rb_execution_context_struct", !18, i64 0, !5, i64 8, !18, i64 16, !18, i64 24, !18, i64 32, !21, i64 40, !21, i64 44, !18, i64 48, !18, i64 56, !18, i64 64, !5, i64 72, !5, i64 80, !18, i64 88, !5, i64 96, !18, i64 104, !18, i64 112, !5, i64 120, !5, i64 128, !6, i64 136, !6, i64 137, !5, i64 144, !22, i64 152}
!21 = !{!"int", !6, i64 0}
!22 = !{!"", !18, i64 0, !18, i64 8, !5, i64 16, !6, i64 24}
!23 = !{!24, !18, i64 16}
!24 = !{!"rb_control_frame_struct", !18, i64 0, !18, i64 8, !18, i64 16, !5, i64 24, !18, i64 32, !18, i64 40, !18, i64 48}
!25 = !{!24, !18, i64 32}
!26 = !{!27, !18, i64 16}
!27 = !{!"rb_iseq_struct", !5, i64 0, !5, i64 8, !18, i64 16, !6, i64 24}
!28 = !{!29, !18, i64 8}
!29 = !{!"rb_iseq_constant_body", !6, i64 0, !21, i64 4, !18, i64 8, !30, i64 16, !32, i64 64, !35, i64 120, !18, i64 152, !18, i64 160, !18, i64 168, !18, i64 176, !18, i64 184, !18, i64 192, !36, i64 200, !21, i64 232, !21, i64 236, !21, i64 240, !21, i64 244, !21, i64 248, !6, i64 252, !5, i64 256}
!30 = !{!"", !31, i64 0, !21, i64 4, !21, i64 8, !21, i64 12, !21, i64 16, !21, i64 20, !21, i64 24, !21, i64 28, !18, i64 32, !18, i64 40}
!31 = !{!"", !21, i64 0, !21, i64 0, !21, i64 0, !21, i64 0, !21, i64 0, !21, i64 0, !21, i64 0, !21, i64 0, !21, i64 1, !21, i64 1}
!32 = !{!"rb_iseq_location_struct", !5, i64 0, !5, i64 8, !5, i64 16, !5, i64 24, !21, i64 32, !33, i64 36}
!33 = !{!"rb_code_location_struct", !34, i64 0, !34, i64 8}
!34 = !{!"rb_code_position_struct", !21, i64 0, !21, i64 4}
!35 = !{!"iseq_insn_info", !18, i64 0, !18, i64 8, !21, i64 16, !18, i64 24}
!36 = !{!"", !5, i64 0, !5, i64 8, !5, i64 16, !18, i64 24}
!37 = !DILocation(line: 0, scope: !9)
!38 = !DILocation(line: 4, column: 5, scope: !9)
!39 = !{!"branch_weights", i32 1, i32 2000}
!40 = !{!"branch_weights", i32 1073205, i32 2146410443}
!41 = !{!42, !5, i64 0}
!42 = !{!"RBasic", !5, i64 0, !5, i64 8}
!43 = !{!"branch_weights", i32 2000, i32 1}
!44 = !{!24, !18, i64 8}
!45 = !{!46}
!46 = distinct !{!46, !47, !"sorbet_rb_int_lt: argument 0"}
!47 = distinct !{!47, !"sorbet_rb_int_lt"}
!48 = !DILocation(line: 6, column: 10, scope: !9)
!49 = !DILocation(line: 6, column: 3, scope: !9)
!50 = !{!"branch_weights", i32 4001, i32 4000000}
!51 = !{!52}
!52 = distinct !{!52, !53, !"sorbet_rb_int_plus: argument 0"}
!53 = distinct !{!53, !"sorbet_rb_int_plus"}
