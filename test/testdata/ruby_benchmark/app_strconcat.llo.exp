; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_data_type_struct = type { i8*, %struct.anon.19, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.19 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.18 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.15 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon.1, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_info*, %struct.rb_call_cache*, %struct.anon.14, i32, i32, i32, i32, i32, i8 }
%struct.anon.1 = type { %struct.anon.2, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.2 = type { i8, [3 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.rb_code_position_struct*, i32*, i32, %struct.succ_index_table* }
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, %union.anon.0 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.anon.2 }
%union.anon.0 = type { i64 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.rb_call_cache = type { i64, i64, %struct.rb_callable_method_entry_struct*, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_info*, %struct.rb_call_cache*)*, %union.anon.13 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon.12, i64 }
%union.anon.12 = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64 (...)*, i64, i32, i64*)*, i32 }
%struct.rb_calling_info = type { i64, i64, i32 }
%union.anon.13 = type { i32 }
%struct.anon.14 = type { i64, i64, i64, i64* }
%union.anon.15 = type { %struct.anon.16 }
%struct.anon.16 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [38 x i32], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_fiber_struct = type opaque
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, %struct._opaque_pthread_t*, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %struct._opaque_pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.8, i32, i64, %struct.rb_fiber_struct*, [38 x i32], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %struct._opaque_pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.4, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %struct._opaque_pthread_mutex_t, i64, i64, i64, i64, i64, i32, i64, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.anon.5, [28 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %struct._opaque_pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %struct._opaque_pthread_cond_t, %struct._opaque_pthread_cond_t, i32, i32 }
%struct._opaque_pthread_cond_t = type { i64, [40 x i8] }
%struct.anon.4 = type { [32 x i64], [32 x i8] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.anon.5 = type { i64, i64, i64, i64 }
%struct._opaque_pthread_t = type { i64, %struct.__darwin_pthread_handler_rec*, [8176 x i8] }
%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }
%struct.native_thread_data_struct = type { %struct.list_head, %struct.anon.7 }
%struct.anon.7 = type { %struct._opaque_pthread_cond_t, %struct._opaque_pthread_cond_t }
%struct._opaque_pthread_mutex_t = type { i64, [56 x i8] }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.8 = type { %struct.RBasic }
%struct.RBasic = type { i64, i64 }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (...)*, i64 (...)* }
%struct.st_table_entry = type opaque
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (...)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.18 = type { i64*, i64*, i64, [37 x i32] }
%struct.RString = type { %struct.RBasic, %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { i64, i8*, %union.anon.0 }
%struct.rb_ast_body_struct = type { %struct.RNode*, i64, i32 }
%struct.RNode = type { i64, %union.anon.20, %union.anon.20, %union.anon.20, %struct.rb_code_location_struct, i32 }
%union.anon.20 = type { %struct.RNode* }

@closureInfo = local_unnamed_addr constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i32 0, i32 0), %struct.anon.19 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@.str.10 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@.str = private unnamed_addr constant [5 x i8] c"%li\0B\00", align 1
@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@"stackFramePrecomputed_func_<root>.<static-init>$111" = internal unnamed_addr global i8* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"str_test/testdata/ruby_benchmark/app_strconcat.rb" = private unnamed_addr constant [46 x i8] c"test/testdata/ruby_benchmark/app_strconcat.rb\00", align 1
@"rubyIdPrecomputed_<" = internal unnamed_addr global i64 0, align 8
@"str_<" = private unnamed_addr constant [2 x i8] c"<\00", align 1
@"rubyIdPrecomputed_+" = internal unnamed_addr global i64 0, align 8
@"str_+" = private unnamed_addr constant [2 x i8] c"+\00", align 1
@llvm.global_ctors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_<top (required)>", i8* bitcast (i64* @"rubyIdPrecomputed_<top (required)>" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_stackFramePrecomputed_func_<root>.<static-init>$111", i8* bitcast (i8** @"stackFramePrecomputed_func_<root>.<static-init>$111" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_<", i8* bitcast (i64* @"rubyIdPrecomputed_<" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_+", i8* bitcast (i64* @"rubyIdPrecomputed_+" to i8*) }]
@"str_ " = private unnamed_addr constant [2 x i8] c" \00", align 1

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8* %0) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !0
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly %0) #1 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !0
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_pi(i64 %0) local_unnamed_addr #0 {
  %2 = tail call i8* @rb_id2name(i64 %0) #8
  ret i8* %2
}

declare i8* @rb_id2name(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_p(i64 %0) local_unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 %0) #8
  %3 = inttoptr i64 %2 to %struct.RBasic*
  %4 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !4
  %6 = and i64 %5, 8192
  %7 = icmp eq i64 %6, 0
  %8 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 %0) #8
  %9 = inttoptr i64 %8 to %struct.RString*
  br i1 %7, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !7
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i8* [ %12, %10 ], [ %15, %13 ]
  ret i8* %17
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define void @stopInDebugger() local_unnamed_addr #0 {
  tail call void asm sideeffect "int $$3", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !8
  ret void
}

declare i64 @rb_str_new(i8*, i64) local_unnamed_addr #2

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #2

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #2

declare %struct.rb_iseq_struct* @rb_iseq_new(%struct.rb_ast_body_struct*, i64, i64, i64, %struct.rb_iseq_struct*, i32) local_unnamed_addr #2

declare void @rb_gc_register_mark_object(i64) local_unnamed_addr #2

declare i8* @ruby_xmalloc2(i64, i64) local_unnamed_addr #2

declare void @rb_iseq_insns_info_encode_positions(%struct.rb_iseq_struct*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define i64** @sorbet_setRubyStackFrame(i8* %0) local_unnamed_addr #3 {
  %2 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !9
  %3 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %2, i64 0, i32 2
  %4 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %3, align 8, !tbaa !11
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %4, i64 0, i32 2
  %6 = bitcast %struct.rb_iseq_struct** %5 to i8**
  store i8* %0, i8** %6, align 8, !tbaa !14
  %7 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %4, i64 0, i32 4
  %8 = load i64*, i64** %7, align 8, !tbaa !16
  %9 = load i64, i64* %8, align 8, !tbaa !17
  %10 = and i64 %9, -129
  store i64 %10, i64* %8, align 8, !tbaa !17
  %11 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %4, i64 0, i32 0
  ret i64** %11
}

declare i64 @rb_big_plus(i64, i64) local_unnamed_addr #2

declare i64 @rb_num_coerce_bin(i64, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #4

declare i64 @rb_int2big(i64) local_unnamed_addr #2

declare i64 @rb_str_concat_literals(i32, i64*) local_unnamed_addr #2

declare i64 @rb_obj_as_string_result(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp
define internal void @"Constr_stackFramePrecomputed_func_<root>.<static-init>$111"() #5 {
entryInitializers:
  %0 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #8
  %1 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @"str_test/testdata/ruby_benchmark/app_strconcat.rb", i64 0, i64 0), i64 45) #8
  %2 = tail call i64 @rb_str_new(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @"str_test/testdata/ruby_benchmark/app_strconcat.rb", i64 0, i64 0), i64 45) #8
  %3 = tail call %struct.rb_iseq_struct* @rb_iseq_new(%struct.rb_ast_body_struct* null, i64 %0, i64 %1, i64 %2, %struct.rb_iseq_struct* null, i32 1) #8
  %4 = ptrtoint %struct.rb_iseq_struct* %3 to i64
  tail call void @rb_gc_register_mark_object(i64 %4) #8
  %5 = tail call i8* @ruby_xmalloc2(i64 5, i64 8) #8
  %6 = tail call i8* @ruby_xmalloc2(i64 5, i64 4) #8
  %7 = bitcast i8* %6 to i32*
  store i32 0, i32* %7, align 4, !tbaa !0
  %8 = bitcast i8* %5 to i32*
  store i32 3, i32* %8, align 4, !tbaa !18
  %9 = getelementptr inbounds i8, i8* %6, i64 4
  %10 = bitcast i8* %9 to i32*
  store i32 1, i32* %10, align 4, !tbaa !0
  %11 = getelementptr inbounds i8, i8* %5, i64 8
  %12 = bitcast i8* %11 to i32*
  store i32 4, i32* %12, align 4, !tbaa !18
  %13 = getelementptr inbounds i8, i8* %6, i64 8
  %14 = bitcast i8* %13 to i32*
  store i32 2, i32* %14, align 4, !tbaa !0
  %15 = getelementptr inbounds i8, i8* %5, i64 16
  %16 = bitcast i8* %15 to i32*
  store i32 5, i32* %16, align 4, !tbaa !18
  %17 = getelementptr inbounds i8, i8* %6, i64 12
  %18 = bitcast i8* %17 to i32*
  store i32 3, i32* %18, align 4, !tbaa !0
  %19 = getelementptr inbounds i8, i8* %5, i64 24
  %20 = bitcast i8* %19 to i32*
  store i32 6, i32* %20, align 4, !tbaa !18
  %21 = getelementptr inbounds i8, i8* %6, i64 16
  %22 = bitcast i8* %21 to i32*
  store i32 4, i32* %22, align 4, !tbaa !0
  %23 = getelementptr inbounds i8, i8* %5, i64 32
  %24 = bitcast i8* %23 to i32*
  store i32 7, i32* %24, align 4, !tbaa !18
  %25 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %3, i64 0, i32 2
  %26 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %25, align 8, !tbaa !20
  %27 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %26, i64 0, i32 5, i32 0
  %28 = bitcast %struct.rb_code_position_struct** %27 to i8**
  store i8* %5, i8** %28, align 8, !tbaa !22
  %29 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %26, i64 0, i32 5, i32 1
  %30 = bitcast i32** %29 to i8**
  store i8* %6, i8** %30, align 8, !tbaa !31
  %31 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %26, i64 0, i32 1
  store i32 5, i32* %31, align 4, !tbaa !32
  %32 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %26, i64 0, i32 5, i32 2
  store i32 5, i32* %32, align 8, !tbaa !33
  tail call void @rb_iseq_insns_info_encode_positions(%struct.rb_iseq_struct* %3) #8
  %33 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %25, align 8, !tbaa !20
  %34 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %33, i64 0, i32 2
  store i64* null, i64** %34, align 8, !tbaa !34
  store %struct.rb_iseq_struct* %3, %struct.rb_iseq_struct** bitcast (i8** @"stackFramePrecomputed_func_<root>.<static-init>$111" to %struct.rb_iseq_struct**), align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_<top (required)>"() #5 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #8
  store i64 %0, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_<"() #5 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_<", i64 0, i64 0), i64 1) #8
  store i64 %0, i64* @"rubyIdPrecomputed_<", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_+"() #5 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_+", i64 0, i64 0), i64 1) #8
  store i64 %0, i64* @"rubyIdPrecomputed_+", align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_test_testdata_ruby_benchmark_app_strconcat() local_unnamed_addr #6 {
typeTestSuccess.i:
  %callArgs.i = alloca [5 x i64], align 8
  %0 = bitcast [5 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0)
  %"rubyId_<.i" = load i64, i64* @"rubyIdPrecomputed_<", align 8
  %"rubyId_+.i" = load i64, i64* @"rubyIdPrecomputed_+", align 8
  %"stackFrame_func_<root>.<static-init>$1112.i" = load i64, i64* bitcast (i8** @"stackFramePrecomputed_func_<root>.<static-init>$111" to i64*), align 8
  %1 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !9
  %2 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %1, i64 0, i32 2
  %3 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %2, align 8, !tbaa !11
  %4 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %3, i64 0, i32 2
  %5 = bitcast %struct.rb_iseq_struct** %4 to i64*
  store i64 %"stackFrame_func_<root>.<static-init>$1112.i", i64* %5, align 8, !tbaa !14
  %6 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %3, i64 0, i32 4
  %7 = load i64*, i64** %6, align 8, !tbaa !16
  %8 = load i64, i64* %7, align 8, !tbaa !17
  %9 = and i64 %8, -129
  store i64 %9, i64* %7, align 8, !tbaa !17
  %10 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %3, i64 0, i32 0
  store i64* inttoptr (i64 8 to i64*), i64** %10, align 8, !tbaa !9
  %callArgsAddr.i = getelementptr inbounds [5 x i64], [5 x i64]* %callArgs.i, i64 0, i64 0
  %callArgsAddr95.i = getelementptr inbounds [5 x i64], [5 x i64]* %callArgs.i, i64 0, i64 1
  %callArgsAddr97.i = getelementptr inbounds [5 x i64], [5 x i64]* %callArgs.i, i64 0, i64 2
  %callArgsAddr99.i = getelementptr inbounds [5 x i64], [5 x i64]* %callArgs.i, i64 0, i64 3
  %callArgsAddr101.i = getelementptr inbounds [5 x i64], [5 x i64]* %callArgs.i, i64 0, i64 4
  br label %BB2.i

BB2.i:                                            ; preds = %BB2.i.backedge, %typeTestSuccess.i
  %i.sroa.0.0.i = phi i64 [ 1, %typeTestSuccess.i ], [ %i.sroa.0.0.i.be, %BB2.i.backedge ]
  store i64* inttoptr (i64 16 to i64*), i64** %10, align 8, !tbaa !9
  %11 = and i64 %i.sroa.0.0.i, 1
  %12 = icmp ne i64 %11, 0
  store i64 4000001, i64* %callArgsAddr.i, align 8
  br i1 %12, label %sorbet_rb_int_lt.exit.i, label %"slowSymCallIntrinsic_<.i", !prof !35, !misexpect !36

"afterSymCallIntrinsic_<.i":                      ; preds = %sorbet_rb_int_lt.exit.i, %"slowSymCallIntrinsic_<.i"
  %"symIntrinsicRawPhi_<.i" = phi i64 [ %17, %sorbet_rb_int_lt.exit.i ], [ %15, %"slowSymCallIntrinsic_<.i" ]
  %13 = and i64 %"symIntrinsicRawPhi_<.i", -9
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %"func_<root>.<static-init>$111.exit", label %"afterSymCallIntrinsic_+79.i"

"slowSymCallIntrinsic_<.i":                       ; preds = %BB2.i
  %15 = call i64 @rb_funcallv(i64 %i.sroa.0.0.i, i64 %"rubyId_<.i", i32 1, i64* nonnull %callArgsAddr.i) #8
  br label %"afterSymCallIntrinsic_<.i"

sorbet_rb_int_lt.exit.i:                          ; preds = %BB2.i
  %16 = icmp slt i64 %i.sroa.0.0.i, 4000000
  %17 = select i1 %16, i64 20, i64 0
  br label %"afterSymCallIntrinsic_<.i"

"afterSymCallIntrinsic_+79.i":                    ; preds = %"afterSymCallIntrinsic_<.i"
  store i64* inttoptr (i64 24 to i64*), i64** %10, align 8, !tbaa !9
  store i64 3, i64* %callArgsAddr.i, align 8
  %18 = call i64 @rb_str_new(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_ ", i64 0, i64 0), i64 1) #8
  store i64 3, i64* %callArgsAddr.i, align 8
  %19 = call i64 @rb_str_new(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_ ", i64 0, i64 0), i64 1) #8
  store i64 5, i64* %callArgsAddr.i, align 8
  store i64 %18, i64* %callArgsAddr95.i, align 8
  store i64 5, i64* %callArgsAddr97.i, align 8
  store i64 %19, i64* %callArgsAddr99.i, align 8
  store i64 5, i64* %callArgsAddr101.i, align 8
  %20 = call i64 @rb_funcallv(i64 5, i64 3217, i32 0, i64* null) #8
  %21 = load i64, i64* %callArgsAddr.i, align 8, !tbaa !17
  %22 = call i64 @rb_obj_as_string_result(i64 %20, i64 %21) #8
  store i64 %22, i64* %callArgsAddr.i, align 8, !tbaa !17
  %23 = load i64, i64* %callArgsAddr95.i, align 8, !tbaa !17
  %24 = and i64 %23, 7
  %25 = icmp ne i64 %24, 0
  %26 = and i64 %23, -9
  %27 = icmp eq i64 %26, 0
  %28 = or i1 %25, %27
  br i1 %28, label %35, label %29

29:                                               ; preds = %"afterSymCallIntrinsic_+79.i"
  %30 = inttoptr i64 %23 to %struct.RBasic*
  %31 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %30, i64 0, i32 0
  %32 = load i64, i64* %31, align 8, !tbaa !4
  %33 = and i64 %32, 31
  %34 = icmp eq i64 %33, 5
  br i1 %34, label %39, label %35

35:                                               ; preds = %29, %"afterSymCallIntrinsic_+79.i"
  %36 = call i64 @rb_funcallv(i64 %23, i64 3217, i32 0, i64* null) #8
  %37 = load i64, i64* %callArgsAddr95.i, align 8, !tbaa !17
  %38 = call i64 @rb_obj_as_string_result(i64 %36, i64 %37) #8
  store i64 %38, i64* %callArgsAddr95.i, align 8, !tbaa !17
  br label %39

39:                                               ; preds = %35, %29
  %40 = load i64, i64* %callArgsAddr97.i, align 8, !tbaa !17
  %41 = and i64 %40, 7
  %42 = icmp ne i64 %41, 0
  %43 = and i64 %40, -9
  %44 = icmp eq i64 %43, 0
  %45 = or i1 %42, %44
  br i1 %45, label %52, label %46

46:                                               ; preds = %39
  %47 = inttoptr i64 %40 to %struct.RBasic*
  %48 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %47, i64 0, i32 0
  %49 = load i64, i64* %48, align 8, !tbaa !4
  %50 = and i64 %49, 31
  %51 = icmp eq i64 %50, 5
  br i1 %51, label %56, label %52

52:                                               ; preds = %46, %39
  %53 = call i64 @rb_funcallv(i64 %40, i64 3217, i32 0, i64* null) #8
  %54 = load i64, i64* %callArgsAddr97.i, align 8, !tbaa !17
  %55 = call i64 @rb_obj_as_string_result(i64 %53, i64 %54) #8
  store i64 %55, i64* %callArgsAddr97.i, align 8, !tbaa !17
  br label %56

56:                                               ; preds = %52, %46
  %57 = load i64, i64* %callArgsAddr99.i, align 8, !tbaa !17
  %58 = and i64 %57, 7
  %59 = icmp ne i64 %58, 0
  %60 = and i64 %57, -9
  %61 = icmp eq i64 %60, 0
  %62 = or i1 %59, %61
  br i1 %62, label %69, label %63

63:                                               ; preds = %56
  %64 = inttoptr i64 %57 to %struct.RBasic*
  %65 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %64, i64 0, i32 0
  %66 = load i64, i64* %65, align 8, !tbaa !4
  %67 = and i64 %66, 31
  %68 = icmp eq i64 %67, 5
  br i1 %68, label %73, label %69

69:                                               ; preds = %63, %56
  %70 = call i64 @rb_funcallv(i64 %57, i64 3217, i32 0, i64* null) #8
  %71 = load i64, i64* %callArgsAddr99.i, align 8, !tbaa !17
  %72 = call i64 @rb_obj_as_string_result(i64 %70, i64 %71) #8
  store i64 %72, i64* %callArgsAddr99.i, align 8, !tbaa !17
  br label %73

73:                                               ; preds = %69, %63
  %74 = load i64, i64* %callArgsAddr101.i, align 8, !tbaa !17
  %75 = and i64 %74, 7
  %76 = icmp ne i64 %75, 0
  %77 = and i64 %74, -9
  %78 = icmp eq i64 %77, 0
  %79 = or i1 %76, %78
  br i1 %79, label %86, label %80

80:                                               ; preds = %73
  %81 = inttoptr i64 %74 to %struct.RBasic*
  %82 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %81, i64 0, i32 0
  %83 = load i64, i64* %82, align 8, !tbaa !4
  %84 = and i64 %83, 31
  %85 = icmp eq i64 %84, 5
  br i1 %85, label %sorbet_stringInterpolate.exit.i, label %86

86:                                               ; preds = %80, %73
  %87 = call i64 @rb_funcallv(i64 %74, i64 3217, i32 0, i64* null) #8
  %88 = load i64, i64* %callArgsAddr101.i, align 8, !tbaa !17
  %89 = call i64 @rb_obj_as_string_result(i64 %87, i64 %88) #8
  store i64 %89, i64* %callArgsAddr101.i, align 8, !tbaa !17
  br label %sorbet_stringInterpolate.exit.i

sorbet_stringInterpolate.exit.i:                  ; preds = %86, %80
  %90 = call i64 @rb_str_concat_literals(i32 5, i64* nonnull %callArgsAddr.i) #8
  store i64* inttoptr (i64 32 to i64*), i64** %10, align 8, !tbaa !9
  store i64 3, i64* %callArgsAddr.i, align 8
  br i1 %12, label %"fastSymCallIntrinsic_+109.i", label %"slowSymCallIntrinsic_+108.i"

"slowSymCallIntrinsic_+108.i":                    ; preds = %sorbet_stringInterpolate.exit.i
  %91 = call i64 @rb_funcallv(i64 %i.sroa.0.0.i, i64 %"rubyId_+.i", i32 1, i64* nonnull %callArgsAddr.i) #8
  br label %BB2.i.backedge

"fastSymCallIntrinsic_+109.i":                    ; preds = %sorbet_stringInterpolate.exit.i
  %92 = and i64 %i.sroa.0.0.i, 1
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %102, label %94, !prof !37

94:                                               ; preds = %"fastSymCallIntrinsic_+109.i"
  %95 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %i.sroa.0.0.i, i64 2) #8
  %96 = extractvalue { i64, i1 } %95, 1
  %97 = extractvalue { i64, i1 } %95, 0
  br i1 %96, label %98, label %BB2.i.backedge

98:                                               ; preds = %94
  %99 = ashr i64 %97, 1
  %100 = xor i64 %99, -9223372036854775808
  %101 = call i64 @rb_int2big(i64 %100) #8
  br label %BB2.i.backedge

102:                                              ; preds = %"fastSymCallIntrinsic_+109.i"
  %103 = and i64 %i.sroa.0.0.i, 7
  %104 = icmp ne i64 %103, 0
  %105 = and i64 %i.sroa.0.0.i, -9
  %106 = icmp eq i64 %105, 0
  %107 = or i1 %104, %106
  br i1 %107, label %116, label %108

108:                                              ; preds = %102
  %109 = inttoptr i64 %i.sroa.0.0.i to %struct.RBasic*
  %110 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %109, i64 0, i32 0
  %111 = load i64, i64* %110, align 8, !tbaa !4
  %112 = and i64 %111, 31
  %113 = icmp eq i64 %112, 10
  br i1 %113, label %114, label %116

114:                                              ; preds = %108
  %115 = call i64 @rb_big_plus(i64 %i.sroa.0.0.i, i64 3) #8
  br label %BB2.i.backedge

116:                                              ; preds = %108, %102
  %117 = call i64 @rb_num_coerce_bin(i64 %i.sroa.0.0.i, i64 3, i64 43) #8
  br label %BB2.i.backedge

BB2.i.backedge:                                   ; preds = %116, %114, %98, %94, %"slowSymCallIntrinsic_+108.i"
  %i.sroa.0.0.i.be = phi i64 [ %91, %"slowSymCallIntrinsic_+108.i" ], [ %117, %116 ], [ %115, %114 ], [ %101, %98 ], [ %97, %94 ]
  br label %BB2.i

"func_<root>.<static-init>$111.exit":             ; preds = %"afterSymCallIntrinsic_<.i"
  store i64* inttoptr (i64 8 to i64*), i64** %10, align 8, !tbaa !9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #7

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #7

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { norecurse nounwind readnone ssp uwtable }
attributes #2 = { "addedToSilenceEmptyAttrsError" }
attributes #3 = { nofree norecurse nounwind ssp uwtable }
attributes #4 = { nounwind readnone speculatable willreturn }
attributes #5 = { nounwind ssp }
attributes #6 = { nounwind sspreq }
attributes #7 = { argmemonly nounwind willreturn }
attributes #8 = { nounwind }

!0 = !{!1, !1, i64 0}
!1 = !{!"int", !2, i64 0}
!2 = !{!"omnipotent char", !3, i64 0}
!3 = !{!"Simple C/C++ TBAA"}
!4 = !{!5, !6, i64 0}
!5 = !{!"RBasic", !6, i64 0, !6, i64 8}
!6 = !{!"long", !2, i64 0}
!7 = !{!2, !2, i64 0}
!8 = !{i32 1088}
!9 = !{!10, !10, i64 0}
!10 = !{!"any pointer", !2, i64 0}
!11 = !{!12, !10, i64 16}
!12 = !{!"rb_execution_context_struct", !10, i64 0, !6, i64 8, !10, i64 16, !10, i64 24, !10, i64 32, !1, i64 40, !1, i64 44, !10, i64 48, !10, i64 56, !10, i64 64, !6, i64 72, !6, i64 80, !10, i64 88, !6, i64 96, !10, i64 104, !10, i64 112, !6, i64 120, !6, i64 128, !2, i64 136, !2, i64 137, !6, i64 144, !13, i64 152}
!13 = !{!"", !10, i64 0, !10, i64 8, !6, i64 16, !2, i64 24}
!14 = !{!15, !10, i64 16}
!15 = !{!"rb_control_frame_struct", !10, i64 0, !10, i64 8, !10, i64 16, !6, i64 24, !10, i64 32, !10, i64 40, !10, i64 48}
!16 = !{!15, !10, i64 32}
!17 = !{!6, !6, i64 0}
!18 = !{!19, !1, i64 0}
!19 = !{!"iseq_insn_info_entry", !1, i64 0, !1, i64 4}
!20 = !{!21, !10, i64 16}
!21 = !{!"rb_iseq_struct", !6, i64 0, !6, i64 8, !10, i64 16, !2, i64 24}
!22 = !{!23, !10, i64 120}
!23 = !{!"rb_iseq_constant_body", !2, i64 0, !1, i64 4, !10, i64 8, !24, i64 16, !26, i64 64, !29, i64 120, !10, i64 152, !10, i64 160, !10, i64 168, !10, i64 176, !10, i64 184, !10, i64 192, !10, i64 200, !30, i64 208, !1, i64 240, !1, i64 244, !1, i64 248, !1, i64 252, !1, i64 256, !2, i64 260}
!24 = !{!"", !25, i64 0, !1, i64 4, !1, i64 8, !1, i64 12, !1, i64 16, !1, i64 20, !1, i64 24, !1, i64 28, !10, i64 32, !10, i64 40}
!25 = !{!"", !1, i64 0, !1, i64 0, !1, i64 0, !1, i64 0, !1, i64 0, !1, i64 0, !1, i64 0, !1, i64 0}
!26 = !{!"rb_iseq_location_struct", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !1, i64 32, !27, i64 36}
!27 = !{!"rb_code_location_struct", !28, i64 0, !28, i64 8}
!28 = !{!"rb_code_position_struct", !1, i64 0, !1, i64 4}
!29 = !{!"iseq_insn_info", !10, i64 0, !10, i64 8, !1, i64 16, !10, i64 24}
!30 = !{!"", !6, i64 0, !6, i64 8, !6, i64 16, !10, i64 24}
!31 = !{!23, !10, i64 128}
!32 = !{!23, !1, i64 4}
!33 = !{!23, !1, i64 136}
!34 = !{!23, !10, i64 8}
!35 = !{!"branch_weights", i32 2000, i32 1}
!36 = !{!"misexpect", i64 0, i64 2000, i64 1}
!37 = !{!"branch_weights", i32 1, i32 2000}
