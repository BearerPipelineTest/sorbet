; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_data_type_struct = type { i8*, %struct.anon.20, %struct.rb_data_type_struct*, i8*, i64 }
%struct.anon.20 = type { void (i8*)*, void (i8*)*, i64 (i8*)*, [2 x i8*] }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %union.pthread_mutex_t, %union.anon.12, %union.anon.12, %union.anon.12, %union.anon.12, i64, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.18, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %union.anon.12, %union.pthread_mutex_t, i64, i64, i64, i64, i64, i32, i64, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.anon.19, [28 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %union.pthread_mutex_t, %union.anon.12, %struct.rb_thread_struct*, i32, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32 }
%union.pthread_cond_t = type { %struct.anon.14 }
%struct.anon.14 = type { i32, i32, i64, i64, i64, i8*, i32, i32 }
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, i64, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %union.pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.15, i32, i64, %struct.rb_fiber_struct*, [1 x %struct.__jmp_buf_tag], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.11 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.8 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon.1, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_info*, %struct.rb_call_cache*, %struct.anon.7, i32, i32, i32, i32, i32, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*)*, i64, %struct.rb_mjit_unit*, i8 }
%struct.anon.1 = type { %struct.anon.2, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.2 = type { i8, [3 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.rb_code_position_struct*, i32*, i32, %struct.succ_index_table* }
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, %union.anon.0 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.anon.2 }
%union.anon.0 = type { i64 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.rb_call_cache = type { i64, i64, %struct.rb_callable_method_entry_struct*, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_info*, %struct.rb_call_cache*)*, %union.anon.6 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon.5, i64 }
%union.anon.5 = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64 (...)*, i64, i32, i64*)*, i32 }
%union.anon.6 = type { i32 }
%struct.anon.7 = type { i64, i64, i64, i64* }
%struct.rb_mjit_unit = type opaque
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [1 x %struct.__jmp_buf_tag], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (...)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.11 = type { i64*, i64*, i64, [1 x %struct.__jmp_buf_tag] }
%struct.rb_calling_info = type { i64, i64, i32 }
%struct.native_thread_data_struct = type { %union.anon.12, %union.anon.13 }
%union.anon.13 = type { %union.pthread_cond_t }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.15 = type { %struct.RBasic }
%struct.RBasic = type { i64, i64 }
%struct.rb_fiber_struct = type opaque
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.anon.18 = type { [65 x i64], [65 x i8] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%union.anon.12 = type { %struct.list_node }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (...)*, i64 (...)* }
%struct.st_table_entry = type opaque
%struct.anon.19 = type { i64, i64, i64, i64 }
%struct.FunctionInlineCache = type { %struct.rb_callable_method_entry_struct*, i64, i64 }
%struct.RString = type { %struct.RBasic, %union.anon }
%union.anon = type { %struct.anon }
%struct.anon = type { i64, i8*, %union.anon.0 }
%struct.rb_ast_body_struct = type { %struct.RNode*, i64, i32 }
%struct.RNode = type { i64, %union.anon.21, %union.anon.21, %union.anon.21, %struct.rb_code_location_struct, i32 }
%union.anon.21 = type { %struct.RNode* }
%struct.RArray = type { %struct.RBasic, %union.anon.27 }
%union.anon.27 = type { %struct.anon.28 }
%struct.anon.28 = type { i64, %union.anon.0, i64* }
%struct.RClass = type { %struct.RBasic, i64, %struct.rb_classext_struct*, %struct.rb_id_table* }
%struct.rb_classext_struct = type { %struct.st_table*, %struct.st_table*, %struct.rb_id_table*, %struct.rb_id_table*, %struct.rb_subclass_entry*, %struct.rb_subclass_entry**, %struct.rb_subclass_entry**, i64, i64, i64, i64 (i64)* }
%struct.rb_subclass_entry = type { i64, %struct.rb_subclass_entry* }
%struct.rb_id_table = type opaque

@closureInfo = local_unnamed_addr constant %struct.rb_data_type_struct { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i32 0, i32 0), %struct.anon.20 { void (i8*)* @sorbet_Closure_mark, void (i8*)* inttoptr (i64 -1 to void (i8*)*), i64 (i8*)* @sorbet_Closure_size, [2 x i8*] zeroinitializer }, %struct.rb_data_type_struct* null, i8* null, i64 1 }, align 8
@.str.10 = private unnamed_addr constant [16 x i8] c"CompiledClosure\00", align 1
@.str = private unnamed_addr constant [5 x i8] c"%li\0B\00", align 1
@ruby_current_vm_ptr = external local_unnamed_addr global %struct.rb_vm_struct*, align 8
@rb_cFalseClass = external local_unnamed_addr constant i64, align 8
@rb_cInteger = external local_unnamed_addr constant i64, align 8
@rb_cFloat = external local_unnamed_addr constant i64, align 8
@rb_cTrueClass = external local_unnamed_addr constant i64, align 8
@rb_cSymbol = external local_unnamed_addr constant i64, align 8
@rb_cNilClass = external local_unnamed_addr constant i64, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@rb_eTypeError = external local_unnamed_addr global i64, align 8
@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@.str.8 = private unnamed_addr constant [45 x i8] c"%s: Expected type %s, got %s with value %li\0B\00", align 1
@ruby_vm_global_method_state = external local_unnamed_addr global i64, align 8
@.str.13 = private unnamed_addr constant [40 x i8] c"unimplmented call with a missing method\00", align 1
@"stackFramePrecomputed_func_<root>.<static-init>$114" = internal unnamed_addr global i8* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"rubyStrFrozen_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"rubyStrFrozen_test/testdata/ruby_benchmark/app_strconcat.rb" = internal unnamed_addr global i64 0, align 8
@"str_test/testdata/ruby_benchmark/app_strconcat.rb" = private unnamed_addr constant [46 x i8] c"test/testdata/ruby_benchmark/app_strconcat.rb\00", align 1
@str_cast = private unnamed_addr constant [5 x i8] c"cast\00", align 1
@"str_T.class_of(<root>)" = private unnamed_addr constant [19 x i8] c"T.class_of(<root>)\00", align 1
@"rubyIdPrecomputed_<" = internal unnamed_addr global i64 0, align 8
@"str_<" = private unnamed_addr constant [2 x i8] c"<\00", align 1
@"ic_call_via_vm_<" = internal global %struct.FunctionInlineCache zeroinitializer
@"rubyIdPrecomputed_+" = internal unnamed_addr global i64 0, align 8
@"str_+" = private unnamed_addr constant [2 x i8] c"+\00", align 1
@"rubyStrFrozen_ " = internal unnamed_addr global i64 0, align 8
@"str_ " = private unnamed_addr constant [2 x i8] c" \00", align 1
@"rubyIdPrecomputed_<string-interpolate>" = internal unnamed_addr global i64 0, align 8
@"str_<string-interpolate>" = private unnamed_addr constant [21 x i8] c"<string-interpolate>\00", align 1
@llvm.global_ctors = appending global [8 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_<top (required)>", i8* bitcast (i64* @"rubyIdPrecomputed_<top (required)>" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyStrFrozen_<top (required)>", i8* bitcast (i64* @"rubyStrFrozen_<top (required)>" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyStrFrozen_test/testdata/ruby_benchmark/app_strconcat.rb", i8* bitcast (i64* @"rubyStrFrozen_test/testdata/ruby_benchmark/app_strconcat.rb" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_stackFramePrecomputed_func_<root>.<static-init>$114", i8* bitcast (i8** @"stackFramePrecomputed_func_<root>.<static-init>$114" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_<", i8* bitcast (i64* @"rubyIdPrecomputed_<" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_+", i8* bitcast (i64* @"rubyIdPrecomputed_+" to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyStrFrozen_ ", i8* bitcast (i64* @"rubyStrFrozen_ " to i8*) }, { i32, void ()*, i8* } { i32 0, void ()* @"Constr_rubyIdPrecomputed_<string-interpolate>", i8* bitcast (i64* @"rubyIdPrecomputed_<string-interpolate>" to i8*) }]
@"ic_call_via_vm_+.3" = internal global %struct.FunctionInlineCache zeroinitializer

; Function Attrs: nounwind ssp uwtable
define internal void @sorbet_Closure_mark(i8*) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !0
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to i64*
  tail call void @rb_gc_mark_values(i64 %4, i64* nonnull %6) #11
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @sorbet_Closure_size(i8* nocapture readonly) #1 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 8, !tbaa !0
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 3
  %6 = add nsw i64 %5, 8
  ret i64 %6
}

declare void @rb_gc_mark_values(i64, i64*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_pi(i64) local_unnamed_addr #0 {
  %2 = tail call i8* @rb_id2name(i64 %0) #11
  ret i8* %2
}

declare i8* @rb_id2name(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i8* @dbg_p(i64) local_unnamed_addr #0 {
  %2 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 %0) #11
  %3 = inttoptr i64 %2 to %struct.RBasic*
  %4 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %3, i64 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !4
  %6 = and i64 %5, 8192
  %7 = icmp eq i64 %6, 0
  %8 = tail call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 %0) #11
  %9 = inttoptr i64 %8 to %struct.RString*
  br i1 %7, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  br label %16

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.RString, %struct.RString* %9, i64 0, i32 1, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8, !tbaa !7
  br label %16

16:                                               ; preds = %13, %10
  %17 = phi i8* [ %12, %10 ], [ %15, %13 ]
  ret i8* %17
}

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define void @stopInDebugger() local_unnamed_addr #0 {
  tail call void asm sideeffect "int $$3", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !8
  ret void
}

declare i64 @rb_fstring_new(i8*, i64) local_unnamed_addr #2

declare void @rb_gc_register_mark_object(i64) local_unnamed_addr #2

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #2

declare i8* @rb_obj_classname(i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #3

declare %struct.rb_callable_method_entry_struct* @rb_callable_method_entry(i64, i64) local_unnamed_addr #2

declare i64 @rb_vm_call(%struct.rb_execution_context_struct*, i64, i64, i32, i64*, %struct.rb_callable_method_entry_struct*) local_unnamed_addr #2

; Function Attrs: cold minsize noreturn nounwind optsize ssp uwtable
define internal fastcc void @sorbet_cast_failure(i64) unnamed_addr #4 {
  %2 = load i64, i64* @rb_eTypeError, align 8, !tbaa !9
  %3 = tail call i8* @rb_obj_classname(i64 %0) #11
  tail call void (i64, i8*, ...) @rb_raise(i64 %2, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_cast, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"str_T.class_of(<root>)", i64 0, i64 0), i8* %3, i64 %0) #12
  unreachable
}

declare %struct.rb_iseq_struct* @rb_iseq_new(%struct.rb_ast_body_struct*, i64, i64, i64, %struct.rb_iseq_struct*, i32) local_unnamed_addr #2

declare i8** @rb_vm_get_insns_address_table() local_unnamed_addr #2

declare i8* @ruby_xmalloc2(i64, i64) local_unnamed_addr #2

declare void @rb_iseq_insns_info_encode_positions(%struct.rb_iseq_struct*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define i64** @sorbet_setRubyStackFrame(i8*) local_unnamed_addr #5 {
  %2 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %3 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %2, i64 0, i32 2
  %4 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %3, align 8, !tbaa !12
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %4, i64 0, i32 2
  %6 = bitcast %struct.rb_iseq_struct** %5 to i8**
  store i8* %0, i8** %6, align 8, !tbaa !15
  %7 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %4, i64 0, i32 4
  %8 = load i64*, i64** %7, align 8, !tbaa !17
  %9 = load i64, i64* %8, align 8, !tbaa !9
  %10 = and i64 %9, -129
  store i64 %10, i64* %8, align 8, !tbaa !9
  %11 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %4, i64 0, i32 0
  ret i64** %11
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define i64 @enumerator_size_func_array_length(i64, i64, i64) local_unnamed_addr #6 {
  %4 = inttoptr i64 %0 to %struct.RBasic*
  %5 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %4, i64 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !4
  %7 = and i64 %6, 8192
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %3
  %10 = lshr i64 %6, 15
  %11 = and i64 %10, 3
  br label %rb_array_len.exit

12:                                               ; preds = %3
  %13 = inttoptr i64 %0 to %struct.RArray*
  %14 = getelementptr inbounds %struct.RArray, %struct.RArray* %13, i64 0, i32 1, i32 0, i32 0
  %15 = load i64, i64* %14, align 8, !tbaa !7
  br label %rb_array_len.exit

rb_array_len.exit:                                ; preds = %9, %12
  %16 = phi i64 [ %11, %9 ], [ %15, %12 ]
  ret i64 %16
}

declare i64 @rb_big_plus(i64, i64) local_unnamed_addr #2

declare i64 @rb_num_coerce_bin(i64, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #7

declare i64 @rb_int2big(i64) local_unnamed_addr #2

declare i64 @rb_str_concat_literals(i32, i64*) local_unnamed_addr #2

declare i64 @rb_funcallv(i64, i64, i32, i64*) local_unnamed_addr #2

declare i64 @rb_obj_as_string_result(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @sorbet_callFunc(i64, i64, i64* noalias nocapture, %struct.FunctionInlineCache* nocapture) unnamed_addr #0 {
  %5 = load i64, i64* @ruby_vm_global_method_state, align 8, !tbaa !18
  %6 = getelementptr inbounds %struct.FunctionInlineCache, %struct.FunctionInlineCache* %3, i64 0, i32 1
  %7 = load i64, i64* %6, align 8, !tbaa !20
  %8 = icmp eq i64 %5, %7
  br i1 %8, label %9, label %41, !prof !22

9:                                                ; preds = %4
  %10 = and i64 %0, 7
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %9
  %13 = trunc i64 %0 to i32
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %sorbet_getClassSerial.exit

16:                                               ; preds = %12
  %17 = and i32 %13, 3
  %18 = icmp eq i32 %17, 2
  br i1 %18, label %sorbet_getClassSerial.exit, label %19

19:                                               ; preds = %16
  %20 = icmp eq i64 %0, 20
  br i1 %20, label %sorbet_getClassSerial.exit, label %21

21:                                               ; preds = %19
  %22 = and i64 %0, 255
  %23 = icmp eq i64 %22, 12
  br i1 %23, label %sorbet_getClassSerial.exit, label %29

24:                                               ; preds = %9
  %25 = and i64 %0, -9
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %24
  switch i64 %0, label %29 [
    i64 8, label %sorbet_getClassSerial.exit
    i64 0, label %28
  ]

28:                                               ; preds = %27
  br label %sorbet_getClassSerial.exit

29:                                               ; preds = %27, %24, %21
  %30 = inttoptr i64 %0 to %struct.RBasic*
  %31 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %30, i64 0, i32 1
  %phitmp.i = bitcast i64* %31 to %struct.RClass**
  br label %sorbet_getClassSerial.exit

sorbet_getClassSerial.exit:                       ; preds = %12, %16, %19, %21, %27, %28, %29
  %32 = phi %struct.RClass** [ %phitmp.i, %29 ], [ bitcast (i64* @rb_cFalseClass to %struct.RClass**), %28 ], [ bitcast (i64* @rb_cInteger to %struct.RClass**), %12 ], [ bitcast (i64* @rb_cFloat to %struct.RClass**), %16 ], [ bitcast (i64* @rb_cTrueClass to %struct.RClass**), %19 ], [ bitcast (i64* @rb_cSymbol to %struct.RClass**), %21 ], [ bitcast (i64* @rb_cNilClass to %struct.RClass**), %27 ]
  %33 = load %struct.RClass*, %struct.RClass** %32, align 8, !tbaa !9
  %34 = getelementptr inbounds %struct.RClass, %struct.RClass* %33, i64 0, i32 2
  %35 = load %struct.rb_classext_struct*, %struct.rb_classext_struct** %34, align 8, !tbaa !23
  %36 = getelementptr inbounds %struct.rb_classext_struct, %struct.rb_classext_struct* %35, i64 0, i32 7
  %37 = load i64, i64* %36, align 8, !tbaa !25
  %38 = getelementptr inbounds %struct.FunctionInlineCache, %struct.FunctionInlineCache* %3, i64 0, i32 2
  %39 = load i64, i64* %38, align 8, !tbaa !27
  %40 = icmp eq i64 %37, %39
  br i1 %40, label %100, label %41, !prof !22

41:                                               ; preds = %sorbet_getClassSerial.exit, %4
  %42 = and i64 %0, 7
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %56, label %44

44:                                               ; preds = %41
  %45 = trunc i64 %0 to i32
  %46 = and i32 %45, 1
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %rb_class_of.exit.i

48:                                               ; preds = %44
  %49 = and i32 %45, 3
  %50 = icmp eq i32 %49, 2
  br i1 %50, label %rb_class_of.exit.i, label %51

51:                                               ; preds = %48
  %52 = icmp eq i64 %0, 20
  br i1 %52, label %rb_class_of.exit.i, label %53

53:                                               ; preds = %51
  %54 = and i64 %0, 255
  %55 = icmp eq i64 %54, 12
  br i1 %55, label %rb_class_of.exit.i, label %61

56:                                               ; preds = %41
  %57 = and i64 %0, -9
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  switch i64 %0, label %61 [
    i64 8, label %rb_class_of.exit.i
    i64 0, label %60
  ]

60:                                               ; preds = %59
  br label %rb_class_of.exit.i

61:                                               ; preds = %59, %56, %53
  %62 = inttoptr i64 %0 to %struct.RBasic*
  %63 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %62, i64 0, i32 1
  br label %rb_class_of.exit.i

rb_class_of.exit.i:                               ; preds = %61, %60, %59, %53, %51, %48, %44
  %64 = phi i64* [ %63, %61 ], [ @rb_cFalseClass, %60 ], [ @rb_cInteger, %44 ], [ @rb_cFloat, %48 ], [ @rb_cTrueClass, %51 ], [ @rb_cSymbol, %53 ], [ @rb_cNilClass, %59 ]
  %65 = load i64, i64* %64, align 8, !tbaa !9
  %66 = tail call %struct.rb_callable_method_entry_struct* @rb_callable_method_entry(i64 %65, i64 %1) #11
  %67 = icmp eq %struct.rb_callable_method_entry_struct* %66, null
  br i1 %67, label %68, label %70

68:                                               ; preds = %rb_class_of.exit.i
  %69 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !9
  tail call void (i64, i8*, ...) @rb_raise(i64 %69, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.13, i64 0, i64 0)) #12
  unreachable

70:                                               ; preds = %rb_class_of.exit.i
  %71 = getelementptr inbounds %struct.FunctionInlineCache, %struct.FunctionInlineCache* %3, i64 0, i32 0
  store %struct.rb_callable_method_entry_struct* %66, %struct.rb_callable_method_entry_struct** %71, align 8, !tbaa !28
  %72 = load i64, i64* @ruby_vm_global_method_state, align 8, !tbaa !18
  store i64 %72, i64* %6, align 8, !tbaa !20
  br i1 %43, label %85, label %73

73:                                               ; preds = %70
  %74 = trunc i64 %0 to i32
  %75 = and i32 %74, 1
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %sorbet_inlineCacheInvalidated.exit

77:                                               ; preds = %73
  %78 = and i32 %74, 3
  %79 = icmp eq i32 %78, 2
  br i1 %79, label %sorbet_inlineCacheInvalidated.exit, label %80

80:                                               ; preds = %77
  %81 = icmp eq i64 %0, 20
  br i1 %81, label %sorbet_inlineCacheInvalidated.exit, label %82

82:                                               ; preds = %80
  %83 = and i64 %0, 255
  %84 = icmp eq i64 %83, 12
  br i1 %84, label %sorbet_inlineCacheInvalidated.exit, label %90

85:                                               ; preds = %70
  %86 = and i64 %0, -9
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %90

88:                                               ; preds = %85
  switch i64 %0, label %90 [
    i64 8, label %sorbet_inlineCacheInvalidated.exit
    i64 0, label %89
  ]

89:                                               ; preds = %88
  br label %sorbet_inlineCacheInvalidated.exit

90:                                               ; preds = %88, %85, %82
  %91 = inttoptr i64 %0 to %struct.RBasic*
  %92 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %91, i64 0, i32 1
  %phitmp.i.i = bitcast i64* %92 to %struct.RClass**
  br label %sorbet_inlineCacheInvalidated.exit

sorbet_inlineCacheInvalidated.exit:               ; preds = %73, %77, %80, %82, %88, %89, %90
  %93 = phi %struct.RClass** [ %phitmp.i.i, %90 ], [ bitcast (i64* @rb_cFalseClass to %struct.RClass**), %89 ], [ bitcast (i64* @rb_cInteger to %struct.RClass**), %73 ], [ bitcast (i64* @rb_cFloat to %struct.RClass**), %77 ], [ bitcast (i64* @rb_cTrueClass to %struct.RClass**), %80 ], [ bitcast (i64* @rb_cSymbol to %struct.RClass**), %82 ], [ bitcast (i64* @rb_cNilClass to %struct.RClass**), %88 ]
  %94 = load %struct.RClass*, %struct.RClass** %93, align 8, !tbaa !9
  %95 = getelementptr inbounds %struct.RClass, %struct.RClass* %94, i64 0, i32 2
  %96 = load %struct.rb_classext_struct*, %struct.rb_classext_struct** %95, align 8, !tbaa !23
  %97 = getelementptr inbounds %struct.rb_classext_struct, %struct.rb_classext_struct* %96, i64 0, i32 7
  %98 = load i64, i64* %97, align 8, !tbaa !25
  %99 = getelementptr inbounds %struct.FunctionInlineCache, %struct.FunctionInlineCache* %3, i64 0, i32 2
  store i64 %98, i64* %99, align 8, !tbaa !27
  br label %100

100:                                              ; preds = %sorbet_inlineCacheInvalidated.exit, %sorbet_getClassSerial.exit
  %101 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %102 = getelementptr inbounds %struct.FunctionInlineCache, %struct.FunctionInlineCache* %3, i64 0, i32 0
  %103 = load %struct.rb_callable_method_entry_struct*, %struct.rb_callable_method_entry_struct** %102, align 8, !tbaa !28
  %104 = tail call i64 @rb_vm_call(%struct.rb_execution_context_struct* %101, i64 %0, i64 %1, i32 1, i64* %2, %struct.rb_callable_method_entry_struct* %103) #11
  ret i64 %104
}

; Function Attrs: nounwind ssp
define internal void @"Constr_stackFramePrecomputed_func_<root>.<static-init>$114"() #8 {
entryInitializers:
  %"rubyStr_<top (required)>" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/ruby_benchmark/app_strconcat.rb" = load i64, i64* @"rubyStrFrozen_test/testdata/ruby_benchmark/app_strconcat.rb", align 8
  %0 = tail call %struct.rb_iseq_struct* @rb_iseq_new(%struct.rb_ast_body_struct* null, i64 %"rubyStr_<top (required)>", i64 %"rubyStr_test/testdata/ruby_benchmark/app_strconcat.rb", i64 %"rubyStr_test/testdata/ruby_benchmark/app_strconcat.rb", %struct.rb_iseq_struct* null, i32 1) #11
  %1 = ptrtoint %struct.rb_iseq_struct* %0 to i64
  tail call void @rb_gc_register_mark_object(i64 %1) #11
  %2 = tail call i8** @rb_vm_get_insns_address_table() #11
  %3 = bitcast i8** %2 to i64*
  %4 = load i64, i64* %3, align 8, !tbaa !10
  %5 = tail call i8* @ruby_xmalloc2(i64 5, i64 8) #11
  %6 = tail call i8* @ruby_xmalloc2(i64 5, i64 4) #11
  %7 = tail call i8* @ruby_xmalloc2(i64 5, i64 8) #11
  %8 = bitcast i8* %6 to i32*
  store i32 0, i32* %8, align 4, !tbaa !0
  %9 = bitcast i8* %5 to i32*
  store i32 4, i32* %9, align 4, !tbaa !29
  %10 = getelementptr inbounds i8, i8* %6, i64 4
  %11 = bitcast i8* %10 to i32*
  store i32 1, i32* %11, align 4, !tbaa !0
  %12 = getelementptr inbounds i8, i8* %5, i64 8
  %13 = bitcast i8* %12 to i32*
  store i32 5, i32* %13, align 4, !tbaa !29
  %14 = getelementptr inbounds i8, i8* %6, i64 8
  %15 = bitcast i8* %14 to i32*
  store i32 2, i32* %15, align 4, !tbaa !0
  %16 = getelementptr inbounds i8, i8* %5, i64 16
  %17 = bitcast i8* %16 to i32*
  store i32 6, i32* %17, align 4, !tbaa !29
  %18 = getelementptr inbounds i8, i8* %6, i64 12
  %19 = bitcast i8* %18 to i32*
  store i32 3, i32* %19, align 4, !tbaa !0
  %20 = getelementptr inbounds i8, i8* %5, i64 24
  %21 = bitcast i8* %20 to i32*
  store i32 7, i32* %21, align 4, !tbaa !29
  %22 = insertelement <4 x i64> undef, i64 %4, i32 0
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <4 x i32> zeroinitializer
  %24 = bitcast i8* %7 to <4 x i64>*
  store <4 x i64> %23, <4 x i64>* %24, align 8, !tbaa !9
  %25 = getelementptr inbounds i8, i8* %6, i64 16
  %26 = bitcast i8* %25 to i32*
  store i32 4, i32* %26, align 4, !tbaa !0
  %27 = getelementptr inbounds i8, i8* %5, i64 32
  %28 = bitcast i8* %27 to i32*
  store i32 8, i32* %28, align 4, !tbaa !29
  %29 = getelementptr inbounds i8, i8* %7, i64 32
  %30 = bitcast i8* %29 to i64*
  store i64 %4, i64* %30, align 8, !tbaa !9
  %31 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %0, i64 0, i32 2
  %32 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %31, align 8, !tbaa !31
  %33 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %32, i64 0, i32 5, i32 0
  %34 = bitcast %struct.rb_code_position_struct** %33 to i8**
  store i8* %5, i8** %34, align 8, !tbaa !33
  %35 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %32, i64 0, i32 5, i32 1
  %36 = bitcast i32** %35 to i8**
  store i8* %6, i8** %36, align 8, !tbaa !42
  %37 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %32, i64 0, i32 1
  store i32 5, i32* %37, align 4, !tbaa !43
  %38 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %32, i64 0, i32 5, i32 2
  store i32 5, i32* %38, align 8, !tbaa !44
  tail call void @rb_iseq_insns_info_encode_positions(%struct.rb_iseq_struct* %0) #11
  %39 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %31, align 8, !tbaa !31
  %40 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %39, i64 0, i32 2
  %41 = bitcast i64** %40 to i8**
  store i8* %7, i8** %41, align 8, !tbaa !45
  store %struct.rb_iseq_struct* %0, %struct.rb_iseq_struct** bitcast (i8** @"stackFramePrecomputed_func_<root>.<static-init>$114" to %struct.rb_iseq_struct**), align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_<top (required)>"() #8 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #11
  store i64 %0, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyStrFrozen_<top (required)>"() #8 {
constr:
  %0 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #11
  tail call void @rb_gc_register_mark_object(i64 %0) #11
  store i64 %0, i64* @"rubyStrFrozen_<top (required)>", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyStrFrozen_test/testdata/ruby_benchmark/app_strconcat.rb"() #8 {
constr:
  %0 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @"str_test/testdata/ruby_benchmark/app_strconcat.rb", i64 0, i64 0), i64 45) #11
  tail call void @rb_gc_register_mark_object(i64 %0) #11
  store i64 %0, i64* @"rubyStrFrozen_test/testdata/ruby_benchmark/app_strconcat.rb", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_<"() #8 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_<", i64 0, i64 0), i64 1) #11
  store i64 %0, i64* @"rubyIdPrecomputed_<", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_+"() #8 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_+", i64 0, i64 0), i64 1) #11
  store i64 %0, i64* @"rubyIdPrecomputed_+", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyStrFrozen_ "() #8 {
constr:
  %0 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_ ", i64 0, i64 0), i64 1) #11
  tail call void @rb_gc_register_mark_object(i64 %0) #11
  store i64 %0, i64* @"rubyStrFrozen_ ", align 8
  ret void
}

; Function Attrs: nounwind ssp
define internal void @"Constr_rubyIdPrecomputed_<string-interpolate>"() #8 {
constr:
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"str_<string-interpolate>", i64 0, i64 0), i64 20) #11
  store i64 %0, i64* @"rubyIdPrecomputed_<string-interpolate>", align 8
  ret void
}

; Function Attrs: nounwind sspreq
define void @Init_test_testdata_ruby_benchmark_app_strconcat() local_unnamed_addr #9 {
entry:
  %callArgs.i = alloca [5 x i64], align 8
  %0 = load %struct.rb_vm_struct*, %struct.rb_vm_struct** @ruby_current_vm_ptr, align 8, !tbaa !10
  %1 = getelementptr inbounds %struct.rb_vm_struct, %struct.rb_vm_struct* %0, i64 0, i32 17
  %2 = load i64, i64* %1, align 8, !tbaa !46
  %3 = bitcast [5 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %3)
  %"stackFrame_func_<root>.<static-init>$114.i" = load i8*, i8** @"stackFramePrecomputed_func_<root>.<static-init>$114", align 8
  %"rubyId_<.i" = load i64, i64* @"rubyIdPrecomputed_<", align 8
  %"rubyId_+.i" = load i64, i64* @"rubyIdPrecomputed_+", align 8
  %"rubyStr_ .i" = load i64, i64* @"rubyStrFrozen_ ", align 8
  %4 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !10
  %5 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %4, i64 0, i32 2
  %6 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %5, align 8, !tbaa !12
  %7 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %6, i64 0, i32 2
  %8 = bitcast %struct.rb_iseq_struct** %7 to i8**
  store i8* %"stackFrame_func_<root>.<static-init>$114.i", i8** %8, align 8, !tbaa !15
  %9 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %6, i64 0, i32 4
  %10 = load i64*, i64** %9, align 8, !tbaa !17
  %11 = load i64, i64* %10, align 8, !tbaa !9
  %12 = and i64 %11, -129
  store i64 %12, i64* %10, align 8, !tbaa !9
  %13 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %6, i64 0, i32 0
  %14 = getelementptr inbounds i8, i8* %"stackFrame_func_<root>.<static-init>$114.i", i64 16
  %15 = bitcast i8* %14 to %struct.rb_iseq_constant_body**
  %16 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %15, align 8, !tbaa !31
  %17 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %16, i64 0, i32 2
  %18 = load i64*, i64** %17, align 8, !tbaa !45
  %19 = getelementptr inbounds i64, i64* %18, i64 1
  store i64* %19, i64** %13, align 8, !tbaa !10
  %20 = load %struct.rb_vm_struct*, %struct.rb_vm_struct** @ruby_current_vm_ptr, align 8, !tbaa !10
  %21 = getelementptr inbounds %struct.rb_vm_struct, %struct.rb_vm_struct* %20, i64 0, i32 17
  %22 = load i64, i64* %21, align 8, !tbaa !46
  %23 = icmp eq i64 %22, %2
  br i1 %23, label %BB2.preheader.i, label %typeTestFail.i, !prof !22

BB2.preheader.i:                                  ; preds = %entry
  %24 = getelementptr inbounds i64, i64* %18, i64 2
  %callArgsAddr.i = getelementptr inbounds [5 x i64], [5 x i64]* %callArgs.i, i64 0, i64 0
  %25 = getelementptr inbounds i64, i64* %18, i64 3
  %callArgsAddr99.i = getelementptr inbounds [5 x i64], [5 x i64]* %callArgs.i, i64 0, i64 1
  %callArgsAddr101.i = getelementptr inbounds [5 x i64], [5 x i64]* %callArgs.i, i64 0, i64 2
  %callArgsAddr103.i = getelementptr inbounds [5 x i64], [5 x i64]* %callArgs.i, i64 0, i64 3
  %callArgsAddr105.i = getelementptr inbounds [5 x i64], [5 x i64]* %callArgs.i, i64 0, i64 4
  %26 = getelementptr inbounds i64, i64* %18, i64 4
  br label %BB2.i

BB2.i:                                            ; preds = %BB2.i.backedge, %BB2.preheader.i
  %i.sroa.0.0.i = phi i64 [ 1, %BB2.preheader.i ], [ %i.sroa.0.0.i.be, %BB2.i.backedge ]
  store i64* %24, i64** %13, align 8, !tbaa !10
  %27 = and i64 %i.sroa.0.0.i, 1
  %28 = icmp ne i64 %27, 0
  store i64 4000001, i64* %callArgsAddr.i, align 8
  br i1 %28, label %sorbet_rb_int_lt.exit.i, label %"alternativeCallIntrinsic_Integer_<.i", !prof !22

typeTestFail.i:                                   ; preds = %entry
  tail call fastcc void @sorbet_cast_failure(i64 %2) #11
  unreachable

afterSend.i:                                      ; preds = %sorbet_rb_int_lt.exit.i, %"alternativeCallIntrinsic_Integer_<.i"
  %"symIntrinsicRawPhi_<.i" = phi i64 [ %32, %sorbet_rb_int_lt.exit.i ], [ %"call_via_vm_<.i", %"alternativeCallIntrinsic_Integer_<.i" ]
  %29 = and i64 %"symIntrinsicRawPhi_<.i", -9
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %"func_<root>.<static-init>$114.exit", label %afterSend80.i

"alternativeCallIntrinsic_Integer_<.i":           ; preds = %BB2.i
  %"call_via_vm_<.i" = call fastcc i64 @sorbet_callFunc(i64 %i.sroa.0.0.i, i64 %"rubyId_<.i", i64* nonnull %callArgsAddr.i, %struct.FunctionInlineCache* nonnull @"ic_call_via_vm_<") #11
  br label %afterSend.i

sorbet_rb_int_lt.exit.i:                          ; preds = %BB2.i
  %31 = icmp slt i64 %i.sroa.0.0.i, 4000000
  %32 = select i1 %31, i64 20, i64 0
  br label %afterSend.i

afterSend80.i:                                    ; preds = %afterSend.i
  store i64* %25, i64** %13, align 8, !tbaa !10
  store i64 5, i64* %callArgsAddr.i, align 8
  store i64 %"rubyStr_ .i", i64* %callArgsAddr99.i, align 8
  store i64 5, i64* %callArgsAddr101.i, align 8
  store i64 %"rubyStr_ .i", i64* %callArgsAddr103.i, align 8
  store i64 5, i64* %callArgsAddr105.i, align 8
  %33 = call i64 @rb_funcallv(i64 5, i64 3217, i32 0, i64* null) #11
  %34 = load i64, i64* %callArgsAddr.i, align 8, !tbaa !9
  %35 = call i64 @rb_obj_as_string_result(i64 %33, i64 %34) #11
  store i64 %35, i64* %callArgsAddr.i, align 8, !tbaa !9
  %36 = load i64, i64* %callArgsAddr99.i, align 8, !tbaa !9
  %37 = and i64 %36, 7
  %38 = icmp ne i64 %37, 0
  %39 = and i64 %36, -9
  %40 = icmp eq i64 %39, 0
  %41 = or i1 %38, %40
  br i1 %41, label %48, label %42

42:                                               ; preds = %afterSend80.i
  %43 = inttoptr i64 %36 to %struct.RBasic*
  %44 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %43, i64 0, i32 0
  %45 = load i64, i64* %44, align 8, !tbaa !4
  %46 = and i64 %45, 31
  %47 = icmp eq i64 %46, 5
  br i1 %47, label %52, label %48

48:                                               ; preds = %42, %afterSend80.i
  %49 = call i64 @rb_funcallv(i64 %36, i64 3217, i32 0, i64* null) #11
  %50 = load i64, i64* %callArgsAddr99.i, align 8, !tbaa !9
  %51 = call i64 @rb_obj_as_string_result(i64 %49, i64 %50) #11
  store i64 %51, i64* %callArgsAddr99.i, align 8, !tbaa !9
  br label %52

52:                                               ; preds = %48, %42
  %53 = load i64, i64* %callArgsAddr101.i, align 8, !tbaa !9
  %54 = and i64 %53, 7
  %55 = icmp ne i64 %54, 0
  %56 = and i64 %53, -9
  %57 = icmp eq i64 %56, 0
  %58 = or i1 %55, %57
  br i1 %58, label %65, label %59

59:                                               ; preds = %52
  %60 = inttoptr i64 %53 to %struct.RBasic*
  %61 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %60, i64 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !4
  %63 = and i64 %62, 31
  %64 = icmp eq i64 %63, 5
  br i1 %64, label %69, label %65

65:                                               ; preds = %59, %52
  %66 = call i64 @rb_funcallv(i64 %53, i64 3217, i32 0, i64* null) #11
  %67 = load i64, i64* %callArgsAddr101.i, align 8, !tbaa !9
  %68 = call i64 @rb_obj_as_string_result(i64 %66, i64 %67) #11
  store i64 %68, i64* %callArgsAddr101.i, align 8, !tbaa !9
  br label %69

69:                                               ; preds = %65, %59
  %70 = load i64, i64* %callArgsAddr103.i, align 8, !tbaa !9
  %71 = and i64 %70, 7
  %72 = icmp ne i64 %71, 0
  %73 = and i64 %70, -9
  %74 = icmp eq i64 %73, 0
  %75 = or i1 %72, %74
  br i1 %75, label %82, label %76

76:                                               ; preds = %69
  %77 = inttoptr i64 %70 to %struct.RBasic*
  %78 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %77, i64 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !4
  %80 = and i64 %79, 31
  %81 = icmp eq i64 %80, 5
  br i1 %81, label %86, label %82

82:                                               ; preds = %76, %69
  %83 = call i64 @rb_funcallv(i64 %70, i64 3217, i32 0, i64* null) #11
  %84 = load i64, i64* %callArgsAddr103.i, align 8, !tbaa !9
  %85 = call i64 @rb_obj_as_string_result(i64 %83, i64 %84) #11
  store i64 %85, i64* %callArgsAddr103.i, align 8, !tbaa !9
  br label %86

86:                                               ; preds = %82, %76
  %87 = load i64, i64* %callArgsAddr105.i, align 8, !tbaa !9
  %88 = and i64 %87, 7
  %89 = icmp ne i64 %88, 0
  %90 = and i64 %87, -9
  %91 = icmp eq i64 %90, 0
  %92 = or i1 %89, %91
  br i1 %92, label %99, label %93

93:                                               ; preds = %86
  %94 = inttoptr i64 %87 to %struct.RBasic*
  %95 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %94, i64 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !4
  %97 = and i64 %96, 31
  %98 = icmp eq i64 %97, 5
  br i1 %98, label %sorbet_stringInterpolate.exit.i, label %99

99:                                               ; preds = %93, %86
  %100 = call i64 @rb_funcallv(i64 %87, i64 3217, i32 0, i64* null) #11
  %101 = load i64, i64* %callArgsAddr105.i, align 8, !tbaa !9
  %102 = call i64 @rb_obj_as_string_result(i64 %100, i64 %101) #11
  store i64 %102, i64* %callArgsAddr105.i, align 8, !tbaa !9
  br label %sorbet_stringInterpolate.exit.i

sorbet_stringInterpolate.exit.i:                  ; preds = %99, %93
  %103 = call i64 @rb_str_concat_literals(i32 5, i64* nonnull %callArgsAddr.i) #11
  store i64* %26, i64** %13, align 8, !tbaa !10
  store i64 3, i64* %callArgsAddr.i, align 8
  br i1 %28, label %"fastSymCallIntrinsic_Integer_+114.i", label %"alternativeCallIntrinsic_Integer_+113.i"

"alternativeCallIntrinsic_Integer_+113.i":        ; preds = %sorbet_stringInterpolate.exit.i
  %"call_via_vm_+124.i" = call fastcc i64 @sorbet_callFunc(i64 %i.sroa.0.0.i, i64 %"rubyId_+.i", i64* nonnull %callArgsAddr.i, %struct.FunctionInlineCache* nonnull @"ic_call_via_vm_+.3") #11
  br label %BB2.i.backedge

"fastSymCallIntrinsic_Integer_+114.i":            ; preds = %sorbet_stringInterpolate.exit.i
  %104 = and i64 %i.sroa.0.0.i, 1
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %114, label %106, !prof !54

106:                                              ; preds = %"fastSymCallIntrinsic_Integer_+114.i"
  %107 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %i.sroa.0.0.i, i64 2) #11
  %108 = extractvalue { i64, i1 } %107, 1
  %109 = extractvalue { i64, i1 } %107, 0
  br i1 %108, label %110, label %BB2.i.backedge

110:                                              ; preds = %106
  %111 = ashr i64 %109, 1
  %112 = xor i64 %111, -9223372036854775808
  %113 = call i64 @rb_int2big(i64 %112) #11
  br label %BB2.i.backedge

114:                                              ; preds = %"fastSymCallIntrinsic_Integer_+114.i"
  %115 = and i64 %i.sroa.0.0.i, 7
  %116 = icmp ne i64 %115, 0
  %117 = and i64 %i.sroa.0.0.i, -9
  %118 = icmp eq i64 %117, 0
  %119 = or i1 %116, %118
  br i1 %119, label %128, label %120

120:                                              ; preds = %114
  %121 = inttoptr i64 %i.sroa.0.0.i to %struct.RBasic*
  %122 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %121, i64 0, i32 0
  %123 = load i64, i64* %122, align 8, !tbaa !4
  %124 = and i64 %123, 31
  %125 = icmp eq i64 %124, 10
  br i1 %125, label %126, label %128

126:                                              ; preds = %120
  %127 = call i64 @rb_big_plus(i64 %i.sroa.0.0.i, i64 3) #11
  br label %BB2.i.backedge

128:                                              ; preds = %120, %114
  %129 = call i64 @rb_num_coerce_bin(i64 %i.sroa.0.0.i, i64 3, i64 43) #11
  br label %BB2.i.backedge

BB2.i.backedge:                                   ; preds = %128, %126, %110, %106, %"alternativeCallIntrinsic_Integer_+113.i"
  %i.sroa.0.0.i.be = phi i64 [ %"call_via_vm_+124.i", %"alternativeCallIntrinsic_Integer_+113.i" ], [ %129, %128 ], [ %127, %126 ], [ %113, %110 ], [ %109, %106 ]
  br label %BB2.i

"func_<root>.<static-init>$114.exit":             ; preds = %afterSend.i
  store i64* %19, i64** %13, align 8, !tbaa !10
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %3)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #10

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #10

attributes #0 = { nounwind ssp uwtable }
attributes #1 = { norecurse nounwind readnone ssp uwtable }
attributes #2 = { "addedToSilenceEmptyAttrsError" }
attributes #3 = { noreturn }
attributes #4 = { cold minsize noreturn nounwind optsize ssp uwtable }
attributes #5 = { nofree norecurse nounwind ssp uwtable }
attributes #6 = { norecurse nounwind readonly ssp uwtable }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind ssp }
attributes #9 = { nounwind sspreq }
attributes #10 = { argmemonly nounwind }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }

!0 = !{!1, !1, i64 0}
!1 = !{!"int", !2, i64 0}
!2 = !{!"omnipotent char", !3, i64 0}
!3 = !{!"Simple C/C++ TBAA"}
!4 = !{!5, !6, i64 0}
!5 = !{!"RBasic", !6, i64 0, !6, i64 8}
!6 = !{!"long", !2, i64 0}
!7 = !{!2, !2, i64 0}
!8 = !{i32 1295}
!9 = !{!6, !6, i64 0}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !2, i64 0}
!12 = !{!13, !11, i64 16}
!13 = !{!"rb_execution_context_struct", !11, i64 0, !6, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !1, i64 40, !1, i64 44, !11, i64 48, !11, i64 56, !11, i64 64, !6, i64 72, !6, i64 80, !11, i64 88, !6, i64 96, !11, i64 104, !11, i64 112, !6, i64 120, !6, i64 128, !2, i64 136, !2, i64 137, !6, i64 144, !14, i64 152}
!14 = !{!"", !11, i64 0, !11, i64 8, !6, i64 16, !2, i64 24}
!15 = !{!16, !11, i64 16}
!16 = !{!"rb_control_frame_struct", !11, i64 0, !11, i64 8, !11, i64 16, !6, i64 24, !11, i64 32, !11, i64 40, !11, i64 48}
!17 = !{!16, !11, i64 32}
!18 = !{!19, !19, i64 0}
!19 = !{!"long long", !2, i64 0}
!20 = !{!21, !19, i64 8}
!21 = !{!"FunctionInlineCache", !11, i64 0, !19, i64 8, !19, i64 16}
!22 = !{!"branch_weights", i32 2000, i32 1}
!23 = !{!24, !11, i64 24}
!24 = !{!"RClass", !5, i64 0, !6, i64 16, !11, i64 24, !11, i64 32}
!25 = !{!26, !19, i64 56}
!26 = !{!"rb_classext_struct", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !19, i64 56, !6, i64 64, !6, i64 72, !11, i64 80}
!27 = !{!21, !19, i64 16}
!28 = !{!21, !11, i64 0}
!29 = !{!30, !1, i64 0}
!30 = !{!"iseq_insn_info_entry", !1, i64 0, !1, i64 4}
!31 = !{!32, !11, i64 16}
!32 = !{!"rb_iseq_struct", !6, i64 0, !6, i64 8, !11, i64 16, !2, i64 24}
!33 = !{!34, !11, i64 120}
!34 = !{!"rb_iseq_constant_body", !2, i64 0, !1, i64 4, !11, i64 8, !35, i64 16, !37, i64 64, !40, i64 120, !11, i64 152, !11, i64 160, !11, i64 168, !11, i64 176, !11, i64 184, !11, i64 192, !11, i64 200, !41, i64 208, !1, i64 240, !1, i64 244, !1, i64 248, !1, i64 252, !1, i64 256, !11, i64 264, !6, i64 272, !11, i64 280, !2, i64 288}
!35 = !{!"", !36, i64 0, !1, i64 4, !1, i64 8, !1, i64 12, !1, i64 16, !1, i64 20, !1, i64 24, !1, i64 28, !11, i64 32, !11, i64 40}
!36 = !{!"", !1, i64 0, !1, i64 0, !1, i64 0, !1, i64 0, !1, i64 0, !1, i64 0, !1, i64 0, !1, i64 0}
!37 = !{!"rb_iseq_location_struct", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !1, i64 32, !38, i64 36}
!38 = !{!"rb_code_location_struct", !39, i64 0, !39, i64 8}
!39 = !{!"rb_code_position_struct", !1, i64 0, !1, i64 4}
!40 = !{!"iseq_insn_info", !11, i64 0, !11, i64 8, !1, i64 16, !11, i64 24}
!41 = !{!"", !6, i64 0, !6, i64 8, !6, i64 16, !11, i64 24}
!42 = !{!34, !11, i64 128}
!43 = !{!34, !1, i64 4}
!44 = !{!34, !1, i64 136}
!45 = !{!34, !11, i64 8}
!46 = !{!47, !6, i64 400}
!47 = !{!"rb_vm_struct", !6, i64 0, !48, i64 8, !11, i64 192, !11, i64 200, !11, i64 208, !19, i64 216, !2, i64 224, !49, i64 264, !49, i64 280, !49, i64 296, !49, i64 312, !6, i64 328, !1, i64 336, !1, i64 340, !1, i64 340, !1, i64 340, !1, i64 340, !1, i64 344, !6, i64 352, !2, i64 360, !6, i64 400, !6, i64 408, !6, i64 416, !6, i64 424, !6, i64 432, !6, i64 440, !6, i64 448, !11, i64 456, !11, i64 464, !51, i64 472, !52, i64 1064, !11, i64 1088, !11, i64 1096, !1, i64 1104, !1, i64 1108, !49, i64 1112, !2, i64 1128, !6, i64 1168, !6, i64 1176, !6, i64 1184, !6, i64 1192, !6, i64 1200, !1, i64 1208, !6, i64 1216, !11, i64 1224, !11, i64 1232, !11, i64 1240, !11, i64 1248, !53, i64 1256, !2, i64 1288}
!48 = !{!"rb_global_vm_lock_struct", !11, i64 0, !2, i64 8, !49, i64 48, !11, i64 64, !1, i64 72, !2, i64 80, !2, i64 128, !1, i64 176, !1, i64 180}
!49 = !{!"list_head", !50, i64 0}
!50 = !{!"list_node", !11, i64 0, !11, i64 8}
!51 = !{!"", !2, i64 0, !2, i64 520}
!52 = !{!"rb_hook_list_struct", !11, i64 0, !1, i64 8, !1, i64 12, !1, i64 16}
!53 = !{!"", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24}
!54 = !{!"branch_weights", i32 1, i32 2000}
