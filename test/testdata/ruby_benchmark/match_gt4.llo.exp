; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.7 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.16 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_data*, %struct.anon.15, i32, i32, i32, i32, i32, i8, i64 }
%struct.anon = type { %struct.anon.0, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.0 = type { i16, [2 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.iseq_insn_info_entry*, i32*, i32, %struct.succ_index_table* }
%struct.iseq_insn_info_entry = type opaque
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, i64 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.rb_scope_visi_struct }
%struct.rb_scope_visi_struct = type { i8, [3 x i8] }
%struct.rb_call_data = type { %struct.rb_call_cache, %struct.rb_call_info }
%struct.rb_call_cache = type { i64, [3 x i64], %struct.rb_callable_method_entry_struct*, i64, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_data*)*, %union.anon.14 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon.13, i64, i64 }
%union.anon.13 = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64, i32, i64*, i64 (...)*)*, i32 }
%struct.rb_calling_info = type { i64, i64, i32, i32 }
%union.anon.14 = type { i32 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.anon.15 = type { i64, i64, i64, i64* }
%union.anon.16 = type { %struct.anon.17 }
%struct.anon.17 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [5 x i8*], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_fiber_struct = type opaque
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, i64, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %union.pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.10, i32, i64, %struct.rb_fiber_struct*, [5 x i8*], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %union.pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.5, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %union.pthread_mutex_t, i64, i64, i64, i64, i64, i32, %struct.st_table*, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.rb_builtin_function*, i32, %struct.anon.6, [29 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %union.pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%struct.anon.5 = type { [65 x i64] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.rb_builtin_function = type opaque
%struct.anon.6 = type { i64, i64, i64, i64 }
%struct.native_thread_data_struct = type { %struct.list_head, %union.anon.9 }
%union.anon.9 = type { %union.pthread_cond_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.10 = type { %struct.anon.11 }
%struct.anon.11 = type { i64, i64, i32 }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (i64, i64)*, i64 (i64)* }
%struct.st_table_entry = type opaque
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (i64)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.7 = type { i64*, i64*, i64, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.FunctionInlineCache = type { %struct.rb_kwarg_call_data }
%struct.rb_kwarg_call_data = type { %struct.rb_call_cache, %struct.rb_call_info_with_kwarg }
%struct.rb_call_info_with_kwarg = type { %struct.rb_call_info, %struct.rb_call_info_kw_arg* }
%struct.rb_call_info_kw_arg = type { i32, [1 x i64] }
%struct.rb_captured_block = type { i64, i64*, %union.anon.19 }
%union.anon.19 = type { %struct.rb_iseq_struct* }
%struct.iseq_inline_iv_cache_entry = type { i64, i64 }
%struct.sorbet_inlineIntrinsicEnv = type { i64, i64, i32, i64*, i64 }

@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@sorbet_rb_int_dotimes_withBlock.rb_funcallv_data = internal global %struct.rb_call_data zeroinitializer, align 8
@sorbet_rb_int_dotimes_withBlock.rb_funcallv_data.3 = internal global %struct.rb_call_data zeroinitializer, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.8 = private unnamed_addr constant [95 x i8] c"sorbet_getBuildSCMRevision: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@.str.9 = private unnamed_addr constant [93 x i8] c"sorbet_getIsReleaseBuild: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@"stackFramePrecomputed_func_<root>.<static-init>$152" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"rubyStrFrozen_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"rubyStrFrozen_test/testdata/ruby_benchmark/match_gt4.rb" = internal unnamed_addr global i64 0, align 8
@"str_test/testdata/ruby_benchmark/match_gt4.rb" = private unnamed_addr constant [42 x i8] c"test/testdata/ruby_benchmark/match_gt4.rb\00", align 1
@"stackFramePrecomputed_func_<root>.<static-init>$152$block_1" = internal unnamed_addr global %struct.rb_iseq_struct* null, align 8
@"rubyIdPrecomputed_block for" = internal unnamed_addr global i64 0, align 8
@"str_block for" = private unnamed_addr constant [10 x i8] c"block for\00", align 1
@rubyIdPrecomputed_times = internal unnamed_addr global i64 0, align 8
@str_times = private unnamed_addr constant [6 x i8] c"times\00", align 1
@ic_times = internal global %struct.FunctionInlineCache zeroinitializer
@"str_(.)(.)(\5Cd+)(\5Cd)" = private unnamed_addr constant [16 x i8] c"(.)(.)(\5Cd+)(\5Cd)\00", align 1
@"rubyRegexpFrozen_(.)(.)(\5Cd+)(\5Cd)" = internal unnamed_addr global i64 0, align 8
@ic_new = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_new = internal unnamed_addr global i64 0, align 8
@str_new = private unnamed_addr constant [4 x i8] c"new\00", align 1
@rubyStrFrozen_THX1138. = internal unnamed_addr global i64 0, align 8
@str_THX1138. = private unnamed_addr constant [9 x i8] c"THX1138.\00", align 1
@ic_match = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_match = internal unnamed_addr global i64 0, align 8
@str_match = private unnamed_addr constant [6 x i8] c"match\00", align 1

; Function Attrs: noreturn
declare void @rb_error_arity(i32, i32, i32) local_unnamed_addr #0

declare %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64, i64, i64, i64, %struct.rb_iseq_struct*, i32, i32, i32, i64*, i32, i32) local_unnamed_addr #1

declare i64 @sorbet_readRealpath() local_unnamed_addr #1

declare void @sorbet_pushBlockFrame(%struct.rb_captured_block*) local_unnamed_addr #1

declare void @sorbet_popRubyStack() local_unnamed_addr #1

declare void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache*, i64, i32, i32, i32, i64*) local_unnamed_addr #1

declare i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache*, i64) local_unnamed_addr #1

declare void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_iseq_struct*) local_unnamed_addr #1

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #1

declare void @rb_ary_detransient(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i64 @rb_funcallv_with_cc(%struct.rb_call_data*, i64, i64, i32, i64*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i64 @rb_fstring_new(i8*, i64) local_unnamed_addr #1

declare void @rb_gc_register_mark_object(i64) local_unnamed_addr #1

declare i64 @rb_reg_new(i8*, i64, i32) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #0

declare i64 @rb_iterate(i64 (i64)*, i64, i64 (i64, i64, i32, i64*, i64)*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define weak i32 @sorbet_getIsReleaseBuild() local_unnamed_addr #3 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.9, i64 0, i64 0)) #7
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @sorbet_getBuildSCMRevision() local_unnamed_addr #3 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.8, i64 0, i64 0)) #7
  unreachable
}

; Function Attrs: ssp
define internal i64 @"func_<root>.<static-init>$152$block_1"(i64 %firstYieldArgRaw, i64 %localsOffset, i32 %argc, i64* nocapture readonly %argArray, i64 %blockArg) #4 !dbg !8 {
functionEntryInitializers:
  %"stackFrame_func_<root>.<static-init>$152$block_122" = load i64, i64* bitcast (%struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152$block_1" to i64*), align 8
  %0 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !13
  %1 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %0, i64 0, i32 2
  %2 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %1, align 8, !tbaa !15
  %3 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 2
  %4 = bitcast %struct.rb_iseq_struct** %3 to i64*
  store i64 %"stackFrame_func_<root>.<static-init>$152$block_122", i64* %4, align 8, !tbaa !19
  %5 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 4
  %6 = load i64*, i64** %5, align 8, !tbaa !21
  %7 = load i64, i64* %6, align 8, !tbaa !4
  %8 = and i64 %7, -161
  store i64 %8, i64* %6, align 8, !tbaa !4
  %9 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %2, i64 0, i32 0
  %10 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %3, align 8, !tbaa !19
  %11 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %10, i64 0, i32 2
  %12 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %11, align 8, !tbaa !22
  %13 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %12, i64 0, i32 2
  %14 = load i64*, i64** %13, align 8, !tbaa !24
  %15 = getelementptr inbounds i64, i64* %14, i64 4
  store i64* %15, i64** %9, align 8, !tbaa !13
  %"rubyRegexp_(.)(.)(\5Cd+)(\5Cd)" = load i64, i64* @"rubyRegexpFrozen_(.)(.)(\5Cd+)(\5Cd)", align 8, !dbg !33
  %arrayExpansionSizeGuard = icmp eq i32 %argc, 1, !dbg !34
  br i1 %arrayExpansionSizeGuard, label %argArrayExpandArrayTest, label %afterSend, !dbg !34

argArrayExpandArrayTest:                          ; preds = %functionEntryInitializers
  %arg1_maybeExpandToFullArgs = load i64, i64* %argArray, align 8, !dbg !34
  %16 = and i64 %arg1_maybeExpandToFullArgs, 7, !dbg !34
  %17 = icmp ne i64 %16, 0, !dbg !34
  %18 = and i64 %arg1_maybeExpandToFullArgs, -9, !dbg !34
  %19 = icmp eq i64 %18, 0, !dbg !34
  %20 = or i1 %17, %19, !dbg !34
  br i1 %20, label %afterSend, label %sorbet_isa_Array.exit, !dbg !34

sorbet_isa_Array.exit:                            ; preds = %argArrayExpandArrayTest
  %21 = inttoptr i64 %arg1_maybeExpandToFullArgs to %struct.iseq_inline_iv_cache_entry*, !dbg !34
  %22 = getelementptr inbounds %struct.iseq_inline_iv_cache_entry, %struct.iseq_inline_iv_cache_entry* %21, i64 0, i32 0, !dbg !34
  %23 = load i64, i64* %22, align 8, !dbg !34, !tbaa !35
  %24 = and i64 %23, 33554463, !dbg !34
  %25 = icmp eq i64 %24, 33554439, !dbg !34
  br i1 %25, label %26, label %afterSend, !dbg !34

26:                                               ; preds = %sorbet_isa_Array.exit
  tail call void @rb_ary_detransient(i64 %arg1_maybeExpandToFullArgs) #8, !dbg !34
  br label %afterSend, !dbg !34

afterSend:                                        ; preds = %sorbet_isa_Array.exit, %functionEntryInitializers, %26, %argArrayExpandArrayTest
  store i64* %15, i64** %9, align 8, !tbaa !13
  %rubyStr_THX1138. = load i64, i64* @rubyStrFrozen_THX1138., align 8, !dbg !37
  %27 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !33, !tbaa !13
  %28 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %27, i64 0, i32 2, !dbg !33
  %29 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %28, align 8, !dbg !33, !tbaa !15
  %30 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %29, i64 0, i32 1, !dbg !33
  %31 = load i64*, i64** %30, align 8, !dbg !33, !tbaa !38
  %32 = getelementptr inbounds i64, i64* %31, i64 1, !dbg !33
  store i64 %"rubyRegexp_(.)(.)(\5Cd+)(\5Cd)", i64* %31, align 8, !dbg !33, !tbaa !4
  %33 = getelementptr inbounds i64, i64* %31, i64 2, !dbg !33
  store i64* %33, i64** %30, align 8, !dbg !33, !tbaa !38
  store i64 %rubyStr_THX1138., i64* %32, align 8, !dbg !33, !tbaa !4
  %send17 = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* nonnull @ic_match, i64 0), !dbg !33
  ret i64 %send17, !dbg !34
}

; Function Attrs: nounwind ssp
define internal i64 @forward_sorbet_rb_int_dotimes(i64) #5 {
entry:
  %1 = alloca [1 x i64], align 8
  %2 = alloca [1 x i64], align 8
  %3 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !39, !tbaa !13
  %4 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %3, i64 0, i32 17, !dbg !39
  %5 = load i64, i64* %4, align 8, !dbg !39, !tbaa !40
  store i64 0, i64* %4, align 8, !dbg !39, !tbaa !40
  %6 = inttoptr i64 %0 to %struct.sorbet_inlineIntrinsicEnv*, !dbg !39
  %7 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %6, i64 0, i32 0, !dbg !39
  %8 = load i64, i64* %7, align 8, !dbg !39, !tbaa !41
  %9 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %6, i64 0, i32 2, !dbg !39
  %10 = load i32, i32* %9, align 8, !dbg !39, !tbaa !43
  %11 = icmp eq i32 %10, 0, !dbg !39
  br i1 %11, label %rb_check_arity.1.exit, label %12, !dbg !39

12:                                               ; preds = %entry
  tail call void @rb_error_arity(i32 %10, i32 0, i32 0) #7, !dbg !39
  unreachable, !dbg !39

rb_check_arity.1.exit:                            ; preds = %entry
  %13 = and i64 %5, -4, !dbg !39
  %14 = inttoptr i64 %13 to %struct.rb_captured_block*, !dbg !39
  tail call void @sorbet_pushBlockFrame(%struct.rb_captured_block* %14) #8, !dbg !39
  %15 = and i64 %8, 1, !dbg !39
  %16 = icmp eq i64 %15, 0, !dbg !39
  br i1 %16, label %17, label %26, !dbg !39, !prof !44

17:                                               ; preds = %rb_check_arity.1.exit
  %18 = bitcast [1 x i64]* %1 to i8*, !dbg !39
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #8, !dbg !39
  %19 = getelementptr inbounds [1 x i64], [1 x i64]* %1, i64 0, i64 0, !dbg !39
  store i64 %8, i64* %19, align 8, !dbg !39, !tbaa !4
  %20 = call i64 @rb_funcallv_with_cc(%struct.rb_call_data* nonnull @sorbet_rb_int_dotimes_withBlock.rb_funcallv_data, i64 1, i64 60, i32 1, i64* nonnull %19) #8, !dbg !39
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #8, !dbg !39
  %21 = and i64 %20, -9, !dbg !39
  %22 = icmp eq i64 %21, 0, !dbg !39
  br i1 %22, label %sorbet_rb_int_dotimes_withBlock.exit, label %23, !dbg !39

23:                                               ; preds = %17
  %24 = bitcast [1 x i64]* %2 to i8*, !dbg !39
  %25 = getelementptr inbounds [1 x i64], [1 x i64]* %2, i64 0, i64 0, !dbg !39
  br label %"func_<root>.<static-init>$152$block_1.exit", !dbg !39

26:                                               ; preds = %rb_check_arity.1.exit
  %27 = ashr i64 %8, 1, !dbg !39
  %28 = icmp sgt i64 %8, 1, !dbg !39
  br i1 %28, label %"func_<root>.<static-init>$152$block_1.exit7", label %sorbet_rb_int_dotimes_withBlock.exit, !dbg !39

"func_<root>.<static-init>$152$block_1.exit7":    ; preds = %26, %"func_<root>.<static-init>$152$block_1.exit7"
  %29 = phi i64 [ %53, %"func_<root>.<static-init>$152$block_1.exit7" ], [ 0, %26 ], !dbg !39
  %"stackFrame_func_<root>.<static-init>$152$block_122.i1" = load i64, i64* bitcast (%struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152$block_1" to i64*), align 8
  %30 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !13
  %31 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %30, i64 0, i32 2
  %32 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %31, align 8, !tbaa !15
  %33 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %32, i64 0, i32 2
  %34 = bitcast %struct.rb_iseq_struct** %33 to i64*
  store i64 %"stackFrame_func_<root>.<static-init>$152$block_122.i1", i64* %34, align 8, !tbaa !19
  %35 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %32, i64 0, i32 4
  %36 = load i64*, i64** %35, align 8, !tbaa !21
  %37 = load i64, i64* %36, align 8, !tbaa !4
  %38 = and i64 %37, -161
  store i64 %38, i64* %36, align 8, !tbaa !4
  %39 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %32, i64 0, i32 0
  %40 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %33, align 8, !tbaa !19
  %41 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %40, i64 0, i32 2
  %42 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %41, align 8, !tbaa !22
  %43 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %42, i64 0, i32 2
  %44 = load i64*, i64** %43, align 8, !tbaa !24
  %45 = getelementptr inbounds i64, i64* %44, i64 4
  store i64* %45, i64** %39, align 8, !tbaa !13
  %"rubyRegexp_(.)(.)(\5Cd+)(\5Cd).i2" = load i64, i64* @"rubyRegexpFrozen_(.)(.)(\5Cd+)(\5Cd)", align 8, !dbg !45
  %rubyStr_THX1138..i5 = load i64, i64* @rubyStrFrozen_THX1138., align 8, !dbg !47
  %46 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !45, !tbaa !13
  %47 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %46, i64 0, i32 2, !dbg !45
  %48 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %47, align 8, !dbg !45, !tbaa !15
  %49 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %48, i64 0, i32 1, !dbg !45
  %50 = load i64*, i64** %49, align 8, !dbg !45, !tbaa !38
  %51 = getelementptr inbounds i64, i64* %50, i64 1, !dbg !45
  store i64 %"rubyRegexp_(.)(.)(\5Cd+)(\5Cd).i2", i64* %50, align 8, !dbg !45, !tbaa !4
  %52 = getelementptr inbounds i64, i64* %50, i64 2, !dbg !45
  store i64* %52, i64** %49, align 8, !dbg !45, !tbaa !38
  store i64 %rubyStr_THX1138..i5, i64* %51, align 8, !dbg !45, !tbaa !4
  %send17.i6 = tail call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* nonnull @ic_match, i64 0) #8, !dbg !45
  %53 = add nuw nsw i64 %29, 1, !dbg !39
  %54 = icmp slt i64 %53, %27, !dbg !39
  br i1 %54, label %"func_<root>.<static-init>$152$block_1.exit7", label %sorbet_rb_int_dotimes_withBlock.exit, !dbg !39

"func_<root>.<static-init>$152$block_1.exit":     ; preds = %23, %"func_<root>.<static-init>$152$block_1.exit"
  %55 = phi i64 [ 1, %23 ], [ %79, %"func_<root>.<static-init>$152$block_1.exit" ], !dbg !39
  %"stackFrame_func_<root>.<static-init>$152$block_122.i" = load i64, i64* bitcast (%struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152$block_1" to i64*), align 8
  %56 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %56, i64 0, i32 2
  %58 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %57, align 8, !tbaa !15
  %59 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %58, i64 0, i32 2
  %60 = bitcast %struct.rb_iseq_struct** %59 to i64*
  store i64 %"stackFrame_func_<root>.<static-init>$152$block_122.i", i64* %60, align 8, !tbaa !19
  %61 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %58, i64 0, i32 4
  %62 = load i64*, i64** %61, align 8, !tbaa !21
  %63 = load i64, i64* %62, align 8, !tbaa !4
  %64 = and i64 %63, -161
  store i64 %64, i64* %62, align 8, !tbaa !4
  %65 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %58, i64 0, i32 0
  %66 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %59, align 8, !tbaa !19
  %67 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %66, i64 0, i32 2
  %68 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %67, align 8, !tbaa !22
  %69 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %68, i64 0, i32 2
  %70 = load i64*, i64** %69, align 8, !tbaa !24
  %71 = getelementptr inbounds i64, i64* %70, i64 4
  store i64* %71, i64** %65, align 8, !tbaa !13
  %"rubyRegexp_(.)(.)(\5Cd+)(\5Cd).i" = load i64, i64* @"rubyRegexpFrozen_(.)(.)(\5Cd+)(\5Cd)", align 8, !dbg !48
  %rubyStr_THX1138..i = load i64, i64* @rubyStrFrozen_THX1138., align 8, !dbg !50
  %72 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !48, !tbaa !13
  %73 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %72, i64 0, i32 2, !dbg !48
  %74 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %73, align 8, !dbg !48, !tbaa !15
  %75 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %74, i64 0, i32 1, !dbg !48
  %76 = load i64*, i64** %75, align 8, !dbg !48, !tbaa !38
  %77 = getelementptr inbounds i64, i64* %76, i64 1, !dbg !48
  store i64 %"rubyRegexp_(.)(.)(\5Cd+)(\5Cd).i", i64* %76, align 8, !dbg !48, !tbaa !4
  %78 = getelementptr inbounds i64, i64* %76, i64 2, !dbg !48
  store i64* %78, i64** %75, align 8, !dbg !48, !tbaa !38
  store i64 %rubyStr_THX1138..i, i64* %77, align 8, !dbg !48, !tbaa !4
  %send17.i = call i64 @sorbet_callFuncWithCache(%struct.FunctionInlineCache* nonnull @ic_match, i64 0) #8, !dbg !48
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #8, !dbg !39
  store i64 3, i64* %25, align 8, !dbg !39
  %79 = call i64 @rb_funcallv_with_cc(%struct.rb_call_data* nonnull @sorbet_rb_int_dotimes_withBlock.rb_funcallv_data.3, i64 %55, i64 43, i32 1, i64* nonnull %25) #8, !dbg !39
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #8, !dbg !39
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #8, !dbg !39
  store i64 %8, i64* %19, align 8, !dbg !39, !tbaa !4
  %80 = call i64 @rb_funcallv_with_cc(%struct.rb_call_data* nonnull @sorbet_rb_int_dotimes_withBlock.rb_funcallv_data, i64 %79, i64 60, i32 1, i64* nonnull %19) #8, !dbg !39
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #8, !dbg !39
  %81 = and i64 %80, -9, !dbg !39
  %82 = icmp eq i64 %81, 0, !dbg !39
  br i1 %82, label %sorbet_rb_int_dotimes_withBlock.exit, label %"func_<root>.<static-init>$152$block_1.exit", !dbg !39

sorbet_rb_int_dotimes_withBlock.exit:             ; preds = %"func_<root>.<static-init>$152$block_1.exit7", %"func_<root>.<static-init>$152$block_1.exit", %17, %26
  call void @sorbet_popRubyStack() #8, !dbg !39
  ret i64 %8, !dbg !39
}

; Function Attrs: sspreq
define void @Init_match_gt4() local_unnamed_addr #6 {
entry:
  %locals1.i.i = alloca [0 x i64], align 8
  %0 = alloca %struct.sorbet_inlineIntrinsicEnv, align 8
  %realpath = tail call i64 @sorbet_readRealpath()
  %1 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #8
  store i64 %1, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %2 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str_block for", i64 0, i64 0), i64 9) #8
  store i64 %2, i64* @"rubyIdPrecomputed_block for", align 8
  %3 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_times, i64 0, i64 0), i64 5) #8
  store i64 %3, i64* @rubyIdPrecomputed_times, align 8
  %4 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_new, i64 0, i64 0), i64 3) #8
  store i64 %4, i64* @rubyIdPrecomputed_new, align 8
  %5 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_match, i64 0, i64 0), i64 5) #8
  store i64 %5, i64* @rubyIdPrecomputed_match, align 8
  %6 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #8
  tail call void @rb_gc_register_mark_object(i64 %6) #8
  store i64 %6, i64* @"rubyStrFrozen_<top (required)>", align 8
  %7 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"str_test/testdata/ruby_benchmark/match_gt4.rb", i64 0, i64 0), i64 41) #8
  tail call void @rb_gc_register_mark_object(i64 %7) #8
  store i64 %7, i64* @"rubyStrFrozen_test/testdata/ruby_benchmark/match_gt4.rb", align 8
  %8 = bitcast [0 x i64]* %locals1.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 0, i8* nonnull %8)
  %"rubyId_<top (required)>.i.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %locals1.sub.i.i = getelementptr inbounds [0 x i64], [0 x i64]* %locals1.i.i, i64 0, i64 0
  %9 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i.i", i64 %"rubyId_<top (required)>.i.i", i64 %7, i64 %realpath, %struct.rb_iseq_struct* null, i32 1, i32 1, i32 4, i64* nonnull %locals1.sub.i.i, i32 0, i32 3)
  store %struct.rb_iseq_struct* %9, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  call void @llvm.lifetime.end.p0i8(i64 0, i8* nonnull %8)
  %10 = call i64 @rb_fstring_new(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str_block for", i64 0, i64 0), i64 9) #8
  call void @rb_gc_register_mark_object(i64 %10) #8
  %"stackFrame_func_<root>.<static-init>$152.i.i" = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %"rubyId_block for.i.i" = load i64, i64* @"rubyIdPrecomputed_block for", align 8
  %"rubyStr_test/testdata/ruby_benchmark/match_gt4.rb.i3.i" = load i64, i64* @"rubyStrFrozen_test/testdata/ruby_benchmark/match_gt4.rb", align 8
  %11 = call %struct.rb_iseq_struct* @sorbet_allocateRubyStackFrame(i64 %10, i64 %"rubyId_block for.i.i", i64 %"rubyStr_test/testdata/ruby_benchmark/match_gt4.rb.i3.i", i64 %realpath, %struct.rb_iseq_struct* %"stackFrame_func_<root>.<static-init>$152.i.i", i32 2, i32 1, i32 4, i64* null, i32 0, i32 3)
  store %struct.rb_iseq_struct* %11, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152$block_1", align 8
  %rubyId_times.i = load i64, i64* @rubyIdPrecomputed_times, align 8, !dbg !39
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @ic_times, i64 %rubyId_times.i, i32 16, i32 0, i32 0, i64* null), !dbg !39
  %12 = call i64 @rb_fstring_new(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"str_(.)(.)(\5Cd+)(\5Cd)", i64 0, i64 0), i64 15) #8
  call void @rb_gc_register_mark_object(i64 %12) #8
  %13 = call i64 @rb_reg_new(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"str_(.)(.)(\5Cd+)(\5Cd)", i64 0, i64 0), i64 15, i32 0) #8
  call void @rb_gc_register_mark_object(i64 %13) #8
  store i64 %13, i64* @"rubyRegexpFrozen_(.)(.)(\5Cd+)(\5Cd)", align 8
  %rubyId_new.i = load i64, i64* @rubyIdPrecomputed_new, align 8, !dbg !33
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @ic_new, i64 %rubyId_new.i, i32 16, i32 2, i32 0, i64* null), !dbg !33
  %14 = call i64 @rb_fstring_new(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str_THX1138., i64 0, i64 0), i64 8) #8
  call void @rb_gc_register_mark_object(i64 %14) #8
  store i64 %14, i64* @rubyStrFrozen_THX1138., align 8
  %rubyId_match.i = load i64, i64* @rubyIdPrecomputed_match, align 8, !dbg !33
  call void @sorbet_setupFunctionInlineCache(%struct.FunctionInlineCache* nonnull @ic_match, i64 %rubyId_match.i, i32 16, i32 1, i32 0, i64* null), !dbg !33
  %"stackFrame_func_<root>.<static-init>$152.i" = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** @"stackFramePrecomputed_func_<root>.<static-init>$152", align 8
  %15 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !13
  %16 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %15, i64 0, i32 2
  %17 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %16, align 8, !tbaa !15
  %18 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %17, i64 0, i32 2
  store %struct.rb_iseq_struct* %"stackFrame_func_<root>.<static-init>$152.i", %struct.rb_iseq_struct** %18, align 8, !tbaa !19
  %19 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %17, i64 0, i32 4
  %20 = load i64*, i64** %19, align 8, !tbaa !21
  %21 = load i64, i64* %20, align 8, !tbaa !4
  %22 = and i64 %21, -161
  store i64 %22, i64* %20, align 8, !tbaa !4
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %15, %struct.rb_control_frame_struct* nonnull %17, %struct.rb_iseq_struct* %"stackFrame_func_<root>.<static-init>$152.i") #8
  %23 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %17, i64 0, i32 0
  %24 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %18, align 8, !tbaa !19
  %25 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %24, i64 0, i32 2
  %26 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %25, align 8, !tbaa !22
  %27 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %26, i64 0, i32 2
  %28 = load i64*, i64** %27, align 8, !tbaa !24
  %29 = getelementptr inbounds i64, i64* %28, i64 4
  store i64* %29, i64** %23, align 8, !dbg !51, !tbaa !13
  %rubyId_times.i1 = load i64, i64* @rubyIdPrecomputed_times, align 8, !dbg !39
  %30 = bitcast %struct.sorbet_inlineIntrinsicEnv* %0 to i8*, !dbg !39
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %30) #8, !dbg !39
  %31 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %0, i64 0, i32 0, !dbg !39
  store i64 2000001, i64* %31, align 8, !dbg !39, !tbaa !41
  %32 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %0, i64 0, i32 1, !dbg !39
  store i64 %rubyId_times.i1, i64* %32, align 8, !dbg !39, !tbaa !52
  %33 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %0, i64 0, i32 2, !dbg !39
  store i32 0, i32* %33, align 8, !dbg !39, !tbaa !43
  %34 = getelementptr inbounds %struct.sorbet_inlineIntrinsicEnv, %struct.sorbet_inlineIntrinsicEnv* %0, i64 0, i32 3, !dbg !39
  %35 = ptrtoint %struct.sorbet_inlineIntrinsicEnv* %0 to i64, !dbg !39
  %36 = bitcast i64** %34 to i8*, !dbg !39
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 0, i64 16, i1 false) #8, !dbg !39
  %37 = call i64 @rb_iterate(i64 (i64)* nonnull @forward_sorbet_rb_int_dotimes, i64 %35, i64 (i64, i64, i32, i64*, i64)* nonnull @"func_<root>.<static-init>$152$block_1", i64 0) #8, !dbg !39
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %30) #8, !dbg !39
  store i64* %29, i64** %23, align 8, !tbaa !13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { noreturn }
attributes #1 = { "addedToSilenceEmptyAttrsError" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable }
attributes #4 = { ssp }
attributes #5 = { nounwind ssp }
attributes #6 = { sspreq }
attributes #7 = { noreturn nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "Sorbet LLVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "test/testdata/ruby_benchmark/match_gt4.rb", directory: ".")
!3 = !{}
!4 = !{!5, !5, i64 0}
!5 = !{!"long", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.<static-init>$152$block_1", scope: !9, file: !2, line: 4, type: !10, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!9 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.<static-init>$152", scope: null, file: !2, line: 4, type: !10, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!10 = !DISubroutineType(types: !11)
!11 = !{!12}
!12 = !DIBasicType(name: "VALUE", size: 64, encoding: DW_ATE_signed)
!13 = !{!14, !14, i64 0}
!14 = !{!"any pointer", !6, i64 0}
!15 = !{!16, !14, i64 16}
!16 = !{!"rb_execution_context_struct", !14, i64 0, !5, i64 8, !14, i64 16, !14, i64 24, !14, i64 32, !17, i64 40, !17, i64 44, !14, i64 48, !14, i64 56, !14, i64 64, !5, i64 72, !5, i64 80, !14, i64 88, !5, i64 96, !14, i64 104, !14, i64 112, !5, i64 120, !5, i64 128, !6, i64 136, !6, i64 137, !5, i64 144, !18, i64 152}
!17 = !{!"int", !6, i64 0}
!18 = !{!"", !14, i64 0, !14, i64 8, !5, i64 16, !6, i64 24}
!19 = !{!20, !14, i64 16}
!20 = !{!"rb_control_frame_struct", !14, i64 0, !14, i64 8, !14, i64 16, !5, i64 24, !14, i64 32, !14, i64 40, !14, i64 48}
!21 = !{!20, !14, i64 32}
!22 = !{!23, !14, i64 16}
!23 = !{!"rb_iseq_struct", !5, i64 0, !5, i64 8, !14, i64 16, !6, i64 24}
!24 = !{!25, !14, i64 8}
!25 = !{!"rb_iseq_constant_body", !6, i64 0, !17, i64 4, !14, i64 8, !26, i64 16, !28, i64 64, !31, i64 120, !14, i64 152, !14, i64 160, !14, i64 168, !14, i64 176, !14, i64 184, !14, i64 192, !32, i64 200, !17, i64 232, !17, i64 236, !17, i64 240, !17, i64 244, !17, i64 248, !6, i64 252, !5, i64 256}
!26 = !{!"", !27, i64 0, !17, i64 4, !17, i64 8, !17, i64 12, !17, i64 16, !17, i64 20, !17, i64 24, !17, i64 28, !14, i64 32, !14, i64 40}
!27 = !{!"", !17, i64 0, !17, i64 0, !17, i64 0, !17, i64 0, !17, i64 0, !17, i64 0, !17, i64 0, !17, i64 0, !17, i64 1, !17, i64 1}
!28 = !{!"rb_iseq_location_struct", !5, i64 0, !5, i64 8, !5, i64 16, !5, i64 24, !17, i64 32, !29, i64 36}
!29 = !{!"rb_code_location_struct", !30, i64 0, !30, i64 8}
!30 = !{!"rb_code_position_struct", !17, i64 0, !17, i64 4}
!31 = !{!"iseq_insn_info", !14, i64 0, !14, i64 8, !17, i64 16, !14, i64 24}
!32 = !{!"", !5, i64 0, !5, i64 8, !5, i64 16, !14, i64 24}
!33 = !DILocation(line: 4, column: 17, scope: !8)
!34 = !DILocation(line: 4, column: 1, scope: !8)
!35 = !{!36, !5, i64 0}
!36 = !{!"RBasic", !5, i64 0, !5, i64 8}
!37 = !DILocation(line: 4, column: 41, scope: !8)
!38 = !{!20, !14, i64 8}
!39 = !DILocation(line: 4, column: 1, scope: !9)
!40 = !{!16, !5, i64 128}
!41 = !{!42, !5, i64 0}
!42 = !{!"sorbet_inlineIntrinsicEnv", !5, i64 0, !5, i64 8, !17, i64 16, !14, i64 24, !5, i64 32}
!43 = !{!42, !17, i64 16}
!44 = !{!"branch_weights", i32 1, i32 2000}
!45 = !DILocation(line: 4, column: 17, scope: !8, inlinedAt: !46)
!46 = distinct !DILocation(line: 4, column: 1, scope: !9)
!47 = !DILocation(line: 4, column: 41, scope: !8, inlinedAt: !46)
!48 = !DILocation(line: 4, column: 17, scope: !8, inlinedAt: !49)
!49 = distinct !DILocation(line: 4, column: 1, scope: !9)
!50 = !DILocation(line: 4, column: 41, scope: !8, inlinedAt: !49)
!51 = !DILocation(line: 0, scope: !9)
!52 = !{!42, !5, i64 8}
