# frozen_string_literal: true
# typed: true
# compiled: true

# ::Boolean copied from extn/boolean.rb
module ::Boolean
  extend T::Helpers
  sealed!
end

class ::FalseClass
  include ::Boolean
end

class ::TrueClass
  include ::Boolean
end
# End code copied from extn/boolean.rb

module Opus ; end

# Begin mockup of autogenerated proto stuff
module Opus::Guildhall
  module Autogen
    module Proto
      class MerchantMetadata
        extend T::Sig

        sig {params(auth_type: Symbol).void.checked(:never)}
        def initialize(auth_type)
          @auth_type = auth_type
        end

        sig {returns(Symbol).checked(:never)}
        attr_reader :auth_type

        module AuthType
          extend T::Sig

          UNKNOWN = T.let(0, Integer)
          MANAGE = T.let(1, Integer)
          GOOGLE_PAY = T.let(2, Integer)
          STRIPE_ACCOUNT = T.let(3, Integer)
          EPHEMERAL_KEY = T.let(4, Integer)
          MERCHANT_KEY = T.let(5, Integer)
          LIGHT = T.let(6, Integer)

          sig {params(value: Symbol).returns(T.nilable(Integer)).checked(:never)}
          def self.resolve(value)
            case value
            when :UNKNOWN
              UNKNOWN
            when :MANAGE
              MANAGE
            when :GOOGLE_PAY
              GOOGLE_PAY
            when :STRIPE_ACCOUNT
              STRIPE_ACCOUNT
            when :EPHEMERAL_KEY
              EPHEMERAL_KEY
            when :MERCHANT_KEY
              MERCHANT_KEY
            when :LIGHT
              LIGHT
            else
              nil
            end
          end
        end
      end
    end
  end
end
# End mockup of autogenerated proto stuff

module Opus::APICore ; end

# Begin code adapted from lib/api_core/state/guildhall.rb
module Opus::APICore::State
  class Guildhall
    extend T::Sig

    # Was params(env: Hash).returns(T.nilable(Opus::Guildhall::Autogen::Proto::MerchantMetadata)).checked(:tests)
    sig {params(env: T::Hash[String, Opus::Guildhall::Autogen::Proto::MerchantMetadata]).returns(T.nilable(Opus::Guildhall::Autogen::Proto::MerchantMetadata)).checked(:never)}
    def self.metadata(env)
      # Key was Private::Constants::ENV_GUILDHALL_MERCHANT, which was defined as Opus::Utils::UniqueKey.new('ENV_GUILDHALL_MERCHANT')
      env['ENV_GUILDHALL_MERCHANT']
    end
  end
end
# End code adapted from lib/api_core/state/guildhall.rb

# Begin code adapted from lib/api_core/state/type.rb
module Opus::APICore::State
  class Type
    extend T::Sig

    # Was no sig
    sig {params(env: T::Hash[String, Opus::Guildhall::Autogen::Proto::MerchantMetadata]).returns(Boolean).checked(:never)}
    private_class_method def self.dashboard_request?(env)
      if (guildhall_merchant = Guildhall.metadata(env))
        Opus::Guildhall::Autogen::Proto::MerchantMetadata::AuthType.resolve(guildhall_merchant.auth_type) == Opus::Guildhall::Autogen::Proto::MerchantMetadata::AuthType::MANAGE
      elsif env['stripe.api.plausible_session_key']
        # This code may be running before API authentication has run, so we don't yet have stripe.api.auth
        # available to us. This is a bit of a hack, since we don't know for certain that this is a dashboard
        # request, but that's acceptable. If we hit this condition, the request will either be authenticated as
        # a dashboard request, or rejected as a 401. (TBH, Guildhall doesn't do much more checking than this
        # for session-authenticated requests, so this is probably fine anyway.)
        # A confession: half the reason I'm doing this is for our test suite, because we almost never have
        # guildhall data available when running our tests.
        true
      else
        false
      end
    end
  end
end
# End code adapted from lib/api_core/state/type.rb

# Benchmark code follows.

class Opus::APICore::State::Type
  extend T::Sig

  sig{void}
  def self.do_test
    # Stuff the hash with some other junk.
    env = {}
    1000.times { |i| env["#{i}"] = Opus::Guildhall::Autogen::Proto::MerchantMetadata.new(:UNKNOWN) }

    # Populate the specific key that dashboard_request? will be looking for.
    env['ENV_GUILDHALL_MERCHANT'] = Opus::Guildhall::Autogen::Proto::MerchantMetadata.new(:MANAGE)

    i = 0

    while i < 10_000_000
      dashboard_request?(env)

      i += 1
    end

    puts i
  end
end

Opus::APICore::State::Type.do_test
