; ModuleID = 'payload'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

%struct.rb_vm_struct = type { i64, %struct.rb_global_vm_lock_struct, %struct.rb_thread_struct*, %struct.rb_thread_struct*, i8*, i64, %union.pthread_mutex_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i32, i32, i8, i32, i64, [5 x i64], i64, i64, i64, i64, i64, i64, i64, %struct.st_table*, %struct.st_table*, %struct.anon.3, %struct.rb_hook_list_struct, %struct.st_table*, %struct.rb_postponed_job_struct*, i32, i32, %struct.list_head, %union.pthread_mutex_t, i64, i64, i64, i64, i64, i32, %struct.st_table*, %struct.rb_objspace*, %struct.rb_at_exit_list*, i64*, %struct.st_table*, %struct.rb_builtin_function*, i32, %struct.anon.4, [29 x i16] }
%struct.rb_global_vm_lock_struct = type { %struct.rb_thread_struct*, %union.pthread_mutex_t, %struct.list_head, %struct.rb_thread_struct*, i32, %union.pthread_cond_t, %union.pthread_cond_t, i32, i32 }
%union.pthread_cond_t = type { %struct.anon.2 }
%struct.anon.2 = type { i32, i32, i64, i64, i64, i8*, i32, i32 }
%struct.rb_thread_struct = type { %struct.list_node, i64, %struct.rb_vm_struct*, %struct.rb_execution_context_struct*, i64, %struct.rb_calling_info*, i64, i64, i64, i8, i8, i32, %struct.native_thread_data_struct, i8*, i64, i64, i64, i64, %union.pthread_mutex_t, %struct.rb_unblock_callback, i64, %struct.rb_mutex_struct*, %struct.rb_thread_list_struct*, %union.anon.8, i32, i64, %struct.rb_fiber_struct*, [5 x i8*], i64 }
%struct.list_node = type { %struct.list_node*, %struct.list_node* }
%struct.rb_execution_context_struct = type { i64*, i64, %struct.rb_control_frame_struct*, %struct.rb_vm_tag*, %struct.rb_vm_protect_tag*, i32, i32, %struct.rb_fiber_struct*, %struct.rb_thread_struct*, %struct.st_table*, i64, i64, i64*, i64, %struct.rb_ensure_list*, %struct.rb_trace_arg_struct*, i64, i64, i8, i8, i64, %struct.anon.5 }
%struct.rb_control_frame_struct = type { i64*, i64*, %struct.rb_iseq_struct*, i64, i64*, i8*, i64* }
%struct.rb_iseq_struct = type { i64, i64, %struct.rb_iseq_constant_body*, %union.anon.13 }
%struct.rb_iseq_constant_body = type { i32, i32, i64*, %struct.anon, %struct.rb_iseq_location_struct, %struct.iseq_insn_info, i64*, %struct.iseq_catch_table*, %struct.rb_iseq_struct*, %struct.rb_iseq_struct*, %union.iseq_inline_storage_entry*, %struct.rb_call_data*, %struct.anon.12, i32, i32, i32, i32, i32, i8, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*)*, i64, %struct.rb_mjit_unit*, i64 }
%struct.anon = type { %struct.anon.0, i32, i32, i32, i32, i32, i32, i32, i64*, %struct.rb_iseq_param_keyword* }
%struct.anon.0 = type { i16, [2 x i8] }
%struct.rb_iseq_param_keyword = type { i32, i32, i32, i32, i64*, i64* }
%struct.rb_iseq_location_struct = type { i64, i64, i64, i64, i32, %struct.rb_code_location_struct }
%struct.rb_code_location_struct = type { %struct.rb_code_position_struct, %struct.rb_code_position_struct }
%struct.rb_code_position_struct = type { i32, i32 }
%struct.iseq_insn_info = type { %struct.iseq_insn_info_entry*, i32*, i32, %struct.succ_index_table* }
%struct.iseq_insn_info_entry = type opaque
%struct.succ_index_table = type opaque
%struct.iseq_catch_table = type opaque
%union.iseq_inline_storage_entry = type { %struct.iseq_inline_cache_entry }
%struct.iseq_inline_cache_entry = type { i64, %struct.rb_cref_struct*, i64 }
%struct.rb_cref_struct = type { i64, i64, i64, %struct.rb_cref_struct*, %struct.rb_scope_visi_struct }
%struct.rb_scope_visi_struct = type { i8, [3 x i8] }
%struct.rb_call_data = type { %struct.rb_call_cache, %struct.rb_call_info }
%struct.rb_call_cache = type { i64, [3 x i64], %struct.rb_callable_method_entry_struct*, i64, i64 (%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_calling_info*, %struct.rb_call_data*)*, %union.anon.11 }
%struct.rb_callable_method_entry_struct = type { i64, i64, %struct.rb_method_definition_struct*, i64, i64 }
%struct.rb_method_definition_struct = type { i64, %union.anon, i64, i64 }
%union.anon = type { %struct.rb_method_cfunc_struct }
%struct.rb_method_cfunc_struct = type { i64 (...)*, i64 (i64, i32, i64*, i64 (...)*)*, i32 }
%union.anon.11 = type { i32 }
%struct.rb_call_info = type { i64, i32, i32 }
%struct.anon.12 = type { i64, i64, i64, i64* }
%struct.rb_mjit_unit = type opaque
%union.anon.13 = type { %struct.anon.14 }
%struct.anon.14 = type { i64, i32 }
%struct.rb_vm_tag = type { i64, i64, [5 x i8*], %struct.rb_vm_tag*, i32 }
%struct.rb_vm_protect_tag = type { %struct.rb_vm_protect_tag* }
%struct.rb_ensure_list = type { %struct.rb_ensure_list*, %struct.rb_ensure_entry }
%struct.rb_ensure_entry = type { i64, i64 (i64)*, i64 }
%struct.rb_trace_arg_struct = type { i32, %struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, i64, i64, i64, i64, i64, i32, i32, i64 }
%struct.anon.5 = type { i64*, i64*, i64, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.rb_calling_info = type { i64, i64, i32, i32 }
%struct.native_thread_data_struct = type { %struct.list_head, %union.anon.7 }
%union.anon.7 = type { %union.pthread_cond_t }
%struct.rb_unblock_callback = type { void (i8*)*, i8* }
%struct.rb_mutex_struct = type opaque
%struct.rb_thread_list_struct = type { %struct.rb_thread_list_struct*, %struct.rb_thread_struct* }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i64, i64, i32 }
%struct.rb_fiber_struct = type opaque
%struct.anon.3 = type { [65 x i64] }
%struct.rb_hook_list_struct = type { %struct.rb_event_hook_struct*, i32, i32, i32 }
%struct.rb_event_hook_struct = type opaque
%struct.rb_postponed_job_struct = type opaque
%struct.list_head = type { %struct.list_node }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.rb_objspace = type opaque
%struct.rb_at_exit_list = type { void (%struct.rb_vm_struct*)*, %struct.rb_at_exit_list* }
%struct.st_table = type { i8, i8, i8, i32, %struct.st_hash_type*, i64, i64*, i64, i64, %struct.st_table_entry* }
%struct.st_hash_type = type { i32 (i64, i64)*, i64 (i64)* }
%struct.st_table_entry = type opaque
%struct.rb_builtin_function = type opaque
%struct.anon.4 = type { i64, i64, i64, i64 }
%struct.FunctionInlineCache = type { %struct.rb_callable_method_entry_struct*, i64, i64 }
%struct.RBasic = type { i64, i64 }
%struct.RHash = type { %struct.RBasic, %union.anon.19, i64, %union.anon.25 }
%union.anon.19 = type { %struct.st_table* }
%union.anon.25 = type { i64 }
%struct.RClass = type { %struct.RBasic, i64, %struct.rb_classext_struct*, i64 }
%struct.rb_classext_struct = type { %struct.st_table*, %struct.st_table*, %struct.rb_id_table*, %struct.rb_id_table*, %struct.rb_id_table*, %struct.rb_subclass_entry*, %struct.rb_subclass_entry**, %struct.rb_subclass_entry**, i64, i64, i64 (i64)*, i64 }
%struct.rb_id_table = type opaque
%struct.rb_subclass_entry = type { i64, %struct.rb_subclass_entry* }

@ruby_current_vm_ptr = external local_unnamed_addr global %struct.rb_vm_struct*, align 8
@ruby_vm_global_constant_state = external local_unnamed_addr global i64, align 8
@.str = private unnamed_addr constant [6 x i8] c"@%li\0B\00", align 1
@ruby_current_execution_context_ptr = external local_unnamed_addr global %struct.rb_execution_context_struct*, align 8
@rb_eRuntimeError = external local_unnamed_addr global i64, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"unimplemented super with a missing method\00", align 1
@.str.7 = private unnamed_addr constant [95 x i8] c"sorbet_getBuildSCMRevision: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@.str.8 = private unnamed_addr constant [93 x i8] c"sorbet_getIsReleaseBuild: Shared objects compiled by sorbet_llvm must be run by sorbet_ruby.\00", align 1
@"stackFramePrecomputed_func_<root>.<static-init>$153" = internal unnamed_addr global i8* null, align 8
@"rubyIdPrecomputed_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"str_<top (required)>" = private unnamed_addr constant [17 x i8] c"<top (required)>\00", align 1
@"rubyStrFrozen_<top (required)>" = internal unnamed_addr global i64 0, align 8
@"rubyStrFrozen_test/testdata/ruby_benchmark/stripe/prop_const_getter.rb" = internal unnamed_addr global i64 0, align 8
@"str_test/testdata/ruby_benchmark/stripe/prop_const_getter.rb" = private unnamed_addr constant [57 x i8] c"test/testdata/ruby_benchmark/stripe/prop_const_getter.rb\00", align 1
@str_MyStruct = private unnamed_addr constant [9 x i8] c"MyStruct\00", align 1
@"str_T::Struct" = private unnamed_addr constant [10 x i8] c"T::Struct\00", align 1
@rubyIdPrecomputed_foo = internal unnamed_addr global i64 0, align 8
@str_foo = private unnamed_addr constant [4 x i8] c"foo\00", align 1
@rubyIdPrecomputed_new = internal unnamed_addr global i64 0, align 8
@str_new = private unnamed_addr constant [4 x i8] c"new\00", align 1
@ic_callFunc_new = internal global %struct.FunctionInlineCache zeroinitializer
@"rubyIdPrecomputed_<" = internal unnamed_addr global i64 0, align 8
@"str_<" = private unnamed_addr constant [2 x i8] c"<\00", align 1
@"ic_callFunc_<" = internal global %struct.FunctionInlineCache zeroinitializer
@ic_callFunc_foo = internal global %struct.FunctionInlineCache zeroinitializer
@"rubyIdPrecomputed_+" = internal unnamed_addr global i64 0, align 8
@"str_+" = private unnamed_addr constant [2 x i8] c"+\00", align 1
@"ic_callFunc_+" = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_puts = internal unnamed_addr global i64 0, align 8
@str_puts = private unnamed_addr constant [5 x i8] c"puts\00", align 1
@ic_callFunc_puts = internal global %struct.FunctionInlineCache zeroinitializer
@ic_callFunc_foo.1 = internal global %struct.FunctionInlineCache zeroinitializer
@ic_callFunc_puts.2 = internal global %struct.FunctionInlineCache zeroinitializer
@"stackFramePrecomputed_func_MyStruct#initialize" = internal unnamed_addr global i8* null, align 8
@rubyIdPrecomputed_initialize = internal unnamed_addr global i64 0, align 8
@str_initialize = private unnamed_addr constant [11 x i8] c"initialize\00", align 1
@str_sig = private unnamed_addr constant [4 x i8] c"sig\00", align 1
@str_Integer = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@"rubyIdPrecomputed_@foo" = internal unnamed_addr global i64 0, align 8
@"str_@foo" = private unnamed_addr constant [5 x i8] c"@foo\00", align 1
@"str_T::Private::Types::Void::VOID" = private unnamed_addr constant [30 x i8] c"T::Private::Types::Void::VOID\00", align 1
@"stackFramePrecomputed_func_MyStruct#foo" = internal unnamed_addr global i8* null, align 8
@"str_Return value" = private unnamed_addr constant [13 x i8] c"Return value\00", align 1
@"stackFramePrecomputed_func_MyStruct.<static-init>" = internal unnamed_addr global i8* null, align 8
@"<static-init-locals-storage>.3" = internal global [2 x i64] zeroinitializer
@"rubyIdPrecomputed_<self>" = internal unnamed_addr global i64 0, align 8
@"str_<self>" = private unnamed_addr constant [7 x i8] c"<self>\00", align 1
@"rubyIdPrecomputed_<block-call>" = internal unnamed_addr global i64 0, align 8
@"str_<block-call>" = private unnamed_addr constant [13 x i8] c"<block-call>\00", align 1
@"stackFramePrecomputed_func_MyStruct.<static-init>$block_1" = internal unnamed_addr global i8* null, align 8
@"rubyIdPrecomputed_block for" = internal unnamed_addr global i64 0, align 8
@"str_block for" = private unnamed_addr constant [10 x i8] c"block for\00", align 1
@"rubyStrFrozen_block for" = internal unnamed_addr global i64 0, align 8
@"stackFramePrecomputed_func_MyStruct.<static-init>$block_2" = internal unnamed_addr global i8* null, align 8
@str_params = private unnamed_addr constant [7 x i8] c"params\00", align 1
@str_void = private unnamed_addr constant [5 x i8] c"void\00", align 1
@str_returns = private unnamed_addr constant [8 x i8] c"returns\00", align 1
@rubyIdPrecomputed_normal = internal unnamed_addr global i64 0, align 8
@str_normal = private unnamed_addr constant [7 x i8] c"normal\00", align 1
@str_keep_def = private unnamed_addr constant [9 x i8] c"keep_def\00", align 1
@rubyIdPrecomputed_without_accessors = internal unnamed_addr global i64 0, align 8
@str_without_accessors = private unnamed_addr constant [18 x i8] c"without_accessors\00", align 1
@rubyIdPrecomputed_const = internal unnamed_addr global i64 0, align 8
@str_const = private unnamed_addr constant [6 x i8] c"const\00", align 1
@ic_callFunc_const = internal global %struct.FunctionInlineCache zeroinitializer
@rubyIdPrecomputed_attr_reader = internal unnamed_addr global i64 0, align 8
@str_attr_reader = private unnamed_addr constant [12 x i8] c"attr_reader\00", align 1
@"guard_epoch_T::Struct" = linkonce local_unnamed_addr global i64 0
@"guarded_const_T::Struct" = linkonce local_unnamed_addr global i64 0
@guard_epoch_MyStruct = linkonce local_unnamed_addr global i64 0
@guarded_const_MyStruct = linkonce local_unnamed_addr global i64 0
@rb_cInteger = external local_unnamed_addr constant i64
@"guard_epoch_T::Private::Types::Void::VOID" = linkonce local_unnamed_addr global i64 0
@"guarded_const_T::Private::Types::Void::VOID" = linkonce local_unnamed_addr global i64 0

; Function Attrs: cold noreturn
declare void @sorbet_cast_failure(i64, i8*, i8*) local_unnamed_addr #0

; Function Attrs: noreturn
declare void @sorbet_raiseArity(i32, i32, i32) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @sorbet_raiseExtraKeywords(i64) local_unnamed_addr #1

declare i8* @sorbet_allocateRubyStackFrame(i64, i64, i64, i64, i8*, i32, i32, i32, i64*, i32) local_unnamed_addr #2

declare i64 @sorbet_getConstant(i8*, i64) local_unnamed_addr #2

declare i64 @sorbet_readRealpath() local_unnamed_addr #2

declare void @sorbet_vm_env_write_slowpath(i64*, i32, i64) local_unnamed_addr #2

declare i64 @sorbet_callFuncWithCache(i64, i64, i32, i64* nocapture, i32, %struct.FunctionInlineCache*) local_unnamed_addr #2

declare void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct*, %struct.rb_control_frame_struct*, %struct.rb_iseq_struct*) local_unnamed_addr #2

declare i64 @rb_define_class(i8*, i64) local_unnamed_addr #2

declare extern_weak void @rb_define_method(i64, i8*, i64 (...)*, i32) local_unnamed_addr #2

declare i64 @rb_intern(i8*) local_unnamed_addr #2

declare i64 @rb_id2str(i64) local_unnamed_addr #2

declare i64 @rb_sprintf(i8*, ...) local_unnamed_addr #2

declare i64 @rb_intern_str(i64) local_unnamed_addr #2

declare void @rb_add_method(i64, i64, i32, i8*, i32) local_unnamed_addr #2

declare i64 @rb_ivar_get(i64, i64) local_unnamed_addr #2

declare i64 @rb_ivar_set(i64, i64, i64) local_unnamed_addr #2

declare i64 @rb_intern2(i8*, i64) local_unnamed_addr #2

declare i64 @rb_id2sym(i64) local_unnamed_addr #2

declare i64 @rb_hash_new_with_size(i64) local_unnamed_addr #2

declare void @rb_hash_bulk_insert(i64, i64*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare i64 @rb_fstring_new(i8*, i64) local_unnamed_addr #2

declare void @rb_gc_register_mark_object(i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @rb_raise(i64, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #4

declare i64 @rb_int2big(i64) local_unnamed_addr #2

declare i64 @rb_hash_delete_entry(i64, i64) local_unnamed_addr #2

declare %struct.rb_callable_method_entry_struct* @rb_vm_frame_method_entry(%struct.rb_control_frame_struct*) local_unnamed_addr #2

declare %struct.rb_callable_method_entry_struct* @rb_callable_method_entry(i64, i64) local_unnamed_addr #2

declare i64 @rb_vm_call_kw(%struct.rb_execution_context_struct*, i64, i64, i32, i64*, %struct.rb_callable_method_entry_struct*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak i32 @sorbet_getIsReleaseBuild() local_unnamed_addr #5 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.8, i64 0, i64 0)) #12
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define weak i8* @sorbet_getBuildSCMRevision() local_unnamed_addr #5 {
  %1 = load i64, i64* @rb_eRuntimeError, align 8, !tbaa !4
  tail call void (i64, i8*, ...) @rb_raise(i64 %1, i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.7, i64 0, i64 0)) #12
  unreachable
}

; Function Attrs: sspreq
define void @Init_prop_const_getter() local_unnamed_addr #6 {
entry:
  %locals1.i.i = alloca [0 x i64], align 8
  %callArgs.i.i = alloca [3 x i64], align 8
  %callArgs.i = alloca [2 x i64], align 8
  %realpath = tail call i64 @sorbet_readRealpath()
  %0 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #10
  store i64 %0, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %1 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_foo, i64 0, i64 0), i64 3) #10
  store i64 %1, i64* @rubyIdPrecomputed_foo, align 8
  %2 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_new, i64 0, i64 0), i64 3) #10
  store i64 %2, i64* @rubyIdPrecomputed_new, align 8
  %3 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_<", i64 0, i64 0), i64 1) #10
  store i64 %3, i64* @"rubyIdPrecomputed_<", align 8
  %4 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"str_+", i64 0, i64 0), i64 1) #10
  store i64 %4, i64* @"rubyIdPrecomputed_+", align 8
  %5 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_puts, i64 0, i64 0), i64 4) #10
  store i64 %5, i64* @rubyIdPrecomputed_puts, align 8
  %6 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str_initialize, i64 0, i64 0), i64 10) #10
  store i64 %6, i64* @rubyIdPrecomputed_initialize, align 8
  %7 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"str_@foo", i64 0, i64 0), i64 4) #10
  store i64 %7, i64* @"rubyIdPrecomputed_@foo", align 8
  %8 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"str_<self>", i64 0, i64 0), i64 6) #10
  store i64 %8, i64* @"rubyIdPrecomputed_<self>", align 8
  %9 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"str_<block-call>", i64 0, i64 0), i64 12) #10
  store i64 %9, i64* @"rubyIdPrecomputed_<block-call>", align 8
  %10 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str_block for", i64 0, i64 0), i64 9) #10
  store i64 %10, i64* @"rubyIdPrecomputed_block for", align 8
  %11 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_sig, i64 0, i64 0), i64 3) #10
  %12 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_params, i64 0, i64 0), i64 6) #10
  %13 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str_void, i64 0, i64 0), i64 4) #10
  %14 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_returns, i64 0, i64 0), i64 7) #10
  %15 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_normal, i64 0, i64 0), i64 6) #10
  store i64 %15, i64* @rubyIdPrecomputed_normal, align 8
  %16 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str_keep_def, i64 0, i64 0), i64 8) #10
  %17 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str_without_accessors, i64 0, i64 0), i64 17) #10
  store i64 %17, i64* @rubyIdPrecomputed_without_accessors, align 8
  %18 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str_const, i64 0, i64 0), i64 5) #10
  store i64 %18, i64* @rubyIdPrecomputed_const, align 8
  %19 = tail call i64 @rb_intern2(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str_attr_reader, i64 0, i64 0), i64 11) #10
  store i64 %19, i64* @rubyIdPrecomputed_attr_reader, align 8
  %"rubyId_<self>.i" = load i64, i64* @"rubyIdPrecomputed_<self>", align 8
  store i64 %"rubyId_<self>.i", i64* getelementptr inbounds ([2 x i64], [2 x i64]* @"<static-init-locals-storage>.3", i64 0, i64 0), align 8
  %"rubyId_<block-call>.i" = load i64, i64* @"rubyIdPrecomputed_<block-call>", align 8
  store i64 %"rubyId_<block-call>.i", i64* getelementptr inbounds ([2 x i64], [2 x i64]* @"<static-init-locals-storage>.3", i64 0, i64 1), align 8
  %20 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"str_<top (required)>", i64 0, i64 0), i64 16) #10
  tail call void @rb_gc_register_mark_object(i64 %20) #10
  store i64 %20, i64* @"rubyStrFrozen_<top (required)>", align 8
  %21 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"str_test/testdata/ruby_benchmark/stripe/prop_const_getter.rb", i64 0, i64 0), i64 56) #10
  tail call void @rb_gc_register_mark_object(i64 %21) #10
  store i64 %21, i64* @"rubyStrFrozen_test/testdata/ruby_benchmark/stripe/prop_const_getter.rb", align 8
  %"rubyId_<top (required)>.i.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %22 = tail call i8* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i.i", i64 %"rubyId_<top (required)>.i.i", i64 %21, i64 %realpath, i8* null, i32 1, i32 1, i32 20, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @"<static-init-locals-storage>.3", i64 0, i64 0), i32 2)
  store i8* %22, i8** @"stackFramePrecomputed_func_<root>.<static-init>$153", align 8
  %23 = tail call i64 @rb_fstring_new(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str_initialize, i64 0, i64 0), i64 10) #10
  tail call void @rb_gc_register_mark_object(i64 %23) #10
  %24 = bitcast [0 x i64]* %locals1.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 0, i8* nonnull %24)
  %rubyId_initialize.i.i = load i64, i64* @rubyIdPrecomputed_initialize, align 8
  %"rubyStr_test/testdata/ruby_benchmark/stripe/prop_const_getter.rb.i2.i" = load i64, i64* @"rubyStrFrozen_test/testdata/ruby_benchmark/stripe/prop_const_getter.rb", align 8
  %locals1.sub.i.i = getelementptr inbounds [0 x i64], [0 x i64]* %locals1.i.i, i64 0, i64 0
  %25 = call i8* @sorbet_allocateRubyStackFrame(i64 %23, i64 %rubyId_initialize.i.i, i64 %"rubyStr_test/testdata/ruby_benchmark/stripe/prop_const_getter.rb.i2.i", i64 %realpath, i8* null, i32 1, i32 5, i32 7, i64* nonnull %locals1.sub.i.i, i32 0)
  store i8* %25, i8** @"stackFramePrecomputed_func_MyStruct#initialize", align 8
  call void @llvm.lifetime.end.p0i8(i64 0, i8* nonnull %24)
  %26 = call i64 @rb_fstring_new(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_foo, i64 0, i64 0), i64 3) #10
  call void @rb_gc_register_mark_object(i64 %26) #10
  call void @llvm.lifetime.start.p0i8(i64 0, i8* nonnull %24)
  %rubyId_foo.i.i = load i64, i64* @rubyIdPrecomputed_foo, align 8
  %"rubyStr_test/testdata/ruby_benchmark/stripe/prop_const_getter.rb.i4.i" = load i64, i64* @"rubyStrFrozen_test/testdata/ruby_benchmark/stripe/prop_const_getter.rb", align 8
  %27 = call i8* @sorbet_allocateRubyStackFrame(i64 %26, i64 %rubyId_foo.i.i, i64 %"rubyStr_test/testdata/ruby_benchmark/stripe/prop_const_getter.rb.i4.i", i64 %realpath, i8* null, i32 1, i32 6, i32 6, i64* nonnull %locals1.sub.i.i, i32 0)
  store i8* %27, i8** @"stackFramePrecomputed_func_MyStruct#foo", align 8
  call void @llvm.lifetime.end.p0i8(i64 0, i8* nonnull %24)
  %"rubyId_<top (required)>.i6.i" = load i64, i64* @"rubyIdPrecomputed_<top (required)>", align 8
  %"rubyStr_<top (required)>.i7.i" = load i64, i64* @"rubyStrFrozen_<top (required)>", align 8
  %"rubyStr_test/testdata/ruby_benchmark/stripe/prop_const_getter.rb.i8.i" = load i64, i64* @"rubyStrFrozen_test/testdata/ruby_benchmark/stripe/prop_const_getter.rb", align 8
  %28 = call i8* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_<top (required)>.i7.i", i64 %"rubyId_<top (required)>.i6.i", i64 %"rubyStr_test/testdata/ruby_benchmark/stripe/prop_const_getter.rb.i8.i", i64 %realpath, i8* null, i32 1, i32 1, i32 5, i64* null, i32 0)
  store i8* %28, i8** @"stackFramePrecomputed_func_MyStruct.<static-init>", align 8
  %29 = call i64 @rb_fstring_new(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str_block for", i64 0, i64 0), i64 9) #10
  call void @rb_gc_register_mark_object(i64 %29) #10
  store i64 %29, i64* @"rubyStrFrozen_block for", align 8
  %"stackFrame_func_MyStruct.<static-init>.i.i" = load i8*, i8** @"stackFramePrecomputed_func_MyStruct.<static-init>", align 8
  %"rubyId_block for.i.i" = load i64, i64* @"rubyIdPrecomputed_block for", align 8
  %"rubyStr_test/testdata/ruby_benchmark/stripe/prop_const_getter.rb.i9.i" = load i64, i64* @"rubyStrFrozen_test/testdata/ruby_benchmark/stripe/prop_const_getter.rb", align 8
  %30 = call i8* @sorbet_allocateRubyStackFrame(i64 %29, i64 %"rubyId_block for.i.i", i64 %"rubyStr_test/testdata/ruby_benchmark/stripe/prop_const_getter.rb.i9.i", i64 %realpath, i8* %"stackFrame_func_MyStruct.<static-init>.i.i", i32 2, i32 1, i32 5, i64* null, i32 0)
  store i8* %30, i8** @"stackFramePrecomputed_func_MyStruct.<static-init>$block_1", align 8
  %"stackFrame_func_MyStruct.<static-init>.i10.i" = load i8*, i8** @"stackFramePrecomputed_func_MyStruct.<static-init>", align 8
  %"rubyId_block for.i11.i" = load i64, i64* @"rubyIdPrecomputed_block for", align 8
  %"rubyStr_block for.i12.i" = load i64, i64* @"rubyStrFrozen_block for", align 8
  %"rubyStr_test/testdata/ruby_benchmark/stripe/prop_const_getter.rb.i13.i" = load i64, i64* @"rubyStrFrozen_test/testdata/ruby_benchmark/stripe/prop_const_getter.rb", align 8
  %31 = call i8* @sorbet_allocateRubyStackFrame(i64 %"rubyStr_block for.i12.i", i64 %"rubyId_block for.i11.i", i64 %"rubyStr_test/testdata/ruby_benchmark/stripe/prop_const_getter.rb.i13.i", i64 %realpath, i8* %"stackFrame_func_MyStruct.<static-init>.i10.i", i32 2, i32 1, i32 5, i64* null, i32 0)
  store i8* %31, i8** @"stackFramePrecomputed_func_MyStruct.<static-init>$block_2", align 8
  %32 = load %struct.rb_vm_struct*, %struct.rb_vm_struct** @ruby_current_vm_ptr, align 8, !tbaa !8
  %33 = getelementptr inbounds %struct.rb_vm_struct, %struct.rb_vm_struct* %32, i64 0, i32 18
  %34 = load i64, i64* %33, align 8, !tbaa !10
  %35 = bitcast [2 x i64]* %callArgs.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %35)
  %"stackFrame_func_<root>.<static-init>$153.i" = load i8*, i8** @"stackFramePrecomputed_func_<root>.<static-init>$153", align 8
  %36 = bitcast i8* %"stackFrame_func_<root>.<static-init>$153.i" to %struct.rb_iseq_struct*
  %37 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !8
  %38 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %37, i64 0, i32 2
  %39 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %38, align 8, !tbaa !20
  %40 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %39, i64 0, i32 2
  %41 = bitcast %struct.rb_iseq_struct** %40 to i8**
  store i8* %"stackFrame_func_<root>.<static-init>$153.i", i8** %41, align 8, !tbaa !23
  %42 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %39, i64 0, i32 4
  %43 = load i64*, i64** %42, align 8, !tbaa !25
  %44 = load i64, i64* %43, align 8, !tbaa !4
  %45 = and i64 %44, -129
  store i64 %45, i64* %43, align 8, !tbaa !4
  call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %37, %struct.rb_control_frame_struct* nonnull %39, %struct.rb_iseq_struct* %36) #10
  %46 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %39, i64 0, i32 0
  %47 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %40, align 8, !tbaa !23
  %48 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %47, i64 0, i32 2
  %49 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %48, align 8, !tbaa !26
  %50 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %49, i64 0, i32 2
  %51 = load i64*, i64** %50, align 8, !tbaa !28
  %52 = getelementptr inbounds i64, i64* %51, i64 5
  store i64* %52, i64** %46, align 8, !dbg !37, !tbaa !8
  %53 = load i64, i64* @"guard_epoch_T::Struct", align 8, !dbg !42
  %54 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !42, !tbaa !43
  %needTakeSlowPath = icmp eq i64 %53, %54, !dbg !42
  br i1 %needTakeSlowPath, label %56, label %55, !dbg !42, !prof !44

55:                                               ; preds = %entry
  call void @"const_recompute_T::Struct"(), !dbg !42
  br label %56, !dbg !42

56:                                               ; preds = %entry, %55
  %57 = load i64, i64* @"guarded_const_T::Struct", align 8, !dbg !42
  %58 = load i64, i64* @"guard_epoch_T::Struct", align 8, !dbg !42
  %59 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !42, !tbaa !43
  %guardUpdated = icmp eq i64 %58, %59, !dbg !42
  call void @llvm.assume(i1 %guardUpdated), !dbg !42
  %60 = call i64 @rb_define_class(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str_MyStruct, i64 0, i64 0), i64 %57) #10, !dbg !42
  %61 = load i64, i64* @guard_epoch_MyStruct, align 8, !dbg !42
  %62 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !42, !tbaa !43
  %needTakeSlowPath3 = icmp eq i64 %61, %62, !dbg !42
  br i1 %needTakeSlowPath3, label %64, label %63, !dbg !42, !prof !44

63:                                               ; preds = %56
  call void @const_recompute_MyStruct(), !dbg !42
  br label %64, !dbg !42

64:                                               ; preds = %56, %63
  %65 = load i64, i64* @guarded_const_MyStruct, align 8, !dbg !42
  %66 = load i64, i64* @guard_epoch_MyStruct, align 8, !dbg !42
  %67 = load i64, i64* @ruby_vm_global_constant_state, align 8, !dbg !42, !tbaa !43
  %guardUpdated4 = icmp eq i64 %66, %67, !dbg !42
  call void @llvm.assume(i1 %guardUpdated4), !dbg !42
  %68 = bitcast [3 x i64]* %callArgs.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %68) #10
  %69 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !8
  %70 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %69, i64 0, i32 2
  %71 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %70, align 8, !tbaa !20
  %72 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %71, i64 0, i32 0
  %73 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %71, i64 0, i32 2
  %74 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %73, align 8, !tbaa !23
  %75 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %74, i64 0, i32 2
  %76 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %75, align 8, !tbaa !26
  %77 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %76, i64 0, i32 2
  %78 = load i64*, i64** %77, align 8, !tbaa !28
  %79 = getelementptr inbounds i64, i64* %78, i64 5
  store i64* %79, i64** %72, align 8, !tbaa !8
  %80 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !45, !tbaa !8
  %81 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %80, i64 0, i32 2, !dbg !45
  %82 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %81, align 8, !dbg !45, !tbaa !20
  %83 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %82, i64 0, i32 4, !dbg !45
  %84 = load i64*, i64** %83, align 8, !dbg !45, !tbaa !25
  %85 = load i64, i64* %84, align 8, !dbg !45, !tbaa !4
  %86 = and i64 %85, 8, !dbg !45
  %87 = icmp eq i64 %86, 0, !dbg !45
  br i1 %87, label %88, label %90, !dbg !45, !prof !48

88:                                               ; preds = %64
  %89 = getelementptr inbounds i64, i64* %84, i64 -3, !dbg !45
  store i64 %65, i64* %89, align 8, !dbg !45, !tbaa !4
  br label %sorbet_writeLocal.exit.i.i, !dbg !45

90:                                               ; preds = %64
  call void @sorbet_vm_env_write_slowpath(i64* nonnull %84, i32 -3, i64 %65) #10, !dbg !45
  br label %sorbet_writeLocal.exit.i.i, !dbg !45

sorbet_writeLocal.exit.i.i:                       ; preds = %90, %88
  %91 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !49, !tbaa !8
  %92 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %91, i64 0, i32 2, !dbg !49
  %93 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %92, align 8, !dbg !49, !tbaa !20
  %94 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %93, i64 0, i32 4, !dbg !49
  %95 = load i64*, i64** %94, align 8, !dbg !49, !tbaa !25
  %96 = load i64, i64* %95, align 8, !dbg !49, !tbaa !4
  %97 = and i64 %96, 8, !dbg !49
  %98 = icmp eq i64 %97, 0, !dbg !49
  br i1 %98, label %afterSend46.critedge.i.i, label %99, !dbg !49, !prof !48

99:                                               ; preds = %sorbet_writeLocal.exit.i.i
  %100 = getelementptr inbounds i64, i64* %95, i64 -3, !dbg !49
  %101 = load i64, i64* %100, align 8, !dbg !49, !tbaa !4
  call void @sorbet_vm_env_write_slowpath(i64* nonnull %95, i32 -3, i64 %101) #10, !dbg !49
  br label %afterSend46.critedge.i.i, !dbg !49

afterSend46.critedge.i.i:                         ; preds = %99, %sorbet_writeLocal.exit.i.i
  store i64* %79, i64** %72, align 8, !dbg !49, !tbaa !8
  %102 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !49, !tbaa !8
  %103 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %102, i64 0, i32 2, !dbg !49
  %104 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %103, align 8, !dbg !49, !tbaa !20
  %105 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %104, i64 0, i32 4, !dbg !49
  %106 = load i64*, i64** %105, align 8, !dbg !49, !tbaa !25
  %107 = load i64, i64* %106, align 8, !dbg !45, !tbaa !4
  %108 = and i64 %107, 8, !dbg !45
  %109 = icmp eq i64 %108, 0, !dbg !45
  br i1 %109, label %afterSend46.i.i, label %110, !dbg !45, !prof !48

110:                                              ; preds = %afterSend46.critedge.i.i
  %111 = getelementptr inbounds i64, i64* %106, i64 -3, !dbg !49
  %112 = load i64, i64* %111, align 8, !dbg !49, !tbaa !4
  call void @sorbet_vm_env_write_slowpath(i64* nonnull %106, i32 -3, i64 %112) #10, !dbg !45
  br label %afterSend46.i.i, !dbg !45

afterSend46.i.i:                                  ; preds = %110, %afterSend46.critedge.i.i
  %113 = getelementptr inbounds i64, i64* %78, i64 6, !dbg !45
  store i64* %113, i64** %72, align 8, !dbg !45, !tbaa !8
  %114 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !49, !tbaa !8
  %115 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %114, i64 0, i32 2, !dbg !49
  %116 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %115, align 8, !dbg !49, !tbaa !20
  %117 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %116, i64 0, i32 4, !dbg !49
  %118 = load i64*, i64** %117, align 8, !dbg !49, !tbaa !25
  %119 = load i64, i64* %118, align 8, !dbg !50, !tbaa !4
  %120 = and i64 %119, 8, !dbg !50
  %121 = icmp eq i64 %120, 0, !dbg !50
  br i1 %121, label %"func_MyStruct.<static-init>L62.exit.i", label %122, !dbg !50, !prof !48

122:                                              ; preds = %afterSend46.i.i
  %123 = getelementptr inbounds i64, i64* %118, i64 -3, !dbg !49
  %124 = load i64, i64* %123, align 8, !dbg !49, !tbaa !4
  call void @sorbet_vm_env_write_slowpath(i64* nonnull %118, i32 -3, i64 %124) #10, !dbg !50
  br label %"func_MyStruct.<static-init>L62.exit.i", !dbg !50

"func_MyStruct.<static-init>L62.exit.i":          ; preds = %122, %afterSend46.i.i
  store i64* %79, i64** %72, align 8, !dbg !50, !tbaa !8
  %rubyId_initialize.i.i1 = load i64, i64* @rubyIdPrecomputed_initialize, align 8, !dbg !45
  %rawSym.i.i = call i64 @rb_id2sym(i64 %rubyId_initialize.i.i1) #10, !dbg !45
  %rubyId_normal.i.i = load i64, i64* @rubyIdPrecomputed_normal, align 8, !dbg !45
  %rawSym56.i.i = call i64 @rb_id2sym(i64 %rubyId_normal.i.i) #10, !dbg !45
  call void @rb_define_method(i64 %65, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str_initialize, i64 0, i64 0), i64 (...)* bitcast (i64 (i32, i64*, i64)* @"func_MyStruct#initialize" to i64 (...)*), i32 -1) #10, !dbg !45
  store i64* %113, i64** %72, align 8, !dbg !45, !tbaa !8
  %rubyId_foo.i.i2 = load i64, i64* @rubyIdPrecomputed_foo, align 8, !dbg !51
  %rawSym62.i.i = call i64 @rb_id2sym(i64 %rubyId_foo.i.i2) #10, !dbg !51
  %rubyId_without_accessors.i.i = load i64, i64* @rubyIdPrecomputed_without_accessors, align 8, !dbg !50
  %rawSym63.i.i = call i64 @rb_id2sym(i64 %rubyId_without_accessors.i.i) #10, !dbg !50
  %callArgs0Addr66.i.i = getelementptr inbounds [3 x i64], [3 x i64]* %callArgs.i.i, i64 0, i64 0, !dbg !50
  store i64 %rawSym63.i.i, i64* %callArgs0Addr66.i.i, align 8, !dbg !50
  %callArgs1Addr68.i.i = getelementptr inbounds [3 x i64], [3 x i64]* %callArgs.i.i, i64 0, i64 1, !dbg !50
  store i64 20, i64* %callArgs1Addr68.i.i, align 8, !dbg !50
  %125 = call i64 @rb_hash_new_with_size(i64 1) #10, !dbg !50
  call void @rb_hash_bulk_insert(i64 2, i64* nonnull %callArgs0Addr66.i.i, i64 %125) #10, !dbg !50
  %callArgs2Addr69.i.i = getelementptr inbounds [3 x i64], [3 x i64]* %callArgs.i.i, i64 0, i64 2, !dbg !50
  store i64 %125, i64* %callArgs2Addr69.i.i, align 8, !dbg !50
  store i64 %rawSym62.i.i, i64* %callArgs0Addr66.i.i, align 8, !dbg !50
  %126 = load i64, i64* @rb_cInteger, align 8, !dbg !50
  store i64 %126, i64* %callArgs1Addr68.i.i, align 8, !dbg !50
  %127 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !50, !tbaa !8
  %128 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %127, i64 0, i32 2, !dbg !50
  %129 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %128, align 8, !dbg !50, !tbaa !20
  %130 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %129, i64 0, i32 4, !dbg !50
  %131 = load i64*, i64** %130, align 8, !dbg !50, !tbaa !25
  %132 = getelementptr inbounds i64, i64* %131, i64 -3, !dbg !50
  %133 = load i64, i64* %132, align 8, !dbg !50, !tbaa !4
  %rubyId_const.i.i = load i64, i64* @rubyIdPrecomputed_const, align 8, !dbg !50
  %callFunc_const.i.i = call i64 @sorbet_callFuncWithCache(i64 %133, i64 %rubyId_const.i.i, i32 3, i64* nonnull %callArgs0Addr66.i.i, i32 1, %struct.FunctionInlineCache* nonnull @ic_callFunc_const) #10, !dbg !50
  %rubyId_foo73.i.i = load i64, i64* @rubyIdPrecomputed_foo, align 8, !dbg !50
  %rawSym74.i.i = call i64 @rb_id2sym(i64 %rubyId_foo73.i.i) #10, !dbg !50
  %rubyId_attr_reader.i.i = load i64, i64* @rubyIdPrecomputed_attr_reader, align 8, !dbg !50
  %rawSym75.i.i = call i64 @rb_id2sym(i64 %rubyId_attr_reader.i.i) #10, !dbg !50
  %134 = call i64 @rb_intern(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_foo, i64 0, i64 0)) #10, !dbg !50
  %135 = call i64 @rb_id2str(i64 %134) #10, !dbg !50
  %136 = call i64 (i8*, ...) @rb_sprintf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 %135) #10, !dbg !50
  %137 = call i64 @rb_intern_str(i64 %136) #10, !dbg !50
  %138 = inttoptr i64 %137 to i8*, !dbg !50
  call void @rb_add_method(i64 %65, i64 %134, i32 3, i8* %138, i32 1) #10, !dbg !50
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %68) #10
  %139 = getelementptr inbounds i64, i64* %51, i64 9, !dbg !37
  store i64* %139, i64** %46, align 8, !dbg !37, !tbaa !8
  %rubyId_foo.i = load i64, i64* @rubyIdPrecomputed_foo, align 8, !dbg !52
  %rawSym.i = call i64 @rb_id2sym(i64 %rubyId_foo.i) #10, !dbg !52
  %callArgs0Addr.i = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs.i, i64 0, i64 0, !dbg !53
  store i64 %rawSym.i, i64* %callArgs0Addr.i, align 8, !dbg !53
  %callArgs1Addr.i = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs.i, i64 0, i64 1, !dbg !53
  store i64 861, i64* %callArgs1Addr.i, align 8, !dbg !53
  %140 = call i64 @rb_hash_new_with_size(i64 1) #10, !dbg !53
  call void @rb_hash_bulk_insert(i64 2, i64* nonnull %callArgs0Addr.i, i64 %140) #10, !dbg !53
  store i64 %140, i64* %callArgs0Addr.i, align 8, !dbg !53
  %rubyId_new.i = load i64, i64* @rubyIdPrecomputed_new, align 8, !dbg !53
  %callFunc_new.i = call i64 @sorbet_callFuncWithCache(i64 %65, i64 %rubyId_new.i, i32 1, i64* nonnull %callArgs0Addr.i, i32 1, %struct.FunctionInlineCache* nonnull @ic_callFunc_new) #10, !dbg !53
  %141 = getelementptr inbounds i64, i64* %51, i64 11, !dbg !53
  store i64* %141, i64** %46, align 8, !dbg !53, !tbaa !8
  %142 = getelementptr inbounds i64, i64* %51, i64 12
  %143 = getelementptr inbounds i64, i64* %51, i64 14
  %144 = getelementptr inbounds i64, i64* %51, i64 16, !dbg !37
  br label %BB2.i, !dbg !54

BB2.i:                                            ; preds = %BB2.i.backedge, %"func_MyStruct.<static-init>L62.exit.i"
  %i.sroa.0.0.i = phi i64 [ 1, %"func_MyStruct.<static-init>L62.exit.i" ], [ %i.sroa.0.0.i.be, %BB2.i.backedge ], !dbg !37
  store i64* %142, i64** %46, align 8, !tbaa !8
  %145 = and i64 %i.sroa.0.0.i, 1, !dbg !55
  %146 = icmp ne i64 %145, 0, !dbg !55
  store i64 20000001, i64* %callArgs0Addr.i, align 8, !dbg !55
  br i1 %146, label %"fastSymCallIntrinsic_Integer_<.i", label %"alternativeCallIntrinsic_Integer_<.i", !dbg !55, !prof !48

BB5.i:                                            ; preds = %afterSend56.i
  store i64* %143, i64** %46, align 8, !tbaa !8
  %rubyId_foo68.i = load i64, i64* @rubyIdPrecomputed_foo, align 8, !dbg !56
  %callFunc_foo.i = call i64 @sorbet_callFuncWithCache(i64 %callFunc_new.i, i64 %rubyId_foo68.i, i32 0, i64* null, i32 0, %struct.FunctionInlineCache* nonnull @ic_callFunc_foo) #10, !dbg !56
  store i64* %144, i64** %46, align 8, !dbg !56, !tbaa !8
  store i64 3, i64* %callArgs0Addr.i, align 8, !dbg !57
  br i1 %146, label %"fastSymCallIntrinsic_Integer_+.i", label %"alternativeCallIntrinsic_Integer_+.i", !dbg !57

afterSend56.i:                                    ; preds = %"fastSymCallIntrinsic_Integer_<.i", %"alternativeCallIntrinsic_Integer_<.i"
  %"symIntrinsicRawPhi_<.i" = phi i64 [ %"callFunc_<.i", %"alternativeCallIntrinsic_Integer_<.i" ], [ %150, %"fastSymCallIntrinsic_Integer_<.i" ], !dbg !55
  %147 = and i64 %"symIntrinsicRawPhi_<.i", -9, !dbg !55
  %148 = icmp eq i64 %147, 0, !dbg !55
  br i1 %148, label %"func_<root>.<static-init>$153.exit", label %BB5.i, !dbg !55

"alternativeCallIntrinsic_Integer_<.i":           ; preds = %BB2.i
  %"rubyId_<.i" = load i64, i64* @"rubyIdPrecomputed_<", align 8, !dbg !55
  %"callFunc_<.i" = call i64 @sorbet_callFuncWithCache(i64 %i.sroa.0.0.i, i64 %"rubyId_<.i", i32 1, i64* nonnull %callArgs0Addr.i, i32 0, %struct.FunctionInlineCache* nonnull @"ic_callFunc_<") #10, !dbg !55
  br label %afterSend56.i, !dbg !55

"fastSymCallIntrinsic_Integer_<.i":               ; preds = %BB2.i
  %149 = icmp slt i64 %i.sroa.0.0.i, 20000000, !dbg !55
  %150 = select i1 %149, i64 20, i64 0, !dbg !55
  br label %afterSend56.i, !dbg !55

"alternativeCallIntrinsic_Integer_+.i":           ; preds = %BB5.i
  %"rubyId_+.i" = load i64, i64* @"rubyIdPrecomputed_+", align 8, !dbg !57
  %"callFunc_+.i" = call i64 @sorbet_callFuncWithCache(i64 %i.sroa.0.0.i, i64 %"rubyId_+.i", i32 1, i64* nonnull %callArgs0Addr.i, i32 0, %struct.FunctionInlineCache* nonnull @"ic_callFunc_+") #10, !dbg !57
  br label %BB2.i.backedge, !dbg !57

"fastSymCallIntrinsic_Integer_+.i":               ; preds = %BB5.i
  %151 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %i.sroa.0.0.i, i64 2) #10, !dbg !57
  %152 = extractvalue { i64, i1 } %151, 1, !dbg !57
  %153 = extractvalue { i64, i1 } %151, 0, !dbg !57
  br i1 %152, label %154, label %BB2.i.backedge, !dbg !57

154:                                              ; preds = %"fastSymCallIntrinsic_Integer_+.i"
  %155 = ashr i64 %153, 1, !dbg !57
  %156 = xor i64 %155, -9223372036854775808, !dbg !57
  %157 = call i64 @rb_int2big(i64 %156) #10, !dbg !57
  br label %BB2.i.backedge, !dbg !57

BB2.i.backedge:                                   ; preds = %154, %"fastSymCallIntrinsic_Integer_+.i", %"alternativeCallIntrinsic_Integer_+.i"
  %i.sroa.0.0.i.be = phi i64 [ %"callFunc_+.i", %"alternativeCallIntrinsic_Integer_+.i" ], [ %157, %154 ], [ %153, %"fastSymCallIntrinsic_Integer_+.i" ]
  br label %BB2.i

"func_<root>.<static-init>$153.exit":             ; preds = %afterSend56.i
  %158 = getelementptr inbounds i64, i64* %51, i64 19
  store i64* %158, i64** %46, align 8, !tbaa !8
  store i64 %i.sroa.0.0.i, i64* %callArgs0Addr.i, align 8, !dbg !58
  %rubyId_puts.i = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !58
  %callFunc_puts.i = call i64 @sorbet_callFuncWithCache(i64 %34, i64 %rubyId_puts.i, i32 1, i64* nonnull %callArgs0Addr.i, i32 0, %struct.FunctionInlineCache* nonnull @ic_callFunc_puts) #10, !dbg !58
  %159 = getelementptr inbounds i64, i64* %51, i64 20, !dbg !58
  store i64* %159, i64** %46, align 8, !dbg !58, !tbaa !8
  %rubyId_foo88.i = load i64, i64* @rubyIdPrecomputed_foo, align 8, !dbg !59
  %callFunc_foo89.i = call i64 @sorbet_callFuncWithCache(i64 %callFunc_new.i, i64 %rubyId_foo88.i, i32 0, i64* null, i32 0, %struct.FunctionInlineCache* nonnull @ic_callFunc_foo.1) #10, !dbg !59
  store i64 %callFunc_foo89.i, i64* %callArgs0Addr.i, align 8, !dbg !60
  %rubyId_puts95.i = load i64, i64* @rubyIdPrecomputed_puts, align 8, !dbg !60
  %callFunc_puts96.i = call i64 @sorbet_callFuncWithCache(i64 %34, i64 %rubyId_puts95.i, i32 1, i64* nonnull %callArgs0Addr.i, i32 0, %struct.FunctionInlineCache* nonnull @ic_callFunc_puts.2) #10, !dbg !60
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %35)
  ret void
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_MyStruct#initialize"(i32 %argc, i64* nocapture readonly %argArray, i64 %selfRaw) #7 !dbg !61 {
functionEntryInitializers:
  %callArgs = alloca [2 x i64], align 8
  %"stackFrame_func_MyStruct#initialize" = load i8*, i8** @"stackFramePrecomputed_func_MyStruct#initialize", align 8
  %0 = bitcast i8* %"stackFrame_func_MyStruct#initialize" to %struct.rb_iseq_struct*
  %1 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !8
  %2 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %1, i64 0, i32 2
  %3 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %2, align 8, !tbaa !20
  %4 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %3, i64 0, i32 2
  %5 = bitcast %struct.rb_iseq_struct** %4 to i8**
  store i8* %"stackFrame_func_MyStruct#initialize", i8** %5, align 8, !tbaa !23
  %6 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %3, i64 0, i32 4
  %7 = load i64*, i64** %6, align 8, !tbaa !25
  %8 = load i64, i64* %7, align 8, !tbaa !4
  %9 = and i64 %8, -129
  store i64 %9, i64* %7, align 8, !tbaa !4
  tail call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %1, %struct.rb_control_frame_struct* nonnull %3, %struct.rb_iseq_struct* %0) #10
  %10 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %3, i64 0, i32 0
  %11 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %4, align 8, !tbaa !23
  %12 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %11, i64 0, i32 2
  %13 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %12, align 8, !tbaa !26
  %14 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %13, i64 0, i32 2
  %15 = load i64*, i64** %14, align 8, !tbaa !28
  %16 = getelementptr inbounds i64, i64* %15, i64 1
  store i64* %16, i64** %10, align 8, !tbaa !8
  %hashAttemptReadGuard = icmp eq i32 %argc, 0, !dbg !62
  br i1 %hashAttemptReadGuard, label %codeRepl, label %readKWHashArgCountSuccess, !dbg !62

codeRepl:                                         ; preds = %functionEntryInitializers
  tail call fastcc void @"func_MyStruct#initialize.cold.1"() #13, !dbg !62
  br label %sorbet_assertNoExtraKWArg.exit.thread

readKWHashArgCountSuccess:                        ; preds = %functionEntryInitializers
  %argsWithoutHashCount = add i32 %argc, -1, !dbg !62
  %17 = sext i32 %argsWithoutHashCount to i64, !dbg !62
  %18 = getelementptr i64, i64* %argArray, i64 %17, !dbg !62
  %KWArgHash = load i64, i64* %18, align 8, !dbg !62
  %19 = and i64 %KWArgHash, 7, !dbg !62
  %20 = icmp ne i64 %19, 0, !dbg !62
  %21 = and i64 %KWArgHash, -9, !dbg !62
  %22 = icmp eq i64 %21, 0, !dbg !62
  %23 = or i1 %20, %22, !dbg !62
  br i1 %23, label %argCountFailBlock, label %sorbet_isa_Hash.exit, !dbg !62

sorbet_isa_Hash.exit:                             ; preds = %readKWHashArgCountSuccess
  %24 = inttoptr i64 %KWArgHash to %struct.RBasic*, !dbg !62
  %25 = getelementptr inbounds %struct.RBasic, %struct.RBasic* %24, i64 0, i32 0, !dbg !62
  %26 = load i64, i64* %25, align 8, !dbg !62, !tbaa !63
  %27 = and i64 %26, 31, !dbg !62
  %28 = icmp eq i64 %27, 8, !dbg !62
  br i1 %28, label %afterKWHash, label %argCountFailBlock, !dbg !62

afterKWHash:                                      ; preds = %sorbet_isa_Hash.exit
  %tooManyArgs = icmp eq i32 %argsWithoutHashCount, 0, !dbg !62
  br i1 %tooManyArgs, label %fillRequiredArgs, label %argCountFailBlock, !dbg !62, !prof !48

argCountFailBlock:                                ; preds = %sorbet_isa_Hash.exit, %readKWHashArgCountSuccess, %afterKWHash
  %argcPhi47 = phi i32 [ %argsWithoutHashCount, %afterKWHash ], [ %argc, %readKWHashArgCountSuccess ], [ %argc, %sorbet_isa_Hash.exit ]
  tail call void @sorbet_raiseArity(i32 %argcPhi47, i32 0, i32 0) #10, !dbg !62
  unreachable, !dbg !62

fillRequiredArgs:                                 ; preds = %afterKWHash
  %rubyId_foo = load i64, i64* @rubyIdPrecomputed_foo, align 8, !dbg !62
  %rawSym = tail call i64 @rb_id2sym(i64 %rubyId_foo) #10, !dbg !62
  %29 = icmp eq i64 %KWArgHash, 52, !dbg !62
  br i1 %29, label %sorbet_assertNoExtraKWArg.exit.thread, label %sorbet_getKWArg.exit, !dbg !62

sorbet_assertNoExtraKWArg.exit.thread:            ; preds = %codeRepl, %fillRequiredArgs
  %30 = getelementptr inbounds i64, i64* %15, i64 2, !dbg !65
  store i64* %30, i64** %10, align 8, !dbg !65, !tbaa !8
  br label %codeRepl59, !dbg !66

sorbet_getKWArg.exit:                             ; preds = %fillRequiredArgs
  %31 = tail call i64 @rb_hash_delete_entry(i64 %KWArgHash, i64 %rawSym) #10, !dbg !62
  %32 = icmp eq i64 %31, 52, !dbg !62
  %spec.select = select i1 %32, i64 8, i64 %31, !dbg !62
  %33 = load i64, i64* %25, align 8, !dbg !62, !tbaa !63
  %34 = trunc i64 %33 to i16, !dbg !62
  %35 = icmp slt i16 %34, 0, !dbg !62
  br i1 %35, label %39, label %36, !dbg !62

36:                                               ; preds = %sorbet_getKWArg.exit
  %37 = lshr i64 %33, 16, !dbg !62
  %38 = and i64 %37, 15, !dbg !62
  br label %45, !dbg !62

39:                                               ; preds = %sorbet_getKWArg.exit
  %40 = inttoptr i64 %KWArgHash to %struct.RHash*, !dbg !62
  %41 = getelementptr inbounds %struct.RHash, %struct.RHash* %40, i64 0, i32 1, i32 0, !dbg !62
  %42 = load %struct.st_table*, %struct.st_table** %41, align 8, !dbg !62, !tbaa !67
  %43 = getelementptr inbounds %struct.st_table, %struct.st_table* %42, i64 0, i32 5, !dbg !62
  %44 = load i64, i64* %43, align 8, !dbg !62, !tbaa !68
  br label %45, !dbg !62

45:                                               ; preds = %39, %36
  %46 = phi i64 [ %38, %36 ], [ %44, %39 ], !dbg !62
  %47 = icmp eq i64 %46, 0, !dbg !62
  br i1 %47, label %sorbet_assertNoExtraKWArg.exit, label %48, !dbg !62

48:                                               ; preds = %45
  tail call void @sorbet_raiseExtraKeywords(i64 %KWArgHash) #12, !dbg !62
  unreachable, !dbg !62

sorbet_assertNoExtraKWArg.exit:                   ; preds = %45
  %49 = getelementptr inbounds i64, i64* %15, i64 2, !dbg !65
  store i64* %49, i64** %10, align 8, !dbg !65, !tbaa !8
  %50 = and i64 %spec.select, 1, !dbg !66
  %51 = icmp eq i64 %50, 0, !dbg !66
  br i1 %51, label %codeRepl59, label %typeTestSuccess17, !dbg !66, !prof !70

codeRepl59:                                       ; preds = %sorbet_assertNoExtraKWArg.exit.thread, %sorbet_assertNoExtraKWArg.exit
  %52 = phi i64 [ 8, %sorbet_assertNoExtraKWArg.exit.thread ], [ %spec.select, %sorbet_assertNoExtraKWArg.exit ]
  tail call fastcc void @"func_MyStruct#initialize.cold.2"(i64 %52) #13, !dbg !66
  unreachable

typeTestSuccess17:                                ; preds = %sorbet_assertNoExtraKWArg.exit
  %"rubyId_@foo" = load i64, i64* @"rubyIdPrecomputed_@foo", align 8, !dbg !71
  %53 = tail call i64 @rb_ivar_set(i64 %selfRaw, i64 %"rubyId_@foo", i64 %spec.select) #10, !dbg !71
  store i64* %16, i64** %10, align 8, !dbg !71, !tbaa !8
  %rubyId_foo20 = load i64, i64* @rubyIdPrecomputed_foo, align 8, !dbg !62
  %rawSym21 = tail call i64 @rb_id2sym(i64 %rubyId_foo20) #10, !dbg !62
  %callArgs0Addr = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs, i64 0, i64 0, !dbg !62
  store i64 %rawSym21, i64* %callArgs0Addr, align 8, !dbg !62
  %callArgs1Addr = getelementptr inbounds [2 x i64], [2 x i64]* %callArgs, i64 0, i64 1, !dbg !62
  store i64 %spec.select, i64* %callArgs1Addr, align 8, !dbg !62
  %54 = tail call i64 @rb_hash_new_with_size(i64 1) #10, !dbg !62
  call void @rb_hash_bulk_insert(i64 2, i64* nonnull %callArgs0Addr, i64 %54) #10, !dbg !62
  store i64 %54, i64* %callArgs0Addr, align 8, !dbg !62
  %55 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !dbg !62, !tbaa !8
  %56 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %55, i64 0, i32 2, !dbg !62
  %57 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %56, align 8, !dbg !62, !tbaa !20, !noalias !72
  %58 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %57, i64 0, i32 3, !dbg !62
  %59 = load i64, i64* %58, align 8, !dbg !62, !tbaa !75, !noalias !72
  %60 = call %struct.rb_callable_method_entry_struct* @rb_vm_frame_method_entry(%struct.rb_control_frame_struct* %57) #10, !dbg !62, !noalias !72
  %61 = getelementptr inbounds %struct.rb_callable_method_entry_struct, %struct.rb_callable_method_entry_struct* %60, i64 0, i32 1, !dbg !62
  %62 = bitcast i64* %61 to %struct.RClass**, !dbg !62
  %63 = load %struct.RClass*, %struct.RClass** %62, align 8, !dbg !62, !tbaa !76, !noalias !72
  %64 = getelementptr inbounds %struct.RClass, %struct.RClass* %63, i64 0, i32 2, !dbg !62
  %65 = load %struct.rb_classext_struct*, %struct.rb_classext_struct** %64, align 8, !dbg !62, !tbaa !78, !noalias !72
  %66 = getelementptr inbounds %struct.rb_classext_struct, %struct.rb_classext_struct* %65, i64 0, i32 8, !dbg !62
  %67 = bitcast i64* %66 to %struct.RClass**, !dbg !62
  %68 = load %struct.RClass*, %struct.RClass** %67, align 8, !dbg !62, !tbaa !80, !noalias !72
  %69 = getelementptr inbounds %struct.RClass, %struct.RClass* %68, i64 0, i32 1, !dbg !62
  %70 = load i64, i64* %69, align 8, !dbg !62, !tbaa !82
  %71 = getelementptr inbounds %struct.rb_callable_method_entry_struct, %struct.rb_callable_method_entry_struct* %60, i64 0, i32 2, !dbg !62
  %72 = load %struct.rb_method_definition_struct*, %struct.rb_method_definition_struct** %71, align 8, !dbg !62, !tbaa !83, !noalias !72
  %73 = getelementptr inbounds %struct.rb_method_definition_struct, %struct.rb_method_definition_struct* %72, i64 0, i32 2, !dbg !62
  %74 = load i64, i64* %73, align 8, !dbg !62, !tbaa !84, !noalias !72
  %75 = call %struct.rb_callable_method_entry_struct* @rb_callable_method_entry(i64 %70, i64 %74) #10, !dbg !62, !noalias !72
  %76 = icmp eq %struct.rb_callable_method_entry_struct* %75, null, !dbg !62
  br i1 %76, label %77, label %sorbet_callSuper.exit, !dbg !62

77:                                               ; preds = %typeTestSuccess17
  %78 = load i64, i64* @rb_eRuntimeError, align 8, !dbg !62, !tbaa !4
  call void (i64, i8*, ...) @rb_raise(i64 %78, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #12, !dbg !62
  unreachable, !dbg !62

sorbet_callSuper.exit:                            ; preds = %typeTestSuccess17
  %79 = call i64 @rb_vm_call_kw(%struct.rb_execution_context_struct* %55, i64 %59, i64 %74, i32 1, i64* nonnull %callArgs0Addr, %struct.rb_callable_method_entry_struct* nonnull %75, i32 1) #10, !dbg !62
  %80 = load i64, i64* @"guard_epoch_T::Private::Types::Void::VOID", align 8
  %81 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !43
  %needTakeSlowPath = icmp eq i64 %80, %81
  br i1 %needTakeSlowPath, label %83, label %82, !prof !44

82:                                               ; preds = %sorbet_callSuper.exit
  call void @"const_recompute_T::Private::Types::Void::VOID"() #10
  br label %83

83:                                               ; preds = %sorbet_callSuper.exit, %82
  %84 = load i64, i64* @"guarded_const_T::Private::Types::Void::VOID", align 8
  %85 = load i64, i64* @"guard_epoch_T::Private::Types::Void::VOID", align 8
  %86 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !43
  %guardUpdated = icmp eq i64 %85, %86
  call void @llvm.assume(i1 %guardUpdated)
  ret i64 %84
}

; Function Attrs: nounwind sspreq uwtable
define i64 @"func_MyStruct#foo"(i32 %argc, i64* nocapture readnone %argArray, i64 %selfRaw) local_unnamed_addr #7 !dbg !86 {
functionEntryInitializers:
  %"stackFrame_func_MyStruct#foo" = load i8*, i8** @"stackFramePrecomputed_func_MyStruct#foo", align 8
  %0 = bitcast i8* %"stackFrame_func_MyStruct#foo" to %struct.rb_iseq_struct*
  %1 = load %struct.rb_execution_context_struct*, %struct.rb_execution_context_struct** @ruby_current_execution_context_ptr, align 8, !tbaa !8
  %2 = getelementptr inbounds %struct.rb_execution_context_struct, %struct.rb_execution_context_struct* %1, i64 0, i32 2
  %3 = load %struct.rb_control_frame_struct*, %struct.rb_control_frame_struct** %2, align 8, !tbaa !20
  %4 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %3, i64 0, i32 2
  %5 = bitcast %struct.rb_iseq_struct** %4 to i8**
  store i8* %"stackFrame_func_MyStruct#foo", i8** %5, align 8, !tbaa !23
  %6 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %3, i64 0, i32 4
  %7 = load i64*, i64** %6, align 8, !tbaa !25
  %8 = load i64, i64* %7, align 8, !tbaa !4
  %9 = and i64 %8, -129
  store i64 %9, i64* %7, align 8, !tbaa !4
  tail call void @sorbet_setMethodStackFrame(%struct.rb_execution_context_struct* %1, %struct.rb_control_frame_struct* nonnull %3, %struct.rb_iseq_struct* %0) #10
  %10 = getelementptr inbounds %struct.rb_control_frame_struct, %struct.rb_control_frame_struct* %3, i64 0, i32 0
  %11 = load %struct.rb_iseq_struct*, %struct.rb_iseq_struct** %4, align 8, !tbaa !23
  %12 = getelementptr inbounds %struct.rb_iseq_struct, %struct.rb_iseq_struct* %11, i64 0, i32 2
  %13 = load %struct.rb_iseq_constant_body*, %struct.rb_iseq_constant_body** %12, align 8, !tbaa !26
  %14 = getelementptr inbounds %struct.rb_iseq_constant_body, %struct.rb_iseq_constant_body* %13, i64 0, i32 2
  %15 = load i64*, i64** %14, align 8, !tbaa !28
  %16 = getelementptr inbounds i64, i64* %15, i64 1
  store i64* %16, i64** %10, align 8, !tbaa !8
  %tooManyArgs = icmp eq i32 %argc, 0, !dbg !87
  br i1 %tooManyArgs, label %fillRequiredArgs, label %argCountFailBlock, !dbg !87, !prof !48

argCountFailBlock:                                ; preds = %functionEntryInitializers
  tail call void @sorbet_raiseArity(i32 %argc, i32 0, i32 0) #10, !dbg !87
  unreachable, !dbg !87

fillRequiredArgs:                                 ; preds = %functionEntryInitializers
  %"rubyId_@foo" = load i64, i64* @"rubyIdPrecomputed_@foo", align 8, !dbg !88
  %17 = tail call i64 @rb_ivar_get(i64 %selfRaw, i64 %"rubyId_@foo") #10, !dbg !88
  %18 = and i64 %17, 1
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %codeRepl, label %typeTestSuccess, !prof !70

typeTestSuccess:                                  ; preds = %fillRequiredArgs
  ret i64 %17

codeRepl:                                         ; preds = %fillRequiredArgs
  tail call fastcc void @"func_MyStruct#foo.cold.1"(i64 %17) #13
  unreachable
}

; Function Attrs: cold minsize nounwind sspreq uwtable
define internal fastcc void @"func_MyStruct#initialize.cold.1"() unnamed_addr #8 {
newFuncRoot:
  %rubyId_foo49 = load i64, i64* @rubyIdPrecomputed_foo, align 8, !dbg !62
  %rawSym50 = tail call i64 @rb_id2sym(i64 %rubyId_foo49) #10, !dbg !62
  ret void
}

; Function Attrs: cold minsize noreturn nounwind sspreq uwtable
define internal fastcc void @"func_MyStruct#initialize.cold.2"(i64) unnamed_addr #9 {
newFuncRoot:
  tail call void @sorbet_cast_failure(i64 %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str_sig, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_Integer, i64 0, i64 0)) #10, !dbg !66
  unreachable, !dbg !66
}

; Function Attrs: cold minsize noreturn nounwind sspreq uwtable
define internal fastcc void @"func_MyStruct#foo.cold.1"(i64) unnamed_addr #9 {
newFuncRoot:
  tail call void @sorbet_cast_failure(i64 %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"str_Return value", i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str_Integer, i64 0, i64 0)) #10
  unreachable
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #10

; Function Attrs: ssp
define linkonce void @"const_recompute_T::Struct"() local_unnamed_addr #11 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"str_T::Struct", i64 0, i64 0), i64 9)
  store i64 %1, i64* @"guarded_const_T::Struct", align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !43
  store i64 %2, i64* @"guard_epoch_T::Struct", align 8
  ret void
}

; Function Attrs: ssp
define linkonce void @const_recompute_MyStruct() local_unnamed_addr #11 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str_MyStruct, i64 0, i64 0), i64 8)
  store i64 %1, i64* @guarded_const_MyStruct, align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !43
  store i64 %2, i64* @guard_epoch_MyStruct, align 8
  ret void
}

; Function Attrs: ssp
define linkonce void @"const_recompute_T::Private::Types::Void::VOID"() local_unnamed_addr #11 {
  %1 = tail call i64 @sorbet_getConstant(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @"str_T::Private::Types::Void::VOID", i64 0, i64 0), i64 29)
  store i64 %1, i64* @"guarded_const_T::Private::Types::Void::VOID", align 8
  %2 = load i64, i64* @ruby_vm_global_constant_state, align 8, !tbaa !43
  store i64 %2, i64* @"guard_epoch_T::Private::Types::Void::VOID", align 8
  ret void
}

attributes #0 = { cold noreturn }
attributes #1 = { noreturn }
attributes #2 = { "addedToSilenceEmptyAttrsError" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind ssp uwtable }
attributes #6 = { sspreq }
attributes #7 = { nounwind sspreq uwtable }
attributes #8 = { cold minsize nounwind sspreq uwtable }
attributes #9 = { cold minsize noreturn nounwind sspreq uwtable }
attributes #10 = { nounwind }
attributes #11 = { ssp }
attributes #12 = { noreturn nounwind }
attributes #13 = { noinline }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "Sorbet LLVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "test/testdata/ruby_benchmark/stripe/prop_const_getter.rb", directory: ".")
!3 = !{}
!4 = !{!5, !5, i64 0}
!5 = !{!"long", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"any pointer", !6, i64 0}
!10 = !{!11, !5, i64 400}
!11 = !{!"rb_vm_struct", !5, i64 0, !12, i64 8, !9, i64 192, !9, i64 200, !9, i64 208, !16, i64 216, !6, i64 224, !13, i64 264, !13, i64 280, !13, i64 296, !13, i64 312, !5, i64 328, !15, i64 336, !15, i64 340, !15, i64 344, !15, i64 344, !15, i64 344, !15, i64 344, !15, i64 348, !5, i64 352, !6, i64 360, !5, i64 400, !5, i64 408, !5, i64 416, !5, i64 424, !5, i64 432, !5, i64 440, !5, i64 448, !9, i64 456, !9, i64 464, !17, i64 472, !18, i64 992, !9, i64 1016, !9, i64 1024, !15, i64 1032, !15, i64 1036, !13, i64 1040, !6, i64 1056, !5, i64 1096, !5, i64 1104, !5, i64 1112, !5, i64 1120, !5, i64 1128, !15, i64 1136, !9, i64 1144, !9, i64 1152, !9, i64 1160, !9, i64 1168, !9, i64 1176, !9, i64 1184, !15, i64 1192, !19, i64 1200, !6, i64 1232}
!12 = !{!"rb_global_vm_lock_struct", !9, i64 0, !6, i64 8, !13, i64 48, !9, i64 64, !15, i64 72, !6, i64 80, !6, i64 128, !15, i64 176, !15, i64 180}
!13 = !{!"list_head", !14, i64 0}
!14 = !{!"list_node", !9, i64 0, !9, i64 8}
!15 = !{!"int", !6, i64 0}
!16 = !{!"long long", !6, i64 0}
!17 = !{!"", !6, i64 0}
!18 = !{!"rb_hook_list_struct", !9, i64 0, !15, i64 8, !15, i64 12, !15, i64 16}
!19 = !{!"", !5, i64 0, !5, i64 8, !5, i64 16, !5, i64 24}
!20 = !{!21, !9, i64 16}
!21 = !{!"rb_execution_context_struct", !9, i64 0, !5, i64 8, !9, i64 16, !9, i64 24, !9, i64 32, !15, i64 40, !15, i64 44, !9, i64 48, !9, i64 56, !9, i64 64, !5, i64 72, !5, i64 80, !9, i64 88, !5, i64 96, !9, i64 104, !9, i64 112, !5, i64 120, !5, i64 128, !6, i64 136, !6, i64 137, !5, i64 144, !22, i64 152}
!22 = !{!"", !9, i64 0, !9, i64 8, !5, i64 16, !6, i64 24}
!23 = !{!24, !9, i64 16}
!24 = !{!"rb_control_frame_struct", !9, i64 0, !9, i64 8, !9, i64 16, !5, i64 24, !9, i64 32, !9, i64 40, !9, i64 48}
!25 = !{!24, !9, i64 32}
!26 = !{!27, !9, i64 16}
!27 = !{!"rb_iseq_struct", !5, i64 0, !5, i64 8, !9, i64 16, !6, i64 24}
!28 = !{!29, !9, i64 8}
!29 = !{!"rb_iseq_constant_body", !6, i64 0, !15, i64 4, !9, i64 8, !30, i64 16, !32, i64 64, !35, i64 120, !9, i64 152, !9, i64 160, !9, i64 168, !9, i64 176, !9, i64 184, !9, i64 192, !36, i64 200, !15, i64 232, !15, i64 236, !15, i64 240, !15, i64 244, !15, i64 248, !6, i64 252, !9, i64 256, !5, i64 264, !9, i64 272, !5, i64 280}
!30 = !{!"", !31, i64 0, !15, i64 4, !15, i64 8, !15, i64 12, !15, i64 16, !15, i64 20, !15, i64 24, !15, i64 28, !9, i64 32, !9, i64 40}
!31 = !{!"", !15, i64 0, !15, i64 0, !15, i64 0, !15, i64 0, !15, i64 0, !15, i64 0, !15, i64 0, !15, i64 0, !15, i64 1, !15, i64 1}
!32 = !{!"rb_iseq_location_struct", !5, i64 0, !5, i64 8, !5, i64 16, !5, i64 24, !15, i64 32, !33, i64 36}
!33 = !{!"rb_code_location_struct", !34, i64 0, !34, i64 8}
!34 = !{!"rb_code_position_struct", !15, i64 0, !15, i64 4}
!35 = !{!"iseq_insn_info", !9, i64 0, !9, i64 8, !15, i64 16, !9, i64 24}
!36 = !{!"", !5, i64 0, !5, i64 8, !5, i64 16, !9, i64 24}
!37 = !DILocation(line: 0, scope: !38)
!38 = distinct !DISubprogram(name: "<root>.<static-init>", linkageName: "func_<root>.<static-init>$153", scope: null, file: !2, line: 5, type: !39, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!39 = !DISubroutineType(types: !40)
!40 = !{!41}
!41 = !DIBasicType(name: "VALUE", size: 64, encoding: DW_ATE_signed)
!42 = !DILocation(line: 5, column: 1, scope: !38)
!43 = !{!16, !16, i64 0}
!44 = !{!"branch_weights", i32 10000, i32 1}
!45 = !DILocation(line: 5, column: 1, scope: !46, inlinedAt: !47)
!46 = distinct !DISubprogram(name: "MyStruct.<static-init>", linkageName: "func_MyStruct.<static-init>L62", scope: null, file: !2, line: 5, type: !39, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!47 = distinct !DILocation(line: 5, column: 1, scope: !38)
!48 = !{!"branch_weights", i32 2000, i32 1}
!49 = !DILocation(line: 0, scope: !46, inlinedAt: !47)
!50 = !DILocation(line: 6, column: 3, scope: !46, inlinedAt: !47)
!51 = !DILocation(line: 6, column: 9, scope: !46, inlinedAt: !47)
!52 = !DILocation(line: 9, column: 26, scope: !38)
!53 = !DILocation(line: 9, column: 13, scope: !38)
!54 = !DILocation(line: 11, column: 5, scope: !38)
!55 = !DILocation(line: 12, column: 7, scope: !38)
!56 = !DILocation(line: 14, column: 3, scope: !38)
!57 = !DILocation(line: 16, column: 3, scope: !38)
!58 = !DILocation(line: 19, column: 1, scope: !38)
!59 = !DILocation(line: 20, column: 6, scope: !38)
!60 = !DILocation(line: 20, column: 1, scope: !38)
!61 = distinct !DISubprogram(name: "MyStruct#initialize", linkageName: "func_MyStruct#initialize", scope: null, file: !2, line: 5, type: !39, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!62 = !DILocation(line: 5, column: 1, scope: !61)
!63 = !{!64, !5, i64 0}
!64 = !{!"RBasic", !5, i64 0, !5, i64 8}
!65 = !DILocation(line: 0, scope: !61)
!66 = !DILocation(line: 6, column: 3, scope: !61)
!67 = !{!6, !6, i64 0}
!68 = !{!69, !5, i64 16}
!69 = !{!"st_table", !6, i64 0, !6, i64 1, !6, i64 2, !15, i64 4, !9, i64 8, !5, i64 16, !9, i64 24, !5, i64 32, !5, i64 40, !9, i64 48}
!70 = !{!"branch_weights", i32 1, i32 2000}
!71 = !DILocation(line: 6, column: 10, scope: !61)
!72 = !{!73}
!73 = distinct !{!73, !74, !"sorbet_callSuper: argument 0"}
!74 = distinct !{!74, !"sorbet_callSuper"}
!75 = !{!24, !5, i64 24}
!76 = !{!77, !5, i64 8}
!77 = !{!"rb_callable_method_entry_struct", !5, i64 0, !5, i64 8, !9, i64 16, !5, i64 24, !5, i64 32}
!78 = !{!79, !9, i64 24}
!79 = !{!"RClass", !64, i64 0, !5, i64 16, !9, i64 24, !16, i64 32}
!80 = !{!81, !5, i64 64}
!81 = !{!"rb_classext_struct", !9, i64 0, !9, i64 8, !9, i64 16, !9, i64 24, !9, i64 32, !9, i64 40, !9, i64 48, !9, i64 56, !5, i64 64, !5, i64 72, !9, i64 80, !5, i64 88}
!82 = !{!79, !5, i64 16}
!83 = !{!77, !9, i64 16}
!84 = !{!85, !5, i64 32}
!85 = !{!"rb_method_definition_struct", !6, i64 0, !15, i64 0, !15, i64 4, !6, i64 8, !5, i64 32, !5, i64 40}
!86 = distinct !DISubprogram(name: "MyStruct#foo", linkageName: "func_MyStruct#foo", scope: null, file: !2, line: 6, type: !39, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!87 = !DILocation(line: 6, column: 3, scope: !86)
!88 = !DILocation(line: 6, column: 10, scope: !86)
